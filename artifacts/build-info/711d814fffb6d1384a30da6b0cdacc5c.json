{"id":"711d814fffb6d1384a30da6b0cdacc5c","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16+commit.07a7930e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/BaseUpgradeablePausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"./Constants.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nerror BaseUpgradeablePausable__ZeroAddressError();\n\ncontract BaseUpgradeablePausable is \n    Initializable, \n    PausableUpgradeable, \n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable \n{\n\n    modifier onlyAdmin() {\n        require(isAdmin(), \"Must have admin role to perform this action.\");\n        _;\n    }\n\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\n        if(owner == address(0)) {\n            revert BaseUpgradeablePausable__ZeroAddressError();\n        }\n        __Pausable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        _grantRole(Constants.getAdminRole(), owner);\n        _grantRole(Constants.getPauserRole(), owner);\n\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\n    }\n\n    function isAdmin() public view returns (bool) {\n        return hasRole(Constants.getAdminRole(), _msgSender());\n    }\n\n  \n}"},"contracts/Constants.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\nlibrary Constants {\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    function getAdminRole() internal pure returns (bytes32) {\n        return ADMIN_ROLE;\n    }\n\n    function getPauserRole() internal pure returns (bytes32) {\n        return PAUSER_ROLE;\n    }\n}"},"contracts/core/buySell/BuyGENZ.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// @title Buy GENZ Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n/*\n\n10M GENZ tokens will be minted in supply, fixed capped.\nInitial round tokens will be raised at $10M valuation for a sale of /\n/ 200k token to raise 200k.\nToken sale will be made live on multiple EVM chains including Ethereum, Polygon, Avalanche,\nArbitrum and Optimism.\nToken sale for now will not be made on BNB chain.\n40k tokens will be offered for sale on each of the EVM chain to raise 40k on each of the chain.\n\nGENZ Token Utilities:\n    1. Similar to traditional markets, earn dividend just by holding GENZ token every second.\n    2. Similar to traditional markets, there is no need to stake GENZ tokens to ripe the dividend rewards.\n    3. It will derive its value from the project's operation and profit generation.\n    4. It will be used to reward the bug bounty hunters.\n    5. It will also be awarded during the claim governance, so as users participating in the /\n       / claim settlement process will earn free GENZ tokens as participation rewards.\n    6. At the same time, GSZT tokens will be awarded to participants to close insured user's  /\n       / pay-as-you-go insurance streams after the insurance period gets over.\n\n100M GENZ token supply will be as:\n    - 20M on each of the following chain: Ethereum, Polygon, Avalanche, Arbitrum and Optimism.\n    - In the later stages, when we'll integrate more chains, then GENZ tokens will be burned /\n      accordingly to ensure capped 100M GENZ token supply. \n\n*/\n\n// Importing interfaces\nimport \"./../../interfaces/IBuyGENZ.sol\";\nimport \"./../../interfaces/IERC20Extended.sol\";\nimport \"./../../interfaces/IGlobalPauseOperation.sol\";\n\n/// Importing required libraries\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n// Importing contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\ncontract BuyGENZ is IBuyGENZ, BaseUpgradeablePausable {\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\n\n    /// _tokenCounter: GENZ ERC20 tokens in circulation\n    /// _currVersion: \n    uint256 private _saleCap;\n    uint256 private immutable _commonRatio;\n    uint256 private _tokenCounter;\n    uint256 private _baseSalePrice;\n    uint256 private _basePriceWithDec;\n    uint256 private _minWithdrawalPeriod;\n    uint256 private constant WITHDRAWAL_PERIOD_MULTIPLIER = 8 hours;\n\n    /// _tokenDAI: DAI ERC20 token\n    /// _tokenUSDC: USDC ERC20 token\n    /// _globalPauseOperation: Global Pause Operations Contract\n    IERC20Upgradeable private immutable _tokenDAI;\n    IERC20Upgradeable private immutable _tokenGENZ;\n    IGlobalPauseOperation private _globalPauseOperation;\n    IERC20PermitUpgradeable private immutable _tokenPermitDAI;\n\n    struct StakeInformation {\n        bool hasStaked;\n        uint256 amount;\n        uint256 minWithdrawTime;\n    }\n\n    mapping(address => StakeInformation) private stakingInformation;\n    \n    modifier ifNotPaused() {\n        require(\n            (paused() != true) && \n            (_globalPauseOperation.isPaused() != true));\n        _;\n    }\n\n    /// @dev initializing _tokenDAI\n    /// @param tokenDAI: address of the DAI token\n    /// @custom:oz-upgrades-unsafe-allow-constructor\n    constructor(uint256 value, uint256 decimals, address tokenDAI, address tokenGENZ) {\n        _tokenDAI = IERC20Upgradeable(tokenDAI); \n        _tokenGENZ = IERC20Upgradeable(tokenGENZ); \n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAI);\n        _commonRatio = (value * 10e17) / (10 ** decimals); // Immutable\n    }\n\n    /// @dev one time function to initialize the contract\n    /// @param pauseOperationAddress: address of the Global Pause Operation contract\n    function initialize(\n        address pauseOperationAddress\n    ) external initializer {\n        _baseSalePrice = 1;\n        _basePriceWithDec = 1e18;\n        _globalPauseOperation = IGlobalPauseOperation(pauseOperationAddress);\n        __BaseUpgradeablePausable_init(_msgSender());\n    }\n\n    function updateBaseSalePrice(uint256 tokenPrice) external onlyAdmin {\n        _baseSalePrice = tokenPrice;\n        _basePriceWithDec = tokenPrice * 1e18;\n    }\n\n    function updateMinimumWithdrawalPeriod(uint256 valueInDays) external onlyAdmin {\n        _minWithdrawalPeriod = valueInDays * 1 days;\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    /// @dev \n    /// @param value: amount of SZT tokens user wishes to purchase\n    function buyGENZToken(\n        uint256 value,\n        uint deadline, \n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external nonReentrant ifNotPaused returns(bool) {\n        if (value < 1e18) {\n            revert BuySellGENZ__LowAmountError();\n        }\n        _minWithdrawalPeriod += WITHDRAWAL_PERIOD_MULTIPLIER;\n        (/* uint256 amountPerToken */, uint256 amountToBePaid) = calculatePriceGENZ(\n            _tokenCounter, _tokenCounter + value);\n        if (amountToBePaid > _tokenDAI.balanceOf(_msgSender())) {\n            revert BuySellGENZ__InsufficientBalanceError();\n        }\n        StakeInformation storage userStakeInformation = stakingInformation[_msgSender()];\n        userStakeInformation.amount += value;\n        userStakeInformation.hasStaked = true;\n        userStakeInformation.minWithdrawTime = block.timestamp + _minWithdrawalPeriod;\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), amountToBePaid, deadline, v, r, s);\n        _tokenDAI.safeTransferFrom(_msgSender(), address(this), amountToBePaid);\n        return true;\n    }\n\n    function calculatePriceGENZ(\n        uint256 issuedTokensGENZ, \n        uint256 requiredTokens\n    ) public view returns(uint256, uint256) {\n        uint256 commonRatioGENZ = _commonRatio * _baseSalePrice;\n        uint256 tokenDifference = (issuedTokensGENZ + (requiredTokens - 1e18));\n        uint256 averageDiff = ((commonRatioGENZ * tokenDifference) / 2) / 1e18;\n        uint256 amountPerToken = _basePriceWithDec + averageDiff;\n        uint256 amountToBePaid = (amountPerToken * (requiredTokens - issuedTokensGENZ))/1e18;\n        return (amountPerToken, amountToBePaid);\n    }\n\n    error BuyGENZ__TransactionFailedError();\n    function withdrawStakedToken() external {\n        if (!stakingInformation[_msgSender()].hasStaked) {\n            revert BuyGENZ__TransactionFailedError();\n        }\n        if (stakingInformation[_msgSender()].minWithdrawTime > block.timestamp ) {\n            revert BuyGENZ__TransactionFailedError();\n        }\n        uint256 amountStaked = stakingInformation[_msgSender()].amount;\n        stakingInformation[_msgSender()].hasStaked = false;\n        stakingInformation[_msgSender()].amount = 0;\n        _tokenGENZ.safeTransfer(_msgSender(), amountStaked);\n    }\n\n    function getCurrentTokenPrice() public view returns(uint256) {\n        (uint256 amountPerToken, /*uint256 amountToBePaid*/) = calculatePriceGENZ(\n            _tokenCounter, _tokenCounter + 1e18);\n        return amountPerToken;\n    }\n\n    /// @dev returns the token in circulation\n    function getGENZTokenCount() public view returns(uint256) {\n        return _tokenCounter;\n    }\n}"},"contracts/core/staking/GENZStaking.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// @title GENZ Staking Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n/// Importing required interfaces\nimport \"./../../interfaces/IBuyGENZ.sol\";\nimport \"./../../interfaces/IGENZStaking.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n\n/// Importing required libraries\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/// Importing required contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\n\nerror GENZStaking__TransactionFailedError();\nerror GENZStaking__NotAMinimumStakeAmountError();\n\n/// NOTE: Staking tokens would be used for activities like flash loans \n/// to generate rewards for the staked users\ncontract GENZStaking is IGENZStaking, BaseUpgradeablePausable {\n    uint256 private _currVersion;\n    uint256 private _minStakeValue;\n    uint256 private _withdrawTimer;\n    uint256 public override totalTokensStaked;\n    IERC20Upgradeable private immutable _tokenGENZ;\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// TODO: Versionable Info data to be included in functions\n    struct VersionableInfo {\n        uint256 startTime;\n        uint256 endTime;\n        uint256 distributedAmount;\n        uint256 tokenDistributed;\n    }\n\n    struct UserInfo {\n        bool hasStaked;\n        uint256 stakedTokens;\n        uint256 startVersionBlock; \n        uint256 claimedRewards;\n    }\n\n    struct UserBalanceInfo {\n        uint256 stakedTokens;\n        uint256 withdrawnTokens;\n    }\n\n    struct WithdrawWaitPeriod{\n        bool ifTimerStarted;\n        uint256 GENZTokenCount;\n        uint256 canWithdrawTime;\n    }\n\n    mapping (address => WithdrawWaitPeriod) private checkWaitTime;\n\n    mapping(address => UserInfo) private usersInfo;\n\n    /// versionID => VersionableInfo\n    mapping(uint256 => VersionableInfo) private versionableInfos;\n\n    /// userAddress => versionID => UserBalanceInfo\n    mapping(address => mapping(uint256 => UserBalanceInfo)) private usersBalanceInfo;\n\n    /// [PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]\n    constructor(\n        address tokenAddressGENZ\n    ) {\n        _minStakeValue = 1e18;\n        _tokenGENZ = IERC20Upgradeable(tokenAddressGENZ);\n    }\n\n    function initialize(uint256 timeInDays) external initializer {\n        _withdrawTimer = timeInDays * 1 minutes;\n        __BaseUpgradeablePausable_init(_msgSender());\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    function updateMinimumStakeAmount(uint256 value) external onlyAdmin {\n        _minStakeValue = value;\n        emit UpdatedMinStakingAmount(value);\n    }\n\n    /// [PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]\n    function setWithdrawTime(uint256 timeInMinutes) external onlyAdmin {\n        _withdrawTimer = timeInMinutes * 1 minutes;\n        emit UpdatedWithdrawTimer(timeInMinutes);\n    }\n\n    function stakeGENZ(uint256 value) public override nonReentrant returns(bool) {\n        if (value < _minStakeValue) {\n            revert GENZStaking__NotAMinimumStakeAmountError();\n        }\n        ++_currVersion;\n        UserInfo storage userInfo = usersInfo[_msgSender()];\n        if(!userInfo.hasStaked) {\n            userInfo.hasStaked = true;\n            userInfo.startVersionBlock = _currVersion;\n        }\n        userInfo.stakedTokens += value;\n        usersBalanceInfo[_msgSender()][_currVersion].stakedTokens = value;        \n        totalTokensStaked += value;\n        _tokenGENZ.safeTransferFrom(_msgSender(), address(this), value);\n        emit StakedGENZ(_msgSender(), value);\n        return true;\n    }\n    \n    // 2 hours withdrawal period\n    function activateWithdrawalTimer(uint256 value) external override returns(bool) {\n        if (\n            (!(checkWaitTime[_msgSender()].ifTimerStarted)) || \n            (checkWaitTime[_msgSender()].GENZTokenCount < value)\n        ) {\n            WithdrawWaitPeriod storage waitingTimeCountdown = checkWaitTime[_msgSender()];\n            waitingTimeCountdown.ifTimerStarted = true;\n            waitingTimeCountdown.GENZTokenCount = value;\n            waitingTimeCountdown.canWithdrawTime = _withdrawTimer + block.timestamp;\n            return true;\n        }\n        return false;\n    }\n    \n    function withdrawGENZ(uint256 value) external override nonReentrant returns(bool) {\n        UserInfo storage userInfo = usersInfo[_msgSender()];\n        if (\n            (userInfo.stakedTokens < value) || \n            (block.timestamp < checkWaitTime[_msgSender()].canWithdrawTime) || \n            (value > checkWaitTime[_msgSender()].GENZTokenCount)\n        ) {\n            revert GENZStaking__TransactionFailedError();\n        }\n        ++_currVersion;\n        totalTokensStaked -= value;\n        userInfo.stakedTokens -= value;\n        usersBalanceInfo[_msgSender()][_currVersion].withdrawnTokens = value;\n        if (checkWaitTime[_msgSender()].GENZTokenCount == value) {\n            checkWaitTime[_msgSender()].ifTimerStarted = false;\n        }\n        checkWaitTime[_msgSender()].GENZTokenCount -= value;\n        _tokenGENZ.safeTransfer(_msgSender(), value);\n        emit UnstakedGENZ(_msgSender(), value);\n        return true;\n    }\n\n    function getVersionID() public view returns(uint256) {\n        return _currVersion;\n    }\n\n    function getActiveVersionID() internal view returns(uint256[] memory) {\n        uint256 activeCount = 0;\n        uint256 userStartVersion = usersInfo[_msgSender()].startVersionBlock;\n        uint256 currVersion =  getVersionID();\n        for(uint256 i = userStartVersion; i <= currVersion;) {\n            if (usersBalanceInfo[_msgSender()][i].stakedTokens > 0) {\n                ++activeCount;\n            }\n            if (usersBalanceInfo[_msgSender()][i].withdrawnTokens > 0) {\n                ++activeCount;\n            }\n            ++i;\n        }\n        uint256[] memory activeVersionID = new uint256[](activeCount);\n        uint256 counter = 0;\n        for(uint i = userStartVersion; i <= currVersion;) {\n            UserBalanceInfo memory userBalance = usersBalanceInfo[_msgSender()][i];\n            if(userBalance.stakedTokens > 0) {\n                activeVersionID[counter] = i;\n            }\n            if(userBalance.withdrawnTokens > 0) {\n                activeVersionID[counter] = i;\n            }\n            ++counter;\n            ++i;\n        }\n        return activeVersionID;\n    }\n\n    function calculateRewards() external view returns(uint256) {\n        uint256 userBalance = 0;\n        uint256[] memory activeVersionID = getActiveVersionID();\n        uint256 startVersionID = activeVersionID[0];\n        uint256 userPremiumEarned = 0;\n        uint256 counter = 0;\n        for(uint256 i = startVersionID; i <= _currVersion;) {\n            UserBalanceInfo memory userVersionBalance = usersBalanceInfo[_msgSender()][i];\n            if(activeVersionID[counter] == i) {\n                if (userVersionBalance.stakedTokens > 0) {\n                    userBalance += userVersionBalance.stakedTokens;\n                }\n                else {\n                    userBalance -= userVersionBalance.withdrawnTokens;\n                }\n                ++counter;\n            }\n            VersionableInfo storage versionInfo = versionableInfos[i];           \n            uint256 duration = versionInfo.endTime - versionInfo.startTime;\n            userPremiumEarned += ((duration * userBalance * versionInfo.distributedAmount)/ (versionInfo.tokenDistributed));\n            ++i;\n        }\n        return userPremiumEarned;\n    }\n\n    function getUserStakedGENZBalance() external view override returns(uint256) {\n        return (usersInfo[_msgSender()].stakedTokens > 0 ? usersInfo[_msgSender()].stakedTokens : 0);\n    }\n\n    function getStakerClaimedRewardInfo() external view returns(uint256) {\n        return usersInfo[_msgSender()].claimedRewards;\n    }\n}"},"contracts/core/token/GENZERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n/// @title GENZ ERC20 Token Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n/// Importing required contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\ncontract GENZ is ERC20Upgradeable, ERC20PermitUpgradeable, BaseUpgradeablePausable {\n\n    /*\n\n    100M fixed supply GENZ tokens will be minted to the Buy Contract. \n\n    */\n    uint256 private _initVersion;\n    \n    function initialize() external initializer {\n        __ERC20_init(\"GenZ Labs\", \"GENZ\");\n        __ERC20Permit_init(\"GENZ\");\n        __BaseUpgradeablePausable_init(_msgSender());\n    }\n\n    error GENZ__ImmutableChangesError();\n    function init(address buyContract) external onlyAdmin {\n         if (_initVersion > 0) {\n            revert GENZ__ImmutableChangesError();\n        }\n        ++_initVersion;\n        _mint(buyContract, 1e25);\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n}"},"contracts/interfaces/IBuyGENZ.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IBuyGENZ {\n    \n    /// Custom Error Codes\n    error BuySellGENZ__PausedError();\n    error BuySellGENZ__LowAmountError();\n    error BuySellGENZ__LowSZTBalanceError();\n    error BuySellGENZ__GENZBurnFailedError();\n    error BuySellGENZ__GENZMintFailedError();\n    error BuySellGENZ__ImmutableChangesError();\n    error BuySellGENZ__TransactionFailedError();\n    error BuySellGENZ__InsufficientBalanceError();\n    error BuySellGENZ__ZeroAddressTransactionError();\n\n}"},"contracts/interfaces/IERC20Extended.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\n */\ninterface IERC20Extended is IERC20Upgradeable {\n    \n    function mint(address to, uint256 amount) external returns(bool);\n\n    function burnFrom(address account, uint256 amount) external returns(bool);\n    \n}"},"contracts/interfaces/IGENZStaking.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\ninterface IGENZStaking {\n\n    event UpdatedWithdrawTimer(uint256 indexed timeInMinutes);\n\n    event UpdatedMinStakingAmount(uint256 indexed value);\n\n    event StakedGENZ(address indexed userAddress, uint256 value);\n\n    event UnstakedGENZ(address indexed userAddress, uint256 value);\n\n    function stakeGENZ(uint256 _value) external returns(bool);\n\n    function activateWithdrawalTimer(uint256 _value) external returns(bool);\n\n    function withdrawGENZ(uint256 _value) external returns(bool);\n\n    function totalTokensStaked() external view returns(uint256);\n\n    function getUserStakedGENZBalance() external view returns(uint256);\n\n}"},"contracts/interfaces/IGlobalPauseOperation.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IGlobalPauseOperation {\n\n    error GlobalPauseOps__ZeroAddressInputError();\n\n    error GlobalPauseOperation__ImmutableChangesError();\n\n    event PausedOperation(address account);\n\n    event UnpausedOperation(address account);\n\n    function pauseOperation() external returns(bool);\n\n    function unpauseOperation() external returns(bool);\n    \n    function isPaused() external view returns(bool);\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2287],"ContextUpgradeable":[2329],"ERC165Upgradeable":[3133],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[3145],"Initializable":[580],"MathUpgradeable":[4010],"StringsUpgradeable":[2578]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":409,"src":"133:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2330,"src":"175:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":2579,"src":"217:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":3134,"src":"259:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":581,"src":"314:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"Initializable","nameLocations":["1939:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"1939:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"1939:13:0"},{"baseName":{"id":10,"name":"ContextUpgradeable","nameLocations":["1954:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":2329,"src":"1954:18:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"1954:18:0"},{"baseName":{"id":12,"name":"IAccessControlUpgradeable","nameLocations":["1974:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"1974:25:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"1974:25:0"},{"baseName":{"id":14,"name":"ERC165Upgradeable","nameLocations":["2001:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":3133,"src":"2001:17:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"2001:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"358:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":335,"linearizedBaseContracts":[335,3133,3145,408,2329,580],"name":"AccessControlUpgradeable","nameLocation":"1911:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":20,"nodeType":"Block","src":"2083:7:0","statements":[]},"id":21,"implemented":true,"kind":"function","modifiers":[{"id":18,"kind":"modifierInvocation","modifierName":{"id":17,"name":"onlyInitializing","nameLocations":["2066:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2066:16:0"},"nodeType":"ModifierInvocation","src":"2066:16:0"}],"name":"__AccessControl_init","nameLocation":"2034:20:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2054:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"2083:0:0"},"scope":335,"src":"2025:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"2164:7:0","statements":[]},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":24,"kind":"modifierInvocation","modifierName":{"id":23,"name":"onlyInitializing","nameLocations":["2147:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2147:16:0"},"nodeType":"ModifierInvocation","src":"2147:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2105:30:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"2135:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"2164:0:0"},"scope":335,"src":"2096:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":34,"members":[{"constant":false,"id":31,"mutability":"mutable","name":"members","nameLocation":"2227:7:0","nodeType":"VariableDeclaration","scope":34,"src":"2202:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":30,"keyType":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2202:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2221:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"adminRole","nameLocation":"2252:9:0","nodeType":"VariableDeclaration","scope":34,"src":"2244:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2244:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2183:8:0","nodeType":"StructDefinition","scope":335,"src":"2176:92:0","visibility":"public"},{"constant":false,"id":39,"mutability":"mutable","name":"_roles","nameLocation":"2311:6:0","nodeType":"VariableDeclaration","scope":335,"src":"2274:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":38,"keyType":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2282:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2274:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"RoleData","nameLocations":["2293:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":34,"src":"2293:8:0"},"referencedDeclaration":34,"src":"2293:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":42,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2348:18:0","nodeType":"VariableDeclaration","scope":335,"src":"2324:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":52,"nodeType":"Block","src":"2792:44:0","statements":[{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2813:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":47,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":107,"src":"2802:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2802:16:0"},{"id":51,"nodeType":"PlaceholderStatement","src":"2828:1:0"}]},"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"2380:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":53,"name":"onlyRole","nameLocation":"2769:8:0","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"role","nameLocation":"2786:4:0","nodeType":"VariableDeclaration","scope":53,"src":"2778:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2777:14:0"},"src":"2760:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[3127],"body":{"id":74,"nodeType":"Block","src":"2994:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3011:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":64,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3031:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":63,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3026:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3026:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408","typeString":"type(contract IAccessControlUpgradeable)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3058:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"3026:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3011:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":70,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3097:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":68,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3073:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$335_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3079:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3127,"src":"3073:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3073:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3011:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":61,"id":73,"nodeType":"Return","src":"3004:105:0"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"2842:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":75,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2912:17:0","nodeType":"FunctionDefinition","overrides":{"id":58,"nodeType":"OverrideSpecifier","overrides":[],"src":"2970:8:0"},"parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"interfaceId","nameLocation":"2937:11:0","nodeType":"VariableDeclaration","scope":75,"src":"2930:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":55,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2930:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2929:20:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":75,"src":"2988:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"2988:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2987:6:0"},"scope":335,"src":"2903:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[375],"body":{"id":93,"nodeType":"Block","src":"3295:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":86,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"3312:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":88,"indexExpression":{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"3319:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":89,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3325:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3312:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":91,"indexExpression":{"id":90,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3333:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":85,"id":92,"nodeType":"Return","src":"3305:36:0"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"3122:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":94,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3212:7:0","nodeType":"FunctionDefinition","overrides":{"id":82,"nodeType":"OverrideSpecifier","overrides":[],"src":"3271:8:0"},"parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"3228:4:0","nodeType":"VariableDeclaration","scope":94,"src":"3220:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3220:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"3242:7:0","nodeType":"VariableDeclaration","scope":94,"src":"3234:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3219:31:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"3289:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":83,"name":"bool","nodeType":"ElementaryTypeName","src":"3289:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3288:6:0"},"scope":335,"src":"3203:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"3698:47:0","statements":[{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3719:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":102,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"3725:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3725:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":146,"src":"3708:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"3708:30:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3354:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":107,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3651:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"role","nameLocation":"3670:4:0","nodeType":"VariableDeclaration","scope":107,"src":"3662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3661:14:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3698:0:0"},"scope":335,"src":"3642:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"4099:428:0","statements":[{"condition":{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4113:23:0","subExpression":{"arguments":[{"id":116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4122:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":117,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4128:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":115,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4114:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4114:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"4109:412:0","trueBody":{"id":143,"nodeType":"Block","src":"4138:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4246:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":128,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4328:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":126,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"4297:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2578_$","typeString":"type(library StringsUpgradeable)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4316:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"4297:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4362:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":135,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4446:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4438:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4453:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":131,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"4407:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2578_$","typeString":"type(library StringsUpgradeable)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4426:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2557,"src":"4407:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4208:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"4204:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4176:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":121,"name":"string","nodeType":"ElementaryTypeName","src":"4176:6:0","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4176:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":120,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4152:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4152:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4152:358:0"}]}}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3751:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4035:10:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"4054:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4046:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4046:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"4068:7:0","nodeType":"VariableDeclaration","scope":146,"src":"4060:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"4060:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4045:31:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"4099:0:0"},"scope":335,"src":"4026:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[383],"body":{"id":160,"nodeType":"Block","src":"4791:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":155,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"4808:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":157,"indexExpression":{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4815:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4821:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"4808:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":154,"id":159,"nodeType":"Return","src":"4801:29:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4533:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":161,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4717:12:0","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4764:8:0"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4738:4:0","nodeType":"VariableDeclaration","scope":161,"src":"4730:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4730:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4729:14:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"4782:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4782:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4781:9:0"},"scope":335,"src":"4708:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[391],"body":{"id":180,"nodeType":"Block","src":"5236:42:0","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5257:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5263:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":175,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"5246:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5246:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"5246:25:0"}]},"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"4843:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":181,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":171,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5229:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5216:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5216:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":173,"kind":"modifierInvocation","modifierName":{"id":169,"name":"onlyRole","nameLocations":["5207:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5207:8:0"},"nodeType":"ModifierInvocation","src":"5207:28:0"}],"name":"grantRole","nameLocation":"5142:9:0","nodeType":"FunctionDefinition","overrides":{"id":168,"nodeType":"OverrideSpecifier","overrides":[],"src":"5198:8:0"},"parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"role","nameLocation":"5160:4:0","nodeType":"VariableDeclaration","scope":181,"src":"5152:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5152:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"account","nameLocation":"5174:7:0","nodeType":"VariableDeclaration","scope":181,"src":"5166:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"5166:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5151:31:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"5236:0:0"},"scope":335,"src":"5133:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[399],"body":{"id":200,"nodeType":"Block","src":"5662:43:0","statements":[{"expression":{"arguments":[{"id":196,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5684:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5690:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":195,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5672:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"5672:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"5284:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":191,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5655:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":190,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5642:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5642:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":193,"kind":"modifierInvocation","modifierName":{"id":189,"name":"onlyRole","nameLocations":["5633:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5633:8:0"},"nodeType":"ModifierInvocation","src":"5633:28:0"}],"name":"revokeRole","nameLocation":"5567:10:0","nodeType":"FunctionDefinition","overrides":{"id":188,"nodeType":"OverrideSpecifier","overrides":[],"src":"5624:8:0"},"parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"role","nameLocation":"5586:4:0","nodeType":"VariableDeclaration","scope":201,"src":"5578:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5578:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"account","nameLocation":"5600:7:0","nodeType":"VariableDeclaration","scope":201,"src":"5592:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"5592:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5577:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5662:0:0"},"scope":335,"src":"5558:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[407],"body":{"id":223,"nodeType":"Block","src":"6319:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":212,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6348:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6348:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6337:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6362:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6329:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6329:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"6329:83:0"},{"expression":{"arguments":[{"id":219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6435:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6441:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6423:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"6423:26:0"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"5711:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6251:12:0","nodeType":"FunctionDefinition","overrides":{"id":208,"nodeType":"OverrideSpecifier","overrides":[],"src":"6310:8:0"},"parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"role","nameLocation":"6272:4:0","nodeType":"VariableDeclaration","scope":224,"src":"6264:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6264:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"account","nameLocation":"6286:7:0","nodeType":"VariableDeclaration","scope":224,"src":"6278:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"6278:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6263:31:0"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"6319:0:0"},"scope":335,"src":"6242:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":237,"nodeType":"Block","src":"7209:42:0","statements":[{"expression":{"arguments":[{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7230:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7236:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":232,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7219:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7219:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"7219:25:0"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"6462:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7150:10:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"role","nameLocation":"7169:4:0","nodeType":"VariableDeclaration","scope":238,"src":"7161:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7161:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"account","nameLocation":"7183:7:0","nodeType":"VariableDeclaration","scope":238,"src":"7175:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"7175:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7160:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"7209:0:0"},"scope":335,"src":"7141:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"7449:174:0","statements":[{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7467:17:0","nodeType":"VariableDeclaration","scope":265,"src":"7459:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7459:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7500:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"7487:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7487:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7459:46:0"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":252,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7515:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":254,"indexExpression":{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7522:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7515:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7528:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"7515:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7540:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7515:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"7515:34:0"},{"eventCall":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7581:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7587:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7606:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7564:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7564:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":264,"nodeType":"EmitStatement","src":"7559:57:0"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"7257:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7385:13:0","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"7407:4:0","nodeType":"VariableDeclaration","scope":266,"src":"7399:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7399:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"adminRole","nameLocation":"7421:9:0","nodeType":"VariableDeclaration","scope":266,"src":"7413:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7413:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7398:33:0"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"7449:0:0"},"scope":335,"src":"7376:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":297,"nodeType":"Block","src":"7859:165:0","statements":[{"condition":{"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7873:23:0","subExpression":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7882:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7888:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"7874:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7874:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"7869:149:0","trueBody":{"id":295,"nodeType":"Block","src":"7898:120:0","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":279,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7912:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":281,"indexExpression":{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7919:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7912:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7925:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7912:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":284,"indexExpression":{"id":283,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7912:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7944:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7912:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"ExpressionStatement","src":"7912:36:0"},{"eventCall":{"arguments":[{"id":289,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7979:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7985:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"7994:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7994:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":288,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"7967:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7967:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"EmitStatement","src":"7962:45:0"}]}}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"7629:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":298,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7800:10:0","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"role","nameLocation":"7819:4:0","nodeType":"VariableDeclaration","scope":298,"src":"7811:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7811:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"7833:7:0","nodeType":"VariableDeclaration","scope":298,"src":"7825:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"7825:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7810:31:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[],"src":"7859:0:0"},"scope":335,"src":"7791:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"8264:165:0","statements":[{"condition":{"arguments":[{"id":307,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8286:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":308,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8292:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8278:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8278:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"nodeType":"IfStatement","src":"8274:149:0","trueBody":{"id":326,"nodeType":"Block","src":"8302:121:0","statements":[{"expression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":310,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8316:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":312,"indexExpression":{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8323:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8316:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8329:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8316:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":315,"indexExpression":{"id":314,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8316:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8348:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8316:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"ExpressionStatement","src":"8316:37:0"},{"eventCall":{"arguments":[{"id":320,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8384:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8390:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"8399:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"8372:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8372:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"8367:45:0"}]}}]},"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"8030:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8204:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"8224:4:0","nodeType":"VariableDeclaration","scope":329,"src":"8216:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8216:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"account","nameLocation":"8238:7:0","nodeType":"VariableDeclaration","scope":329,"src":"8230:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"8230:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8215:31:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"8264:0:0"},"scope":335,"src":"8195:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"8435:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":334,"mutability":"mutable","name":"__gap","nameLocation":"8714:5:0","nodeType":"VariableDeclaration","scope":335,"src":"8694:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":333,"length":{"hexValue":"3439","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8702:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8694:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":336,"src":"1893:6829:0","usedErrors":[]}],"src":"108:8615:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":408,"linearizedBaseContracts":[408],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":347,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":347,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":347,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":347,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":356,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":356,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":356,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":356,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":365,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":365,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":365,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":365,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":375,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":372,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":408,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":383,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":408,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":391,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":391,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":408,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":399,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":399,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":408,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":407,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":407,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":408,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":409,"src":"209:2721:1","usedErrors":[]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[1470]},"id":412,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../token/ERC20/IERC20Upgradeable.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":412,"sourceUnit":1471,"src":"115:46:2","symbolAliases":[],"unitAlias":""}],"src":"90:72:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"Initializable":[580]},"id":581,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":413,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":414,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":581,"sourceUnit":2288,"src":"138:44:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"184:2198:3","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":580,"linearizedBaseContracts":[580],"name":"Initializable","nameLocation":"2401:13:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"2421:109:3","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":418,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:3","nodeType":"VariableDeclaration","scope":580,"src":"2535:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":417,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"2568:91:3","text":" @dev Indicates that the contract is in the process of being initialized."},"id":421,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:3","nodeType":"VariableDeclaration","scope":580,"src":"2664:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"2697:90:3","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":426,"name":"Initialized","nameLocation":"2798:11:3","nodeType":"EventDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:3","nodeType":"VariableDeclaration","scope":426,"src":"2810:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":423,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:3"},"src":"2792:33:3"},{"body":{"id":481,"nodeType":"Block","src":"3258:483:3","statements":[{"assignments":[430],"declarations":[{"constant":false,"id":430,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:3","nodeType":"VariableDeclaration","scope":481,"src":"3268:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":429,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":433,"initialValue":{"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:3","subExpression":{"id":431,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3291:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":435,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3336:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":436,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3354:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:3","subExpression":{"arguments":[{"arguments":[{"id":445,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}],"id":444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:3","typeDescriptions":{}}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":441,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"3377:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$2287_$","typeString":"type(library AddressUpgradeable)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2021,"src":"3377:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3425:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":434,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:201:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"3314:201:3"},{"expression":{"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":458,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3525:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":461,"nodeType":"ExpressionStatement","src":"3525:16:3"},{"condition":{"id":462,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3555:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":468,"nodeType":"IfStatement","src":"3551:65:3","trueBody":{"id":467,"nodeType":"Block","src":"3571:45:3","statements":[{"expression":{"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":463,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3585:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":466,"nodeType":"ExpressionStatement","src":"3585:20:3"}]}},{"id":469,"nodeType":"PlaceholderStatement","src":"3625:1:3"},{"condition":{"id":470,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3640:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":480,"nodeType":"IfStatement","src":"3636:99:3","trueBody":{"id":479,"nodeType":"Block","src":"3656:79:3","statements":[{"expression":{"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":471,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3670:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":474,"nodeType":"ExpressionStatement","src":"3670:21:3"},{"eventCall":{"arguments":[{"hexValue":"31","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":475,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"3710:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":478,"nodeType":"EmitStatement","src":"3705:19:3"}]}}]},"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"2831:399:3","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":482,"name":"initializer","nameLocation":"3244:11:3","nodeType":"ModifierDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"3255:2:3"},"src":"3235:506:3","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"4852:255:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:3","subExpression":{"id":488,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4871:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4888:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":491,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4903:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"4862:99:3"},{"expression":{"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":497,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4971:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":498,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4986:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":500,"nodeType":"ExpressionStatement","src":"4971:22:3"},{"expression":{"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":501,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5003:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":504,"nodeType":"ExpressionStatement","src":"5003:20:3"},{"id":505,"nodeType":"PlaceholderStatement","src":"5033:1:3"},{"expression":{"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":506,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5044:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"nodeType":"ExpressionStatement","src":"5044:21:3"},{"eventCall":{"arguments":[{"id":511,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"5092:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":510,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"5080:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":513,"nodeType":"EmitStatement","src":"5075:25:3"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"3747:1062:3","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":515,"name":"reinitializer","nameLocation":"4823:13:3","nodeType":"ModifierDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"version","nameLocation":"4843:7:3","nodeType":"VariableDeclaration","scope":515,"src":"4837:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":484,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:3"},"src":"4814:293:3","virtual":false,"visibility":"internal"},{"body":{"id":524,"nodeType":"Block","src":"5345:97:3","statements":[{"expression":{"arguments":[{"id":519,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5363:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":522,"nodeType":"ExpressionStatement","src":"5355:69:3"},{"id":523,"nodeType":"PlaceholderStatement","src":"5434:1:3"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"5113:199:3","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":525,"name":"onlyInitializing","nameLocation":"5326:16:3","nodeType":"ModifierDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"5342:2:3"},"src":"5317:125:3","virtual":false,"visibility":"internal"},{"body":{"id":560,"nodeType":"Block","src":"5977:230:3","statements":[{"expression":{"arguments":[{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:3","subExpression":{"id":530,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5996:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5987:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":534,"nodeType":"ExpressionStatement","src":"5987:66:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":535,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6067:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":537,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":536,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6082:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6094:3:3","memberName":"max","nodeType":"MemberAccess","src":"6082:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":559,"nodeType":"IfStatement","src":"6063:138:3","trueBody":{"id":558,"nodeType":"Block","src":"6099:102:3","statements":[{"expression":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":542,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6113:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":544,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":543,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6140:3:3","memberName":"max","nodeType":"MemberAccess","src":"6128:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":549,"nodeType":"ExpressionStatement","src":"6113:30:3"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":552,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":551,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6186:3:3","memberName":"max","nodeType":"MemberAccess","src":"6174:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":550,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"6162:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":557,"nodeType":"EmitStatement","src":"6157:33:3"}]}}]},"documentation":{"id":526,"nodeType":"StructuredDocumentation","src":"5448:475:3","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":561,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:3","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"5957:2:3"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"5977:0:3"},"scope":580,"src":"5928:279:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"6381:36:3","statements":[{"expression":{"id":567,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6398:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":566,"id":568,"nodeType":"Return","src":"6391:19:3"}]},"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"6213:99:3","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":570,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:3","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"6348:2:3"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":570,"src":"6374:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":564,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:3"},"scope":580,"src":"6317:100:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":578,"nodeType":"Block","src":"6589:37:3","statements":[{"expression":{"id":576,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"6606:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":575,"id":577,"nodeType":"Return","src":"6599:20:3"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"6423:105:3","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":579,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:3","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"6557:2:3"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":579,"src":"6583:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:3"},"scope":580,"src":"6533:93:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":581,"src":"2383:4245:3","usedErrors":[]}],"src":"113:6516:3"},"id":3},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"ContextUpgradeable":[2329],"Initializable":[580],"PausableUpgradeable":[707]},"id":708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":582,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":2330,"src":"130:41:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":584,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":581,"src":"172:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":586,"name":"Initializable","nameLocations":["697:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"697:13:4"},"id":587,"nodeType":"InheritanceSpecifier","src":"697:13:4"},{"baseName":{"id":588,"name":"ContextUpgradeable","nameLocations":["712:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":2329,"src":"712:18:4"},"id":589,"nodeType":"InheritanceSpecifier","src":"712:18:4"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"216:439:4","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":707,"linearizedBaseContracts":[707,2329,580],"name":"PausableUpgradeable","nameLocation":"674:19:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":590,"nodeType":"StructuredDocumentation","src":"737:73:4","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":594,"name":"Paused","nameLocation":"821:6:4","nodeType":"EventDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:4","nodeType":"VariableDeclaration","scope":594,"src":"828:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":591,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:4"},"src":"815:30:4"},{"anonymous":false,"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"851:70:4","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":599,"name":"Unpaused","nameLocation":"932:8:4","nodeType":"EventDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:4","nodeType":"VariableDeclaration","scope":599,"src":"941:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:4"},"src":"926:32:4"},{"constant":false,"id":601,"mutability":"mutable","name":"_paused","nameLocation":"977:7:4","nodeType":"VariableDeclaration","scope":707,"src":"964:20:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":600,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":610,"nodeType":"Block","src":"1116:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":607,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"1126:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":609,"nodeType":"ExpressionStatement","src":"1126:27:4"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"991:67:4","text":" @dev Initializes the contract in unpaused state."},"id":611,"implemented":true,"kind":"function","modifiers":[{"id":605,"kind":"modifierInvocation","modifierName":{"id":604,"name":"onlyInitializing","nameLocations":["1099:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1099:16:4"},"nodeType":"ModifierInvocation","src":"1099:16:4"}],"name":"__Pausable_init","nameLocation":"1072:15:4","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"1087:2:4"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"1116:0:4"},"scope":707,"src":"1063:97:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":620,"nodeType":"Block","src":"1229:32:4","statements":[{"expression":{"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":616,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1239:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":619,"nodeType":"ExpressionStatement","src":"1239:15:4"}]},"id":621,"implemented":true,"kind":"function","modifiers":[{"id":614,"kind":"modifierInvocation","modifierName":{"id":613,"name":"onlyInitializing","nameLocations":["1212:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1212:16:4"},"nodeType":"ModifierInvocation","src":"1212:16:4"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:4","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"1200:2:4"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[],"src":"1229:0:4"},"scope":707,"src":"1166:95:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":628,"nodeType":"Block","src":"1472:47:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":624,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"1482:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":626,"nodeType":"ExpressionStatement","src":"1482:19:4"},{"id":627,"nodeType":"PlaceholderStatement","src":"1511:1:4"}]},"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"1267:175:4","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":629,"name":"whenNotPaused","nameLocation":"1456:13:4","nodeType":"ModifierDefinition","parameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"1469:2:4"},"src":"1447:72:4","virtual":false,"visibility":"internal"},{"body":{"id":636,"nodeType":"Block","src":"1719:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":632,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"1729:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"1729:16:4"},{"id":635,"nodeType":"PlaceholderStatement","src":"1755:1:4"}]},"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"1525:167:4","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":637,"name":"whenPaused","nameLocation":"1706:10:4","nodeType":"ModifierDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[],"src":"1716:2:4"},"src":"1697:66:4","virtual":false,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"1911:31:4","statements":[{"expression":{"id":643,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1928:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":642,"id":644,"nodeType":"Return","src":"1921:14:4"}]},"documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"1769:84:4","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":646,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:4","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[],"src":"1873:2:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"1905:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":640,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:4"},"scope":707,"src":"1858:84:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":657,"nodeType":"Block","src":"2061:55:4","statements":[{"expression":{"arguments":[{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:4","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":651,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2080:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2080:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2071:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":656,"nodeType":"ExpressionStatement","src":"2071:38:4"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"1948:57:4","text":" @dev Throws if the contract is paused."},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:4","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[],"src":"2036:2:4"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"2061:0:4"},"scope":707,"src":"2010:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"2236:58:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":663,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2254:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2254:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"2246:41:4"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"2122:61:4","text":" @dev Throws if the contract is not paused."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:4","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[],"src":"2211:2:4"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[],"src":"2236:0:4"},"scope":707,"src":"2188:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":684,"nodeType":"Block","src":"2478:66:4","statements":[{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":675,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2488:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":678,"nodeType":"ExpressionStatement","src":"2488:14:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":680,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"2524:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2524:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":679,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2517:6:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":683,"nodeType":"EmitStatement","src":"2512:25:4"}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"2300:124:4","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":685,"implemented":true,"kind":"function","modifiers":[{"id":673,"kind":"modifierInvocation","modifierName":{"id":672,"name":"whenNotPaused","nameLocations":["2464:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":629,"src":"2464:13:4"},"nodeType":"ModifierInvocation","src":"2464:13:4"}],"name":"_pause","nameLocation":"2438:6:4","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"2444:2:4"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"2478:0:4"},"scope":707,"src":"2429:115:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":700,"nodeType":"Block","src":"2724:69:4","statements":[{"expression":{"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":691,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2734:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":694,"nodeType":"ExpressionStatement","src":"2734:15:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":696,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"2773:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":695,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"2764:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2764:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":699,"nodeType":"EmitStatement","src":"2759:27:4"}]},"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"2550:121:4","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":701,"implemented":true,"kind":"function","modifiers":[{"id":689,"kind":"modifierInvocation","modifierName":{"id":688,"name":"whenPaused","nameLocations":["2713:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":637,"src":"2713:10:4"},"nodeType":"ModifierInvocation","src":"2713:10:4"}],"name":"_unpause","nameLocation":"2685:8:4","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"2693:2:4"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"2724:0:4"},"scope":707,"src":"2676:117:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"2799:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":706,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:4","nodeType":"VariableDeclaration","scope":707,"src":"3058:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"length":{"hexValue":"3439","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":708,"src":"656:2430:4","usedErrors":[]}],"src":"105:2982:4"},"id":4},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"Initializable":[580],"ReentrancyGuardUpgradeable":[780]},"id":781,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":709,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":781,"sourceUnit":581,"src":"136:42:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":712,"name":"Initializable","nameLocations":["979:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"979:13:5"},"id":713,"nodeType":"InheritanceSpecifier","src":"979:13:5"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":711,"nodeType":"StructuredDocumentation","src":"180:750:5","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":780,"linearizedBaseContracts":[780,580],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":716,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:5","nodeType":"VariableDeclaration","scope":780,"src":"1747:41:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":719,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:5","nodeType":"VariableDeclaration","scope":780,"src":"1794:37:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":721,"mutability":"mutable","name":"_status","nameLocation":"1854:7:5","nodeType":"VariableDeclaration","scope":780,"src":"1838:23:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":729,"nodeType":"Block","src":"1928:51:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":726,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"1938:32:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":728,"nodeType":"ExpressionStatement","src":"1938:34:5"}]},"id":730,"implemented":true,"kind":"function","modifiers":[{"id":724,"kind":"modifierInvocation","modifierName":{"id":723,"name":"onlyInitializing","nameLocations":["1911:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1911:16:5"},"nodeType":"ModifierInvocation","src":"1911:16:5"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:5","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"1899:2:5"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[],"src":"1928:0:5"},"scope":780,"src":"1868:111:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":739,"nodeType":"Block","src":"2055:39:5","statements":[{"expression":{"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":735,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2065:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":736,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2075:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":738,"nodeType":"ExpressionStatement","src":"2065:22:5"}]},"id":740,"implemented":true,"kind":"function","modifiers":[{"id":733,"kind":"modifierInvocation","modifierName":{"id":732,"name":"onlyInitializing","nameLocations":["2038:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2038:16:5"},"nodeType":"ModifierInvocation","src":"2038:16:5"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:5","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"2026:2:5"},"returnParameters":{"id":734,"nodeType":"ParameterList","parameters":[],"src":"2055:0:5"},"scope":780,"src":"1985:109:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":750,"nodeType":"Block","src":"2495:79:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":743,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2505:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":745,"nodeType":"ExpressionStatement","src":"2505:21:5"},{"id":746,"nodeType":"PlaceholderStatement","src":"2536:1:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":747,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2547:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":749,"nodeType":"ExpressionStatement","src":"2547:20:5"}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"2100:366:5","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":751,"name":"nonReentrant","nameLocation":"2480:12:5","nodeType":"ModifierDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[],"src":"2492:2:5"},"src":"2471:103:5","virtual":false,"visibility":"internal"},{"body":{"id":765,"nodeType":"Block","src":"2619:248:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":755,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2712:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":756,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"2723:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":754,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":760,"nodeType":"ExpressionStatement","src":"2704:63:5"},{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":761,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2842:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":762,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"2852:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":764,"nodeType":"ExpressionStatement","src":"2842:18:5"}]},"id":766,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:5","nodeType":"FunctionDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[],"src":"2608:2:5"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[],"src":"2619:0:5"},"scope":780,"src":"2580:287:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":773,"nodeType":"Block","src":"2911:171:5","statements":[{"expression":{"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":769,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3053:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":770,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"3063:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":772,"nodeType":"ExpressionStatement","src":"3053:22:5"}]},"id":774,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:5","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[],"src":"2900:2:5"},"returnParameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"2911:0:5"},"scope":780,"src":"2873:209:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"3088:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":779,"mutability":"mutable","name":"__gap","nameLocation":"3367:5:5","nodeType":"VariableDeclaration","scope":780,"src":"3347:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":778,"length":{"hexValue":"3439","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3355:2:5","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3347:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":781,"src":"931:2444:5","usedErrors":[]}],"src":"112:3264:5"},"id":5},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"ContextUpgradeable":[2329],"ERC20Upgradeable":[1392],"IERC20MetadataUpgradeable":[1495],"IERC20Upgradeable":[1470],"Initializable":[580]},"id":1393,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":782,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"./IERC20Upgradeable.sol","id":783,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":1471,"src":"130:33:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","file":"./extensions/IERC20MetadataUpgradeable.sol","id":784,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":1496,"src":"164:52:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":785,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":2330,"src":"217:44:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":786,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1393,"sourceUnit":581,"src":"262:45:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":788,"name":"Initializable","nameLocations":["1509:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"1509:13:6"},"id":789,"nodeType":"InheritanceSpecifier","src":"1509:13:6"},{"baseName":{"id":790,"name":"ContextUpgradeable","nameLocations":["1524:18:6"],"nodeType":"IdentifierPath","referencedDeclaration":2329,"src":"1524:18:6"},"id":791,"nodeType":"InheritanceSpecifier","src":"1524:18:6"},{"baseName":{"id":792,"name":"IERC20Upgradeable","nameLocations":["1544:17:6"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"1544:17:6"},"id":793,"nodeType":"InheritanceSpecifier","src":"1544:17:6"},{"baseName":{"id":794,"name":"IERC20MetadataUpgradeable","nameLocations":["1563:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":1495,"src":"1563:25:6"},"id":795,"nodeType":"InheritanceSpecifier","src":"1563:25:6"}],"canonicalName":"ERC20Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":787,"nodeType":"StructuredDocumentation","src":"309:1170:6","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":1392,"linearizedBaseContracts":[1392,1495,1470,2329,580],"name":"ERC20Upgradeable","nameLocation":"1489:16:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":799,"mutability":"mutable","name":"_balances","nameLocation":"1631:9:6","nodeType":"VariableDeclaration","scope":1392,"src":"1595:45:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":798,"keyType":{"id":796,"name":"address","nodeType":"ElementaryTypeName","src":"1603:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1595:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"1614:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":805,"mutability":"mutable","name":"_allowances","nameLocation":"1703:11:6","nodeType":"VariableDeclaration","scope":1392,"src":"1647:67:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":804,"keyType":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"1655:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1647:47:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":803,"keyType":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"1674:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1666:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1685:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":807,"mutability":"mutable","name":"_totalSupply","nameLocation":"1737:12:6","nodeType":"VariableDeclaration","scope":1392,"src":"1721:28:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":806,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":809,"mutability":"mutable","name":"_name","nameLocation":"1771:5:6","nodeType":"VariableDeclaration","scope":1392,"src":"1756:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":808,"name":"string","nodeType":"ElementaryTypeName","src":"1756:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":811,"mutability":"mutable","name":"_symbol","nameLocation":"1797:7:6","nodeType":"VariableDeclaration","scope":1392,"src":"1782:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":810,"name":"string","nodeType":"ElementaryTypeName","src":"1782:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":826,"nodeType":"Block","src":"2206:55:6","statements":[{"expression":{"arguments":[{"id":822,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"2239:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":823,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"2246:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":821,"name":"__ERC20_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"2216:22:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2216:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":825,"nodeType":"ExpressionStatement","src":"2216:38:6"}]},"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"1811:298:6","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":827,"implemented":true,"kind":"function","modifiers":[{"id":819,"kind":"modifierInvocation","modifierName":{"id":818,"name":"onlyInitializing","nameLocations":["2189:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2189:16:6"},"nodeType":"ModifierInvocation","src":"2189:16:6"}],"name":"__ERC20_init","nameLocation":"2123:12:6","nodeType":"FunctionDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"name_","nameLocation":"2150:5:6","nodeType":"VariableDeclaration","scope":827,"src":"2136:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":813,"name":"string","nodeType":"ElementaryTypeName","src":"2136:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":816,"mutability":"mutable","name":"symbol_","nameLocation":"2171:7:6","nodeType":"VariableDeclaration","scope":827,"src":"2157:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":815,"name":"string","nodeType":"ElementaryTypeName","src":"2157:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2135:44:6"},"returnParameters":{"id":820,"nodeType":"ParameterList","parameters":[],"src":"2206:0:6"},"scope":1392,"src":"2114:147:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":844,"nodeType":"Block","src":"2369:57:6","statements":[{"expression":{"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":836,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"2379:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":837,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"2387:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2379:13:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":839,"nodeType":"ExpressionStatement","src":"2379:13:6"},{"expression":{"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":840,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"2402:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":841,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"2412:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2402:17:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":843,"nodeType":"ExpressionStatement","src":"2402:17:6"}]},"id":845,"implemented":true,"kind":"function","modifiers":[{"id":834,"kind":"modifierInvocation","modifierName":{"id":833,"name":"onlyInitializing","nameLocations":["2352:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2352:16:6"},"nodeType":"ModifierInvocation","src":"2352:16:6"}],"name":"__ERC20_init_unchained","nameLocation":"2276:22:6","nodeType":"FunctionDefinition","parameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"name_","nameLocation":"2313:5:6","nodeType":"VariableDeclaration","scope":845,"src":"2299:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":828,"name":"string","nodeType":"ElementaryTypeName","src":"2299:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":831,"mutability":"mutable","name":"symbol_","nameLocation":"2334:7:6","nodeType":"VariableDeclaration","scope":845,"src":"2320:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":830,"name":"string","nodeType":"ElementaryTypeName","src":"2320:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2298:44:6"},"returnParameters":{"id":835,"nodeType":"ParameterList","parameters":[],"src":"2369:0:6"},"scope":1392,"src":"2267:159:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1482],"body":{"id":854,"nodeType":"Block","src":"2560:29:6","statements":[{"expression":{"id":852,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"2577:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":851,"id":853,"nodeType":"Return","src":"2570:12:6"}]},"documentation":{"id":846,"nodeType":"StructuredDocumentation","src":"2432:54:6","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":855,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2500:4:6","nodeType":"FunctionDefinition","overrides":{"id":848,"nodeType":"OverrideSpecifier","overrides":[],"src":"2527:8:6"},"parameters":{"id":847,"nodeType":"ParameterList","parameters":[],"src":"2504:2:6"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":855,"src":"2545:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":849,"name":"string","nodeType":"ElementaryTypeName","src":"2545:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2544:15:6"},"scope":1392,"src":"2491:98:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1488],"body":{"id":864,"nodeType":"Block","src":"2773:31:6","statements":[{"expression":{"id":862,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"2790:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":861,"id":863,"nodeType":"Return","src":"2783:14:6"}]},"documentation":{"id":856,"nodeType":"StructuredDocumentation","src":"2595:102:6","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":865,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2711:6:6","nodeType":"FunctionDefinition","overrides":{"id":858,"nodeType":"OverrideSpecifier","overrides":[],"src":"2740:8:6"},"parameters":{"id":857,"nodeType":"ParameterList","parameters":[],"src":"2717:2:6"},"returnParameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":865,"src":"2758:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":859,"name":"string","nodeType":"ElementaryTypeName","src":"2758:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2757:15:6"},"scope":1392,"src":"2702:102:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1494],"body":{"id":874,"nodeType":"Block","src":"3493:26:6","statements":[{"expression":{"hexValue":"3138","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3510:2:6","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":871,"id":873,"nodeType":"Return","src":"3503:9:6"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"2810:613:6","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":875,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3437:8:6","nodeType":"FunctionDefinition","overrides":{"id":868,"nodeType":"OverrideSpecifier","overrides":[],"src":"3468:8:6"},"parameters":{"id":867,"nodeType":"ParameterList","parameters":[],"src":"3445:2:6"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":875,"src":"3486:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":869,"name":"uint8","nodeType":"ElementaryTypeName","src":"3486:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3485:7:6"},"scope":1392,"src":"3428:91:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1419],"body":{"id":884,"nodeType":"Block","src":"3649:36:6","statements":[{"expression":{"id":882,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"3666:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":881,"id":883,"nodeType":"Return","src":"3659:19:6"}]},"documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"3525:49:6","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":885,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3588:11:6","nodeType":"FunctionDefinition","overrides":{"id":878,"nodeType":"OverrideSpecifier","overrides":[],"src":"3622:8:6"},"parameters":{"id":877,"nodeType":"ParameterList","parameters":[],"src":"3599:2:6"},"returnParameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":885,"src":"3640:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":879,"name":"uint256","nodeType":"ElementaryTypeName","src":"3640:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3639:9:6"},"scope":1392,"src":"3579:106:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1427],"body":{"id":898,"nodeType":"Block","src":"3826:42:6","statements":[{"expression":{"baseExpression":{"id":894,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"3843:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":896,"indexExpression":{"id":895,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"3853:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3843:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":893,"id":897,"nodeType":"Return","src":"3836:25:6"}]},"documentation":{"id":886,"nodeType":"StructuredDocumentation","src":"3691:47:6","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":899,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3752:9:6","nodeType":"FunctionDefinition","overrides":{"id":890,"nodeType":"OverrideSpecifier","overrides":[],"src":"3799:8:6"},"parameters":{"id":889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":888,"mutability":"mutable","name":"account","nameLocation":"3770:7:6","nodeType":"VariableDeclaration","scope":899,"src":"3762:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"3762:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3761:17:6"},"returnParameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":899,"src":"3817:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":891,"name":"uint256","nodeType":"ElementaryTypeName","src":"3817:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3816:9:6"},"scope":1392,"src":"3743:125:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1437],"body":{"id":923,"nodeType":"Block","src":"4149:104:6","statements":[{"assignments":[911],"declarations":[{"constant":false,"id":911,"mutability":"mutable","name":"owner","nameLocation":"4167:5:6","nodeType":"VariableDeclaration","scope":923,"src":"4159:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"4159:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":914,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":912,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4175:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4175:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4159:28:6"},{"expression":{"arguments":[{"id":916,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"4207:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":917,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"4214:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":918,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"4218:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":915,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"4197:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4197:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":920,"nodeType":"ExpressionStatement","src":"4197:28:6"},{"expression":{"hexValue":"74727565","id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4242:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":909,"id":922,"nodeType":"Return","src":"4235:11:6"}]},"documentation":{"id":900,"nodeType":"StructuredDocumentation","src":"3874:185:6","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":924,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4073:8:6","nodeType":"FunctionDefinition","overrides":{"id":906,"nodeType":"OverrideSpecifier","overrides":[],"src":"4125:8:6"},"parameters":{"id":905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":902,"mutability":"mutable","name":"to","nameLocation":"4090:2:6","nodeType":"VariableDeclaration","scope":924,"src":"4082:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":901,"name":"address","nodeType":"ElementaryTypeName","src":"4082:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":904,"mutability":"mutable","name":"amount","nameLocation":"4102:6:6","nodeType":"VariableDeclaration","scope":924,"src":"4094:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":903,"name":"uint256","nodeType":"ElementaryTypeName","src":"4094:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4081:28:6"},"returnParameters":{"id":909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":924,"src":"4143:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":907,"name":"bool","nodeType":"ElementaryTypeName","src":"4143:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4142:6:6"},"scope":1392,"src":"4064:189:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1447],"body":{"id":941,"nodeType":"Block","src":"4409:51:6","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":935,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"4426:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":937,"indexExpression":{"id":936,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"4438:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":939,"indexExpression":{"id":938,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"4445:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4426:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":934,"id":940,"nodeType":"Return","src":"4419:34:6"}]},"documentation":{"id":925,"nodeType":"StructuredDocumentation","src":"4259:47:6","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":942,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"4320:9:6","nodeType":"FunctionDefinition","overrides":{"id":931,"nodeType":"OverrideSpecifier","overrides":[],"src":"4382:8:6"},"parameters":{"id":930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"owner","nameLocation":"4338:5:6","nodeType":"VariableDeclaration","scope":942,"src":"4330:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"4330:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":929,"mutability":"mutable","name":"spender","nameLocation":"4353:7:6","nodeType":"VariableDeclaration","scope":942,"src":"4345:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"4345:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4329:32:6"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":942,"src":"4400:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":932,"name":"uint256","nodeType":"ElementaryTypeName","src":"4400:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4399:9:6"},"scope":1392,"src":"4311:149:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1457],"body":{"id":966,"nodeType":"Block","src":"4857:108:6","statements":[{"assignments":[954],"declarations":[{"constant":false,"id":954,"mutability":"mutable","name":"owner","nameLocation":"4875:5:6","nodeType":"VariableDeclaration","scope":966,"src":"4867:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"4867:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":957,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":955,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4883:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4883:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4867:28:6"},{"expression":{"arguments":[{"id":959,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"4914:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":960,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"4921:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":961,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"4930:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":958,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"4905:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4905:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":963,"nodeType":"ExpressionStatement","src":"4905:32:6"},{"expression":{"hexValue":"74727565","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4954:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":952,"id":965,"nodeType":"Return","src":"4947:11:6"}]},"documentation":{"id":943,"nodeType":"StructuredDocumentation","src":"4466:297:6","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":967,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4777:7:6","nodeType":"FunctionDefinition","overrides":{"id":949,"nodeType":"OverrideSpecifier","overrides":[],"src":"4833:8:6"},"parameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":945,"mutability":"mutable","name":"spender","nameLocation":"4793:7:6","nodeType":"VariableDeclaration","scope":967,"src":"4785:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":944,"name":"address","nodeType":"ElementaryTypeName","src":"4785:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":947,"mutability":"mutable","name":"amount","nameLocation":"4810:6:6","nodeType":"VariableDeclaration","scope":967,"src":"4802:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":946,"name":"uint256","nodeType":"ElementaryTypeName","src":"4802:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4784:33:6"},"returnParameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":967,"src":"4851:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":950,"name":"bool","nodeType":"ElementaryTypeName","src":"4851:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4850:6:6"},"scope":1392,"src":"4768:197:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1469],"body":{"id":999,"nodeType":"Block","src":"5660:153:6","statements":[{"assignments":[981],"declarations":[{"constant":false,"id":981,"mutability":"mutable","name":"spender","nameLocation":"5678:7:6","nodeType":"VariableDeclaration","scope":999,"src":"5670:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"5670:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":984,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":982,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5688:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5688:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5670:30:6"},{"expression":{"arguments":[{"id":986,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"5726:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":987,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"5732:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":988,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"5741:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":985,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"5710:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5710:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":990,"nodeType":"ExpressionStatement","src":"5710:38:6"},{"expression":{"arguments":[{"id":992,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"5768:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":993,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"5774:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":994,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"5778:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":991,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"5758:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5758:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":996,"nodeType":"ExpressionStatement","src":"5758:27:6"},{"expression":{"hexValue":"74727565","id":997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5802:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":979,"id":998,"nodeType":"Return","src":"5795:11:6"}]},"documentation":{"id":968,"nodeType":"StructuredDocumentation","src":"4971:551:6","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":1000,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5536:12:6","nodeType":"FunctionDefinition","overrides":{"id":976,"nodeType":"OverrideSpecifier","overrides":[],"src":"5636:8:6"},"parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":970,"mutability":"mutable","name":"from","nameLocation":"5566:4:6","nodeType":"VariableDeclaration","scope":1000,"src":"5558:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"5558:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"to","nameLocation":"5588:2:6","nodeType":"VariableDeclaration","scope":1000,"src":"5580:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":971,"name":"address","nodeType":"ElementaryTypeName","src":"5580:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":974,"mutability":"mutable","name":"amount","nameLocation":"5608:6:6","nodeType":"VariableDeclaration","scope":1000,"src":"5600:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":973,"name":"uint256","nodeType":"ElementaryTypeName","src":"5600:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5548:72:6"},"returnParameters":{"id":979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1000,"src":"5654:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":977,"name":"bool","nodeType":"ElementaryTypeName","src":"5654:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5653:6:6"},"scope":1392,"src":"5527:286:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1028,"nodeType":"Block","src":"6302:140:6","statements":[{"assignments":[1011],"declarations":[{"constant":false,"id":1011,"mutability":"mutable","name":"owner","nameLocation":"6320:5:6","nodeType":"VariableDeclaration","scope":1028,"src":"6312:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1010,"name":"address","nodeType":"ElementaryTypeName","src":"6312:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1014,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1012,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6328:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6328:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6312:28:6"},{"expression":{"arguments":[{"id":1016,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"6359:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1017,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"6366:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1019,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"6385:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1020,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"6392:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1018,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"6375:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6375:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1022,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"6403:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6375:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1015,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"6350:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6350:64:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1025,"nodeType":"ExpressionStatement","src":"6350:64:6"},{"expression":{"hexValue":"74727565","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1009,"id":1027,"nodeType":"Return","src":"6424:11:6"}]},"documentation":{"id":1001,"nodeType":"StructuredDocumentation","src":"5819:384:6","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":1029,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"6217:17:6","nodeType":"FunctionDefinition","parameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"spender","nameLocation":"6243:7:6","nodeType":"VariableDeclaration","scope":1029,"src":"6235:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1002,"name":"address","nodeType":"ElementaryTypeName","src":"6235:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"addedValue","nameLocation":"6260:10:6","nodeType":"VariableDeclaration","scope":1029,"src":"6252:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1004,"name":"uint256","nodeType":"ElementaryTypeName","src":"6252:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6234:37:6"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1029,"src":"6296:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1007,"name":"bool","nodeType":"ElementaryTypeName","src":"6296:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6295:6:6"},"scope":1392,"src":"6208:234:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1069,"nodeType":"Block","src":"7028:328:6","statements":[{"assignments":[1040],"declarations":[{"constant":false,"id":1040,"mutability":"mutable","name":"owner","nameLocation":"7046:5:6","nodeType":"VariableDeclaration","scope":1069,"src":"7038:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"7038:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1043,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1041,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"7054:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7054:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7038:28:6"},{"assignments":[1045],"declarations":[{"constant":false,"id":1045,"mutability":"mutable","name":"currentAllowance","nameLocation":"7084:16:6","nodeType":"VariableDeclaration","scope":1069,"src":"7076:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"7076:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1050,"initialValue":{"arguments":[{"id":1047,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"7113:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1048,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7120:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1046,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"7103:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7103:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7076:52:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1052,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"7146:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1053,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"7166:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7146:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7183:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":1051,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7138:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7138:85:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1057,"nodeType":"ExpressionStatement","src":"7138:85:6"},{"id":1066,"nodeType":"UncheckedBlock","src":"7233:95:6","statements":[{"expression":{"arguments":[{"id":1059,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"7266:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1060,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"7273:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1061,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"7282:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1062,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"7301:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7282:34:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1058,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"7257:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7257:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1065,"nodeType":"ExpressionStatement","src":"7257:60:6"}]},{"expression":{"hexValue":"74727565","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7345:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1038,"id":1068,"nodeType":"Return","src":"7338:11:6"}]},"documentation":{"id":1030,"nodeType":"StructuredDocumentation","src":"6448:476:6","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":1070,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6938:17:6","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"spender","nameLocation":"6964:7:6","nodeType":"VariableDeclaration","scope":1070,"src":"6956:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1031,"name":"address","nodeType":"ElementaryTypeName","src":"6956:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"subtractedValue","nameLocation":"6981:15:6","nodeType":"VariableDeclaration","scope":1070,"src":"6973:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1033,"name":"uint256","nodeType":"ElementaryTypeName","src":"6973:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6955:42:6"},"returnParameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1070,"src":"7022:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1036,"name":"bool","nodeType":"ElementaryTypeName","src":"7022:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7021:6:6"},"scope":1392,"src":"6929:427:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1146,"nodeType":"Block","src":"7918:710:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"7936:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7952:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7944:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1082,"name":"address","nodeType":"ElementaryTypeName","src":"7944:7:6","typeDescriptions":{}}},"id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7944:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7936:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7956:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":1080,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7928:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7928:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1089,"nodeType":"ExpressionStatement","src":"7928:68:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1091,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"8014:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8028:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8020:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"8020:7:6","typeDescriptions":{}}},"id":1095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8020:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8014:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8032:37:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":1090,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8006:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8006:64:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1099,"nodeType":"ExpressionStatement","src":"8006:64:6"},{"expression":{"arguments":[{"id":1101,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"8102:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1102,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"8108:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1103,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8112:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1100,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"8081:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8081:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1105,"nodeType":"ExpressionStatement","src":"8081:38:6"},{"assignments":[1107],"declarations":[{"constant":false,"id":1107,"mutability":"mutable","name":"fromBalance","nameLocation":"8138:11:6","nodeType":"VariableDeclaration","scope":1146,"src":"8130:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"8130:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1111,"initialValue":{"baseExpression":{"id":1108,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"8152:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1110,"indexExpression":{"id":1109,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"8162:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8152:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8130:37:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1113,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"8185:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1114,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8200:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8185:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8208:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":1112,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8177:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8177:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1118,"nodeType":"ExpressionStatement","src":"8177:72:6"},{"id":1133,"nodeType":"UncheckedBlock","src":"8259:273:6","statements":[{"expression":{"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1119,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"8283:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1121,"indexExpression":{"id":1120,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"8293:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8283:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1122,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"8301:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1123,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8315:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8301:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8283:38:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1126,"nodeType":"ExpressionStatement","src":"8283:38:6"},{"expression":{"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1127,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"8498:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1129,"indexExpression":{"id":1128,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"8508:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8498:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1130,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8515:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8498:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1132,"nodeType":"ExpressionStatement","src":"8498:23:6"}]},{"eventCall":{"arguments":[{"id":1135,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"8556:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1136,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"8562:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1137,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8566:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1134,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"8547:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8547:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1139,"nodeType":"EmitStatement","src":"8542:31:6"},{"expression":{"arguments":[{"id":1141,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"8604:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1142,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"8610:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1143,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"8614:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1140,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"8584:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8584:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1145,"nodeType":"ExpressionStatement","src":"8584:37:6"}]},"documentation":{"id":1071,"nodeType":"StructuredDocumentation","src":"7362:443:6","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":1147,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7819:9:6","nodeType":"FunctionDefinition","parameters":{"id":1078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1073,"mutability":"mutable","name":"from","nameLocation":"7846:4:6","nodeType":"VariableDeclaration","scope":1147,"src":"7838:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1072,"name":"address","nodeType":"ElementaryTypeName","src":"7838:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1075,"mutability":"mutable","name":"to","nameLocation":"7868:2:6","nodeType":"VariableDeclaration","scope":1147,"src":"7860:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"7860:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1077,"mutability":"mutable","name":"amount","nameLocation":"7888:6:6","nodeType":"VariableDeclaration","scope":1147,"src":"7880:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1076,"name":"uint256","nodeType":"ElementaryTypeName","src":"7880:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7828:72:6"},"returnParameters":{"id":1079,"nodeType":"ParameterList","parameters":[],"src":"7918:0:6"},"scope":1392,"src":"7810:818:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1203,"nodeType":"Block","src":"8969:470:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1156,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"8987:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8998:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1157,"name":"address","nodeType":"ElementaryTypeName","src":"8998:7:6","typeDescriptions":{}}},"id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8998:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8987:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9010:33:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":1155,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8979:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8979:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1164,"nodeType":"ExpressionStatement","src":"8979:65:6"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9084:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9076:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1166,"name":"address","nodeType":"ElementaryTypeName","src":"9076:7:6","typeDescriptions":{}}},"id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9076:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1170,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"9088:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1171,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"9097:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1165,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"9055:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9055:49:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1173,"nodeType":"ExpressionStatement","src":"9055:49:6"},{"expression":{"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1174,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"9115:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1175,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"9131:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9115:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1177,"nodeType":"ExpressionStatement","src":"9115:22:6"},{"id":1184,"nodeType":"UncheckedBlock","src":"9147:175:6","statements":[{"expression":{"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1178,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"9283:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1180,"indexExpression":{"id":1179,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"9293:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9283:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1181,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"9305:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9283:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1183,"nodeType":"ExpressionStatement","src":"9283:28:6"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9353:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9345:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"9345:7:6","typeDescriptions":{}}},"id":1189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9345:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1190,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"9357:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1191,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"9366:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1185,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"9336:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9336:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1193,"nodeType":"EmitStatement","src":"9331:42:6"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9404:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"9404:7:6","typeDescriptions":{}}},"id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9404:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1199,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"9416:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1200,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"9425:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1194,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"9384:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9384:48:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1202,"nodeType":"ExpressionStatement","src":"9384:48:6"}]},"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"8634:265:6","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":1204,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8913:5:6","nodeType":"FunctionDefinition","parameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"account","nameLocation":"8927:7:6","nodeType":"VariableDeclaration","scope":1204,"src":"8919:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"8919:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1152,"mutability":"mutable","name":"amount","nameLocation":"8944:6:6","nodeType":"VariableDeclaration","scope":1204,"src":"8936:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1151,"name":"uint256","nodeType":"ElementaryTypeName","src":"8936:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8918:33:6"},"returnParameters":{"id":1154,"nodeType":"ParameterList","parameters":[],"src":"8969:0:6"},"scope":1392,"src":"8904:535:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1275,"nodeType":"Block","src":"9824:594:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1213,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"9842:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9861:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9853:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"9853:7:6","typeDescriptions":{}}},"id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9853:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9842:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":1219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9865:35:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":1212,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9834:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9834:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1221,"nodeType":"ExpressionStatement","src":"9834:67:6"},{"expression":{"arguments":[{"id":1223,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"9933:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9950:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9942:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1224,"name":"address","nodeType":"ElementaryTypeName","src":"9942:7:6","typeDescriptions":{}}},"id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9942:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1228,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"9954:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1222,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"9912:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9912:49:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1230,"nodeType":"ExpressionStatement","src":"9912:49:6"},{"assignments":[1232],"declarations":[{"constant":false,"id":1232,"mutability":"mutable","name":"accountBalance","nameLocation":"9980:14:6","nodeType":"VariableDeclaration","scope":1275,"src":"9972:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1236,"initialValue":{"baseExpression":{"id":1233,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"9997:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1235,"indexExpression":{"id":1234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"10007:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9997:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9972:43:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1238,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"10033:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1239,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"10051:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10033:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10059:36:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":1237,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10025:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10025:71:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1243,"nodeType":"ExpressionStatement","src":"10025:71:6"},{"id":1256,"nodeType":"UncheckedBlock","src":"10106:194:6","statements":[{"expression":{"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1244,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10130:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1246,"indexExpression":{"id":1245,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"10140:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10130:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"10151:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1248,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"10168:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10151:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10130:44:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1251,"nodeType":"ExpressionStatement","src":"10130:44:6"},{"expression":{"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1252,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"10267:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1253,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"10283:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10267:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1255,"nodeType":"ExpressionStatement","src":"10267:22:6"}]},{"eventCall":{"arguments":[{"id":1258,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"10324:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10341:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10333:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1259,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:6","typeDescriptions":{}}},"id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10333:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1263,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"10345:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1257,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"10315:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10315:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1265,"nodeType":"EmitStatement","src":"10310:42:6"},{"expression":{"arguments":[{"id":1267,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"10383:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10392:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1268,"name":"address","nodeType":"ElementaryTypeName","src":"10392:7:6","typeDescriptions":{}}},"id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10392:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1272,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"10404:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1266,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"10363:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10363:48:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1274,"nodeType":"ExpressionStatement","src":"10363:48:6"}]},"documentation":{"id":1205,"nodeType":"StructuredDocumentation","src":"9445:309:6","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1276,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9768:5:6","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1207,"mutability":"mutable","name":"account","nameLocation":"9782:7:6","nodeType":"VariableDeclaration","scope":1276,"src":"9774:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1206,"name":"address","nodeType":"ElementaryTypeName","src":"9774:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"amount","nameLocation":"9799:6:6","nodeType":"VariableDeclaration","scope":1276,"src":"9791:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1208,"name":"uint256","nodeType":"ElementaryTypeName","src":"9791:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9773:33:6"},"returnParameters":{"id":1211,"nodeType":"ParameterList","parameters":[],"src":"9824:0:6"},"scope":1392,"src":"9759:659:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1320,"nodeType":"Block","src":"10954:257:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1287,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"10972:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10989:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10981:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1288,"name":"address","nodeType":"ElementaryTypeName","src":"10981:7:6","typeDescriptions":{}}},"id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10981:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10972:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10993:38:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1286,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10964:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10964:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1295,"nodeType":"ExpressionStatement","src":"10964:68:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1297,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"11050:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11069:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11061:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1298,"name":"address","nodeType":"ElementaryTypeName","src":"11061:7:6","typeDescriptions":{}}},"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11061:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11050:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11073:36:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1296,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11042:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1305,"nodeType":"ExpressionStatement","src":"11042:68:6"},{"expression":{"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1306,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"11121:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1309,"indexExpression":{"id":1307,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"11133:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11121:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1310,"indexExpression":{"id":1308,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"11140:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11121:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1311,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"11151:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11121:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1313,"nodeType":"ExpressionStatement","src":"11121:36:6"},{"eventCall":{"arguments":[{"id":1315,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"11181:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1316,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"11188:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1317,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"11197:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1314,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"11172:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11172:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1319,"nodeType":"EmitStatement","src":"11167:37:6"}]},"documentation":{"id":1277,"nodeType":"StructuredDocumentation","src":"10424:412:6","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":1321,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10850:8:6","nodeType":"FunctionDefinition","parameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1279,"mutability":"mutable","name":"owner","nameLocation":"10876:5:6","nodeType":"VariableDeclaration","scope":1321,"src":"10868:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1278,"name":"address","nodeType":"ElementaryTypeName","src":"10868:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1281,"mutability":"mutable","name":"spender","nameLocation":"10899:7:6","nodeType":"VariableDeclaration","scope":1321,"src":"10891:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1280,"name":"address","nodeType":"ElementaryTypeName","src":"10891:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"amount","nameLocation":"10924:6:6","nodeType":"VariableDeclaration","scope":1321,"src":"10916:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1282,"name":"uint256","nodeType":"ElementaryTypeName","src":"10916:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10858:78:6"},"returnParameters":{"id":1285,"nodeType":"ParameterList","parameters":[],"src":"10954:0:6"},"scope":1392,"src":"10841:370:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1363,"nodeType":"Block","src":"11612:321:6","statements":[{"assignments":[1332],"declarations":[{"constant":false,"id":1332,"mutability":"mutable","name":"currentAllowance","nameLocation":"11630:16:6","nodeType":"VariableDeclaration","scope":1363,"src":"11622:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1331,"name":"uint256","nodeType":"ElementaryTypeName","src":"11622:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1337,"initialValue":{"arguments":[{"id":1334,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"11659:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1335,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"11666:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1333,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"11649:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11649:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11622:52:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1338,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"11688:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11713:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1340,"name":"uint256","nodeType":"ElementaryTypeName","src":"11713:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1339,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11708:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11708:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11722:3:6","memberName":"max","nodeType":"MemberAccess","src":"11708:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11688:37:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1362,"nodeType":"IfStatement","src":"11684:243:6","trueBody":{"id":1361,"nodeType":"Block","src":"11727:200:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1346,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"11749:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1347,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"11769:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11749:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11777:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":1345,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11741:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11741:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1351,"nodeType":"ExpressionStatement","src":"11741:68:6"},{"id":1360,"nodeType":"UncheckedBlock","src":"11823:94:6","statements":[{"expression":{"arguments":[{"id":1353,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"11860:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1354,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"11867:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1355,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"11876:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1356,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"11895:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11876:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1352,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"11851:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1359,"nodeType":"ExpressionStatement","src":"11851:51:6"}]}]}}]},"documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"11217:270:6","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":1364,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11501:15:6","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"owner","nameLocation":"11534:5:6","nodeType":"VariableDeclaration","scope":1364,"src":"11526:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1323,"name":"address","nodeType":"ElementaryTypeName","src":"11526:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"spender","nameLocation":"11557:7:6","nodeType":"VariableDeclaration","scope":1364,"src":"11549:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"11549:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"amount","nameLocation":"11582:6:6","nodeType":"VariableDeclaration","scope":1364,"src":"11574:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1327,"name":"uint256","nodeType":"ElementaryTypeName","src":"11574:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11516:78:6"},"returnParameters":{"id":1330,"nodeType":"ParameterList","parameters":[],"src":"11612:0:6"},"scope":1392,"src":"11492:441:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"12636:2:6","statements":[]},"documentation":{"id":1365,"nodeType":"StructuredDocumentation","src":"11939:573:6","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12526:20:6","nodeType":"FunctionDefinition","parameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"from","nameLocation":"12564:4:6","nodeType":"VariableDeclaration","scope":1375,"src":"12556:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1366,"name":"address","nodeType":"ElementaryTypeName","src":"12556:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1369,"mutability":"mutable","name":"to","nameLocation":"12586:2:6","nodeType":"VariableDeclaration","scope":1375,"src":"12578:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1368,"name":"address","nodeType":"ElementaryTypeName","src":"12578:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1371,"mutability":"mutable","name":"amount","nameLocation":"12606:6:6","nodeType":"VariableDeclaration","scope":1375,"src":"12598:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"12598:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12546:72:6"},"returnParameters":{"id":1373,"nodeType":"ParameterList","parameters":[],"src":"12636:0:6"},"scope":1392,"src":"12517:121:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1385,"nodeType":"Block","src":"13344:2:6","statements":[]},"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"12644:577:6","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1386,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"13235:19:6","nodeType":"FunctionDefinition","parameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"from","nameLocation":"13272:4:6","nodeType":"VariableDeclaration","scope":1386,"src":"13264:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"13264:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"to","nameLocation":"13294:2:6","nodeType":"VariableDeclaration","scope":1386,"src":"13286:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1379,"name":"address","nodeType":"ElementaryTypeName","src":"13286:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"amount","nameLocation":"13314:6:6","nodeType":"VariableDeclaration","scope":1386,"src":"13306:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1381,"name":"uint256","nodeType":"ElementaryTypeName","src":"13306:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13254:72:6"},"returnParameters":{"id":1384,"nodeType":"ParameterList","parameters":[],"src":"13344:0:6"},"scope":1392,"src":"13226:120:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1387,"nodeType":"StructuredDocumentation","src":"13352:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1391,"mutability":"mutable","name":"__gap","nameLocation":"13631:5:6","nodeType":"VariableDeclaration","scope":1392,"src":"13611:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage","typeString":"uint256[45]"},"typeName":{"baseType":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"13611:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1390,"length":{"hexValue":"3435","id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13619:2:6","typeDescriptions":{"typeIdentifier":"t_rational_45_by_1","typeString":"int_const 45"},"value":"45"},"nodeType":"ArrayTypeName","src":"13611:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$45_storage_ptr","typeString":"uint256[45]"}},"visibility":"private"}],"scope":1393,"src":"1480:12159:6","usedErrors":[]}],"src":"105:13535:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[1470]},"id":1471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1394,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"131:70:7","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1470,"linearizedBaseContracts":[1470],"name":"IERC20Upgradeable","nameLocation":"212:17:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1396,"nodeType":"StructuredDocumentation","src":"236:158:7","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1404,"name":"Transfer","nameLocation":"405:8:7","nodeType":"EventDefinition","parameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1398,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:7","nodeType":"VariableDeclaration","scope":1404,"src":"414:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1397,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1400,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:7","nodeType":"VariableDeclaration","scope":1404,"src":"436:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1399,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1402,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:7","nodeType":"VariableDeclaration","scope":1404,"src":"456:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:7"},"src":"399:72:7"},{"anonymous":false,"documentation":{"id":1405,"nodeType":"StructuredDocumentation","src":"477:148:7","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1413,"name":"Approval","nameLocation":"636:8:7","nodeType":"EventDefinition","parameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:7","nodeType":"VariableDeclaration","scope":1413,"src":"645:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1406,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1409,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:7","nodeType":"VariableDeclaration","scope":1413,"src":"668:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1408,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1411,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:7","nodeType":"VariableDeclaration","scope":1413,"src":"693:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1410,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:7"},"src":"630:78:7"},{"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"714:66:7","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1419,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:7","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[],"src":"805:2:7"},"returnParameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1419,"src":"831:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:7"},"scope":1470,"src":"785:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1420,"nodeType":"StructuredDocumentation","src":"846:72:7","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1427,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:7","nodeType":"FunctionDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1422,"mutability":"mutable","name":"account","nameLocation":"950:7:7","nodeType":"VariableDeclaration","scope":1427,"src":"942:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1421,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:7"},"returnParameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1427,"src":"982:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1424,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:7"},"scope":1470,"src":"923:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"997:202:7","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1437,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:7","nodeType":"FunctionDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"to","nameLocation":"1230:2:7","nodeType":"VariableDeclaration","scope":1437,"src":"1222:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1429,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1432,"mutability":"mutable","name":"amount","nameLocation":"1242:6:7","nodeType":"VariableDeclaration","scope":1437,"src":"1234:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:7"},"returnParameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1437,"src":"1268:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1434,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:7"},"scope":1470,"src":"1204:70:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1438,"nodeType":"StructuredDocumentation","src":"1280:264:7","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1447,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:7","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"owner","nameLocation":"1576:5:7","nodeType":"VariableDeclaration","scope":1447,"src":"1568:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1439,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"spender","nameLocation":"1591:7:7","nodeType":"VariableDeclaration","scope":1447,"src":"1583:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1441,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:7"},"returnParameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1447,"src":"1623:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1444,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:7"},"scope":1470,"src":"1549:83:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1448,"nodeType":"StructuredDocumentation","src":"1638:642:7","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1457,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:7","nodeType":"FunctionDefinition","parameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"spender","nameLocation":"2310:7:7","nodeType":"VariableDeclaration","scope":1457,"src":"2302:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1449,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1452,"mutability":"mutable","name":"amount","nameLocation":"2327:6:7","nodeType":"VariableDeclaration","scope":1457,"src":"2319:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1451,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:7"},"returnParameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1457,"src":"2353:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1454,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:7"},"scope":1470,"src":"2285:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1458,"nodeType":"StructuredDocumentation","src":"2365:287:7","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1469,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:7","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1460,"mutability":"mutable","name":"from","nameLocation":"2696:4:7","nodeType":"VariableDeclaration","scope":1469,"src":"2688:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1459,"name":"address","nodeType":"ElementaryTypeName","src":"2688:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"to","nameLocation":"2718:2:7","nodeType":"VariableDeclaration","scope":1469,"src":"2710:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1461,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"amount","nameLocation":"2738:6:7","nodeType":"VariableDeclaration","scope":1469,"src":"2730:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1463,"name":"uint256","nodeType":"ElementaryTypeName","src":"2730:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:72:7"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1469,"src":"2769:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1466,"name":"bool","nodeType":"ElementaryTypeName","src":"2769:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2768:6:7"},"scope":1470,"src":"2657:118:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1471,"src":"202:2575:7","usedErrors":[]}],"src":"106:2672:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol","exportedSymbols":{"IERC20MetadataUpgradeable":[1495],"IERC20Upgradeable":[1470]},"id":1496,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1472,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":1473,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1496,"sourceUnit":1471,"src":"135:34:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1475,"name":"IERC20Upgradeable","nameLocations":["327:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"327:17:8"},"id":1476,"nodeType":"InheritanceSpecifier","src":"327:17:8"}],"canonicalName":"IERC20MetadataUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"171:116:8","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":1495,"linearizedBaseContracts":[1495,1470],"name":"IERC20MetadataUpgradeable","nameLocation":"298:25:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"351:54:8","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1482,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"419:4:8","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"423:2:8"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1482,"src":"449:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1479,"name":"string","nodeType":"ElementaryTypeName","src":"449:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"448:15:8"},"scope":1495,"src":"410:54:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1483,"nodeType":"StructuredDocumentation","src":"470:56:8","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1488,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"540:6:8","nodeType":"FunctionDefinition","parameters":{"id":1484,"nodeType":"ParameterList","parameters":[],"src":"546:2:8"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1488,"src":"572:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1485,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"571:15:8"},"scope":1495,"src":"531:56:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1489,"nodeType":"StructuredDocumentation","src":"593:65:8","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1494,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"672:8:8","nodeType":"FunctionDefinition","parameters":{"id":1490,"nodeType":"ParameterList","parameters":[],"src":"680:2:8"},"returnParameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1494,"src":"706:5:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1491,"name":"uint8","nodeType":"ElementaryTypeName","src":"706:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"705:7:8"},"scope":1495,"src":"663:50:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1496,"src":"288:427:8","usedErrors":[]}],"src":"110:606:8"},"id":8},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"ContextUpgradeable":[2329],"CountersUpgradeable":[2403],"ECDSAUpgradeable":[2939],"EIP712Upgradeable":[3089],"ERC20PermitUpgradeable":[1686],"ERC20Upgradeable":[1392],"IERC20MetadataUpgradeable":[1495],"IERC20PermitUpgradeable":[1722],"IERC20Upgradeable":[1470],"Initializable":[580],"MathUpgradeable":[4010],"StringsUpgradeable":[2578]},"id":1687,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1497,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"./draft-IERC20PermitUpgradeable.sol","id":1498,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1687,"sourceUnit":1723,"src":"153:45:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"../ERC20Upgradeable.sol","id":1499,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1687,"sourceUnit":1393,"src":"199:33:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"../../../utils/cryptography/ECDSAUpgradeable.sol","id":1500,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1687,"sourceUnit":2940,"src":"233:58:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","file":"../../../utils/cryptography/EIP712Upgradeable.sol","id":1501,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1687,"sourceUnit":3090,"src":"292:59:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","file":"../../../utils/CountersUpgradeable.sol","id":1502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1687,"sourceUnit":2404,"src":"352:48:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":1503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1687,"sourceUnit":581,"src":"401:48:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1505,"name":"Initializable","nameLocations":["1043:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"1043:13:9"},"id":1506,"nodeType":"InheritanceSpecifier","src":"1043:13:9"},{"baseName":{"id":1507,"name":"ERC20Upgradeable","nameLocations":["1058:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"1058:16:9"},"id":1508,"nodeType":"InheritanceSpecifier","src":"1058:16:9"},{"baseName":{"id":1509,"name":"IERC20PermitUpgradeable","nameLocations":["1076:23:9"],"nodeType":"IdentifierPath","referencedDeclaration":1722,"src":"1076:23:9"},"id":1510,"nodeType":"InheritanceSpecifier","src":"1076:23:9"},{"baseName":{"id":1511,"name":"EIP712Upgradeable","nameLocations":["1101:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":3089,"src":"1101:17:9"},"id":1512,"nodeType":"InheritanceSpecifier","src":"1101:17:9"}],"canonicalName":"ERC20PermitUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1504,"nodeType":"StructuredDocumentation","src":"451:547:9","text":" @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._\n @custom:storage-size 51"},"fullyImplemented":true,"id":1686,"linearizedBaseContracts":[1686,3089,1722,1392,1495,1470,2329,580],"name":"ERC20PermitUpgradeable","nameLocation":"1017:22:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1516,"libraryName":{"id":1513,"name":"CountersUpgradeable","nameLocations":["1131:19:9"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"1131:19:9"},"nodeType":"UsingForDirective","src":"1125:58:9","typeName":{"id":1515,"nodeType":"UserDefinedTypeName","pathNode":{"id":1514,"name":"CountersUpgradeable.Counter","nameLocations":["1155:19:9","1175:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2335,"src":"1155:27:9"},"referencedDeclaration":2335,"src":"1155:27:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},{"constant":false,"id":1521,"mutability":"mutable","name":"_nonces","nameLocation":"1245:7:9","nodeType":"VariableDeclaration","scope":1686,"src":"1189:63:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2335_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"typeName":{"id":1520,"keyType":{"id":1517,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1189:47:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2335_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter)"},"valueType":{"id":1519,"nodeType":"UserDefinedTypeName","pathNode":{"id":1518,"name":"CountersUpgradeable.Counter","nameLocations":["1208:19:9","1228:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2335,"src":"1208:27:9"},"referencedDeclaration":2335,"src":"1208:27:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}}},"visibility":"private"},{"constant":true,"id":1526,"mutability":"constant","name":"_PERMIT_TYPEHASH","nameLocation":"1336:16:9","nodeType":"VariableDeclaration","scope":1686,"src":"1311:147:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1311:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":1524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1373:84:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":1523,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1363:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1363:95:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":1527,"nodeType":"StructuredDocumentation","src":"1464:254:9","text":" @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"},"id":1529,"mutability":"mutable","name":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","nameLocation":"1791:32:9","nodeType":"VariableDeclaration","scope":1686,"src":"1775:48:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1775:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":1542,"nodeType":"Block","src":"2129:51:9","statements":[{"expression":{"arguments":[{"id":1538,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2163:4:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2169:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""}],"id":1537,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"2139:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2139:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1541,"nodeType":"ExpressionStatement","src":"2139:34:9"}]},"documentation":{"id":1530,"nodeType":"StructuredDocumentation","src":"1830:220:9","text":" @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."},"id":1543,"implemented":true,"kind":"function","modifiers":[{"id":1535,"kind":"modifierInvocation","modifierName":{"id":1534,"name":"onlyInitializing","nameLocations":["2112:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2112:16:9"},"nodeType":"ModifierInvocation","src":"2112:16:9"}],"name":"__ERC20Permit_init","nameLocation":"2064:18:9","nodeType":"FunctionDefinition","parameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"name","nameLocation":"2097:4:9","nodeType":"VariableDeclaration","scope":1543,"src":"2083:18:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1531,"name":"string","nodeType":"ElementaryTypeName","src":"2083:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2082:20:9"},"returnParameters":{"id":1536,"nodeType":"ParameterList","parameters":[],"src":"2129:0:9"},"scope":1686,"src":"2055:125:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1550,"nodeType":"Block","src":"2265:2:9","statements":[]},"id":1551,"implemented":true,"kind":"function","modifiers":[{"id":1548,"kind":"modifierInvocation","modifierName":{"id":1547,"name":"onlyInitializing","nameLocations":["2248:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2248:16:9"},"nodeType":"ModifierInvocation","src":"2248:16:9"}],"name":"__ERC20Permit_init_unchained","nameLocation":"2195:28:9","nodeType":"FunctionDefinition","parameters":{"id":1546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1551,"src":"2224:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1544,"name":"string","nodeType":"ElementaryTypeName","src":"2224:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2223:15:9"},"returnParameters":{"id":1549,"nodeType":"ParameterList","parameters":[],"src":"2265:0:9"},"scope":1686,"src":"2186:81:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1707],"body":{"id":1623,"nodeType":"Block","src":"2526:439:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1571,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2544:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2550:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"2544:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1573,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"2563:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2544:27:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2573:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""},"value":"ERC20Permit: expired deadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""}],"id":1570,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2536:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2536:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1577,"nodeType":"ExpressionStatement","src":"2536:69:9"},{"assignments":[1579],"declarations":[{"constant":false,"id":1579,"mutability":"mutable","name":"structHash","nameLocation":"2624:10:9","nodeType":"VariableDeclaration","scope":1623,"src":"2616:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2616:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1593,"initialValue":{"arguments":[{"arguments":[{"id":1583,"name":"_PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"2658:16:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1584,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"2676:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1585,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"2683:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"2692:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1588,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"2709:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1587,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"2699:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1590,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"2717:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1581,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2647:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2651:6:9","memberName":"encode","nodeType":"MemberAccess","src":"2647:10:9","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:79:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1580,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2637:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2637:90:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2616:111:9"},{"assignments":[1595],"declarations":[{"constant":false,"id":1595,"mutability":"mutable","name":"hash","nameLocation":"2746:4:9","nodeType":"VariableDeclaration","scope":1623,"src":"2738:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1594,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2738:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1599,"initialValue":{"arguments":[{"id":1597,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"2770:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1596,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"2753:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2753:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2738:43:9"},{"assignments":[1601],"declarations":[{"constant":false,"id":1601,"mutability":"mutable","name":"signer","nameLocation":"2800:6:9","nodeType":"VariableDeclaration","scope":1623,"src":"2792:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1600,"name":"address","nodeType":"ElementaryTypeName","src":"2792:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1609,"initialValue":{"arguments":[{"id":1604,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"2834:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1605,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"2840:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1606,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"2843:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1607,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2846:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1602,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"2809:16:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2939_$","typeString":"type(library ECDSAUpgradeable)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2826:7:9","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2879,"src":"2809:24:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2809:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2792:56:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1611,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"2866:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1612,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"2876:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2866:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2883:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""},"value":"ERC20Permit: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""}],"id":1610,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2858:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:58:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1616,"nodeType":"ExpressionStatement","src":"2858:58:9"},{"expression":{"arguments":[{"id":1618,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"2936:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1619,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"2943:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1620,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"2952:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1617,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"2927:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2927:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1622,"nodeType":"ExpressionStatement","src":"2927:31:9"}]},"documentation":{"id":1552,"nodeType":"StructuredDocumentation","src":"2273:50:9","text":" @dev See {IERC20Permit-permit}."},"functionSelector":"d505accf","id":1624,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"2337:6:9","nodeType":"FunctionDefinition","overrides":{"id":1568,"nodeType":"OverrideSpecifier","overrides":[],"src":"2517:8:9"},"parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"owner","nameLocation":"2361:5:9","nodeType":"VariableDeclaration","scope":1624,"src":"2353:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1553,"name":"address","nodeType":"ElementaryTypeName","src":"2353:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"spender","nameLocation":"2384:7:9","nodeType":"VariableDeclaration","scope":1624,"src":"2376:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1555,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1558,"mutability":"mutable","name":"value","nameLocation":"2409:5:9","nodeType":"VariableDeclaration","scope":1624,"src":"2401:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1557,"name":"uint256","nodeType":"ElementaryTypeName","src":"2401:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1560,"mutability":"mutable","name":"deadline","nameLocation":"2432:8:9","nodeType":"VariableDeclaration","scope":1624,"src":"2424:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1559,"name":"uint256","nodeType":"ElementaryTypeName","src":"2424:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1562,"mutability":"mutable","name":"v","nameLocation":"2456:1:9","nodeType":"VariableDeclaration","scope":1624,"src":"2450:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1561,"name":"uint8","nodeType":"ElementaryTypeName","src":"2450:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"r","nameLocation":"2475:1:9","nodeType":"VariableDeclaration","scope":1624,"src":"2467:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2467:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"s","nameLocation":"2494:1:9","nodeType":"VariableDeclaration","scope":1624,"src":"2486:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2486:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2343:158:9"},"returnParameters":{"id":1569,"nodeType":"ParameterList","parameters":[],"src":"2526:0:9"},"scope":1686,"src":"2328:637:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1715],"body":{"id":1639,"nodeType":"Block","src":"3104:48:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":1633,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"3121:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2335_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":1635,"indexExpression":{"id":1634,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"3129:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3121:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"id":1636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3136:7:9","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2347,"src":"3121:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2335_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2335_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3121:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1632,"id":1638,"nodeType":"Return","src":"3114:31:9"}]},"documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"2971:50:9","text":" @dev See {IERC20Permit-nonces}."},"functionSelector":"7ecebe00","id":1640,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3035:6:9","nodeType":"FunctionDefinition","overrides":{"id":1629,"nodeType":"OverrideSpecifier","overrides":[],"src":"3077:8:9"},"parameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"owner","nameLocation":"3050:5:9","nodeType":"VariableDeclaration","scope":1640,"src":"3042:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1626,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3041:15:9"},"returnParameters":{"id":1632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1640,"src":"3095:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1630,"name":"uint256","nodeType":"ElementaryTypeName","src":"3095:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3094:9:9"},"scope":1686,"src":"3026:126:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1721],"body":{"id":1650,"nodeType":"Block","src":"3345:44:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1647,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"3362:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3362:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1646,"id":1649,"nodeType":"Return","src":"3355:27:9"}]},"documentation":{"id":1641,"nodeType":"StructuredDocumentation","src":"3158:60:9","text":" @dev See {IERC20Permit-DOMAIN_SEPARATOR}."},"functionSelector":"3644e515","id":1651,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3285:16:9","nodeType":"FunctionDefinition","overrides":{"id":1643,"nodeType":"OverrideSpecifier","overrides":[],"src":"3318:8:9"},"parameters":{"id":1642,"nodeType":"ParameterList","parameters":[],"src":"3301:2:9"},"returnParameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1651,"src":"3336:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3336:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3335:9:9"},"scope":1686,"src":"3276:113:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1679,"nodeType":"Block","src":"3597:137:9","statements":[{"assignments":[1663],"declarations":[{"constant":false,"id":1663,"mutability":"mutable","name":"nonce","nameLocation":"3643:5:9","nodeType":"VariableDeclaration","scope":1679,"src":"3607:41:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":1662,"nodeType":"UserDefinedTypeName","pathNode":{"id":1661,"name":"CountersUpgradeable.Counter","nameLocations":["3607:19:9","3627:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2335,"src":"3607:27:9"},"referencedDeclaration":2335,"src":"3607:27:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"id":1667,"initialValue":{"baseExpression":{"id":1664,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"3651:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$2335_storage_$","typeString":"mapping(address => struct CountersUpgradeable.Counter storage ref)"}},"id":1666,"indexExpression":{"id":1665,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"3659:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3651:14:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage","typeString":"struct CountersUpgradeable.Counter storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3607:58:9"},{"expression":{"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1668,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"3675:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1669,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"3685:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1670,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3691:7:9","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2347,"src":"3685:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2335_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2335_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3685:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3675:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1673,"nodeType":"ExpressionStatement","src":"3675:25:9"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1674,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"3710:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":1676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3716:9:9","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":2361,"src":"3710:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$2335_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2335_storage_ptr_$","typeString":"function (struct CountersUpgradeable.Counter storage pointer)"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1678,"nodeType":"ExpressionStatement","src":"3710:17:9"}]},"documentation":{"id":1652,"nodeType":"StructuredDocumentation","src":"3395:120:9","text":" @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"},"id":1680,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"3529:9:9","nodeType":"FunctionDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"owner","nameLocation":"3547:5:9","nodeType":"VariableDeclaration","scope":1680,"src":"3539:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1653,"name":"address","nodeType":"ElementaryTypeName","src":"3539:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3538:15:9"},"returnParameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"current","nameLocation":"3588:7:9","nodeType":"VariableDeclaration","scope":1680,"src":"3580:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"3580:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3579:17:9"},"scope":1686,"src":"3520:214:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1681,"nodeType":"StructuredDocumentation","src":"3740:254:9","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1685,"mutability":"mutable","name":"__gap","nameLocation":"4019:5:9","nodeType":"VariableDeclaration","scope":1686,"src":"3999:25:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":1682,"name":"uint256","nodeType":"ElementaryTypeName","src":"3999:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1684,"length":{"hexValue":"3439","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4007:2:9","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3999:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":1687,"src":"999:3028:9","usedErrors":[]}],"src":"128:3900:9"},"id":9},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[1722]},"id":1723,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1688,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1689,"nodeType":"StructuredDocumentation","src":"139:480:10","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1722,"linearizedBaseContracts":[1722],"name":"IERC20PermitUpgradeable","nameLocation":"630:23:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1690,"nodeType":"StructuredDocumentation","src":"660:792:10","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1707,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1466:6:10","nodeType":"FunctionDefinition","parameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"owner","nameLocation":"1490:5:10","nodeType":"VariableDeclaration","scope":1707,"src":"1482:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1691,"name":"address","nodeType":"ElementaryTypeName","src":"1482:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"spender","nameLocation":"1513:7:10","nodeType":"VariableDeclaration","scope":1707,"src":"1505:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1693,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1696,"mutability":"mutable","name":"value","nameLocation":"1538:5:10","nodeType":"VariableDeclaration","scope":1707,"src":"1530:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"1530:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1698,"mutability":"mutable","name":"deadline","nameLocation":"1561:8:10","nodeType":"VariableDeclaration","scope":1707,"src":"1553:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1697,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1700,"mutability":"mutable","name":"v","nameLocation":"1585:1:10","nodeType":"VariableDeclaration","scope":1707,"src":"1579:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1699,"name":"uint8","nodeType":"ElementaryTypeName","src":"1579:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1702,"mutability":"mutable","name":"r","nameLocation":"1604:1:10","nodeType":"VariableDeclaration","scope":1707,"src":"1596:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1701,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1596:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1704,"mutability":"mutable","name":"s","nameLocation":"1623:1:10","nodeType":"VariableDeclaration","scope":1707,"src":"1615:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1703,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1615:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1472:158:10"},"returnParameters":{"id":1706,"nodeType":"ParameterList","parameters":[],"src":"1639:0:10"},"scope":1722,"src":"1457:183:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1708,"nodeType":"StructuredDocumentation","src":"1646:294:10","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1715,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1954:6:10","nodeType":"FunctionDefinition","parameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1710,"mutability":"mutable","name":"owner","nameLocation":"1969:5:10","nodeType":"VariableDeclaration","scope":1715,"src":"1961:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1709,"name":"address","nodeType":"ElementaryTypeName","src":"1961:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1960:15:10"},"returnParameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1715,"src":"1999:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1998:9:10"},"scope":1722,"src":"1945:63:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1716,"nodeType":"StructuredDocumentation","src":"2014:128:10","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1721,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2209:16:10","nodeType":"FunctionDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[],"src":"2225:2:10"},"returnParameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1721,"src":"2251:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2251:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2250:9:10"},"scope":1722,"src":"2200:60:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1723,"src":"620:1642:10","usedErrors":[]}],"src":"114:2149:10"},"id":10},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"IERC20PermitUpgradeable":[1722],"IERC20Upgradeable":[1470],"SafeERC20Upgradeable":[2003]},"id":2004,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1724,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":1725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2004,"sourceUnit":1471,"src":"140:34:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"../extensions/draft-IERC20PermitUpgradeable.sol","id":1726,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2004,"sourceUnit":1723,"src":"175:57:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":1727,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2004,"sourceUnit":2288,"src":"233:47:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1728,"nodeType":"StructuredDocumentation","src":"282:457:11","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":2003,"linearizedBaseContracts":[2003],"name":"SafeERC20Upgradeable","nameLocation":"748:20:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1731,"libraryName":{"id":1729,"name":"AddressUpgradeable","nameLocations":["781:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":2287,"src":"781:18:11"},"nodeType":"UsingForDirective","src":"775:37:11","typeName":{"id":1730,"name":"address","nodeType":"ElementaryTypeName","src":"804:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1753,"nodeType":"Block","src":"931:103:11","statements":[{"expression":{"arguments":[{"id":1742,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"961:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1745,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1734,"src":"991:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"997:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1437,"src":"991:14:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1006:8:11","memberName":"selector","nodeType":"MemberAccess","src":"991:23:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1748,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"1016:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1749,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"1020:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1743,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"968:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"972:18:11","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"968:22:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"968:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1741,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"941:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:86:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1752,"nodeType":"ExpressionStatement","src":"941:86:11"}]},"id":1754,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"827:12:11","nodeType":"FunctionDefinition","parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1734,"mutability":"mutable","name":"token","nameLocation":"867:5:11","nodeType":"VariableDeclaration","scope":1754,"src":"849:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1733,"nodeType":"UserDefinedTypeName","pathNode":{"id":1732,"name":"IERC20Upgradeable","nameLocations":["849:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"849:17:11"},"referencedDeclaration":1470,"src":"849:17:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1736,"mutability":"mutable","name":"to","nameLocation":"890:2:11","nodeType":"VariableDeclaration","scope":1754,"src":"882:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"value","nameLocation":"910:5:11","nodeType":"VariableDeclaration","scope":1754,"src":"902:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"839:82:11"},"returnParameters":{"id":1740,"nodeType":"ParameterList","parameters":[],"src":"931:0:11"},"scope":2003,"src":"818:216:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1779,"nodeType":"Block","src":"1179:113:11","statements":[{"expression":{"arguments":[{"id":1767,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"1209:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1770,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"1239:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1245:12:11","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1469,"src":"1239:18:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1258:8:11","memberName":"selector","nodeType":"MemberAccess","src":"1239:27:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1773,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"1268:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1774,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"1274:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"1278:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1768,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1216:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1220:18:11","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1216:22:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1766,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"1189:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1189:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1778,"nodeType":"ExpressionStatement","src":"1189:96:11"}]},"id":1780,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1049:16:11","nodeType":"FunctionDefinition","parameters":{"id":1764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1757,"mutability":"mutable","name":"token","nameLocation":"1093:5:11","nodeType":"VariableDeclaration","scope":1780,"src":"1075:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1756,"nodeType":"UserDefinedTypeName","pathNode":{"id":1755,"name":"IERC20Upgradeable","nameLocations":["1075:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"1075:17:11"},"referencedDeclaration":1470,"src":"1075:17:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"from","nameLocation":"1116:4:11","nodeType":"VariableDeclaration","scope":1780,"src":"1108:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"1108:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"to","nameLocation":"1138:2:11","nodeType":"VariableDeclaration","scope":1780,"src":"1130:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"1130:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"value","nameLocation":"1158:5:11","nodeType":"VariableDeclaration","scope":1780,"src":"1150:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"1150:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1065:104:11"},"returnParameters":{"id":1765,"nodeType":"ParameterList","parameters":[],"src":"1179:0:11"},"scope":2003,"src":"1040:252:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1823,"nodeType":"Block","src":"1669:497:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"1918:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1927:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1918:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1795,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1917:12:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1800,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1958:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2003","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2003","typeString":"library SafeERC20Upgradeable"}],"id":1799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1950:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1798,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:11","typeDescriptions":{}}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1950:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1802,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"1965:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1796,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"1934:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1940:9:11","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1447,"src":"1934:15:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1934:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1977:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1934:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1806,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1933:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1917:62:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1993:56:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1791,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1896:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1896:163:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1810,"nodeType":"ExpressionStatement","src":"1896:163:11"},{"expression":{"arguments":[{"id":1812,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"2089:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1815,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"2119:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2125:7:11","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1457,"src":"2119:13:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2133:8:11","memberName":"selector","nodeType":"MemberAccess","src":"2119:22:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1818,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"2143:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"2152:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1813,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2096:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2100:18:11","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2096:22:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2096:62:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1811,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"2069:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2069:90:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1822,"nodeType":"ExpressionStatement","src":"2069:90:11"}]},"documentation":{"id":1781,"nodeType":"StructuredDocumentation","src":"1298:249:11","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1824,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1561:11:11","nodeType":"FunctionDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"token","nameLocation":"1600:5:11","nodeType":"VariableDeclaration","scope":1824,"src":"1582:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1783,"nodeType":"UserDefinedTypeName","pathNode":{"id":1782,"name":"IERC20Upgradeable","nameLocations":["1582:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"1582:17:11"},"referencedDeclaration":1470,"src":"1582:17:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"spender","nameLocation":"1623:7:11","nodeType":"VariableDeclaration","scope":1824,"src":"1615:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1785,"name":"address","nodeType":"ElementaryTypeName","src":"1615:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1788,"mutability":"mutable","name":"value","nameLocation":"1648:5:11","nodeType":"VariableDeclaration","scope":1824,"src":"1640:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"1640:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1572:87:11"},"returnParameters":{"id":1790,"nodeType":"ParameterList","parameters":[],"src":"1669:0:11"},"scope":2003,"src":"1552:614:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1859,"nodeType":"Block","src":"2299:194:11","statements":[{"assignments":[1835],"declarations":[{"constant":false,"id":1835,"mutability":"mutable","name":"newAllowance","nameLocation":"2317:12:11","nodeType":"VariableDeclaration","scope":1859,"src":"2309:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1834,"name":"uint256","nodeType":"ElementaryTypeName","src":"2309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1846,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1840,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2356:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2003","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2003","typeString":"library SafeERC20Upgradeable"}],"id":1839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2348:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1838,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:11","typeDescriptions":{}}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1842,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"2363:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1836,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"2332:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2338:9:11","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1447,"src":"2332:15:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"2374:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2332:47:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2309:70:11"},{"expression":{"arguments":[{"id":1848,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"2409:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1851,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"2439:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2445:7:11","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1457,"src":"2439:13:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2453:8:11","memberName":"selector","nodeType":"MemberAccess","src":"2439:22:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1854,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"2463:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1855,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"2472:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1849,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2416:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2420:18:11","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2416:22:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2416:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1847,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"2389:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2389:97:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1858,"nodeType":"ExpressionStatement","src":"2389:97:11"}]},"id":1860,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2181:21:11","nodeType":"FunctionDefinition","parameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1827,"mutability":"mutable","name":"token","nameLocation":"2230:5:11","nodeType":"VariableDeclaration","scope":1860,"src":"2212:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1826,"nodeType":"UserDefinedTypeName","pathNode":{"id":1825,"name":"IERC20Upgradeable","nameLocations":["2212:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"2212:17:11"},"referencedDeclaration":1470,"src":"2212:17:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1829,"mutability":"mutable","name":"spender","nameLocation":"2253:7:11","nodeType":"VariableDeclaration","scope":1860,"src":"2245:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"2245:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"value","nameLocation":"2278:5:11","nodeType":"VariableDeclaration","scope":1860,"src":"2270:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1830,"name":"uint256","nodeType":"ElementaryTypeName","src":"2270:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2202:87:11"},"returnParameters":{"id":1833,"nodeType":"ParameterList","parameters":[],"src":"2299:0:11"},"scope":2003,"src":"2172:321:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1907,"nodeType":"Block","src":"2626:370:11","statements":[{"id":1906,"nodeType":"UncheckedBlock","src":"2636:354:11","statements":[{"assignments":[1871],"declarations":[{"constant":false,"id":1871,"mutability":"mutable","name":"oldAllowance","nameLocation":"2668:12:11","nodeType":"VariableDeclaration","scope":1906,"src":"2660:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"2660:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1880,"initialValue":{"arguments":[{"arguments":[{"id":1876,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2707:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2003","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$2003","typeString":"library SafeERC20Upgradeable"}],"id":1875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2699:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1874,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:11","typeDescriptions":{}}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1878,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"2714:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1872,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"2683:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2689:9:11","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1447,"src":"2683:15:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2683:39:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2660:62:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1882,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"2744:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2760:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2744:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2767:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1881,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2736:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:75:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1887,"nodeType":"ExpressionStatement","src":"2736:75:11"},{"assignments":[1889],"declarations":[{"constant":false,"id":1889,"mutability":"mutable","name":"newAllowance","nameLocation":"2833:12:11","nodeType":"VariableDeclaration","scope":1906,"src":"2825:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"2825:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1893,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1890,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"2848:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"2863:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2848:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2825:43:11"},{"expression":{"arguments":[{"id":1895,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"2902:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1898,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"2932:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2938:7:11","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1457,"src":"2932:13:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2946:8:11","memberName":"selector","nodeType":"MemberAccess","src":"2932:22:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1901,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"2956:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1902,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"2965:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1896,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2909:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2913:18:11","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2909:22:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2909:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1894,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"2882:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2882:97:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1905,"nodeType":"ExpressionStatement","src":"2882:97:11"}]}]},"id":1908,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2508:21:11","nodeType":"FunctionDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"token","nameLocation":"2557:5:11","nodeType":"VariableDeclaration","scope":1908,"src":"2539:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1862,"nodeType":"UserDefinedTypeName","pathNode":{"id":1861,"name":"IERC20Upgradeable","nameLocations":["2539:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"2539:17:11"},"referencedDeclaration":1470,"src":"2539:17:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"spender","nameLocation":"2580:7:11","nodeType":"VariableDeclaration","scope":1908,"src":"2572:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"2572:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"value","nameLocation":"2605:5:11","nodeType":"VariableDeclaration","scope":1908,"src":"2597:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1866,"name":"uint256","nodeType":"ElementaryTypeName","src":"2597:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2529:87:11"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[],"src":"2626:0:11"},"scope":2003,"src":"2499:497:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1963,"nodeType":"Block","src":"3228:257:11","statements":[{"assignments":[1929],"declarations":[{"constant":false,"id":1929,"mutability":"mutable","name":"nonceBefore","nameLocation":"3246:11:11","nodeType":"VariableDeclaration","scope":1963,"src":"3238:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"3238:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1934,"initialValue":{"arguments":[{"id":1932,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"3273:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1930,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"3260:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3266:6:11","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1715,"src":"3260:12:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3238:41:11"},{"expression":{"arguments":[{"id":1938,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"3302:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1939,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"3309:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1940,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"3318:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1941,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"3325:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1942,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"3335:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1943,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"3338:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1944,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"3341:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1935,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"3289:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3295:6:11","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"3289:12:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3289:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1946,"nodeType":"ExpressionStatement","src":"3289:54:11"},{"assignments":[1948],"declarations":[{"constant":false,"id":1948,"mutability":"mutable","name":"nonceAfter","nameLocation":"3361:10:11","nodeType":"VariableDeclaration","scope":1963,"src":"3353:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"3353:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1953,"initialValue":{"arguments":[{"id":1951,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"3387:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1949,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"3374:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3380:6:11","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1715,"src":"3374:12:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3374:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3353:40:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"3411:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1956,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"3425:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3439:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3411:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3442:35:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3403:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3403:75:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1962,"nodeType":"ExpressionStatement","src":"3403:75:11"}]},"id":1964,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"3011:10:11","nodeType":"FunctionDefinition","parameters":{"id":1926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"token","nameLocation":"3055:5:11","nodeType":"VariableDeclaration","scope":1964,"src":"3031:29:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":1910,"nodeType":"UserDefinedTypeName","pathNode":{"id":1909,"name":"IERC20PermitUpgradeable","nameLocations":["3031:23:11"],"nodeType":"IdentifierPath","referencedDeclaration":1722,"src":"3031:23:11"},"referencedDeclaration":1722,"src":"3031:23:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":1913,"mutability":"mutable","name":"owner","nameLocation":"3078:5:11","nodeType":"VariableDeclaration","scope":1964,"src":"3070:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1912,"name":"address","nodeType":"ElementaryTypeName","src":"3070:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"spender","nameLocation":"3101:7:11","nodeType":"VariableDeclaration","scope":1964,"src":"3093:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1914,"name":"address","nodeType":"ElementaryTypeName","src":"3093:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1917,"mutability":"mutable","name":"value","nameLocation":"3126:5:11","nodeType":"VariableDeclaration","scope":1964,"src":"3118:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1919,"mutability":"mutable","name":"deadline","nameLocation":"3149:8:11","nodeType":"VariableDeclaration","scope":1964,"src":"3141:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1918,"name":"uint256","nodeType":"ElementaryTypeName","src":"3141:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1921,"mutability":"mutable","name":"v","nameLocation":"3173:1:11","nodeType":"VariableDeclaration","scope":1964,"src":"3167:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1920,"name":"uint8","nodeType":"ElementaryTypeName","src":"3167:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1923,"mutability":"mutable","name":"r","nameLocation":"3192:1:11","nodeType":"VariableDeclaration","scope":1964,"src":"3184:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3184:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1925,"mutability":"mutable","name":"s","nameLocation":"3211:1:11","nodeType":"VariableDeclaration","scope":1964,"src":"3203:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1924,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3203:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3021:197:11"},"returnParameters":{"id":1927,"nodeType":"ParameterList","parameters":[],"src":"3228:0:11"},"scope":2003,"src":"3002:483:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2001,"nodeType":"Block","src":"3949:636:11","statements":[{"assignments":[1974],"declarations":[{"constant":false,"id":1974,"mutability":"mutable","name":"returndata","nameLocation":"4311:10:11","nodeType":"VariableDeclaration","scope":2001,"src":"4298:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1973,"name":"bytes","nodeType":"ElementaryTypeName","src":"4298:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1983,"initialValue":{"arguments":[{"id":1980,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"4352:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4358:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1977,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"4332:5:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}],"id":1976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"4324:7:11","typeDescriptions":{}}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4339:12:11","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":2093,"src":"4324:27:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4298:95:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1984,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"4407:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4418:6:11","memberName":"length","nodeType":"MemberAccess","src":"4407:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4427:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4407:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2000,"nodeType":"IfStatement","src":"4403:176:11","trueBody":{"id":1999,"nodeType":"Block","src":"4430:149:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":1991,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"4502:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4515:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1992,"name":"bool","nodeType":"ElementaryTypeName","src":"4515:4:11","typeDescriptions":{}}}],"id":1994,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4514:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1989,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4491:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4495:6:11","memberName":"decode","nodeType":"MemberAccess","src":"4491:10:11","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4491:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4523:44:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1988,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4483:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4483:85:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1998,"nodeType":"ExpressionStatement","src":"4483:85:11"}]}}]},"documentation":{"id":1965,"nodeType":"StructuredDocumentation","src":"3491:372:11","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":2002,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3877:19:11","nodeType":"FunctionDefinition","parameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1968,"mutability":"mutable","name":"token","nameLocation":"3915:5:11","nodeType":"VariableDeclaration","scope":2002,"src":"3897:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1967,"nodeType":"UserDefinedTypeName","pathNode":{"id":1966,"name":"IERC20Upgradeable","nameLocations":["3897:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"3897:17:11"},"referencedDeclaration":1470,"src":"3897:17:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1970,"mutability":"mutable","name":"data","nameLocation":"3935:4:11","nodeType":"VariableDeclaration","scope":2002,"src":"3922:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1969,"name":"bytes","nodeType":"ElementaryTypeName","src":"3922:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3896:44:11"},"returnParameters":{"id":1972,"nodeType":"ParameterList","parameters":[],"src":"3949:0:11"},"scope":2003,"src":"3868:717:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2004,"src":"740:3847:11","usedErrors":[]}],"src":"115:4473:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287]},"id":2288,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2005,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"126:67:12","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2287,"linearizedBaseContracts":[2287],"name":"AddressUpgradeable","nameLocation":"202:18:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2020,"nodeType":"Block","src":"1252:254:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2014,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"1476:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:12","memberName":"code","nodeType":"MemberAccess","src":"1476:12:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:12","memberName":"length","nodeType":"MemberAccess","src":"1476:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2013,"id":2019,"nodeType":"Return","src":"1469:30:12"}]},"documentation":{"id":2007,"nodeType":"StructuredDocumentation","src":"227:954:12","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2021,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:12","nodeType":"FunctionDefinition","parameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"account","nameLocation":"1214:7:12","nodeType":"VariableDeclaration","scope":2021,"src":"1206:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:12"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2021,"src":"1246:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2011,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:12"},"scope":2287,"src":"1186:320:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2054,"nodeType":"Block","src":"2494:241:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2032,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2287","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2287","typeString":"library AddressUpgradeable"}],"id":2031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2030,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:12","typeDescriptions":{}}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:12","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2035,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"2537:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2029,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2039,"nodeType":"ExpressionStatement","src":"2504:73:12"},{"assignments":[2041,null],"declarations":[{"constant":false,"id":2041,"mutability":"mutable","name":"success","nameLocation":"2594:7:12","nodeType":"VariableDeclaration","scope":2054,"src":"2589:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2040,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2048,"initialValue":{"arguments":[{"hexValue":"","id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2042,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"2607:9:12","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:12","memberName":"call","nodeType":"MemberAccess","src":"2607:14:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2044,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"2629:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:12"},{"expression":{"arguments":[{"id":2050,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"2658:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2049,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2053,"nodeType":"ExpressionStatement","src":"2650:78:12"}]},"documentation":{"id":2022,"nodeType":"StructuredDocumentation","src":"1512:906:12","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2055,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:12","nodeType":"FunctionDefinition","parameters":{"id":2027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:12","nodeType":"VariableDeclaration","scope":2055,"src":"2442:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2023,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:12","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2026,"mutability":"mutable","name":"amount","nameLocation":"2477:6:12","nodeType":"VariableDeclaration","scope":2055,"src":"2469:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2025,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:12"},"returnParameters":{"id":2028,"nodeType":"ParameterList","parameters":[],"src":"2494:0:12"},"scope":2287,"src":"2423:312:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2072,"nodeType":"Block","src":"3566:96:12","statements":[{"expression":{"arguments":[{"id":2066,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"3605:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2067,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"3613:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2065,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2113,2157],"referencedDeclaration":2157,"src":"3583:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:72:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2064,"id":2071,"nodeType":"Return","src":"3576:79:12"}]},"documentation":{"id":2056,"nodeType":"StructuredDocumentation","src":"2741:731:12","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2073,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:12","nodeType":"FunctionDefinition","parameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"target","nameLocation":"3507:6:12","nodeType":"VariableDeclaration","scope":2073,"src":"3499:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2057,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"data","nameLocation":"3528:4:12","nodeType":"VariableDeclaration","scope":2073,"src":"3515:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2059,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:12"},"returnParameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2073,"src":"3552:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2062,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:12"},"scope":2287,"src":"3477:185:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2092,"nodeType":"Block","src":"4031:76:12","statements":[{"expression":{"arguments":[{"id":2086,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"4070:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2087,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4078:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2089,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"4087:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2085,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2113,2157],"referencedDeclaration":2157,"src":"4048:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2084,"id":2091,"nodeType":"Return","src":"4041:59:12"}]},"documentation":{"id":2074,"nodeType":"StructuredDocumentation","src":"3668:211:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2093,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:12","nodeType":"FunctionDefinition","parameters":{"id":2081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2076,"mutability":"mutable","name":"target","nameLocation":"3923:6:12","nodeType":"VariableDeclaration","scope":2093,"src":"3915:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2075,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"data","nameLocation":"3952:4:12","nodeType":"VariableDeclaration","scope":2093,"src":"3939:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2077,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2080,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:12","nodeType":"VariableDeclaration","scope":2093,"src":"3966:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2079,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:12"},"returnParameters":{"id":2084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2093,"src":"4017:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2082,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:12"},"scope":2287,"src":"3884:223:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2112,"nodeType":"Block","src":"4612:111:12","statements":[{"expression":{"arguments":[{"id":2106,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"4651:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2107,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"4659:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2100,"src":"4665:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2105,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2113,2157],"referencedDeclaration":2157,"src":"4629:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:87:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2104,"id":2111,"nodeType":"Return","src":"4622:94:12"}]},"documentation":{"id":2094,"nodeType":"StructuredDocumentation","src":"4113:351:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2113,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:12","nodeType":"FunctionDefinition","parameters":{"id":2101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2096,"mutability":"mutable","name":"target","nameLocation":"4517:6:12","nodeType":"VariableDeclaration","scope":2113,"src":"4509:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2095,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2098,"mutability":"mutable","name":"data","nameLocation":"4546:4:12","nodeType":"VariableDeclaration","scope":2113,"src":"4533:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2097,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2100,"mutability":"mutable","name":"value","nameLocation":"4568:5:12","nodeType":"VariableDeclaration","scope":2113,"src":"4560:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2099,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:12"},"returnParameters":{"id":2104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2113,"src":"4598:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2102,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:12"},"scope":2287,"src":"4469:254:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2156,"nodeType":"Block","src":"5150:267:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2130,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$2287","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$2287","typeString":"library AddressUpgradeable"}],"id":2129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2128,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:12","typeDescriptions":{}}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:7:12","memberName":"balance","nodeType":"MemberAccess","src":"5168:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2133,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"5193:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2127,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:81:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2137,"nodeType":"ExpressionStatement","src":"5160:81:12"},{"assignments":[2139,2141],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"success","nameLocation":"5257:7:12","nodeType":"VariableDeclaration","scope":2156,"src":"5252:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2138,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2141,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:12","nodeType":"VariableDeclaration","scope":2156,"src":"5266:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2140,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2148,"initialValue":{"arguments":[{"id":2146,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"5319:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2142,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"5293:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5300:4:12","memberName":"call","nodeType":"MemberAccess","src":"5293:11:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2144,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2120,"src":"5312:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:12"},{"expression":{"arguments":[{"id":2150,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"5368:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2151,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"5376:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2152,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"5385:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2153,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"5397:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2149,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"5341:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2126,"id":2155,"nodeType":"Return","src":"5334:76:12"}]},"documentation":{"id":2114,"nodeType":"StructuredDocumentation","src":"4729:237:12","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2157,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:12","nodeType":"FunctionDefinition","parameters":{"id":2123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"target","nameLocation":"5019:6:12","nodeType":"VariableDeclaration","scope":2157,"src":"5011:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2115,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2118,"mutability":"mutable","name":"data","nameLocation":"5048:4:12","nodeType":"VariableDeclaration","scope":2157,"src":"5035:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2117,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2120,"mutability":"mutable","name":"value","nameLocation":"5070:5:12","nodeType":"VariableDeclaration","scope":2157,"src":"5062:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2119,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2122,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:12","nodeType":"VariableDeclaration","scope":2157,"src":"5085:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2121,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:12"},"returnParameters":{"id":2126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2157,"src":"5136:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2124,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:12"},"scope":2287,"src":"4971:446:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2173,"nodeType":"Block","src":"5694:97:12","statements":[{"expression":{"arguments":[{"id":2168,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"5730:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2169,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"5738:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2167,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2174,2203],"referencedDeclaration":2203,"src":"5711:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5711:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2166,"id":2172,"nodeType":"Return","src":"5704:80:12"}]},"documentation":{"id":2158,"nodeType":"StructuredDocumentation","src":"5423:166:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2174,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:12","nodeType":"FunctionDefinition","parameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2160,"mutability":"mutable","name":"target","nameLocation":"5630:6:12","nodeType":"VariableDeclaration","scope":2174,"src":"5622:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2159,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2162,"mutability":"mutable","name":"data","nameLocation":"5651:4:12","nodeType":"VariableDeclaration","scope":2174,"src":"5638:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2161,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:12"},"returnParameters":{"id":2166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2174,"src":"5680:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2164,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:12"},"scope":2287,"src":"5594:197:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2202,"nodeType":"Block","src":"6133:168:12","statements":[{"assignments":[2187,2189],"declarations":[{"constant":false,"id":2187,"mutability":"mutable","name":"success","nameLocation":"6149:7:12","nodeType":"VariableDeclaration","scope":2202,"src":"6144:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2186,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2189,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:12","nodeType":"VariableDeclaration","scope":2202,"src":"6158:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2188,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2194,"initialValue":{"arguments":[{"id":2192,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"6203:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2190,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"6185:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6192:10:12","memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:12","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6185:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:12"},{"expression":{"arguments":[{"id":2196,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"6252:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2197,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"6260:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2198,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"6269:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2199,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"6281:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2195,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"6225:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2185,"id":2201,"nodeType":"Return","src":"6218:76:12"}]},"documentation":{"id":2175,"nodeType":"StructuredDocumentation","src":"5797:173:12","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2203,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:12","nodeType":"FunctionDefinition","parameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"mutability":"mutable","name":"target","nameLocation":"6020:6:12","nodeType":"VariableDeclaration","scope":2203,"src":"6012:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2176,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2179,"mutability":"mutable","name":"data","nameLocation":"6049:4:12","nodeType":"VariableDeclaration","scope":2203,"src":"6036:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2178,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2181,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:12","nodeType":"VariableDeclaration","scope":2203,"src":"6063:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2180,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:12"},"returnParameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2203,"src":"6119:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2183,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:12"},"scope":2287,"src":"5975:326:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2241,"nodeType":"Block","src":"6783:434:12","statements":[{"condition":{"id":2217,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"6797:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2239,"nodeType":"Block","src":"7153:58:12","statements":[{"expression":{"arguments":[{"id":2235,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"7175:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2236,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"7187:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2234,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"7167:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7167:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2238,"nodeType":"ExpressionStatement","src":"7167:33:12"}]},"id":2240,"nodeType":"IfStatement","src":"6793:418:12","trueBody":{"id":2233,"nodeType":"Block","src":"6806:341:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2218,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"6824:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:6:12","memberName":"length","nodeType":"MemberAccess","src":"6824:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2230,"nodeType":"IfStatement","src":"6820:286:12","trueBody":{"id":2229,"nodeType":"Block","src":"6848:258:12","statements":[{"expression":{"arguments":[{"arguments":[{"id":2224,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"7050:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2223,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"7039:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2222,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:60:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2228,"nodeType":"ExpressionStatement","src":"7031:60:12"}]}},{"expression":{"id":2231,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"7126:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2216,"id":2232,"nodeType":"Return","src":"7119:17:12"}]}}]},"documentation":{"id":2204,"nodeType":"StructuredDocumentation","src":"6307:277:12","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2242,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:12","nodeType":"FunctionDefinition","parameters":{"id":2213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"target","nameLocation":"6642:6:12","nodeType":"VariableDeclaration","scope":2242,"src":"6634:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2205,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2208,"mutability":"mutable","name":"success","nameLocation":"6663:7:12","nodeType":"VariableDeclaration","scope":2242,"src":"6658:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2207,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2210,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:12","nodeType":"VariableDeclaration","scope":2242,"src":"6680:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2209,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2212,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:12","nodeType":"VariableDeclaration","scope":2242,"src":"6713:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2211,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:12"},"returnParameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2242,"src":"6769:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2214,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:12"},"scope":2287,"src":"6589:628:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2265,"nodeType":"Block","src":"7598:135:12","statements":[{"condition":{"id":2254,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"7612:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2263,"nodeType":"Block","src":"7669:58:12","statements":[{"expression":{"arguments":[{"id":2259,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7691:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2260,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"7703:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2258,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"7683:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2262,"nodeType":"ExpressionStatement","src":"7683:33:12"}]},"id":2264,"nodeType":"IfStatement","src":"7608:119:12","trueBody":{"id":2257,"nodeType":"Block","src":"7621:42:12","statements":[{"expression":{"id":2255,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7642:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2253,"id":2256,"nodeType":"Return","src":"7635:17:12"}]}}]},"documentation":{"id":2243,"nodeType":"StructuredDocumentation","src":"7223:210:12","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2266,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:12","nodeType":"FunctionDefinition","parameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2245,"mutability":"mutable","name":"success","nameLocation":"7478:7:12","nodeType":"VariableDeclaration","scope":2266,"src":"7473:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2244,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2247,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:12","nodeType":"VariableDeclaration","scope":2266,"src":"7495:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2246,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2249,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:12","nodeType":"VariableDeclaration","scope":2266,"src":"7528:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2248,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:12"},"returnParameters":{"id":2253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2266,"src":"7584:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2251,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:12"},"scope":2287,"src":"7438:295:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2285,"nodeType":"Block","src":"7822:457:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2273,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"7898:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7909:6:12","memberName":"length","nodeType":"MemberAccess","src":"7898:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2283,"nodeType":"Block","src":"8228:45:12","statements":[{"expression":{"arguments":[{"id":2280,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"8249:12:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2279,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2282,"nodeType":"ExpressionStatement","src":"8242:20:12"}]},"id":2284,"nodeType":"IfStatement","src":"7894:379:12","trueBody":{"id":2278,"nodeType":"Block","src":"7921:301:12","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:12","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:12","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:12"},"nodeType":"YulFunctionCall","src":"8120:17:12"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:12","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:12","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:12"},"nodeType":"YulFunctionCall","src":"8161:19:12"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:12"},"nodeType":"YulFunctionCall","src":"8154:44:12"},"nodeType":"YulExpressionStatement","src":"8154:44:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2268,"isOffset":false,"isSlot":false,"src":"8126:10:12","valueSize":1},{"declaration":2268,"isOffset":false,"isSlot":false,"src":"8169:10:12","valueSize":1}],"id":2277,"nodeType":"InlineAssembly","src":"8070:142:12"}]}}]},"id":2286,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:12","nodeType":"FunctionDefinition","parameters":{"id":2271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2268,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:12","nodeType":"VariableDeclaration","scope":2286,"src":"7756:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2267,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2270,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:12","nodeType":"VariableDeclaration","scope":2286,"src":"7781:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2269,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:12"},"returnParameters":{"id":2272,"nodeType":"ParameterList","parameters":[],"src":"7822:0:12"},"scope":2287,"src":"7739:540:12","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2288,"src":"194:8087:12","usedErrors":[]}],"src":"101:8181:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"ContextUpgradeable":[2329],"Initializable":[580]},"id":2330,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2289,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":2290,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2330,"sourceUnit":581,"src":"110:42:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2292,"name":"Initializable","nameLocations":["691:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"691:13:13"},"id":2293,"nodeType":"InheritanceSpecifier","src":"691:13:13"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2291,"nodeType":"StructuredDocumentation","src":"154:496:13","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2329,"linearizedBaseContracts":[2329,580],"name":"ContextUpgradeable","nameLocation":"669:18:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":2298,"nodeType":"Block","src":"763:7:13","statements":[]},"id":2299,"implemented":true,"kind":"function","modifiers":[{"id":2296,"kind":"modifierInvocation","modifierName":{"id":2295,"name":"onlyInitializing","nameLocations":["746:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"746:16:13"},"nodeType":"ModifierInvocation","src":"746:16:13"}],"name":"__Context_init","nameLocation":"720:14:13","nodeType":"FunctionDefinition","parameters":{"id":2294,"nodeType":"ParameterList","parameters":[],"src":"734:2:13"},"returnParameters":{"id":2297,"nodeType":"ParameterList","parameters":[],"src":"763:0:13"},"scope":2329,"src":"711:59:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2304,"nodeType":"Block","src":"838:7:13","statements":[]},"id":2305,"implemented":true,"kind":"function","modifiers":[{"id":2302,"kind":"modifierInvocation","modifierName":{"id":2301,"name":"onlyInitializing","nameLocations":["821:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"821:16:13"},"nodeType":"ModifierInvocation","src":"821:16:13"}],"name":"__Context_init_unchained","nameLocation":"785:24:13","nodeType":"FunctionDefinition","parameters":{"id":2300,"nodeType":"ParameterList","parameters":[],"src":"809:2:13"},"returnParameters":{"id":2303,"nodeType":"ParameterList","parameters":[],"src":"838:0:13"},"scope":2329,"src":"776:69:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2313,"nodeType":"Block","src":"912:34:13","statements":[{"expression":{"expression":{"id":2310,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:13","memberName":"sender","nodeType":"MemberAccess","src":"929:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2309,"id":2312,"nodeType":"Return","src":"922:17:13"}]},"id":2314,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:13","nodeType":"FunctionDefinition","parameters":{"id":2306,"nodeType":"ParameterList","parameters":[],"src":"869:2:13"},"returnParameters":{"id":2309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2314,"src":"903:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2307,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:13"},"scope":2329,"src":"850:96:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2322,"nodeType":"Block","src":"1019:32:13","statements":[{"expression":{"expression":{"id":2319,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:13","memberName":"data","nodeType":"MemberAccess","src":"1036:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2318,"id":2321,"nodeType":"Return","src":"1029:15:13"}]},"id":2323,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:13","nodeType":"FunctionDefinition","parameters":{"id":2315,"nodeType":"ParameterList","parameters":[],"src":"969:2:13"},"returnParameters":{"id":2318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2323,"src":"1003:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2316,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:13"},"scope":2329,"src":"952:99:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":2324,"nodeType":"StructuredDocumentation","src":"1057:254:13","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":2328,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:13","nodeType":"VariableDeclaration","scope":2329,"src":"1316:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2325,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2327,"length":{"hexValue":"3530","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":2330,"src":"651:693:13","usedErrors":[]}],"src":"86:1259:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol","exportedSymbols":{"CountersUpgradeable":[2403]},"id":2404,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2331,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"CountersUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"112:311:14","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":2403,"linearizedBaseContracts":[2403],"name":"CountersUpgradeable","nameLocation":"432:19:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CountersUpgradeable.Counter","id":2335,"members":[{"constant":false,"id":2334,"mutability":"mutable","name":"_value","nameLocation":"805:6:14","nodeType":"VariableDeclaration","scope":2335,"src":"797:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"465:7:14","nodeType":"StructDefinition","scope":2403,"src":"458:374:14","visibility":"public"},{"body":{"id":2346,"nodeType":"Block","src":"912:38:14","statements":[{"expression":{"expression":{"id":2343,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"929:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2344,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"937:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2334,"src":"929:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2342,"id":2345,"nodeType":"Return","src":"922:21:14"}]},"id":2347,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"847:7:14","nodeType":"FunctionDefinition","parameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2338,"mutability":"mutable","name":"counter","nameLocation":"871:7:14","nodeType":"VariableDeclaration","scope":2347,"src":"855:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2337,"nodeType":"UserDefinedTypeName","pathNode":{"id":2336,"name":"Counter","nameLocations":["855:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2335,"src":"855:7:14"},"referencedDeclaration":2335,"src":"855:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"854:25:14"},"returnParameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2347,"src":"903:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2340,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:9:14"},"scope":2403,"src":"838:112:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2360,"nodeType":"Block","src":"1009:70:14","statements":[{"id":2359,"nodeType":"UncheckedBlock","src":"1019:54:14","statements":[{"expression":{"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2353,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"1043:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2355,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1051:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2334,"src":"1043:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1061:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1043:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2358,"nodeType":"ExpressionStatement","src":"1043:19:14"}]}]},"id":2361,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"965:9:14","nodeType":"FunctionDefinition","parameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2350,"mutability":"mutable","name":"counter","nameLocation":"991:7:14","nodeType":"VariableDeclaration","scope":2361,"src":"975:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2349,"nodeType":"UserDefinedTypeName","pathNode":{"id":2348,"name":"Counter","nameLocations":["975:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2335,"src":"975:7:14"},"referencedDeclaration":2335,"src":"975:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"974:25:14"},"returnParameters":{"id":2352,"nodeType":"ParameterList","parameters":[],"src":"1009:0:14"},"scope":2403,"src":"956:123:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2388,"nodeType":"Block","src":"1138:176:14","statements":[{"assignments":[2368],"declarations":[{"constant":false,"id":2368,"mutability":"mutable","name":"value","nameLocation":"1156:5:14","nodeType":"VariableDeclaration","scope":2388,"src":"1148:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2367,"name":"uint256","nodeType":"ElementaryTypeName","src":"1148:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2371,"initialValue":{"expression":{"id":2369,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"1164:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1172:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2334,"src":"1164:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1148:30:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"1196:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1204:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1196:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":2376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1207:29:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":2372,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1188:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:49:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2378,"nodeType":"ExpressionStatement","src":"1188:49:14"},{"id":2387,"nodeType":"UncheckedBlock","src":"1247:61:14","statements":[{"expression":{"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2379,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"1271:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1279:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2334,"src":"1271:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2368,"src":"1288:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1296:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1288:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1271:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2386,"nodeType":"ExpressionStatement","src":"1271:26:14"}]}]},"id":2389,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1094:9:14","nodeType":"FunctionDefinition","parameters":{"id":2365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2364,"mutability":"mutable","name":"counter","nameLocation":"1120:7:14","nodeType":"VariableDeclaration","scope":2389,"src":"1104:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2363,"nodeType":"UserDefinedTypeName","pathNode":{"id":2362,"name":"Counter","nameLocations":["1104:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2335,"src":"1104:7:14"},"referencedDeclaration":2335,"src":"1104:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1103:25:14"},"returnParameters":{"id":2366,"nodeType":"ParameterList","parameters":[],"src":"1138:0:14"},"scope":2403,"src":"1085:229:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2401,"nodeType":"Block","src":"1369:35:14","statements":[{"expression":{"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2395,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2392,"src":"1379:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter storage pointer"}},"id":2397,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1387:6:14","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2334,"src":"1379:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1396:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1379:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2400,"nodeType":"ExpressionStatement","src":"1379:18:14"}]},"id":2402,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1329:5:14","nodeType":"FunctionDefinition","parameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"counter","nameLocation":"1351:7:14","nodeType":"VariableDeclaration","scope":2402,"src":"1335:23:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"},"typeName":{"id":2391,"nodeType":"UserDefinedTypeName","pathNode":{"id":2390,"name":"Counter","nameLocations":["1335:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2335,"src":"1335:7:14"},"referencedDeclaration":2335,"src":"1335:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2335_storage_ptr","typeString":"struct CountersUpgradeable.Counter"}},"visibility":"internal"}],"src":"1334:25:14"},"returnParameters":{"id":2394,"nodeType":"ParameterList","parameters":[],"src":"1369:0:14"},"scope":2403,"src":"1320:84:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2404,"src":"424:982:14","usedErrors":[]}],"src":"87:1320:14"},"id":14},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4010],"StringsUpgradeable":[2578]},"id":2579,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2405,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":2406,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2579,"sourceUnit":4011,"src":"126:36:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2407,"nodeType":"StructuredDocumentation","src":"164:34:15","text":" @dev String operations."},"fullyImplemented":true,"id":2578,"linearizedBaseContracts":[2578],"name":"StringsUpgradeable","nameLocation":"207:18:15","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2410,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:15","nodeType":"VariableDeclaration","scope":2578,"src":"232:54:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2408,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2413,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:15","nodeType":"VariableDeclaration","scope":2578,"src":"292:43:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2411,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2460,"nodeType":"Block","src":"508:636:15","statements":[{"id":2459,"nodeType":"UncheckedBlock","src":"518:620:15","statements":[{"assignments":[2422],"declarations":[{"constant":false,"id":2422,"mutability":"mutable","name":"length","nameLocation":"550:6:15","nodeType":"VariableDeclaration","scope":2459,"src":"542:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2421,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2429,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"581:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2423,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"559:15:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4010_$","typeString":"type(library MathUpgradeable)"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"575:5:15","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3847,"src":"559:21:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"559:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:15"},{"assignments":[2431],"declarations":[{"constant":false,"id":2431,"mutability":"mutable","name":"buffer","nameLocation":"619:6:15","nodeType":"VariableDeclaration","scope":2459,"src":"605:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2430,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2436,"initialValue":{"arguments":[{"id":2434,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"639:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2432,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"628:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:15"},{"assignments":[2438],"declarations":[{"constant":false,"id":2438,"mutability":"mutable","name":"ptr","nameLocation":"668:3:15","nodeType":"VariableDeclaration","scope":2459,"src":"660:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2437,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2439,"nodeType":"VariableDeclarationStatement","src":"660:11:15"},{"AST":{"nodeType":"YulBlock","src":"741:67:15","statements":[{"nodeType":"YulAssignment","src":"759:35:15","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:15","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:15"},"nodeType":"YulFunctionCall","src":"778:15:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:15"},"nodeType":"YulFunctionCall","src":"766:28:15"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2431,"isOffset":false,"isSlot":false,"src":"770:6:15","valueSize":1},{"declaration":2422,"isOffset":false,"isSlot":false,"src":"786:6:15","valueSize":1},{"declaration":2438,"isOffset":false,"isSlot":false,"src":"759:3:15","valueSize":1}],"id":2440,"nodeType":"InlineAssembly","src":"732:76:15"},{"body":{"id":2455,"nodeType":"Block","src":"834:267:15","statements":[{"expression":{"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:15","subExpression":{"id":2442,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"852:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2444,"nodeType":"ExpressionStatement","src":"852:5:15"},{"AST":{"nodeType":"YulBlock","src":"935:84:15","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:15"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:15","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:15"},"nodeType":"YulFunctionCall","src":"975:14:15"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:15"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:15"},"nodeType":"YulFunctionCall","src":"970:30:15"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:15"},"nodeType":"YulFunctionCall","src":"957:44:15"},"nodeType":"YulExpressionStatement","src":"957:44:15"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2410,"isOffset":false,"isSlot":false,"src":"991:8:15","valueSize":1},{"declaration":2438,"isOffset":false,"isSlot":false,"src":"965:3:15","valueSize":1},{"declaration":2416,"isOffset":false,"isSlot":false,"src":"979:5:15","valueSize":1}],"id":2445,"nodeType":"InlineAssembly","src":"926:93:15"},{"expression":{"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2446,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"1036:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2449,"nodeType":"ExpressionStatement","src":"1036:11:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"1069:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2454,"nodeType":"IfStatement","src":"1065:21:15","trueBody":{"id":2453,"nodeType":"Break","src":"1081:5:15"}}]},"condition":{"hexValue":"74727565","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2456,"nodeType":"WhileStatement","src":"821:280:15"},{"expression":{"id":2457,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"1121:6:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2420,"id":2458,"nodeType":"Return","src":"1114:13:15"}]}]},"documentation":{"id":2414,"nodeType":"StructuredDocumentation","src":"342:90:15","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2461,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:15","nodeType":"FunctionDefinition","parameters":{"id":2417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"mutability":"mutable","name":"value","nameLocation":"463:5:15","nodeType":"VariableDeclaration","scope":2461,"src":"455:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2415,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:15"},"returnParameters":{"id":2420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2461,"src":"493:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2418,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:15"},"scope":2578,"src":"437:707:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2480,"nodeType":"Block","src":"1323:111:15","statements":[{"id":2479,"nodeType":"UncheckedBlock","src":"1333:95:15","statements":[{"expression":{"arguments":[{"id":2470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"1376:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"1406:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2471,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"1383:15:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$4010_$","typeString":"type(library MathUpgradeable)"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1399:6:15","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3970,"src":"1383:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2469,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2481,2557,2577],"referencedDeclaration":2557,"src":"1364:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2468,"id":2478,"nodeType":"Return","src":"1357:60:15"}]}]},"documentation":{"id":2462,"nodeType":"StructuredDocumentation","src":"1150:94:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2481,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:15","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2464,"mutability":"mutable","name":"value","nameLocation":"1278:5:15","nodeType":"VariableDeclaration","scope":2481,"src":"1270:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2463,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:15"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2481,"src":"1308:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2466,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:15"},"scope":2578,"src":"1249:185:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2556,"nodeType":"Block","src":"1647:347:15","statements":[{"assignments":[2492],"declarations":[{"constant":false,"id":2492,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:15","nodeType":"VariableDeclaration","scope":2556,"src":"1657:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2491,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2501,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2496,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"1693:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2493,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:15"},{"expression":{"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2502,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1714:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2504,"indexExpression":{"hexValue":"30","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2507,"nodeType":"ExpressionStatement","src":"1714:15:15"},{"expression":{"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2508,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1739:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2510,"indexExpression":{"hexValue":"31","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2513,"nodeType":"ExpressionStatement","src":"1739:15:15"},{"body":{"id":2542,"nodeType":"Block","src":"1809:83:15","statements":[{"expression":{"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2528,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1823:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2530,"indexExpression":{"id":2529,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"1830:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2531,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"1835:8:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2535,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"1844:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:15","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2537,"nodeType":"ExpressionStatement","src":"1823:33:15"},{"expression":{"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"1870:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2541,"nodeType":"ExpressionStatement","src":"1870:11:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2522,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"1797:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2543,"initializationExpression":{"assignments":[2515],"declarations":[{"constant":false,"id":2515,"mutability":"mutable","name":"i","nameLocation":"1777:1:15","nodeType":"VariableDeclaration","scope":2543,"src":"1769:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2521,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2517,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"1785:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:15"},"loopExpression":{"expression":{"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:15","subExpression":{"id":2525,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"1806:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2527,"nodeType":"ExpressionStatement","src":"1804:3:15"},"nodeType":"ForStatement","src":"1764:128:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2545,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"1909:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2550,"nodeType":"ExpressionStatement","src":"1901:55:15"},{"expression":{"arguments":[{"id":2553,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"1980:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2551,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:15","typeDescriptions":{}}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2490,"id":2555,"nodeType":"Return","src":"1966:21:15"}]},"documentation":{"id":2482,"nodeType":"StructuredDocumentation","src":"1440:112:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2557,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:15","nodeType":"FunctionDefinition","parameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2484,"mutability":"mutable","name":"value","nameLocation":"1586:5:15","nodeType":"VariableDeclaration","scope":2557,"src":"1578:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2483,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2486,"mutability":"mutable","name":"length","nameLocation":"1601:6:15","nodeType":"VariableDeclaration","scope":2557,"src":"1593:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2485,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:15"},"returnParameters":{"id":2490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2557,"src":"1632:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2488,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:15"},"scope":2578,"src":"1557:437:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2576,"nodeType":"Block","src":"2219:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2570,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"2264:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2568,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:15","typeDescriptions":{}}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2566,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:15","typeDescriptions":{}}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2248:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2573,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"2272:15:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2565,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2481,2557,2577],"referencedDeclaration":2557,"src":"2236:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2564,"id":2575,"nodeType":"Return","src":"2229:59:15"}]},"documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"2000:141:15","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2577,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:15","nodeType":"FunctionDefinition","parameters":{"id":2561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"addr","nameLocation":"2175:4:15","nodeType":"VariableDeclaration","scope":2577,"src":"2167:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:15"},"returnParameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2577,"src":"2204:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2562,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:15"},"scope":2578,"src":"2146:149:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2579,"src":"199:2098:15","usedErrors":[]}],"src":"101:2197:15"},"id":15},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[2939],"MathUpgradeable":[4010],"StringsUpgradeable":[2578]},"id":2940,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2580,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:16"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":2581,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2940,"sourceUnit":2579,"src":"137:35:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2582,"nodeType":"StructuredDocumentation","src":"174:205:16","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2939,"linearizedBaseContracts":[2939],"name":"ECDSAUpgradeable","nameLocation":"388:16:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":2588,"members":[{"id":2583,"name":"NoError","nameLocation":"439:7:16","nodeType":"EnumValue","src":"439:7:16"},{"id":2584,"name":"InvalidSignature","nameLocation":"456:16:16","nodeType":"EnumValue","src":"456:16:16"},{"id":2585,"name":"InvalidSignatureLength","nameLocation":"482:22:16","nodeType":"EnumValue","src":"482:22:16"},{"id":2586,"name":"InvalidSignatureS","nameLocation":"514:17:16","nodeType":"EnumValue","src":"514:17:16"},{"id":2587,"name":"InvalidSignatureV","nameLocation":"541:17:16","nodeType":"EnumValue","src":"541:17:16"}],"name":"RecoverError","nameLocation":"416:12:16","nodeType":"EnumDefinition","src":"411:175:16"},{"body":{"id":2631,"nodeType":"Block","src":"646:457:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"660:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2595,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"669:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2596,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:16","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"669:20:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"756:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2601,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"765:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:16","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2584,"src":"765:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2609,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"865:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2610,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"874:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:16","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2585,"src":"874:35:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2618,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"987:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2619,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"996:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:16","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"996:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2627,"nodeType":"IfStatement","src":"983:114:16","trueBody":{"id":2626,"nodeType":"Block","src":"1028:69:16","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2622,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2625,"nodeType":"ExpressionStatement","src":"1042:44:16"}]}},"id":2628,"nodeType":"IfStatement","src":"861:236:16","trueBody":{"id":2617,"nodeType":"Block","src":"911:66:16","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2613,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2616,"nodeType":"ExpressionStatement","src":"925:41:16"}]}},"id":2629,"nodeType":"IfStatement","src":"752:345:16","trueBody":{"id":2608,"nodeType":"Block","src":"796:59:16","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2604,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2607,"nodeType":"ExpressionStatement","src":"810:34:16"}]}},"id":2630,"nodeType":"IfStatement","src":"656:441:16","trueBody":{"id":2599,"nodeType":"Block","src":"691:55:16","statements":[{"functionReturnParameters":2593,"id":2598,"nodeType":"Return","src":"705:7:16"}]}}]},"id":2632,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:16","nodeType":"FunctionDefinition","parameters":{"id":2592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2591,"mutability":"mutable","name":"error","nameLocation":"626:5:16","nodeType":"VariableDeclaration","scope":2632,"src":"613:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2590,"nodeType":"UserDefinedTypeName","pathNode":{"id":2589,"name":"RecoverError","nameLocations":["613:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"613:12:16"},"referencedDeclaration":2588,"src":"613:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:16"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[],"src":"646:0:16"},"scope":2939,"src":"592:511:16","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2677,"nodeType":"Block","src":"2271:626:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2645,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"2285:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:16","memberName":"length","nodeType":"MemberAccess","src":"2285:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:16","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2675,"nodeType":"Block","src":"2810:81:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2667,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:16","typeDescriptions":{}}},"id":2670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2671,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"2844:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:16","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2585,"src":"2844:35:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2673,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2644,"id":2674,"nodeType":"Return","src":"2824:56:16"}]},"id":2676,"nodeType":"IfStatement","src":"2281:610:16","trueBody":{"id":2666,"nodeType":"Block","src":"2309:495:16","statements":[{"assignments":[2650],"declarations":[{"constant":false,"id":2650,"mutability":"mutable","name":"r","nameLocation":"2331:1:16","nodeType":"VariableDeclaration","scope":2666,"src":"2323:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2651,"nodeType":"VariableDeclarationStatement","src":"2323:9:16"},{"assignments":[2653],"declarations":[{"constant":false,"id":2653,"mutability":"mutable","name":"s","nameLocation":"2354:1:16","nodeType":"VariableDeclaration","scope":2666,"src":"2346:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2654,"nodeType":"VariableDeclarationStatement","src":"2346:9:16"},{"assignments":[2656],"declarations":[{"constant":false,"id":2656,"mutability":"mutable","name":"v","nameLocation":"2375:1:16","nodeType":"VariableDeclaration","scope":2666,"src":"2369:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2655,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2657,"nodeType":"VariableDeclarationStatement","src":"2369:7:16"},{"AST":{"nodeType":"YulBlock","src":"2577:171:16","statements":[{"nodeType":"YulAssignment","src":"2595:32:16","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:16"},"nodeType":"YulFunctionCall","src":"2606:20:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:16"},"nodeType":"YulFunctionCall","src":"2600:27:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:16"}]},{"nodeType":"YulAssignment","src":"2644:32:16","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:16","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:16"},"nodeType":"YulFunctionCall","src":"2655:20:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:16"},"nodeType":"YulFunctionCall","src":"2649:27:16"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:16"}]},{"nodeType":"YulAssignment","src":"2693:41:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:16","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:16","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:16"},"nodeType":"YulFunctionCall","src":"2712:20:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:16"},"nodeType":"YulFunctionCall","src":"2706:27:16"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:16"},"nodeType":"YulFunctionCall","src":"2698:36:16"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2650,"isOffset":false,"isSlot":false,"src":"2595:1:16","valueSize":1},{"declaration":2653,"isOffset":false,"isSlot":false,"src":"2644:1:16","valueSize":1},{"declaration":2637,"isOffset":false,"isSlot":false,"src":"2610:9:16","valueSize":1},{"declaration":2637,"isOffset":false,"isSlot":false,"src":"2659:9:16","valueSize":1},{"declaration":2637,"isOffset":false,"isSlot":false,"src":"2716:9:16","valueSize":1},{"declaration":2656,"isOffset":false,"isSlot":false,"src":"2693:1:16","valueSize":1}],"id":2658,"nodeType":"InlineAssembly","src":"2568:180:16"},{"expression":{"arguments":[{"id":2660,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"2779:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2661,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"2785:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2662,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"2788:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2663,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"2791:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2659,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2678,2752,2846],"referencedDeclaration":2846,"src":"2768:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2644,"id":2665,"nodeType":"Return","src":"2761:32:16"}]}}]},"documentation":{"id":2633,"nodeType":"StructuredDocumentation","src":"1109:1053:16","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2678,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:16","nodeType":"FunctionDefinition","parameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2635,"mutability":"mutable","name":"hash","nameLocation":"2195:4:16","nodeType":"VariableDeclaration","scope":2678,"src":"2187:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2637,"mutability":"mutable","name":"signature","nameLocation":"2214:9:16","nodeType":"VariableDeclaration","scope":2678,"src":"2201:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2636,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:16"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2678,"src":"2248:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2639,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2678,"src":"2257:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2642,"nodeType":"UserDefinedTypeName","pathNode":{"id":2641,"name":"RecoverError","nameLocations":["2257:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"2257:12:16"},"referencedDeclaration":2588,"src":"2257:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:16"},"scope":2939,"src":"2167:730:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2704,"nodeType":"Block","src":"3770:140:16","statements":[{"assignments":[2689,2692],"declarations":[{"constant":false,"id":2689,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:16","nodeType":"VariableDeclaration","scope":2704,"src":"3781:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2688,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2692,"mutability":"mutable","name":"error","nameLocation":"3813:5:16","nodeType":"VariableDeclaration","scope":2704,"src":"3800:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2691,"nodeType":"UserDefinedTypeName","pathNode":{"id":2690,"name":"RecoverError","nameLocations":["3800:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"3800:12:16"},"referencedDeclaration":2588,"src":"3800:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2697,"initialValue":{"arguments":[{"id":2694,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"3833:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2695,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"3839:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2693,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2678,2752,2846],"referencedDeclaration":2678,"src":"3822:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:16"},{"expression":{"arguments":[{"id":2699,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"3871:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2698,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"3859:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2588_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2701,"nodeType":"ExpressionStatement","src":"3859:18:16"},{"expression":{"id":2702,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"3894:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2687,"id":2703,"nodeType":"Return","src":"3887:16:16"}]},"documentation":{"id":2679,"nodeType":"StructuredDocumentation","src":"2903:775:16","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2705,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:16","nodeType":"FunctionDefinition","parameters":{"id":2684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2681,"mutability":"mutable","name":"hash","nameLocation":"3708:4:16","nodeType":"VariableDeclaration","scope":2705,"src":"3700:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2680,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2683,"mutability":"mutable","name":"signature","nameLocation":"3727:9:16","nodeType":"VariableDeclaration","scope":2705,"src":"3714:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2682,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:16"},"returnParameters":{"id":2687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2705,"src":"3761:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2685,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:16"},"scope":2939,"src":"3683:227:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2751,"nodeType":"Block","src":"4297:203:16","statements":[{"assignments":[2721],"declarations":[{"constant":false,"id":2721,"mutability":"mutable","name":"s","nameLocation":"4315:1:16","nodeType":"VariableDeclaration","scope":2751,"src":"4307:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4307:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2728,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2722,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4319:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4332:66:16","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2723,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4324:7:16","typeDescriptions":{}}},"id":2726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4319:80:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4307:92:16"},{"assignments":[2730],"declarations":[{"constant":false,"id":2730,"mutability":"mutable","name":"v","nameLocation":"4415:1:16","nodeType":"VariableDeclaration","scope":2751,"src":"4409:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2729,"name":"uint8","nodeType":"ElementaryTypeName","src":"4409:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2743,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2735,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"4434:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4426:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2733,"name":"uint256","nodeType":"ElementaryTypeName","src":"4426:7:16","typeDescriptions":{}}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4426:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4441:3:16","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4426:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2739,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4425:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4448:2:16","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4425:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4419:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2731,"name":"uint8","nodeType":"ElementaryTypeName","src":"4419:5:16","typeDescriptions":{}}},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4419:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4409:42:16"},{"expression":{"arguments":[{"id":2745,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"4479:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2746,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"4485:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2747,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2710,"src":"4488:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2748,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"4491:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2744,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2678,2752,2846],"referencedDeclaration":2846,"src":"4468:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4468:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2719,"id":2750,"nodeType":"Return","src":"4461:32:16"}]},"documentation":{"id":2706,"nodeType":"StructuredDocumentation","src":"3916:243:16","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2752,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:16","nodeType":"FunctionDefinition","parameters":{"id":2713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2708,"mutability":"mutable","name":"hash","nameLocation":"4201:4:16","nodeType":"VariableDeclaration","scope":2752,"src":"4193:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2710,"mutability":"mutable","name":"r","nameLocation":"4223:1:16","nodeType":"VariableDeclaration","scope":2752,"src":"4215:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4215:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2712,"mutability":"mutable","name":"vs","nameLocation":"4242:2:16","nodeType":"VariableDeclaration","scope":2752,"src":"4234:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2711,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4234:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:67:16"},"returnParameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2752,"src":"4274:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2714,"name":"address","nodeType":"ElementaryTypeName","src":"4274:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2752,"src":"4283:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2717,"nodeType":"UserDefinedTypeName","pathNode":{"id":2716,"name":"RecoverError","nameLocations":["4283:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"4283:12:16"},"referencedDeclaration":2588,"src":"4283:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4273:23:16"},"scope":2939,"src":"4164:336:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2781,"nodeType":"Block","src":"4781:136:16","statements":[{"assignments":[2765,2768],"declarations":[{"constant":false,"id":2765,"mutability":"mutable","name":"recovered","nameLocation":"4800:9:16","nodeType":"VariableDeclaration","scope":2781,"src":"4792:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2764,"name":"address","nodeType":"ElementaryTypeName","src":"4792:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2768,"mutability":"mutable","name":"error","nameLocation":"4824:5:16","nodeType":"VariableDeclaration","scope":2781,"src":"4811:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2767,"nodeType":"UserDefinedTypeName","pathNode":{"id":2766,"name":"RecoverError","nameLocations":["4811:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"4811:12:16"},"referencedDeclaration":2588,"src":"4811:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2774,"initialValue":{"arguments":[{"id":2770,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"4844:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2771,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"4850:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2772,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"4853:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2769,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2678,2752,2846],"referencedDeclaration":2752,"src":"4833:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4833:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4791:65:16"},{"expression":{"arguments":[{"id":2776,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"4878:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2775,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"4866:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2588_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4866:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2778,"nodeType":"ExpressionStatement","src":"4866:18:16"},{"expression":{"id":2779,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"4901:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2763,"id":2780,"nodeType":"Return","src":"4894:16:16"}]},"documentation":{"id":2753,"nodeType":"StructuredDocumentation","src":"4506:154:16","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2782,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4674:7:16","nodeType":"FunctionDefinition","parameters":{"id":2760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2755,"mutability":"mutable","name":"hash","nameLocation":"4699:4:16","nodeType":"VariableDeclaration","scope":2782,"src":"4691:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2757,"mutability":"mutable","name":"r","nameLocation":"4721:1:16","nodeType":"VariableDeclaration","scope":2782,"src":"4713:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2756,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4713:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2759,"mutability":"mutable","name":"vs","nameLocation":"4740:2:16","nodeType":"VariableDeclaration","scope":2782,"src":"4732:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2758,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4732:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4681:67:16"},"returnParameters":{"id":2763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2782,"src":"4772:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2761,"name":"address","nodeType":"ElementaryTypeName","src":"4772:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4771:9:16"},"scope":2939,"src":"4665:252:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2845,"nodeType":"Block","src":"5240:1345:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2801,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"6136:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6128:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2799,"name":"uint256","nodeType":"ElementaryTypeName","src":"6128:7:16","typeDescriptions":{}}},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:66:16","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6128:79:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2814,"nodeType":"IfStatement","src":"6124:161:16","trueBody":{"id":2813,"nodeType":"Block","src":"6209:76:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6239:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6231:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2805,"name":"address","nodeType":"ElementaryTypeName","src":"6231:7:16","typeDescriptions":{}}},"id":2808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6231:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2809,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"6243:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6256:17:16","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"6243:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2811,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6230:44:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2798,"id":2812,"nodeType":"Return","src":"6223:51:16"}]}},{"assignments":[2816],"declarations":[{"constant":false,"id":2816,"mutability":"mutable","name":"signer","nameLocation":"6387:6:16","nodeType":"VariableDeclaration","scope":2845,"src":"6379:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2815,"name":"address","nodeType":"ElementaryTypeName","src":"6379:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2823,"initialValue":{"arguments":[{"id":2818,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"6406:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2819,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"6412:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2820,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"6415:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2821,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"6418:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2817,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6396:9:16","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6396:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6379:41:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2824,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"6434:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6452:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6444:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2825,"name":"address","nodeType":"ElementaryTypeName","src":"6444:7:16","typeDescriptions":{}}},"id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6444:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6434:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2839,"nodeType":"IfStatement","src":"6430:101:16","trueBody":{"id":2838,"nodeType":"Block","src":"6456:75:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6486:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6478:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2830,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:16","typeDescriptions":{}}},"id":2833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6478:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2834,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"6490:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6503:16:16","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2584,"src":"6490:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2836,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6477:43:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2798,"id":2837,"nodeType":"Return","src":"6470:50:16"}]}},{"expression":{"components":[{"id":2840,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"6549:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2841,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2588,"src":"6557:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2588_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":2842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6570:7:16","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"6557:20:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":2843,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6548:30:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":2798,"id":2844,"nodeType":"Return","src":"6541:37:16"}]},"documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"4923:163:16","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2846,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5100:10:16","nodeType":"FunctionDefinition","parameters":{"id":2792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"hash","nameLocation":"5128:4:16","nodeType":"VariableDeclaration","scope":2846,"src":"5120:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5120:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"v","nameLocation":"5148:1:16","nodeType":"VariableDeclaration","scope":2846,"src":"5142:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2786,"name":"uint8","nodeType":"ElementaryTypeName","src":"5142:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2789,"mutability":"mutable","name":"r","nameLocation":"5167:1:16","nodeType":"VariableDeclaration","scope":2846,"src":"5159:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5159:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2791,"mutability":"mutable","name":"s","nameLocation":"5186:1:16","nodeType":"VariableDeclaration","scope":2846,"src":"5178:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2790,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5178:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5110:83:16"},"returnParameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2846,"src":"5217:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2793,"name":"address","nodeType":"ElementaryTypeName","src":"5217:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2846,"src":"5226:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2796,"nodeType":"UserDefinedTypeName","pathNode":{"id":2795,"name":"RecoverError","nameLocations":["5226:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"5226:12:16"},"referencedDeclaration":2588,"src":"5226:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5216:23:16"},"scope":2939,"src":"5091:1494:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2878,"nodeType":"Block","src":"6850:138:16","statements":[{"assignments":[2861,2864],"declarations":[{"constant":false,"id":2861,"mutability":"mutable","name":"recovered","nameLocation":"6869:9:16","nodeType":"VariableDeclaration","scope":2878,"src":"6861:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2860,"name":"address","nodeType":"ElementaryTypeName","src":"6861:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2864,"mutability":"mutable","name":"error","nameLocation":"6893:5:16","nodeType":"VariableDeclaration","scope":2878,"src":"6880:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":2863,"nodeType":"UserDefinedTypeName","pathNode":{"id":2862,"name":"RecoverError","nameLocations":["6880:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":2588,"src":"6880:12:16"},"referencedDeclaration":2588,"src":"6880:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":2871,"initialValue":{"arguments":[{"id":2866,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"6913:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2867,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"6919:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2868,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"6922:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2869,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"6925:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2865,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2678,2752,2846],"referencedDeclaration":2846,"src":"6902:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6902:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2588_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6860:67:16"},{"expression":{"arguments":[{"id":2873,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"6949:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2588","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":2872,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"6937:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2588_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6937:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2875,"nodeType":"ExpressionStatement","src":"6937:18:16"},{"expression":{"id":2876,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"6972:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2859,"id":2877,"nodeType":"Return","src":"6965:16:16"}]},"documentation":{"id":2847,"nodeType":"StructuredDocumentation","src":"6591:122:16","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2879,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6727:7:16","nodeType":"FunctionDefinition","parameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2849,"mutability":"mutable","name":"hash","nameLocation":"6752:4:16","nodeType":"VariableDeclaration","scope":2879,"src":"6744:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2848,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6744:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2851,"mutability":"mutable","name":"v","nameLocation":"6772:1:16","nodeType":"VariableDeclaration","scope":2879,"src":"6766:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2850,"name":"uint8","nodeType":"ElementaryTypeName","src":"6766:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2853,"mutability":"mutable","name":"r","nameLocation":"6791:1:16","nodeType":"VariableDeclaration","scope":2879,"src":"6783:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6783:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2855,"mutability":"mutable","name":"s","nameLocation":"6810:1:16","nodeType":"VariableDeclaration","scope":2879,"src":"6802:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2854,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6802:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6734:83:16"},"returnParameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2879,"src":"6841:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2857,"name":"address","nodeType":"ElementaryTypeName","src":"6841:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6840:9:16"},"scope":2939,"src":"6718:270:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2895,"nodeType":"Block","src":"7356:187:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7494:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":2891,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"7530:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2888,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7477:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7481:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"7477:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7477:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2887,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7467:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7467:69:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2886,"id":2894,"nodeType":"Return","src":"7460:76:16"}]},"documentation":{"id":2880,"nodeType":"StructuredDocumentation","src":"6994:279:16","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2896,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7287:22:16","nodeType":"FunctionDefinition","parameters":{"id":2883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2882,"mutability":"mutable","name":"hash","nameLocation":"7318:4:16","nodeType":"VariableDeclaration","scope":2896,"src":"7310:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7310:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7309:14:16"},"returnParameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2896,"src":"7347:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2884,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7347:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7346:9:16"},"scope":2939,"src":"7278:265:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2917,"nodeType":"Block","src":"7908:127:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7952:32:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2910,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"8014:1:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8016:6:16","memberName":"length","nodeType":"MemberAccess","src":"8014:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2908,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"7986:18:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$2578_$","typeString":"type(library StringsUpgradeable)"}},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8005:8:16","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2461,"src":"7986:27:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7986:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2913,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"8025:1:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2905,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7935:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7939:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"7935:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7935:92:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2904,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7925:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7925:103:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2903,"id":2916,"nodeType":"Return","src":"7918:110:16"}]},"documentation":{"id":2897,"nodeType":"StructuredDocumentation","src":"7549:274:16","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2918,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7837:22:16","nodeType":"FunctionDefinition","parameters":{"id":2900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"s","nameLocation":"7873:1:16","nodeType":"VariableDeclaration","scope":2918,"src":"7860:14:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2898,"name":"bytes","nodeType":"ElementaryTypeName","src":"7860:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7859:16:16"},"returnParameters":{"id":2903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2918,"src":"7899:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7899:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7898:9:16"},"scope":2939,"src":"7828:207:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2937,"nodeType":"Block","src":"8476:92:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":2931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8520:10:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":2932,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"8532:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2933,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"8549:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2929,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8503:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8507:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"8503:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8503:57:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2928,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8493:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8493:68:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2927,"id":2936,"nodeType":"Return","src":"8486:75:16"}]},"documentation":{"id":2919,"nodeType":"StructuredDocumentation","src":"8041:328:16","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2938,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8383:15:16","nodeType":"FunctionDefinition","parameters":{"id":2924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2921,"mutability":"mutable","name":"domainSeparator","nameLocation":"8407:15:16","nodeType":"VariableDeclaration","scope":2938,"src":"8399:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2920,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8399:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2923,"mutability":"mutable","name":"structHash","nameLocation":"8432:10:16","nodeType":"VariableDeclaration","scope":2938,"src":"8424:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8424:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8398:45:16"},"returnParameters":{"id":2927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2938,"src":"8467:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8467:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8466:9:16"},"scope":2939,"src":"8374:194:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2940,"src":"380:8190:16","usedErrors":[]}],"src":"112:8459:16"},"id":16},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"ECDSAUpgradeable":[2939],"EIP712Upgradeable":[3089],"Initializable":[580],"MathUpgradeable":[4010],"StringsUpgradeable":[2578]},"id":3090,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2941,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:17"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"./ECDSAUpgradeable.sol","id":2942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":2940,"src":"138:32:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2943,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3090,"sourceUnit":581,"src":"171:45:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2945,"name":"Initializable","nameLocations":["1430:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"1430:13:17"},"id":2946,"nodeType":"InheritanceSpecifier","src":"1430:13:17"}],"canonicalName":"EIP712Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2944,"nodeType":"StructuredDocumentation","src":"218:1172:17","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._\n @custom:storage-size 52"},"fullyImplemented":true,"id":3089,"linearizedBaseContracts":[3089,580],"name":"EIP712Upgradeable","nameLocation":"1409:17:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2948,"mutability":"mutable","name":"_HASHED_NAME","nameLocation":"1511:12:17","nodeType":"VariableDeclaration","scope":3089,"src":"1495:28:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1495:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2950,"mutability":"mutable","name":"_HASHED_VERSION","nameLocation":"1545:15:17","nodeType":"VariableDeclaration","scope":3089,"src":"1529:31:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2949,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1529:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":2955,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1591:10:17","nodeType":"VariableDeclaration","scope":3089,"src":"1566:133:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1566:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1614:84:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":2952,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1604:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1604:95:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":2970,"nodeType":"Block","src":"2407:55:17","statements":[{"expression":{"arguments":[{"id":2966,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"2441:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2967,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"2447:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2965,"name":"__EIP712_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"2417:23:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2417:38:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2969,"nodeType":"ExpressionStatement","src":"2417:38:17"}]},"documentation":{"id":2956,"nodeType":"StructuredDocumentation","src":"1751:559:17","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":2971,"implemented":true,"kind":"function","modifiers":[{"id":2963,"kind":"modifierInvocation","modifierName":{"id":2962,"name":"onlyInitializing","nameLocations":["2390:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2390:16:17"},"nodeType":"ModifierInvocation","src":"2390:16:17"}],"name":"__EIP712_init","nameLocation":"2324:13:17","nodeType":"FunctionDefinition","parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2958,"mutability":"mutable","name":"name","nameLocation":"2352:4:17","nodeType":"VariableDeclaration","scope":2971,"src":"2338:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2957,"name":"string","nodeType":"ElementaryTypeName","src":"2338:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"version","nameLocation":"2372:7:17","nodeType":"VariableDeclaration","scope":2971,"src":"2358:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2959,"name":"string","nodeType":"ElementaryTypeName","src":"2358:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2337:43:17"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[],"src":"2407:0:17"},"scope":3089,"src":"2315:147:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3006,"nodeType":"Block","src":"2570:195:17","statements":[{"assignments":[2981],"declarations":[{"constant":false,"id":2981,"mutability":"mutable","name":"hashedName","nameLocation":"2588:10:17","nodeType":"VariableDeclaration","scope":3006,"src":"2580:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2980,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2580:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2988,"initialValue":{"arguments":[{"arguments":[{"id":2985,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"2617:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2984,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2611:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2983,"name":"bytes","nodeType":"ElementaryTypeName","src":"2611:5:17","typeDescriptions":{}}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2611:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2982,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2601:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2601:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2580:43:17"},{"assignments":[2990],"declarations":[{"constant":false,"id":2990,"mutability":"mutable","name":"hashedVersion","nameLocation":"2641:13:17","nodeType":"VariableDeclaration","scope":3006,"src":"2633:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2989,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2633:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2997,"initialValue":{"arguments":[{"arguments":[{"id":2994,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"2673:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2667:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2992,"name":"bytes","nodeType":"ElementaryTypeName","src":"2667:5:17","typeDescriptions":{}}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2667:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2991,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2657:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2657:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2633:49:17"},{"expression":{"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2998,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"2692:12:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2999,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"2707:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2692:25:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3001,"nodeType":"ExpressionStatement","src":"2692:25:17"},{"expression":{"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3002,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"2727:15:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3003,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"2745:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2727:31:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3005,"nodeType":"ExpressionStatement","src":"2727:31:17"}]},"id":3007,"implemented":true,"kind":"function","modifiers":[{"id":2978,"kind":"modifierInvocation","modifierName":{"id":2977,"name":"onlyInitializing","nameLocations":["2553:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2553:16:17"},"nodeType":"ModifierInvocation","src":"2553:16:17"}],"name":"__EIP712_init_unchained","nameLocation":"2477:23:17","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"name","nameLocation":"2515:4:17","nodeType":"VariableDeclaration","scope":3007,"src":"2501:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2972,"name":"string","nodeType":"ElementaryTypeName","src":"2501:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"version","nameLocation":"2535:7:17","nodeType":"VariableDeclaration","scope":3007,"src":"2521:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2974,"name":"string","nodeType":"ElementaryTypeName","src":"2521:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2500:43:17"},"returnParameters":{"id":2979,"nodeType":"ParameterList","parameters":[],"src":"2570:0:17"},"scope":3089,"src":"2468:297:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3021,"nodeType":"Block","src":"2913:98:17","statements":[{"expression":{"arguments":[{"id":3014,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"2952:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3015,"name":"_EIP712NameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"2964:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2964:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3017,"name":"_EIP712VersionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"2983:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2983:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3013,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"2930:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2930:74:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3012,"id":3020,"nodeType":"Return","src":"2923:81:17"}]},"documentation":{"id":3008,"nodeType":"StructuredDocumentation","src":"2771:75:17","text":" @dev Returns the domain separator for the current chain."},"id":3022,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"2860:18:17","nodeType":"FunctionDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[],"src":"2878:2:17"},"returnParameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3022,"src":"2904:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2903:9:17"},"scope":3089,"src":"2851:160:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3048,"nodeType":"Block","src":"3166:108:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":3036,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"3204:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3037,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"3214:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3038,"name":"versionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"3224:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3039,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3237:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3243:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"3237:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3043,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3260:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3089","typeString":"contract EIP712Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712Upgradeable_$3089","typeString":"contract EIP712Upgradeable"}],"id":3042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3252:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3041,"name":"address","nodeType":"ElementaryTypeName","src":"3252:7:17","typeDescriptions":{}}},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3252:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3034,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3193:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3197:6:17","memberName":"encode","nodeType":"MemberAccess","src":"3193:10:17","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3193:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3033,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3183:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3183:84:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3032,"id":3047,"nodeType":"Return","src":"3176:91:17"}]},"id":3049,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3026:21:17","nodeType":"FunctionDefinition","parameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3024,"mutability":"mutable","name":"typeHash","nameLocation":"3065:8:17","nodeType":"VariableDeclaration","scope":3049,"src":"3057:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3023,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3057:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3026,"mutability":"mutable","name":"nameHash","nameLocation":"3091:8:17","nodeType":"VariableDeclaration","scope":3049,"src":"3083:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3083:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3028,"mutability":"mutable","name":"versionHash","nameLocation":"3117:11:17","nodeType":"VariableDeclaration","scope":3049,"src":"3109:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3109:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3047:87:17"},"returnParameters":{"id":3032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3049,"src":"3157:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3157:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3156:9:17"},"scope":3089,"src":"3017:257:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3064,"nodeType":"Block","src":"3985:90:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3059,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"4035:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4035:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3061,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"4057:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3057,"name":"ECDSAUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"4002:16:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSAUpgradeable_$2939_$","typeString":"type(library ECDSAUpgradeable)"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4019:15:17","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":2938,"src":"4002:32:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4002:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3056,"id":3063,"nodeType":"Return","src":"3995:73:17"}]},"documentation":{"id":3050,"nodeType":"StructuredDocumentation","src":"3280:614:17","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":3065,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"3908:16:17","nodeType":"FunctionDefinition","parameters":{"id":3053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"structHash","nameLocation":"3933:10:17","nodeType":"VariableDeclaration","scope":3065,"src":"3925:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3051,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3925:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3924:20:17"},"returnParameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3065,"src":"3976:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3976:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3975:9:17"},"scope":3089,"src":"3899:176:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3073,"nodeType":"Block","src":"4378:36:17","statements":[{"expression":{"id":3071,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"4395:12:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3070,"id":3072,"nodeType":"Return","src":"4388:19:17"}]},"documentation":{"id":3066,"nodeType":"StructuredDocumentation","src":"4081:225:17","text":" @dev The hash of the name parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3074,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712NameHash","nameLocation":"4320:15:17","nodeType":"FunctionDefinition","parameters":{"id":3067,"nodeType":"ParameterList","parameters":[],"src":"4335:2:17"},"returnParameters":{"id":3070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3069,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3074,"src":"4369:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4369:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4368:9:17"},"scope":3089,"src":"4311:103:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3082,"nodeType":"Block","src":"4723:39:17","statements":[{"expression":{"id":3080,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"4740:15:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3079,"id":3081,"nodeType":"Return","src":"4733:22:17"}]},"documentation":{"id":3075,"nodeType":"StructuredDocumentation","src":"4420:228:17","text":" @dev The hash of the version parameter for the EIP712 domain.\n NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n are a concern."},"id":3083,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712VersionHash","nameLocation":"4662:18:17","nodeType":"FunctionDefinition","parameters":{"id":3076,"nodeType":"ParameterList","parameters":[],"src":"4680:2:17"},"returnParameters":{"id":3079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3083,"src":"4714:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3077,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4714:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4713:9:17"},"scope":3089,"src":"4653:109:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":3084,"nodeType":"StructuredDocumentation","src":"4768:254:17","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3088,"mutability":"mutable","name":"__gap","nameLocation":"5047:5:17","nodeType":"VariableDeclaration","scope":3089,"src":"5027:25:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"5027:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3087,"length":{"hexValue":"3530","id":3086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5035:2:17","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"5027:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3090,"src":"1391:3664:17","usedErrors":[]}],"src":"113:4943:17"},"id":17},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[2287],"ERC165Upgradeable":[3133],"IERC165Upgradeable":[3145],"Initializable":[580]},"id":3134,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3091,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:18"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":3092,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3134,"sourceUnit":3146,"src":"124:34:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":3093,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3134,"sourceUnit":581,"src":"159:45:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3095,"name":"Initializable","nameLocations":["822:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"822:13:18"},"id":3096,"nodeType":"InheritanceSpecifier","src":"822:13:18"},{"baseName":{"id":3097,"name":"IERC165Upgradeable","nameLocations":["837:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":3145,"src":"837:18:18"},"id":3098,"nodeType":"InheritanceSpecifier","src":"837:18:18"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3094,"nodeType":"StructuredDocumentation","src":"206:576:18","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3133,"linearizedBaseContracts":[3133,3145,580],"name":"ERC165Upgradeable","nameLocation":"801:17:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3103,"nodeType":"Block","src":"913:7:18","statements":[]},"id":3104,"implemented":true,"kind":"function","modifiers":[{"id":3101,"kind":"modifierInvocation","modifierName":{"id":3100,"name":"onlyInitializing","nameLocations":["896:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"896:16:18"},"nodeType":"ModifierInvocation","src":"896:16:18"}],"name":"__ERC165_init","nameLocation":"871:13:18","nodeType":"FunctionDefinition","parameters":{"id":3099,"nodeType":"ParameterList","parameters":[],"src":"884:2:18"},"returnParameters":{"id":3102,"nodeType":"ParameterList","parameters":[],"src":"913:0:18"},"scope":3133,"src":"862:58:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3109,"nodeType":"Block","src":"987:7:18","statements":[]},"id":3110,"implemented":true,"kind":"function","modifiers":[{"id":3107,"kind":"modifierInvocation","modifierName":{"id":3106,"name":"onlyInitializing","nameLocations":["970:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"970:16:18"},"nodeType":"ModifierInvocation","src":"970:16:18"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:18","nodeType":"FunctionDefinition","parameters":{"id":3105,"nodeType":"ParameterList","parameters":[],"src":"958:2:18"},"returnParameters":{"id":3108,"nodeType":"ParameterList","parameters":[],"src":"987:0:18"},"scope":3133,"src":"926:68:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3144],"body":{"id":3126,"nodeType":"Block","src":"1151:75:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3119,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"1168:11:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3121,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"1188:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3145_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$3145_$","typeString":"type(contract IERC165Upgradeable)"}],"id":3120,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$3145","typeString":"type(contract IERC165Upgradeable)"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:18","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3118,"id":3125,"nodeType":"Return","src":"1161:58:18"}]},"documentation":{"id":3111,"nodeType":"StructuredDocumentation","src":"999:56:18","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3127,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:18","nodeType":"FunctionDefinition","overrides":{"id":3115,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:18"},"parameters":{"id":3114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3113,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:18","nodeType":"VariableDeclaration","scope":3127,"src":"1087:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3112,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:18"},"returnParameters":{"id":3118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3127,"src":"1145:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3116,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:18"},"scope":3133,"src":"1060:166:18","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":3128,"nodeType":"StructuredDocumentation","src":"1232:254:18","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":3132,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:18","nodeType":"VariableDeclaration","scope":3133,"src":"1491:25:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3129,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3131,"length":{"hexValue":"3530","id":3130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:18","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":3134,"src":"783:736:18","usedErrors":[]}],"src":"99:1421:18"},"id":18},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[3145]},"id":3146,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3135,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":3136,"nodeType":"StructuredDocumentation","src":"125:279:19","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3145,"linearizedBaseContracts":[3145],"name":"IERC165Upgradeable","nameLocation":"415:18:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3137,"nodeType":"StructuredDocumentation","src":"440:340:19","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3144,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:19","nodeType":"FunctionDefinition","parameters":{"id":3140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3139,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:19","nodeType":"VariableDeclaration","scope":3144,"src":"812:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3138,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:19"},"returnParameters":{"id":3143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3144,"src":"855:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3141,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:19"},"scope":3145,"src":"785:76:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3146,"src":"405:458:19","usedErrors":[]}],"src":"100:764:19"},"id":19},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[4010]},"id":4011,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3147,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":3148,"nodeType":"StructuredDocumentation","src":"128:73:20","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4010,"linearizedBaseContracts":[4010],"name":"MathUpgradeable","nameLocation":"210:15:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":3152,"members":[{"id":3149,"name":"Down","nameLocation":"256:4:20","nodeType":"EnumValue","src":"256:4:20"},{"id":3150,"name":"Up","nameLocation":"298:2:20","nodeType":"EnumValue","src":"298:2:20"},{"id":3151,"name":"Zero","nameLocation":"329:4:20","nodeType":"EnumValue","src":"329:4:20"}],"name":"Rounding","nameLocation":"237:8:20","nodeType":"EnumDefinition","src":"232:122:20"},{"body":{"id":3169,"nodeType":"Block","src":"491:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3162,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"508:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3163,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"512:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3166,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"520:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:20","trueExpression":{"id":3165,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"516:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3161,"id":3168,"nodeType":"Return","src":"501:20:20"}]},"documentation":{"id":3153,"nodeType":"StructuredDocumentation","src":"360:59:20","text":" @dev Returns the largest of two numbers."},"id":3170,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:20","nodeType":"FunctionDefinition","parameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3155,"mutability":"mutable","name":"a","nameLocation":"445:1:20","nodeType":"VariableDeclaration","scope":3170,"src":"437:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3154,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3157,"mutability":"mutable","name":"b","nameLocation":"456:1:20","nodeType":"VariableDeclaration","scope":3170,"src":"448:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:20"},"returnParameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3170,"src":"482:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3159,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:20"},"scope":4010,"src":"424:104:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3187,"nodeType":"Block","src":"666:37:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3180,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"683:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3181,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"687:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3184,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"695:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:20","trueExpression":{"id":3183,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"691:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3179,"id":3186,"nodeType":"Return","src":"676:20:20"}]},"documentation":{"id":3171,"nodeType":"StructuredDocumentation","src":"534:60:20","text":" @dev Returns the smallest of two numbers."},"id":3188,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:20","nodeType":"FunctionDefinition","parameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3173,"mutability":"mutable","name":"a","nameLocation":"620:1:20","nodeType":"VariableDeclaration","scope":3188,"src":"612:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3172,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3175,"mutability":"mutable","name":"b","nameLocation":"631:1:20","nodeType":"VariableDeclaration","scope":3188,"src":"623:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3174,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:20"},"returnParameters":{"id":3179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3188,"src":"657:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:20"},"scope":4010,"src":"599:104:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3210,"nodeType":"Block","src":"887:82:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3198,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"942:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3199,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"946:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3201,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3202,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"952:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3203,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"956:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3197,"id":3209,"nodeType":"Return","src":"934:28:20"}]},"documentation":{"id":3189,"nodeType":"StructuredDocumentation","src":"709:102:20","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3211,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:20","nodeType":"FunctionDefinition","parameters":{"id":3194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3191,"mutability":"mutable","name":"a","nameLocation":"841:1:20","nodeType":"VariableDeclaration","scope":3211,"src":"833:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3190,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3193,"mutability":"mutable","name":"b","nameLocation":"852:1:20","nodeType":"VariableDeclaration","scope":3211,"src":"844:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3192,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:20"},"returnParameters":{"id":3197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3211,"src":"878:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3195,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:20"},"scope":4010,"src":"816:153:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3235,"nodeType":"Block","src":"1239:123:20","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3221,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"1327:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"1341:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3228,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3229,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"1350:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:20","trueExpression":{"hexValue":"30","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3220,"id":3234,"nodeType":"Return","src":"1320:35:20"}]},"documentation":{"id":3212,"nodeType":"StructuredDocumentation","src":"975:188:20","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3236,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:20","nodeType":"FunctionDefinition","parameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3214,"mutability":"mutable","name":"a","nameLocation":"1193:1:20","nodeType":"VariableDeclaration","scope":3236,"src":"1185:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3213,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3216,"mutability":"mutable","name":"b","nameLocation":"1204:1:20","nodeType":"VariableDeclaration","scope":3236,"src":"1196:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:20"},"returnParameters":{"id":3220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3236,"src":"1230:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3218,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:20"},"scope":4010,"src":"1168:194:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3357,"nodeType":"Block","src":"1806:3797:20","statements":[{"id":3356,"nodeType":"UncheckedBlock","src":"1816:3781:20","statements":[{"assignments":[3249],"declarations":[{"constant":false,"id":3249,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:20","nodeType":"VariableDeclaration","scope":3356,"src":"2137:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3250,"nodeType":"VariableDeclarationStatement","src":"2137:13:20"},{"assignments":[3252],"declarations":[{"constant":false,"id":3252,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:20","nodeType":"VariableDeclaration","scope":3356,"src":"2209:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3251,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3253,"nodeType":"VariableDeclarationStatement","src":"2209:13:20"},{"AST":{"nodeType":"YulBlock","src":"2289:157:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:20"},"nodeType":"YulFunctionCall","src":"2330:6:20"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:20"},"nodeType":"YulFunctionCall","src":"2317:20:20"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:20","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:20"},"nodeType":"YulFunctionCall","src":"2363:9:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:20"}]},{"nodeType":"YulAssignment","src":"2389:43:20","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:20"},"nodeType":"YulFunctionCall","src":"2402:14:20"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:20"},"nodeType":"YulFunctionCall","src":"2418:13:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:20"},"nodeType":"YulFunctionCall","src":"2398:34:20"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:20"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3249,"isOffset":false,"isSlot":false,"src":"2354:5:20","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"2410:5:20","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"2425:5:20","valueSize":1},{"declaration":3252,"isOffset":false,"isSlot":false,"src":"2389:5:20","valueSize":1},{"declaration":3239,"isOffset":false,"isSlot":false,"src":"2324:1:20","valueSize":1},{"declaration":3239,"isOffset":false,"isSlot":false,"src":"2367:1:20","valueSize":1},{"declaration":3241,"isOffset":false,"isSlot":false,"src":"2327:1:20","valueSize":1},{"declaration":3241,"isOffset":false,"isSlot":false,"src":"2370:1:20","valueSize":1}],"id":3254,"nodeType":"InlineAssembly","src":"2280:166:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3255,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"2527:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3263,"nodeType":"IfStatement","src":"2523:75:20","trueBody":{"id":3262,"nodeType":"Block","src":"2539:59:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3258,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2564:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3259,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"2572:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3247,"id":3261,"nodeType":"Return","src":"2557:26:20"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3265,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"2708:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3266,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"2722:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3264,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2700:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3269,"nodeType":"ExpressionStatement","src":"2700:28:20"},{"assignments":[3271],"declarations":[{"constant":false,"id":3271,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:20","nodeType":"VariableDeclaration","scope":3356,"src":"2984:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3270,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3272,"nodeType":"VariableDeclarationStatement","src":"2984:17:20"},{"AST":{"nodeType":"YulBlock","src":"3024:291:20","statements":[{"nodeType":"YulAssignment","src":"3093:38:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:20"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:20"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:20"},"nodeType":"YulFunctionCall","src":"3106:25:20"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:20"}]},{"nodeType":"YulAssignment","src":"3213:41:20","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:20"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:20"},"nodeType":"YulFunctionCall","src":"3233:20:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:20"},"nodeType":"YulFunctionCall","src":"3222:32:20"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:20"}]},{"nodeType":"YulAssignment","src":"3271:30:20","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:20"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:20"},"nodeType":"YulFunctionCall","src":"3280:21:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:20"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3243,"isOffset":false,"isSlot":false,"src":"3119:11:20","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"3247:5:20","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"3271:5:20","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"3284:5:20","valueSize":1},{"declaration":3252,"isOffset":false,"isSlot":false,"src":"3213:5:20","valueSize":1},{"declaration":3252,"isOffset":false,"isSlot":false,"src":"3226:5:20","valueSize":1},{"declaration":3271,"isOffset":false,"isSlot":false,"src":"3093:9:20","valueSize":1},{"declaration":3271,"isOffset":false,"isSlot":false,"src":"3236:9:20","valueSize":1},{"declaration":3271,"isOffset":false,"isSlot":false,"src":"3291:9:20","valueSize":1},{"declaration":3239,"isOffset":false,"isSlot":false,"src":"3113:1:20","valueSize":1},{"declaration":3241,"isOffset":false,"isSlot":false,"src":"3116:1:20","valueSize":1}],"id":3273,"nodeType":"InlineAssembly","src":"3015:300:20"},{"assignments":[3275],"declarations":[{"constant":false,"id":3275,"mutability":"mutable","name":"twos","nameLocation":"3630:4:20","nodeType":"VariableDeclaration","scope":3356,"src":"3622:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3274,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3283,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3276,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"3637:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:20","subExpression":{"id":3277,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"3653:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3281,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:20"},{"AST":{"nodeType":"YulBlock","src":"3692:362:20","statements":[{"nodeType":"YulAssignment","src":"3757:37:20","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:20"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:20"},"nodeType":"YulFunctionCall","src":"3772:22:20"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:20"}]},{"nodeType":"YulAssignment","src":"3861:25:20","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:20"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:20"},"nodeType":"YulFunctionCall","src":"3870:16:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:20"}]},{"nodeType":"YulAssignment","src":"4001:39:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:20","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:20"},"nodeType":"YulFunctionCall","src":"4017:12:20"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:20"},"nodeType":"YulFunctionCall","src":"4013:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:20"},"nodeType":"YulFunctionCall","src":"4009:31:20"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:20"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3243,"isOffset":false,"isSlot":false,"src":"3757:11:20","valueSize":1},{"declaration":3243,"isOffset":false,"isSlot":false,"src":"3776:11:20","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"3861:5:20","valueSize":1},{"declaration":3249,"isOffset":false,"isSlot":false,"src":"3874:5:20","valueSize":1},{"declaration":3275,"isOffset":false,"isSlot":false,"src":"3789:4:20","valueSize":1},{"declaration":3275,"isOffset":false,"isSlot":false,"src":"3881:4:20","valueSize":1},{"declaration":3275,"isOffset":false,"isSlot":false,"src":"4001:4:20","valueSize":1},{"declaration":3275,"isOffset":false,"isSlot":false,"src":"4024:4:20","valueSize":1},{"declaration":3275,"isOffset":false,"isSlot":false,"src":"4031:4:20","valueSize":1}],"id":3284,"nodeType":"InlineAssembly","src":"3683:371:20"},{"expression":{"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3285,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"4120:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3286,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"4129:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3287,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"4137:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3290,"nodeType":"ExpressionStatement","src":"4120:21:20"},{"assignments":[3292],"declarations":[{"constant":false,"id":3292,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:20","nodeType":"VariableDeclaration","scope":3356,"src":"4459:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3291,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3299,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3294,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"4482:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3296,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:20"},{"expression":{"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3300,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4715:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3302,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"4730:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3303,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4744:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3307,"nodeType":"ExpressionStatement","src":"4715:36:20"},{"expression":{"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3308,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4784:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3310,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"4799:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3311,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4813:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3315,"nodeType":"ExpressionStatement","src":"4784:36:20"},{"expression":{"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3316,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4854:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3318,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"4869:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3319,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4883:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3323,"nodeType":"ExpressionStatement","src":"4854:36:20"},{"expression":{"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3324,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4924:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"4939:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3327,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4953:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3331,"nodeType":"ExpressionStatement","src":"4924:36:20"},{"expression":{"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3332,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"4994:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3334,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"5009:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3335,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"5023:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3339,"nodeType":"ExpressionStatement","src":"4994:36:20"},{"expression":{"id":3346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3340,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"5065:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3342,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"5080:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3343,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"5094:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3347,"nodeType":"ExpressionStatement","src":"5065:36:20"},{"expression":{"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5535:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3349,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"5544:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3350,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"5552:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3353,"nodeType":"ExpressionStatement","src":"5535:24:20"},{"expression":{"id":3354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5580:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3247,"id":3355,"nodeType":"Return","src":"5573:13:20"}]}]},"documentation":{"id":3237,"nodeType":"StructuredDocumentation","src":"1368:305:20","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3358,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:20","nodeType":"FunctionDefinition","parameters":{"id":3244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3239,"mutability":"mutable","name":"x","nameLocation":"1711:1:20","nodeType":"VariableDeclaration","scope":3358,"src":"1703:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3238,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3241,"mutability":"mutable","name":"y","nameLocation":"1730:1:20","nodeType":"VariableDeclaration","scope":3358,"src":"1722:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3240,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3243,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:20","nodeType":"VariableDeclaration","scope":3358,"src":"1741:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:20"},"returnParameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3246,"mutability":"mutable","name":"result","nameLocation":"1798:6:20","nodeType":"VariableDeclaration","scope":3358,"src":"1790:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:20"},"scope":4010,"src":"1678:3925:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3401,"nodeType":"Block","src":"5883:189:20","statements":[{"assignments":[3374],"declarations":[{"constant":false,"id":3374,"mutability":"mutable","name":"result","nameLocation":"5901:6:20","nodeType":"VariableDeclaration","scope":3401,"src":"5893:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3373,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3380,"initialValue":{"arguments":[{"id":3376,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"5917:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3377,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"5920:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3378,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"5923:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3375,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3358,3402],"referencedDeclaration":3358,"src":"5910:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5910:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:20"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3381,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"5949:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3382,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"5961:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3152_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5970:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3150,"src":"5961:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3386,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"5983:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3387,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"5986:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3388,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"5989:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3385,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:20","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3398,"nodeType":"IfStatement","src":"5945:98:20","trueBody":{"id":3397,"nodeType":"Block","src":"6007:36:20","statements":[{"expression":{"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"6021:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3396,"nodeType":"ExpressionStatement","src":"6021:11:20"}]}},{"expression":{"id":3399,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"6059:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3372,"id":3400,"nodeType":"Return","src":"6052:13:20"}]},"documentation":{"id":3359,"nodeType":"StructuredDocumentation","src":"5609:121:20","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3402,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:20","nodeType":"FunctionDefinition","parameters":{"id":3369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3361,"mutability":"mutable","name":"x","nameLocation":"5768:1:20","nodeType":"VariableDeclaration","scope":3402,"src":"5760:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3360,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3363,"mutability":"mutable","name":"y","nameLocation":"5787:1:20","nodeType":"VariableDeclaration","scope":3402,"src":"5779:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3362,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3365,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:20","nodeType":"VariableDeclaration","scope":3402,"src":"5798:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3368,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:20","nodeType":"VariableDeclaration","scope":3402,"src":"5827:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3367,"nodeType":"UserDefinedTypeName","pathNode":{"id":3366,"name":"Rounding","nameLocations":["5827:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3152,"src":"5827:8:20"},"referencedDeclaration":3152,"src":"5827:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:20"},"returnParameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3402,"src":"5874:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3370,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:20"},"scope":4010,"src":"5735:337:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3513,"nodeType":"Block","src":"6348:1585:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3410,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"6362:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3416,"nodeType":"IfStatement","src":"6358:45:20","trueBody":{"id":3415,"nodeType":"Block","src":"6370:33:20","statements":[{"expression":{"hexValue":"30","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3409,"id":3414,"nodeType":"Return","src":"6384:8:20"}]}},{"assignments":[3418],"declarations":[{"constant":false,"id":3418,"mutability":"mutable","name":"result","nameLocation":"7090:6:20","nodeType":"VariableDeclaration","scope":3513,"src":"7082:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3417,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3427,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3421,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7110:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3420,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3682,3718],"referencedDeclaration":3682,"src":"7105:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7105:7:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3425,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:20"},{"id":3512,"nodeType":"UncheckedBlock","src":"7519:408:20","statements":[{"expression":{"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3428,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7543:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3429,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7553:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3430,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7562:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3431,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7566:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3434,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3438,"nodeType":"ExpressionStatement","src":"7543:35:20"},{"expression":{"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7592:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3440,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7602:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3441,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7611:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3442,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7615:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3445,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3449,"nodeType":"ExpressionStatement","src":"7592:35:20"},{"expression":{"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7641:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7651:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3452,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7660:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3453,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7664:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3456,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3460,"nodeType":"ExpressionStatement","src":"7641:35:20"},{"expression":{"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7690:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3462,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7700:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3463,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7709:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3464,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7713:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3467,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3471,"nodeType":"ExpressionStatement","src":"7690:35:20"},{"expression":{"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3472,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7739:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7749:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3474,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7758:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3475,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7762:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3478,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3482,"nodeType":"ExpressionStatement","src":"7739:35:20"},{"expression":{"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7788:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3484,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7798:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3485,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7807:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3486,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7811:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3493,"nodeType":"ExpressionStatement","src":"7788:35:20"},{"expression":{"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3494,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7837:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3495,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7847:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3496,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7856:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3497,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7860:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3500,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3504,"nodeType":"ExpressionStatement","src":"7837:35:20"},{"expression":{"arguments":[{"id":3506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7897:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3507,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"7905:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3508,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3418,"src":"7909:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3505,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"7893:3:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7893:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3409,"id":3511,"nodeType":"Return","src":"7886:30:20"}]}]},"documentation":{"id":3403,"nodeType":"StructuredDocumentation","src":"6078:208:20","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3514,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:20","nodeType":"FunctionDefinition","parameters":{"id":3406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"mutability":"mutable","name":"a","nameLocation":"6313:1:20","nodeType":"VariableDeclaration","scope":3514,"src":"6305:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3404,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:20"},"returnParameters":{"id":3409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3514,"src":"6339:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3407,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:20"},"scope":4010,"src":"6291:1642:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3549,"nodeType":"Block","src":"8109:161:20","statements":[{"id":3548,"nodeType":"UncheckedBlock","src":"8119:145:20","statements":[{"assignments":[3526],"declarations":[{"constant":false,"id":3526,"mutability":"mutable","name":"result","nameLocation":"8151:6:20","nodeType":"VariableDeclaration","scope":3548,"src":"8143:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3525,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3530,"initialValue":{"arguments":[{"id":3528,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"8165:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3527,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3514,3550],"referencedDeclaration":3514,"src":"8160:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8160:7:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3531,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8188:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3532,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"8198:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3533,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"8210:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3152_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8219:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3150,"src":"8210:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3536,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8225:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8234:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3539,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"8243:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:20","trueExpression":{"hexValue":"31","id":3542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3545,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3524,"id":3547,"nodeType":"Return","src":"8181:72:20"}]}]},"documentation":{"id":3515,"nodeType":"StructuredDocumentation","src":"7939:89:20","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3550,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:20","nodeType":"FunctionDefinition","parameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3517,"mutability":"mutable","name":"a","nameLocation":"8055:1:20","nodeType":"VariableDeclaration","scope":3550,"src":"8047:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3516,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3520,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:20","nodeType":"VariableDeclaration","scope":3550,"src":"8058:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3519,"nodeType":"UserDefinedTypeName","pathNode":{"id":3518,"name":"Rounding","nameLocations":["8058:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3152,"src":"8058:8:20"},"referencedDeclaration":3152,"src":"8058:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:20"},"returnParameters":{"id":3524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3550,"src":"8100:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3522,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:20"},"scope":4010,"src":"8033:237:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3681,"nodeType":"Block","src":"8455:922:20","statements":[{"assignments":[3559],"declarations":[{"constant":false,"id":3559,"mutability":"mutable","name":"result","nameLocation":"8473:6:20","nodeType":"VariableDeclaration","scope":3681,"src":"8465:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3561,"initialValue":{"hexValue":"30","id":3560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:20"},{"id":3678,"nodeType":"UncheckedBlock","src":"8493:855:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8521:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3576,"nodeType":"IfStatement","src":"8517:99:20","trueBody":{"id":3575,"nodeType":"Block","src":"8539:77:20","statements":[{"expression":{"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8557:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3570,"nodeType":"ExpressionStatement","src":"8557:13:20"},{"expression":{"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3571,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8588:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3574,"nodeType":"ExpressionStatement","src":"8588:13:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8633:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3591,"nodeType":"IfStatement","src":"8629:96:20","trueBody":{"id":3590,"nodeType":"Block","src":"8650:75:20","statements":[{"expression":{"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8668:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3585,"nodeType":"ExpressionStatement","src":"8668:12:20"},{"expression":{"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3586,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8698:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3589,"nodeType":"ExpressionStatement","src":"8698:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8742:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3606,"nodeType":"IfStatement","src":"8738:96:20","trueBody":{"id":3605,"nodeType":"Block","src":"8759:75:20","statements":[{"expression":{"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8777:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3600,"nodeType":"ExpressionStatement","src":"8777:12:20"},{"expression":{"id":3603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8807:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3604,"nodeType":"ExpressionStatement","src":"8807:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8851:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3621,"nodeType":"IfStatement","src":"8847:96:20","trueBody":{"id":3620,"nodeType":"Block","src":"8868:75:20","statements":[{"expression":{"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8886:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3615,"nodeType":"ExpressionStatement","src":"8886:12:20"},{"expression":{"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3616,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"8916:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3619,"nodeType":"ExpressionStatement","src":"8916:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8960:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3636,"nodeType":"IfStatement","src":"8956:93:20","trueBody":{"id":3635,"nodeType":"Block","src":"8976:73:20","statements":[{"expression":{"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"8994:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3630,"nodeType":"ExpressionStatement","src":"8994:11:20"},{"expression":{"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3631,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9023:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3634,"nodeType":"ExpressionStatement","src":"9023:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"9066:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3651,"nodeType":"IfStatement","src":"9062:93:20","trueBody":{"id":3650,"nodeType":"Block","src":"9082:73:20","statements":[{"expression":{"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"9100:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3645,"nodeType":"ExpressionStatement","src":"9100:11:20"},{"expression":{"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9129:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3649,"nodeType":"ExpressionStatement","src":"9129:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"9172:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3666,"nodeType":"IfStatement","src":"9168:93:20","trueBody":{"id":3665,"nodeType":"Block","src":"9188:73:20","statements":[{"expression":{"id":3659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3657,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"9206:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3660,"nodeType":"ExpressionStatement","src":"9206:11:20"},{"expression":{"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3661,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9235:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3664,"nodeType":"ExpressionStatement","src":"9235:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"9278:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3677,"nodeType":"IfStatement","src":"9274:64:20","trueBody":{"id":3676,"nodeType":"Block","src":"9294:44:20","statements":[{"expression":{"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3672,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9312:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3675,"nodeType":"ExpressionStatement","src":"9312:11:20"}]}}]},{"expression":{"id":3679,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"9364:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3557,"id":3680,"nodeType":"Return","src":"9357:13:20"}]},"documentation":{"id":3551,"nodeType":"StructuredDocumentation","src":"8276:113:20","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3682,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:20","nodeType":"FunctionDefinition","parameters":{"id":3554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3553,"mutability":"mutable","name":"value","nameLocation":"8416:5:20","nodeType":"VariableDeclaration","scope":3682,"src":"8408:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3552,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:20"},"returnParameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3682,"src":"8446:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3555,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:20"},"scope":4010,"src":"8394:983:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3717,"nodeType":"Block","src":"9610:165:20","statements":[{"id":3716,"nodeType":"UncheckedBlock","src":"9620:149:20","statements":[{"assignments":[3694],"declarations":[{"constant":false,"id":3694,"mutability":"mutable","name":"result","nameLocation":"9652:6:20","nodeType":"VariableDeclaration","scope":3716,"src":"9644:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3698,"initialValue":{"arguments":[{"id":3696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"9666:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3695,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3682,3718],"referencedDeclaration":3682,"src":"9661:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9661:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"9693:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3700,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"9703:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3701,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"9715:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3152_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9724:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3150,"src":"9715:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"9735:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"9744:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:20","trueExpression":{"hexValue":"31","id":3710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3713,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3692,"id":3715,"nodeType":"Return","src":"9686:72:20"}]}]},"documentation":{"id":3683,"nodeType":"StructuredDocumentation","src":"9383:142:20","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3718,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:20","nodeType":"FunctionDefinition","parameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3685,"mutability":"mutable","name":"value","nameLocation":"9552:5:20","nodeType":"VariableDeclaration","scope":3718,"src":"9544:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3684,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3688,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:20","nodeType":"VariableDeclaration","scope":3718,"src":"9559:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3687,"nodeType":"UserDefinedTypeName","pathNode":{"id":3686,"name":"Rounding","nameLocations":["9559:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3152,"src":"9559:8:20"},"referencedDeclaration":3152,"src":"9559:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:20"},"returnParameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3718,"src":"9601:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:20"},"scope":4010,"src":"9530:245:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3846,"nodeType":"Block","src":"9962:828:20","statements":[{"assignments":[3727],"declarations":[{"constant":false,"id":3727,"mutability":"mutable","name":"result","nameLocation":"9980:6:20","nodeType":"VariableDeclaration","scope":3846,"src":"9972:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3729,"initialValue":{"hexValue":"30","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:20"},{"id":3843,"nodeType":"UncheckedBlock","src":"10000:761:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10028:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3746,"nodeType":"IfStatement","src":"10024:99:20","trueBody":{"id":3745,"nodeType":"Block","src":"10045:78:20","statements":[{"expression":{"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10063:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3740,"nodeType":"ExpressionStatement","src":"10063:15:20"},{"expression":{"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3741,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10096:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3744,"nodeType":"ExpressionStatement","src":"10096:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10140:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3763,"nodeType":"IfStatement","src":"10136:99:20","trueBody":{"id":3762,"nodeType":"Block","src":"10157:78:20","statements":[{"expression":{"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10175:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3757,"nodeType":"ExpressionStatement","src":"10175:15:20"},{"expression":{"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3758,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10208:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3761,"nodeType":"ExpressionStatement","src":"10208:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3764,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10252:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3767,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3780,"nodeType":"IfStatement","src":"10248:99:20","trueBody":{"id":3779,"nodeType":"Block","src":"10269:78:20","statements":[{"expression":{"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10287:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3774,"nodeType":"ExpressionStatement","src":"10287:15:20"},{"expression":{"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3775,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10320:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3778,"nodeType":"ExpressionStatement","src":"10320:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10364:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3797,"nodeType":"IfStatement","src":"10360:96:20","trueBody":{"id":3796,"nodeType":"Block","src":"10380:76:20","statements":[{"expression":{"id":3790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10398:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3791,"nodeType":"ExpressionStatement","src":"10398:14:20"},{"expression":{"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10430:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3795,"nodeType":"ExpressionStatement","src":"10430:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10473:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3814,"nodeType":"IfStatement","src":"10469:96:20","trueBody":{"id":3813,"nodeType":"Block","src":"10489:76:20","statements":[{"expression":{"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3803,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10507:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3808,"nodeType":"ExpressionStatement","src":"10507:14:20"},{"expression":{"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3809,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10539:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3812,"nodeType":"ExpressionStatement","src":"10539:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3815,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10582:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3831,"nodeType":"IfStatement","src":"10578:96:20","trueBody":{"id":3830,"nodeType":"Block","src":"10598:76:20","statements":[{"expression":{"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10616:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3825,"nodeType":"ExpressionStatement","src":"10616:14:20"},{"expression":{"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3826,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10648:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3829,"nodeType":"ExpressionStatement","src":"10648:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3832,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10691:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3842,"nodeType":"IfStatement","src":"10687:64:20","trueBody":{"id":3841,"nodeType":"Block","src":"10707:44:20","statements":[{"expression":{"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3837,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10725:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3840,"nodeType":"ExpressionStatement","src":"10725:11:20"}]}}]},{"expression":{"id":3844,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"10777:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3725,"id":3845,"nodeType":"Return","src":"10770:13:20"}]},"documentation":{"id":3719,"nodeType":"StructuredDocumentation","src":"9781:114:20","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3847,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:20","nodeType":"FunctionDefinition","parameters":{"id":3722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"value","nameLocation":"9923:5:20","nodeType":"VariableDeclaration","scope":3847,"src":"9915:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3720,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:20"},"returnParameters":{"id":3725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3847,"src":"9953:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3723,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:20"},"scope":4010,"src":"9900:890:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3882,"nodeType":"Block","src":"11025:165:20","statements":[{"id":3881,"nodeType":"UncheckedBlock","src":"11035:149:20","statements":[{"assignments":[3859],"declarations":[{"constant":false,"id":3859,"mutability":"mutable","name":"result","nameLocation":"11067:6:20","nodeType":"VariableDeclaration","scope":3881,"src":"11059:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3858,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3863,"initialValue":{"arguments":[{"id":3861,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"11082:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3860,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3847,3883],"referencedDeclaration":3847,"src":"11076:5:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"11109:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3865,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3853,"src":"11119:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3866,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"11131:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3152_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11140:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3150,"src":"11131:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3870,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"11150:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3872,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"11159:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:20","trueExpression":{"hexValue":"31","id":3875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3878,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3857,"id":3880,"nodeType":"Return","src":"11102:71:20"}]}]},"documentation":{"id":3848,"nodeType":"StructuredDocumentation","src":"10796:143:20","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3883,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:20","nodeType":"FunctionDefinition","parameters":{"id":3854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3850,"mutability":"mutable","name":"value","nameLocation":"10967:5:20","nodeType":"VariableDeclaration","scope":3883,"src":"10959:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3849,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3853,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:20","nodeType":"VariableDeclaration","scope":3883,"src":"10974:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3852,"nodeType":"UserDefinedTypeName","pathNode":{"id":3851,"name":"Rounding","nameLocations":["10974:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3152,"src":"10974:8:20"},"referencedDeclaration":3152,"src":"10974:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:20"},"returnParameters":{"id":3857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3883,"src":"11016:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:20"},"scope":4010,"src":"10944:246:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3969,"nodeType":"Block","src":"11504:600:20","statements":[{"assignments":[3892],"declarations":[{"constant":false,"id":3892,"mutability":"mutable","name":"result","nameLocation":"11522:6:20","nodeType":"VariableDeclaration","scope":3969,"src":"11514:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3891,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3894,"initialValue":{"hexValue":"30","id":3893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:20"},{"id":3966,"nodeType":"UncheckedBlock","src":"11542:533:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11570:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3909,"nodeType":"IfStatement","src":"11566:98:20","trueBody":{"id":3908,"nodeType":"Block","src":"11588:76:20","statements":[{"expression":{"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3900,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11606:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3903,"nodeType":"ExpressionStatement","src":"11606:13:20"},{"expression":{"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3904,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11637:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3907,"nodeType":"ExpressionStatement","src":"11637:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11681:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3924,"nodeType":"IfStatement","src":"11677:95:20","trueBody":{"id":3923,"nodeType":"Block","src":"11698:74:20","statements":[{"expression":{"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11716:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3918,"nodeType":"ExpressionStatement","src":"11716:12:20"},{"expression":{"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3919,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11746:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3922,"nodeType":"ExpressionStatement","src":"11746:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3925,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11789:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3939,"nodeType":"IfStatement","src":"11785:95:20","trueBody":{"id":3938,"nodeType":"Block","src":"11806:74:20","statements":[{"expression":{"id":3932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3930,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11824:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3933,"nodeType":"ExpressionStatement","src":"11824:12:20"},{"expression":{"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3934,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11854:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3937,"nodeType":"ExpressionStatement","src":"11854:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3940,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11897:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3954,"nodeType":"IfStatement","src":"11893:95:20","trueBody":{"id":3953,"nodeType":"Block","src":"11914:74:20","statements":[{"expression":{"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"11932:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3948,"nodeType":"ExpressionStatement","src":"11932:12:20"},{"expression":{"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3949,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"11962:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3952,"nodeType":"ExpressionStatement","src":"11962:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3955,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3886,"src":"12005:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3965,"nodeType":"IfStatement","src":"12001:64:20","trueBody":{"id":3964,"nodeType":"Block","src":"12021:44:20","statements":[{"expression":{"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"12039:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3963,"nodeType":"ExpressionStatement","src":"12039:11:20"}]}}]},{"expression":{"id":3967,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3892,"src":"12091:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3890,"id":3968,"nodeType":"Return","src":"12084:13:20"}]},"documentation":{"id":3884,"nodeType":"StructuredDocumentation","src":"11196:240:20","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3970,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:20","nodeType":"FunctionDefinition","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3886,"mutability":"mutable","name":"value","nameLocation":"11465:5:20","nodeType":"VariableDeclaration","scope":3970,"src":"11457:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3885,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:20"},"returnParameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3970,"src":"11495:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3888,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:20"},"scope":4010,"src":"11441:663:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4008,"nodeType":"Block","src":"12340:173:20","statements":[{"id":4007,"nodeType":"UncheckedBlock","src":"12350:157:20","statements":[{"assignments":[3982],"declarations":[{"constant":false,"id":3982,"mutability":"mutable","name":"result","nameLocation":"12382:6:20","nodeType":"VariableDeclaration","scope":4007,"src":"12374:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3981,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3986,"initialValue":{"arguments":[{"id":3984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"12398:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3983,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3970,4009],"referencedDeclaration":3970,"src":"12391:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3987,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"12425:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3988,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"12435:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3989,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"12447:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3152_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":3990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12456:2:20","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3150,"src":"12447:11:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"12468:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3996,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3998,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"12482:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:20","trueExpression":{"hexValue":"31","id":4001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4004,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3980,"id":4006,"nodeType":"Return","src":"12418:78:20"}]}]},"documentation":{"id":3971,"nodeType":"StructuredDocumentation","src":"12110:143:20","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4009,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:20","nodeType":"FunctionDefinition","parameters":{"id":3977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3973,"mutability":"mutable","name":"value","nameLocation":"12282:5:20","nodeType":"VariableDeclaration","scope":4009,"src":"12274:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3972,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3976,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:20","nodeType":"VariableDeclaration","scope":4009,"src":"12289:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":3975,"nodeType":"UserDefinedTypeName","pathNode":{"id":3974,"name":"Rounding","nameLocations":["12289:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3152,"src":"12289:8:20"},"referencedDeclaration":3152,"src":"12289:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3152","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:20"},"returnParameters":{"id":3980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3979,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4009,"src":"12331:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3978,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:20"},"scope":4010,"src":"12258:255:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4011,"src":"202:12313:20","usedErrors":[]}],"src":"103:12413:20"},"id":20},"contracts/BaseUpgradeablePausable.sol":{"ast":{"absolutePath":"contracts/BaseUpgradeablePausable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2287],"BaseUpgradeablePausable":[4112],"BaseUpgradeablePausable__ZeroAddressError":[4019],"Constants":[4141],"ContextUpgradeable":[2329],"ERC165Upgradeable":[3133],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[3145],"Initializable":[580],"MathUpgradeable":[4010],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"StringsUpgradeable":[2578]},"id":4113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4012,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"33:23:21"},{"absolutePath":"contracts/Constants.sol","file":"./Constants.sol","id":4013,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4113,"sourceUnit":4142,"src":"58:25:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":4014,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4113,"sourceUnit":581,"src":"85:75:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":4015,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4113,"sourceUnit":708,"src":"161:78:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":4016,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4113,"sourceUnit":336,"src":"240:81:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":4017,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4113,"sourceUnit":781,"src":"322:85:21","symbolAliases":[],"unitAlias":""},{"errorSelector":"54151394","id":4019,"name":"BaseUpgradeablePausable__ZeroAddressError","nameLocation":"415:41:21","nodeType":"ErrorDefinition","parameters":{"id":4018,"nodeType":"ParameterList","parameters":[],"src":"456:2:21"},"src":"409:50:21"},{"abstract":false,"baseContracts":[{"baseName":{"id":4020,"name":"Initializable","nameLocations":["502:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"502:13:21"},"id":4021,"nodeType":"InheritanceSpecifier","src":"502:13:21"},{"baseName":{"id":4022,"name":"PausableUpgradeable","nameLocations":["522:19:21"],"nodeType":"IdentifierPath","referencedDeclaration":707,"src":"522:19:21"},"id":4023,"nodeType":"InheritanceSpecifier","src":"522:19:21"},{"baseName":{"id":4024,"name":"AccessControlUpgradeable","nameLocations":["548:24:21"],"nodeType":"IdentifierPath","referencedDeclaration":335,"src":"548:24:21"},"id":4025,"nodeType":"InheritanceSpecifier","src":"548:24:21"},{"baseName":{"id":4026,"name":"ReentrancyGuardUpgradeable","nameLocations":["578:26:21"],"nodeType":"IdentifierPath","referencedDeclaration":780,"src":"578:26:21"},"id":4027,"nodeType":"InheritanceSpecifier","src":"578:26:21"}],"canonicalName":"BaseUpgradeablePausable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4112,"linearizedBaseContracts":[4112,780,335,3133,3145,408,707,2329,580],"name":"BaseUpgradeablePausable","nameLocation":"470:23:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":4036,"nodeType":"Block","src":"634:94:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4030,"name":"isAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"652:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"652:9:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d207468697320616374696f6e2e","id":4032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"663:46:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""},"value":"Must have admin role to perform this action."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""}],"id":4029,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"644:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"644:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4034,"nodeType":"ExpressionStatement","src":"644:66:21"},{"id":4035,"nodeType":"PlaceholderStatement","src":"720:1:21"}]},"id":4037,"name":"onlyAdmin","nameLocation":"622:9:21","nodeType":"ModifierDefinition","parameters":{"id":4028,"nodeType":"ParameterList","parameters":[],"src":"631:2:21"},"src":"613:115:21","virtual":false,"visibility":"internal"},{"body":{"id":4096,"nodeType":"Block","src":"815:468:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4044,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"828:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"845:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"837:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4045,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:21","typeDescriptions":{}}},"id":4048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"828:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4054,"nodeType":"IfStatement","src":"825:99:21","trueBody":{"id":4053,"nodeType":"Block","src":"849:75:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4050,"name":"BaseUpgradeablePausable__ZeroAddressError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"870:41:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:43:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4052,"nodeType":"RevertStatement","src":"863:50:21"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4055,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"933:15:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4057,"nodeType":"ExpressionStatement","src":"933:17:21"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4058,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"960:20:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"960:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4060,"nodeType":"ExpressionStatement","src":"960:22:21"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4061,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"992:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4063,"nodeType":"ExpressionStatement","src":"992:24:21"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4065,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1038:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4141_$","typeString":"type(library Constants)"}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:12:21","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4132,"src":"1038:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1038:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4068,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"1064:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4064,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1027:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1027:43:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4070,"nodeType":"ExpressionStatement","src":"1027:43:21"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4072,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1091:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4141_$","typeString":"type(library Constants)"}},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1101:13:21","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":4140,"src":"1091:23:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4075,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4039,"src":"1118:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4071,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1080:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1080:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4077,"nodeType":"ExpressionStatement","src":"1080:44:21"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4079,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1149:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4141_$","typeString":"type(library Constants)"}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1159:13:21","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":4140,"src":"1149:23:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4082,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1176:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4141_$","typeString":"type(library Constants)"}},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1186:12:21","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4132,"src":"1176:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4078,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1135:13:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1135:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4086,"nodeType":"ExpressionStatement","src":"1135:66:21"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4088,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1225:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4141_$","typeString":"type(library Constants)"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1235:12:21","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4132,"src":"1225:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4091,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1251:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4141_$","typeString":"type(library Constants)"}},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1261:12:21","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4132,"src":"1251:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1251:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4087,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1211:13:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1211:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4095,"nodeType":"ExpressionStatement","src":"1211:65:21"}]},"functionSelector":"6e810b1a","id":4097,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":4042,"kind":"modifierInvocation","modifierName":{"id":4041,"name":"onlyInitializing","nameLocations":["796:16:21"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"796:16:21"},"nodeType":"ModifierInvocation","src":"796:18:21"}],"name":"__BaseUpgradeablePausable_init","nameLocation":"743:30:21","nodeType":"FunctionDefinition","parameters":{"id":4040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4039,"mutability":"mutable","name":"owner","nameLocation":"782:5:21","nodeType":"VariableDeclaration","scope":4097,"src":"774:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4038,"name":"address","nodeType":"ElementaryTypeName","src":"774:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"773:15:21"},"returnParameters":{"id":4043,"nodeType":"ParameterList","parameters":[],"src":"815:0:21"},"scope":4112,"src":"734:549:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4110,"nodeType":"Block","src":"1335:71:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4103,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1360:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$4141_$","typeString":"type(library Constants)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1370:12:21","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":4132,"src":"1360:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1360:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4106,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"1386:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1386:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4102,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1352:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1352:47:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4101,"id":4109,"nodeType":"Return","src":"1345:54:21"}]},"functionSelector":"b6db75a0","id":4111,"implemented":true,"kind":"function","modifiers":[],"name":"isAdmin","nameLocation":"1298:7:21","nodeType":"FunctionDefinition","parameters":{"id":4098,"nodeType":"ParameterList","parameters":[],"src":"1305:2:21"},"returnParameters":{"id":4101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4100,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4111,"src":"1329:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4099,"name":"bool","nodeType":"ElementaryTypeName","src":"1329:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1328:6:21"},"scope":4112,"src":"1289:117:21","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4113,"src":"461:951:21","usedErrors":[4019]}],"src":"33:1379:21"},"id":21},"contracts/Constants.sol":{"ast":{"absolutePath":"contracts/Constants.sol","exportedSymbols":{"Constants":[4141]},"id":4142,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":4114,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Constants","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4141,"linearizedBaseContracts":[4141],"name":"Constants","nameLocation":"70:9:22","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"75b238fc","id":4119,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"111:10:22","nodeType":"VariableDeclaration","scope":4141,"src":"87:60:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4115,"name":"bytes32","nodeType":"ElementaryTypeName","src":"87:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"134:12:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":4116,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"124:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"124:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e63ab1e9","id":4124,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"177:11:22","nodeType":"VariableDeclaration","scope":4141,"src":"153:62:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"153:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":4122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"201:13:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":4121,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"191:9:22","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"191:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":4131,"nodeType":"Block","src":"278:34:22","statements":[{"expression":{"id":4129,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"295:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4128,"id":4130,"nodeType":"Return","src":"288:17:22"}]},"id":4132,"implemented":true,"kind":"function","modifiers":[],"name":"getAdminRole","nameLocation":"231:12:22","nodeType":"FunctionDefinition","parameters":{"id":4125,"nodeType":"ParameterList","parameters":[],"src":"243:2:22"},"returnParameters":{"id":4128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4132,"src":"269:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4126,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"268:9:22"},"scope":4141,"src":"222:90:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4139,"nodeType":"Block","src":"375:35:22","statements":[{"expression":{"id":4137,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"392:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4136,"id":4138,"nodeType":"Return","src":"385:18:22"}]},"id":4140,"implemented":true,"kind":"function","modifiers":[],"name":"getPauserRole","nameLocation":"327:13:22","nodeType":"FunctionDefinition","parameters":{"id":4133,"nodeType":"ParameterList","parameters":[],"src":"340:2:22"},"returnParameters":{"id":4136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4140,"src":"366:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4134,"name":"bytes32","nodeType":"ElementaryTypeName","src":"366:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"365:9:22"},"scope":4141,"src":"318:92:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4142,"src":"62:350:22","usedErrors":[]}],"src":"37:375:22"},"id":22},"contracts/core/buySell/BuyGENZ.sol":{"ast":{"absolutePath":"contracts/core/buySell/BuyGENZ.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2287],"BaseUpgradeablePausable":[4112],"BaseUpgradeablePausable__ZeroAddressError":[4019],"BuyGENZ":[4606],"Constants":[4141],"ContextUpgradeable":[2329],"ERC165Upgradeable":[3133],"IAccessControlUpgradeable":[408],"IBuyGENZ":[5429],"IERC165Upgradeable":[3145],"IERC20Extended":[5454],"IERC20PermitUpgradeable":[1722],"IERC20Upgradeable":[1470],"IGlobalPauseOperation":[5538],"Initializable":[580],"MathUpgradeable":[4010],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"SafeERC20Upgradeable":[2003],"StringsUpgradeable":[2578]},"id":4607,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":4143,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:23"},{"absolutePath":"contracts/interfaces/IBuyGENZ.sol","file":"./../../interfaces/IBuyGENZ.sol","id":4144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4607,"sourceUnit":5430,"src":"1599:41:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IERC20Extended.sol","file":"./../../interfaces/IERC20Extended.sol","id":4145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4607,"sourceUnit":5455,"src":"1641:47:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGlobalPauseOperation.sol","file":"./../../interfaces/IGlobalPauseOperation.sol","id":4146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4607,"sourceUnit":5539,"src":"1689:54:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":4147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4607,"sourceUnit":2004,"src":"1778:88:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":4148,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4607,"sourceUnit":4113,"src":"1891:45:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4150,"name":"IBuyGENZ","nameLocations":["2043:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":5429,"src":"2043:8:23"},"id":4151,"nodeType":"InheritanceSpecifier","src":"2043:8:23"},{"baseName":{"id":4152,"name":"BaseUpgradeablePausable","nameLocations":["2053:23:23"],"nodeType":"IdentifierPath","referencedDeclaration":4112,"src":"2053:23:23"},"id":4153,"nodeType":"InheritanceSpecifier","src":"2053:23:23"}],"canonicalName":"BuyGENZ","contractDependencies":[],"contractKind":"contract","documentation":{"id":4149,"nodeType":"StructuredDocumentation","src":"1938:85:23","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":true,"id":4606,"linearizedBaseContracts":[4606,4112,780,335,3133,3145,408,707,2329,580,5429],"name":"BuyGENZ","nameLocation":"2032:7:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4157,"libraryName":{"id":4154,"name":"SafeERC20Upgradeable","nameLocations":["2090:20:23"],"nodeType":"IdentifierPath","referencedDeclaration":2003,"src":"2090:20:23"},"nodeType":"UsingForDirective","src":"2084:49:23","typeName":{"id":4156,"nodeType":"UserDefinedTypeName","pathNode":{"id":4155,"name":"IERC20Upgradeable","nameLocations":["2115:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"2115:17:23"},"referencedDeclaration":1470,"src":"2115:17:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}}},{"global":false,"id":4161,"libraryName":{"id":4158,"name":"SafeERC20Upgradeable","nameLocations":["2144:20:23"],"nodeType":"IdentifierPath","referencedDeclaration":2003,"src":"2144:20:23"},"nodeType":"UsingForDirective","src":"2138:55:23","typeName":{"id":4160,"nodeType":"UserDefinedTypeName","pathNode":{"id":4159,"name":"IERC20PermitUpgradeable","nameLocations":["2169:23:23"],"nodeType":"IdentifierPath","referencedDeclaration":1722,"src":"2169:23:23"},"referencedDeclaration":1722,"src":"2169:23:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}}},{"constant":false,"documentation":{"id":4162,"nodeType":"StructuredDocumentation","src":"2199:74:23","text":"_tokenCounter: GENZ ERC20 tokens in circulation\n _currVersion: "},"id":4164,"mutability":"mutable","name":"_saleCap","nameLocation":"2294:8:23","nodeType":"VariableDeclaration","scope":4606,"src":"2278:24:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4163,"name":"uint256","nodeType":"ElementaryTypeName","src":"2278:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4166,"mutability":"immutable","name":"_commonRatio","nameLocation":"2334:12:23","nodeType":"VariableDeclaration","scope":4606,"src":"2308:38:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4165,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4168,"mutability":"mutable","name":"_tokenCounter","nameLocation":"2368:13:23","nodeType":"VariableDeclaration","scope":4606,"src":"2352:29:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4167,"name":"uint256","nodeType":"ElementaryTypeName","src":"2352:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4170,"mutability":"mutable","name":"_baseSalePrice","nameLocation":"2403:14:23","nodeType":"VariableDeclaration","scope":4606,"src":"2387:30:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4169,"name":"uint256","nodeType":"ElementaryTypeName","src":"2387:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4172,"mutability":"mutable","name":"_basePriceWithDec","nameLocation":"2439:17:23","nodeType":"VariableDeclaration","scope":4606,"src":"2423:33:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4171,"name":"uint256","nodeType":"ElementaryTypeName","src":"2423:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4174,"mutability":"mutable","name":"_minWithdrawalPeriod","nameLocation":"2478:20:23","nodeType":"VariableDeclaration","scope":4606,"src":"2462:36:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4173,"name":"uint256","nodeType":"ElementaryTypeName","src":"2462:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"id":4177,"mutability":"constant","name":"WITHDRAWAL_PERIOD_MULTIPLIER","nameLocation":"2529:28:23","nodeType":"VariableDeclaration","scope":4606,"src":"2504:63:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4175,"name":"uint256","nodeType":"ElementaryTypeName","src":"2504:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"38","id":4176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2560:7:23","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_28800_by_1","typeString":"int_const 28800"},"value":"8"},"visibility":"private"},{"constant":false,"documentation":{"id":4178,"nodeType":"StructuredDocumentation","src":"2574:131:23","text":"_tokenDAI: DAI ERC20 token\n _tokenUSDC: USDC ERC20 token\n _globalPauseOperation: Global Pause Operations Contract"},"id":4181,"mutability":"immutable","name":"_tokenDAI","nameLocation":"2746:9:23","nodeType":"VariableDeclaration","scope":4606,"src":"2710:45:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":4180,"nodeType":"UserDefinedTypeName","pathNode":{"id":4179,"name":"IERC20Upgradeable","nameLocations":["2710:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"2710:17:23"},"referencedDeclaration":1470,"src":"2710:17:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":4184,"mutability":"immutable","name":"_tokenGENZ","nameLocation":"2797:10:23","nodeType":"VariableDeclaration","scope":4606,"src":"2761:46:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":4183,"nodeType":"UserDefinedTypeName","pathNode":{"id":4182,"name":"IERC20Upgradeable","nameLocations":["2761:17:23"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"2761:17:23"},"referencedDeclaration":1470,"src":"2761:17:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":4187,"mutability":"mutable","name":"_globalPauseOperation","nameLocation":"2843:21:23","nodeType":"VariableDeclaration","scope":4606,"src":"2813:51:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5538","typeString":"contract IGlobalPauseOperation"},"typeName":{"id":4186,"nodeType":"UserDefinedTypeName","pathNode":{"id":4185,"name":"IGlobalPauseOperation","nameLocations":["2813:21:23"],"nodeType":"IdentifierPath","referencedDeclaration":5538,"src":"2813:21:23"},"referencedDeclaration":5538,"src":"2813:21:23","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5538","typeString":"contract IGlobalPauseOperation"}},"visibility":"private"},{"constant":false,"id":4190,"mutability":"immutable","name":"_tokenPermitDAI","nameLocation":"2912:15:23","nodeType":"VariableDeclaration","scope":4606,"src":"2870:57:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":4189,"nodeType":"UserDefinedTypeName","pathNode":{"id":4188,"name":"IERC20PermitUpgradeable","nameLocations":["2870:23:23"],"nodeType":"IdentifierPath","referencedDeclaration":1722,"src":"2870:23:23"},"referencedDeclaration":1722,"src":"2870:23:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"private"},{"canonicalName":"BuyGENZ.StakeInformation","id":4197,"members":[{"constant":false,"id":4192,"mutability":"mutable","name":"hasStaked","nameLocation":"2973:9:23","nodeType":"VariableDeclaration","scope":4197,"src":"2968:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4191,"name":"bool","nodeType":"ElementaryTypeName","src":"2968:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4194,"mutability":"mutable","name":"amount","nameLocation":"3000:6:23","nodeType":"VariableDeclaration","scope":4197,"src":"2992:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4193,"name":"uint256","nodeType":"ElementaryTypeName","src":"2992:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4196,"mutability":"mutable","name":"minWithdrawTime","nameLocation":"3024:15:23","nodeType":"VariableDeclaration","scope":4197,"src":"3016:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4195,"name":"uint256","nodeType":"ElementaryTypeName","src":"3016:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StakeInformation","nameLocation":"2941:16:23","nodeType":"StructDefinition","scope":4606,"src":"2934:112:23","visibility":"public"},{"constant":false,"id":4202,"mutability":"mutable","name":"stakingInformation","nameLocation":"3097:18:23","nodeType":"VariableDeclaration","scope":4606,"src":"3052:63:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation)"},"typeName":{"id":4201,"keyType":{"id":4198,"name":"address","nodeType":"ElementaryTypeName","src":"3060:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3052:36:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation)"},"valueType":{"id":4200,"nodeType":"UserDefinedTypeName","pathNode":{"id":4199,"name":"StakeInformation","nameLocations":["3071:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":4197,"src":"3071:16:23"},"referencedDeclaration":4197,"src":"3071:16:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage_ptr","typeString":"struct BuyGENZ.StakeInformation"}}},"visibility":"private"},{"body":{"id":4220,"nodeType":"Block","src":"3149:127:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4205,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"3181:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3181:8:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":4207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3193:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3181:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4209,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3180:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4210,"name":"_globalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"3216:21:23","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5538","typeString":"contract IGlobalPauseOperation"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3238:8:23","memberName":"isPaused","nodeType":"MemberAccess","referencedDeclaration":5537,"src":"3216:30:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3216:32:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"74727565","id":4213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3252:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3216:40:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4215,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3215:42:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3180:77:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4204,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3159:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3159:99:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4218,"nodeType":"ExpressionStatement","src":"3159:99:23"},{"id":4219,"nodeType":"PlaceholderStatement","src":"3268:1:23"}]},"id":4221,"name":"ifNotPaused","nameLocation":"3135:11:23","nodeType":"ModifierDefinition","parameters":{"id":4203,"nodeType":"ParameterList","parameters":[],"src":"3146:2:23"},"src":"3126:150:23","virtual":false,"visibility":"internal"},{"body":{"id":4263,"nodeType":"Block","src":"3503:242:23","statements":[{"expression":{"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4233,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"3513:9:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4235,"name":"tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"3543:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4234,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"3525:17:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$1470_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3525:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"src":"3513:39:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":4238,"nodeType":"ExpressionStatement","src":"3513:39:23"},{"expression":{"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4239,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"3563:10:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4241,"name":"tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"3594:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4240,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"3576:17:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$1470_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3576:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"src":"3563:41:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":4244,"nodeType":"ExpressionStatement","src":"3563:41:23"},{"expression":{"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4245,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"3615:15:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4247,"name":"tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4228,"src":"3657:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4246,"name":"IERC20PermitUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"3633:23:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20PermitUpgradeable_$1722_$","typeString":"type(contract IERC20PermitUpgradeable)"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3633:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"src":"3615:51:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"id":4250,"nodeType":"ExpressionStatement","src":"3615:51:23"},{"expression":{"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4251,"name":"_commonRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"3676:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4252,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"3692:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3130653137","id":4253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3700:5:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"10e17"},"src":"3692:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4255,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3691:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3710:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4257,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"3716:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3710:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3709:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3691:34:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3676:49:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4262,"nodeType":"ExpressionStatement","src":"3676:49:23"}]},"documentation":{"id":4222,"nodeType":"StructuredDocumentation","src":"3282:134:23","text":"@dev initializing _tokenDAI\n @param tokenDAI: address of the DAI token\n @custom:oz-upgrades-unsafe-allow-constructor"},"id":4264,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4224,"mutability":"mutable","name":"value","nameLocation":"3441:5:23","nodeType":"VariableDeclaration","scope":4264,"src":"3433:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4223,"name":"uint256","nodeType":"ElementaryTypeName","src":"3433:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4226,"mutability":"mutable","name":"decimals","nameLocation":"3456:8:23","nodeType":"VariableDeclaration","scope":4264,"src":"3448:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4225,"name":"uint256","nodeType":"ElementaryTypeName","src":"3448:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4228,"mutability":"mutable","name":"tokenDAI","nameLocation":"3474:8:23","nodeType":"VariableDeclaration","scope":4264,"src":"3466:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4227,"name":"address","nodeType":"ElementaryTypeName","src":"3466:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4230,"mutability":"mutable","name":"tokenGENZ","nameLocation":"3492:9:23","nodeType":"VariableDeclaration","scope":4264,"src":"3484:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4229,"name":"address","nodeType":"ElementaryTypeName","src":"3484:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3432:70:23"},"returnParameters":{"id":4232,"nodeType":"ParameterList","parameters":[],"src":"3503:0:23"},"scope":4606,"src":"3421:324:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4291,"nodeType":"Block","src":"3980:201:23","statements":[{"expression":{"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4272,"name":"_baseSalePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4170,"src":"3990:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":4273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4007:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3990:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4275,"nodeType":"ExpressionStatement","src":"3990:18:23"},{"expression":{"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4276,"name":"_basePriceWithDec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4172,"src":"4018:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31653138","id":4277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4038:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"4018:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4279,"nodeType":"ExpressionStatement","src":"4018:24:23"},{"expression":{"id":4284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4280,"name":"_globalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"4052:21:23","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5538","typeString":"contract IGlobalPauseOperation"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4282,"name":"pauseOperationAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"4098:21:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4281,"name":"IGlobalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5538,"src":"4076:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IGlobalPauseOperation_$5538_$","typeString":"type(contract IGlobalPauseOperation)"}},"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4076:44:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5538","typeString":"contract IGlobalPauseOperation"}},"src":"4052:68:23","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$5538","typeString":"contract IGlobalPauseOperation"}},"id":4285,"nodeType":"ExpressionStatement","src":"4052:68:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4287,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4161:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4161:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4286,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"4130:30:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4130:44:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4290,"nodeType":"ExpressionStatement","src":"4130:44:23"}]},"documentation":{"id":4265,"nodeType":"StructuredDocumentation","src":"3751:138:23","text":"@dev one time function to initialize the contract\n @param pauseOperationAddress: address of the Global Pause Operation contract"},"functionSelector":"c4d66de8","id":4292,"implemented":true,"kind":"function","modifiers":[{"id":4270,"kind":"modifierInvocation","modifierName":{"id":4269,"name":"initializer","nameLocations":["3968:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"3968:11:23"},"nodeType":"ModifierInvocation","src":"3968:11:23"}],"name":"initialize","nameLocation":"3903:10:23","nodeType":"FunctionDefinition","parameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"pauseOperationAddress","nameLocation":"3931:21:23","nodeType":"VariableDeclaration","scope":4292,"src":"3923:29:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4266,"name":"address","nodeType":"ElementaryTypeName","src":"3923:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3913:45:23"},"returnParameters":{"id":4271,"nodeType":"ParameterList","parameters":[],"src":"3980:0:23"},"scope":4606,"src":"3894:287:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4309,"nodeType":"Block","src":"4255:91:23","statements":[{"expression":{"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4299,"name":"_baseSalePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4170,"src":"4265:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4300,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"4282:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4265:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4302,"nodeType":"ExpressionStatement","src":"4265:27:23"},{"expression":{"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4303,"name":"_basePriceWithDec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4172,"src":"4302:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4304,"name":"tokenPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"4322:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653138","id":4305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4335:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"4322:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4302:37:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4308,"nodeType":"ExpressionStatement","src":"4302:37:23"}]},"functionSelector":"eaef3999","id":4310,"implemented":true,"kind":"function","modifiers":[{"id":4297,"kind":"modifierInvocation","modifierName":{"id":4296,"name":"onlyAdmin","nameLocations":["4245:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"4245:9:23"},"nodeType":"ModifierInvocation","src":"4245:9:23"}],"name":"updateBaseSalePrice","nameLocation":"4196:19:23","nodeType":"FunctionDefinition","parameters":{"id":4295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4294,"mutability":"mutable","name":"tokenPrice","nameLocation":"4224:10:23","nodeType":"VariableDeclaration","scope":4310,"src":"4216:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4293,"name":"uint256","nodeType":"ElementaryTypeName","src":"4216:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4215:20:23"},"returnParameters":{"id":4298,"nodeType":"ParameterList","parameters":[],"src":"4255:0:23"},"scope":4606,"src":"4187:159:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4323,"nodeType":"Block","src":"4431:60:23","statements":[{"expression":{"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4317,"name":"_minWithdrawalPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"4441:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4318,"name":"valueInDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4312,"src":"4464:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:6:23","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"1"},"src":"4464:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4441:43:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4322,"nodeType":"ExpressionStatement","src":"4441:43:23"}]},"functionSelector":"051e6cb1","id":4324,"implemented":true,"kind":"function","modifiers":[{"id":4315,"kind":"modifierInvocation","modifierName":{"id":4314,"name":"onlyAdmin","nameLocations":["4421:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"4421:9:23"},"nodeType":"ModifierInvocation","src":"4421:9:23"}],"name":"updateMinimumWithdrawalPeriod","nameLocation":"4361:29:23","nodeType":"FunctionDefinition","parameters":{"id":4313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4312,"mutability":"mutable","name":"valueInDays","nameLocation":"4399:11:23","nodeType":"VariableDeclaration","scope":4324,"src":"4391:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4311,"name":"uint256","nodeType":"ElementaryTypeName","src":"4391:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4390:21:23"},"returnParameters":{"id":4316,"nodeType":"ParameterList","parameters":[],"src":"4431:0:23"},"scope":4606,"src":"4352:139:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4332,"nodeType":"Block","src":"4533:25:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4329,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"4543:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:8:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4331,"nodeType":"ExpressionStatement","src":"4543:8:23"}]},"functionSelector":"8456cb59","id":4333,"implemented":true,"kind":"function","modifiers":[{"id":4327,"kind":"modifierInvocation","modifierName":{"id":4326,"name":"onlyAdmin","nameLocations":["4523:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"4523:9:23"},"nodeType":"ModifierInvocation","src":"4523:9:23"}],"name":"pause","nameLocation":"4506:5:23","nodeType":"FunctionDefinition","parameters":{"id":4325,"nodeType":"ParameterList","parameters":[],"src":"4511:2:23"},"returnParameters":{"id":4328,"nodeType":"ParameterList","parameters":[],"src":"4533:0:23"},"scope":4606,"src":"4497:61:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4341,"nodeType":"Block","src":"4602:27:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4338,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4612:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4612:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4340,"nodeType":"ExpressionStatement","src":"4612:10:23"}]},"functionSelector":"3f4ba83a","id":4342,"implemented":true,"kind":"function","modifiers":[{"id":4336,"kind":"modifierInvocation","modifierName":{"id":4335,"name":"onlyAdmin","nameLocations":["4592:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"4592:9:23"},"nodeType":"ModifierInvocation","src":"4592:9:23"}],"name":"unpause","nameLocation":"4573:7:23","nodeType":"FunctionDefinition","parameters":{"id":4334,"nodeType":"ParameterList","parameters":[],"src":"4580:2:23"},"returnParameters":{"id":4337,"nodeType":"ParameterList","parameters":[],"src":"4602:0:23"},"scope":4606,"src":"4564:65:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4454,"nodeType":"Block","src":"4894:901:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"4908:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31653138","id":4363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4916:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"4908:12:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4369,"nodeType":"IfStatement","src":"4904:79:23","trueBody":{"id":4368,"nodeType":"Block","src":"4922:61:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4365,"name":"BuySellGENZ__LowAmountError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5414,"src":"4943:27:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4943:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4367,"nodeType":"RevertStatement","src":"4936:36:23"}]}},{"expression":{"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4370,"name":"_minWithdrawalPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"4992:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4371,"name":"WITHDRAWAL_PERIOD_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"5016:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:52:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4373,"nodeType":"ExpressionStatement","src":"4992:52:23"},{"assignments":[null,4375],"declarations":[null,{"constant":false,"id":4375,"mutability":"mutable","name":"amountToBePaid","nameLocation":"5093:14:23","nodeType":"VariableDeclaration","scope":4454,"src":"5085:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4374,"name":"uint256","nodeType":"ElementaryTypeName","src":"5085:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4382,"initialValue":{"arguments":[{"id":4377,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"5143:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4378,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"5158:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"5174:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5158:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4376,"name":"calculatePriceGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"5111:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256,uint256)"}},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5111:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5054:126:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4383,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"5194:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4386,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5231:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5231:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4384,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"5211:9:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5221:9:23","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"5211:19:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5211:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5194:50:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4394,"nodeType":"IfStatement","src":"5190:127:23","trueBody":{"id":4393,"nodeType":"Block","src":"5246:71:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4390,"name":"BuySellGENZ__InsufficientBalanceError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"5267:37:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5267:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4392,"nodeType":"RevertStatement","src":"5260:46:23"}]}},{"assignments":[4397],"declarations":[{"constant":false,"id":4397,"mutability":"mutable","name":"userStakeInformation","nameLocation":"5351:20:23","nodeType":"VariableDeclaration","scope":4454,"src":"5326:45:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage_ptr","typeString":"struct BuyGENZ.StakeInformation"},"typeName":{"id":4396,"nodeType":"UserDefinedTypeName","pathNode":{"id":4395,"name":"StakeInformation","nameLocations":["5326:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":4197,"src":"5326:16:23"},"referencedDeclaration":4197,"src":"5326:16:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage_ptr","typeString":"struct BuyGENZ.StakeInformation"}},"visibility":"internal"}],"id":4402,"initialValue":{"baseExpression":{"id":4398,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"5374:18:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":4401,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4399,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5393:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5393:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5374:32:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5326:80:23"},{"expression":{"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4403,"name":"userStakeInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"5416:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage_ptr","typeString":"struct BuyGENZ.StakeInformation storage pointer"}},"id":4405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5437:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"5416:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4345,"src":"5447:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5416:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4408,"nodeType":"ExpressionStatement","src":"5416:36:23"},{"expression":{"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4409,"name":"userStakeInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"5462:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage_ptr","typeString":"struct BuyGENZ.StakeInformation storage pointer"}},"id":4411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5483:9:23","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"5462:30:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5495:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5462:37:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4414,"nodeType":"ExpressionStatement","src":"5462:37:23"},{"expression":{"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4415,"name":"userStakeInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"5509:20:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage_ptr","typeString":"struct BuyGENZ.StakeInformation storage pointer"}},"id":4417,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5530:15:23","memberName":"minWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":4196,"src":"5509:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4418,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5548:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5554:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"5548:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4420,"name":"_minWithdrawalPeriod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"5566:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5548:38:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5509:77:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4423,"nodeType":"ExpressionStatement","src":"5509:77:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4427,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5623:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5623:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4431,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5645:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_BuyGENZ_$4606","typeString":"contract BuyGENZ"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BuyGENZ_$4606","typeString":"contract BuyGENZ"}],"id":4430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5637:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4429,"name":"address","nodeType":"ElementaryTypeName","src":"5637:7:23","typeDescriptions":{}}},"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5637:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4433,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"5652:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4434,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"5668:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4435,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4349,"src":"5678:1:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4436,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4351,"src":"5681:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4437,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4353,"src":"5684:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4424,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4190,"src":"5596:15:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$1722","typeString":"contract IERC20PermitUpgradeable"}},"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5612:10:23","memberName":"safePermit","nodeType":"MemberAccess","referencedDeclaration":1964,"src":"5596:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20PermitUpgradeable_$1722_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_contract$_IERC20PermitUpgradeable_$1722_$","typeString":"function (contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5596:90:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4439,"nodeType":"ExpressionStatement","src":"5596:90:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4443,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5723:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5723:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4447,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5745:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_BuyGENZ_$4606","typeString":"contract BuyGENZ"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BuyGENZ_$4606","typeString":"contract BuyGENZ"}],"id":4446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5737:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4445,"name":"address","nodeType":"ElementaryTypeName","src":"5737:7:23","typeDescriptions":{}}},"id":4448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5737:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4449,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"5752:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4440,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"5696:9:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5706:16:23","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1780,"src":"5696:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1470_$","typeString":"function (contract IERC20Upgradeable,address,address,uint256)"}},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5696:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4451,"nodeType":"ExpressionStatement","src":"5696:71:23"},{"expression":{"hexValue":"74727565","id":4452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5784:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4361,"id":4453,"nodeType":"Return","src":"5777:11:23"}]},"documentation":{"id":4343,"nodeType":"StructuredDocumentation","src":"4635:76:23","text":"@dev \n @param value: amount of SZT tokens user wishes to purchase"},"functionSelector":"34d131bf","id":4455,"implemented":true,"kind":"function","modifiers":[{"id":4356,"kind":"modifierInvocation","modifierName":{"id":4355,"name":"nonReentrant","nameLocations":["4855:12:23"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"4855:12:23"},"nodeType":"ModifierInvocation","src":"4855:12:23"},{"id":4358,"kind":"modifierInvocation","modifierName":{"id":4357,"name":"ifNotPaused","nameLocations":["4868:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":4221,"src":"4868:11:23"},"nodeType":"ModifierInvocation","src":"4868:11:23"}],"name":"buyGENZToken","nameLocation":"4725:12:23","nodeType":"FunctionDefinition","parameters":{"id":4354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4345,"mutability":"mutable","name":"value","nameLocation":"4755:5:23","nodeType":"VariableDeclaration","scope":4455,"src":"4747:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4344,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4347,"mutability":"mutable","name":"deadline","nameLocation":"4775:8:23","nodeType":"VariableDeclaration","scope":4455,"src":"4770:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4346,"name":"uint","nodeType":"ElementaryTypeName","src":"4770:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4349,"mutability":"mutable","name":"v","nameLocation":"4800:1:23","nodeType":"VariableDeclaration","scope":4455,"src":"4794:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4348,"name":"uint8","nodeType":"ElementaryTypeName","src":"4794:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4351,"mutability":"mutable","name":"r","nameLocation":"4819:1:23","nodeType":"VariableDeclaration","scope":4455,"src":"4811:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4811:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4353,"mutability":"mutable","name":"s","nameLocation":"4838:1:23","nodeType":"VariableDeclaration","scope":4455,"src":"4830:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4830:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4737:108:23"},"returnParameters":{"id":4361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4455,"src":"4888:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4359,"name":"bool","nodeType":"ElementaryTypeName","src":"4888:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4887:6:23"},"scope":4606,"src":"4716:1079:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4516,"nodeType":"Block","src":"5940:441:23","statements":[{"assignments":[4467],"declarations":[{"constant":false,"id":4467,"mutability":"mutable","name":"commonRatioGENZ","nameLocation":"5958:15:23","nodeType":"VariableDeclaration","scope":4516,"src":"5950:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4466,"name":"uint256","nodeType":"ElementaryTypeName","src":"5950:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4471,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4468,"name":"_commonRatio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"5976:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4469,"name":"_baseSalePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4170,"src":"5991:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5976:29:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5950:55:23"},{"assignments":[4473],"declarations":[{"constant":false,"id":4473,"mutability":"mutable","name":"tokenDifference","nameLocation":"6023:15:23","nodeType":"VariableDeclaration","scope":4516,"src":"6015:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4472,"name":"uint256","nodeType":"ElementaryTypeName","src":"6015:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4481,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4474,"name":"issuedTokensGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4457,"src":"6042:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4475,"name":"requiredTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4459,"src":"6062:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31653138","id":4476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6079:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"6062:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4478,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6061:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6042:42:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4480,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6041:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6015:70:23"},{"assignments":[4483],"declarations":[{"constant":false,"id":4483,"mutability":"mutable","name":"averageDiff","nameLocation":"6103:11:23","nodeType":"VariableDeclaration","scope":4516,"src":"6095:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4482,"name":"uint256","nodeType":"ElementaryTypeName","src":"6095:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4493,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4484,"name":"commonRatioGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"6119:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4485,"name":"tokenDifference","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"6137:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6119:33:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4487,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6118:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6156:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6118:39:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4490,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6117:41:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":4491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6161:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"6117:48:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6095:70:23"},{"assignments":[4495],"declarations":[{"constant":false,"id":4495,"mutability":"mutable","name":"amountPerToken","nameLocation":"6183:14:23","nodeType":"VariableDeclaration","scope":4516,"src":"6175:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4494,"name":"uint256","nodeType":"ElementaryTypeName","src":"6175:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4499,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4496,"name":"_basePriceWithDec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4172,"src":"6200:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4497,"name":"averageDiff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"6220:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6200:31:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6175:56:23"},{"assignments":[4501],"declarations":[{"constant":false,"id":4501,"mutability":"mutable","name":"amountToBePaid","nameLocation":"6249:14:23","nodeType":"VariableDeclaration","scope":4516,"src":"6241:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4500,"name":"uint256","nodeType":"ElementaryTypeName","src":"6241:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4511,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4502,"name":"amountPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"6267:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4503,"name":"requiredTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4459,"src":"6285:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4504,"name":"issuedTokensGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4457,"src":"6302:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6285:33:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6284:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6267:52:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4508,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6266:54:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6321:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"6266:59:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6241:84:23"},{"expression":{"components":[{"id":4512,"name":"amountPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"6343:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4513,"name":"amountToBePaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4501,"src":"6359:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4514,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6342:32:23","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":4465,"id":4515,"nodeType":"Return","src":"6335:39:23"}]},"functionSelector":"06fb46ba","id":4517,"implemented":true,"kind":"function","modifiers":[],"name":"calculatePriceGENZ","nameLocation":"5810:18:23","nodeType":"FunctionDefinition","parameters":{"id":4460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4457,"mutability":"mutable","name":"issuedTokensGENZ","nameLocation":"5846:16:23","nodeType":"VariableDeclaration","scope":4517,"src":"5838:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4456,"name":"uint256","nodeType":"ElementaryTypeName","src":"5838:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4459,"mutability":"mutable","name":"requiredTokens","nameLocation":"5881:14:23","nodeType":"VariableDeclaration","scope":4517,"src":"5873:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4458,"name":"uint256","nodeType":"ElementaryTypeName","src":"5873:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5828:73:23"},"returnParameters":{"id":4465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4517,"src":"5922:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4461,"name":"uint256","nodeType":"ElementaryTypeName","src":"5922:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4517,"src":"5931:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4463,"name":"uint256","nodeType":"ElementaryTypeName","src":"5931:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5921:18:23"},"scope":4606,"src":"5801:580:23","stateMutability":"view","virtual":false,"visibility":"public"},{"errorSelector":"23d1e2cb","id":4519,"name":"BuyGENZ__TransactionFailedError","nameLocation":"6393:31:23","nodeType":"ErrorDefinition","parameters":{"id":4518,"nodeType":"ParameterList","parameters":[],"src":"6424:2:23"},"src":"6387:40:23"},{"body":{"id":4578,"nodeType":"Block","src":"6472:523:23","statements":[{"condition":{"id":4527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6486:43:23","subExpression":{"expression":{"baseExpression":{"id":4522,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"6487:18:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":4525,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4523,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6506:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6506:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6487:32:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":4526,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6520:9:23","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"6487:42:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4532,"nodeType":"IfStatement","src":"6482:114:23","trueBody":{"id":4531,"nodeType":"Block","src":"6531:65:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4528,"name":"BuyGENZ__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"6552:31:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6552:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4530,"nodeType":"RevertStatement","src":"6545:40:23"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":4533,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"6609:18:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":4536,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4534,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6628:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6628:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6609:32:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":4537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6642:15:23","memberName":"minWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":4196,"src":"6609:48:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":4538,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6660:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6666:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"6660:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6609:66:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4545,"nodeType":"IfStatement","src":"6605:138:23","trueBody":{"id":4544,"nodeType":"Block","src":"6678:65:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4541,"name":"BuyGENZ__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4519,"src":"6699:31:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6699:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4543,"nodeType":"RevertStatement","src":"6692:40:23"}]}},{"assignments":[4547],"declarations":[{"constant":false,"id":4547,"mutability":"mutable","name":"amountStaked","nameLocation":"6760:12:23","nodeType":"VariableDeclaration","scope":4578,"src":"6752:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4546,"name":"uint256","nodeType":"ElementaryTypeName","src":"6752:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4553,"initialValue":{"expression":{"baseExpression":{"id":4548,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"6775:18:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":4551,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4549,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6794:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6794:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6775:32:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":4552,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6808:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"6775:39:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6752:62:23"},{"expression":{"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4554,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"6824:18:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":4557,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4555,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6843:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6843:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6824:32:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":4558,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6857:9:23","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":4192,"src":"6824:42:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6869:5:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6824:50:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4561,"nodeType":"ExpressionStatement","src":"6824:50:23"},{"expression":{"id":4568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4562,"name":"stakingInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"6884:18:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StakeInformation_$4197_storage_$","typeString":"mapping(address => struct BuyGENZ.StakeInformation storage ref)"}},"id":4565,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4563,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6903:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6903:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6884:32:23","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInformation_$4197_storage","typeString":"struct BuyGENZ.StakeInformation storage ref"}},"id":4566,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6917:6:23","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4194,"src":"6884:39:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6926:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6884:43:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4569,"nodeType":"ExpressionStatement","src":"6884:43:23"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4573,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6961:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6961:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4575,"name":"amountStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4547,"src":"6975:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4570,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"6937:10:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6948:12:23","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"6937:23:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1470_$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":4576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6937:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4577,"nodeType":"ExpressionStatement","src":"6937:51:23"}]},"functionSelector":"869eac93","id":4579,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawStakedToken","nameLocation":"6441:19:23","nodeType":"FunctionDefinition","parameters":{"id":4520,"nodeType":"ParameterList","parameters":[],"src":"6460:2:23"},"returnParameters":{"id":4521,"nodeType":"ParameterList","parameters":[],"src":"6472:0:23"},"scope":4606,"src":"6432:563:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4595,"nodeType":"Block","src":"7062:171:23","statements":[{"assignments":[4585,null],"declarations":[{"constant":false,"id":4585,"mutability":"mutable","name":"amountPerToken","nameLocation":"7081:14:23","nodeType":"VariableDeclaration","scope":4595,"src":"7073:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4584,"name":"uint256","nodeType":"ElementaryTypeName","src":"7073:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":4592,"initialValue":{"arguments":[{"id":4587,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"7159:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4588,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"7174:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31653138","id":4589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7190:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"7174:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4586,"name":"calculatePriceGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"7127:18:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256,uint256)"}},"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7127:68:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7072:123:23"},{"expression":{"id":4593,"name":"amountPerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4585,"src":"7212:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4583,"id":4594,"nodeType":"Return","src":"7205:21:23"}]},"functionSelector":"f751758b","id":4596,"implemented":true,"kind":"function","modifiers":[],"name":"getCurrentTokenPrice","nameLocation":"7010:20:23","nodeType":"FunctionDefinition","parameters":{"id":4580,"nodeType":"ParameterList","parameters":[],"src":"7030:2:23"},"returnParameters":{"id":4583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4596,"src":"7053:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4581,"name":"uint256","nodeType":"ElementaryTypeName","src":"7053:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7052:9:23"},"scope":4606,"src":"7001:232:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4604,"nodeType":"Block","src":"7343:37:23","statements":[{"expression":{"id":4602,"name":"_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"7360:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4601,"id":4603,"nodeType":"Return","src":"7353:20:23"}]},"documentation":{"id":4597,"nodeType":"StructuredDocumentation","src":"7239:41:23","text":"@dev returns the token in circulation"},"functionSelector":"74a7dce5","id":4605,"implemented":true,"kind":"function","modifiers":[],"name":"getGENZTokenCount","nameLocation":"7294:17:23","nodeType":"FunctionDefinition","parameters":{"id":4598,"nodeType":"ParameterList","parameters":[],"src":"7311:2:23"},"returnParameters":{"id":4601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4605,"src":"7334:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4599,"name":"uint256","nodeType":"ElementaryTypeName","src":"7334:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7333:9:23"},"scope":4606,"src":"7285:95:23","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4607,"src":"2023:5359:23","usedErrors":[4019,4519,5412,5414,5416,5418,5420,5422,5424,5426,5428]}],"src":"37:7345:23"},"id":23},"contracts/core/staking/GENZStaking.sol":{"ast":{"absolutePath":"contracts/core/staking/GENZStaking.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2287],"BaseUpgradeablePausable":[4112],"BaseUpgradeablePausable__ZeroAddressError":[4019],"Constants":[4141],"ContextUpgradeable":[2329],"ERC165Upgradeable":[3133],"GENZStaking":[5328],"GENZStaking__NotAMinimumStakeAmountError":[4617],"GENZStaking__TransactionFailedError":[4615],"IAccessControlUpgradeable":[408],"IBuyGENZ":[5429],"IERC165Upgradeable":[3145],"IERC20PermitUpgradeable":[1722],"IERC20Upgradeable":[1470],"IGENZStaking":[5508],"Initializable":[580],"MathUpgradeable":[4010],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"SafeERC20Upgradeable":[2003],"StringsUpgradeable":[2578]},"id":5329,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":4608,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:24"},{"absolutePath":"contracts/interfaces/IBuyGENZ.sol","file":"./../../interfaces/IBuyGENZ.sol","id":4609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5329,"sourceUnit":5430,"src":"181:41:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGENZStaking.sol","file":"./../../interfaces/IGENZStaking.sol","id":4610,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5329,"sourceUnit":5509,"src":"223:45:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","id":4611,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5329,"sourceUnit":412,"src":"269:78:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":4612,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5329,"sourceUnit":2004,"src":"382:88:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":4613,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5329,"sourceUnit":4113,"src":"505:45:24","symbolAliases":[],"unitAlias":""},{"errorSelector":"71a61d9d","id":4615,"name":"GENZStaking__TransactionFailedError","nameLocation":"558:35:24","nodeType":"ErrorDefinition","parameters":{"id":4614,"nodeType":"ParameterList","parameters":[],"src":"593:2:24"},"src":"552:44:24"},{"errorSelector":"ad401403","id":4617,"name":"GENZStaking__NotAMinimumStakeAmountError","nameLocation":"603:40:24","nodeType":"ErrorDefinition","parameters":{"id":4616,"nodeType":"ParameterList","parameters":[],"src":"643:2:24"},"src":"597:49:24"},{"abstract":false,"baseContracts":[{"baseName":{"id":4619,"name":"IGENZStaking","nameLocations":["789:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":5508,"src":"789:12:24"},"id":4620,"nodeType":"InheritanceSpecifier","src":"789:12:24"},{"baseName":{"id":4621,"name":"BaseUpgradeablePausable","nameLocations":["803:23:24"],"nodeType":"IdentifierPath","referencedDeclaration":4112,"src":"803:23:24"},"id":4622,"nodeType":"InheritanceSpecifier","src":"803:23:24"}],"canonicalName":"GENZStaking","contractDependencies":[],"contractKind":"contract","documentation":{"id":4618,"nodeType":"StructuredDocumentation","src":"648:117:24","text":"NOTE: Staking tokens would be used for activities like flash loans \n to generate rewards for the staked users"},"fullyImplemented":true,"id":5328,"linearizedBaseContracts":[5328,4112,780,335,3133,3145,408,707,2329,580,5508],"name":"GENZStaking","nameLocation":"774:11:24","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4624,"mutability":"mutable","name":"_currVersion","nameLocation":"849:12:24","nodeType":"VariableDeclaration","scope":5328,"src":"833:28:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4623,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4626,"mutability":"mutable","name":"_minStakeValue","nameLocation":"883:14:24","nodeType":"VariableDeclaration","scope":5328,"src":"867:30:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4625,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4628,"mutability":"mutable","name":"_withdrawTimer","nameLocation":"919:14:24","nodeType":"VariableDeclaration","scope":5328,"src":"903:30:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4627,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"baseFunctions":[5502],"constant":false,"functionSelector":"b0e31b2d","id":4631,"mutability":"mutable","name":"totalTokensStaked","nameLocation":"963:17:24","nodeType":"VariableDeclaration","overrides":{"id":4630,"nodeType":"OverrideSpecifier","overrides":[],"src":"954:8:24"},"scope":5328,"src":"939:41:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4629,"name":"uint256","nodeType":"ElementaryTypeName","src":"939:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":4634,"mutability":"immutable","name":"_tokenGENZ","nameLocation":"1022:10:24","nodeType":"VariableDeclaration","scope":5328,"src":"986:46:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"},"typeName":{"id":4633,"nodeType":"UserDefinedTypeName","pathNode":{"id":4632,"name":"IERC20Upgradeable","nameLocations":["986:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"986:17:24"},"referencedDeclaration":1470,"src":"986:17:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"global":false,"id":4638,"libraryName":{"id":4635,"name":"SafeERC20Upgradeable","nameLocations":["1045:20:24"],"nodeType":"IdentifierPath","referencedDeclaration":2003,"src":"1045:20:24"},"nodeType":"UsingForDirective","src":"1039:49:24","typeName":{"id":4637,"nodeType":"UserDefinedTypeName","pathNode":{"id":4636,"name":"IERC20Upgradeable","nameLocations":["1070:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"1070:17:24"},"referencedDeclaration":1470,"src":"1070:17:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}}},{"canonicalName":"GENZStaking.VersionableInfo","id":4647,"members":[{"constant":false,"id":4640,"mutability":"mutable","name":"startTime","nameLocation":"1199:9:24","nodeType":"VariableDeclaration","scope":4647,"src":"1191:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4639,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4642,"mutability":"mutable","name":"endTime","nameLocation":"1226:7:24","nodeType":"VariableDeclaration","scope":4647,"src":"1218:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4641,"name":"uint256","nodeType":"ElementaryTypeName","src":"1218:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4644,"mutability":"mutable","name":"distributedAmount","nameLocation":"1251:17:24","nodeType":"VariableDeclaration","scope":4647,"src":"1243:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4643,"name":"uint256","nodeType":"ElementaryTypeName","src":"1243:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4646,"mutability":"mutable","name":"tokenDistributed","nameLocation":"1286:16:24","nodeType":"VariableDeclaration","scope":4647,"src":"1278:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4645,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"VersionableInfo","nameLocation":"1165:15:24","nodeType":"StructDefinition","scope":5328,"src":"1158:151:24","visibility":"public"},{"canonicalName":"GENZStaking.UserInfo","id":4656,"members":[{"constant":false,"id":4649,"mutability":"mutable","name":"hasStaked","nameLocation":"1346:9:24","nodeType":"VariableDeclaration","scope":4656,"src":"1341:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4648,"name":"bool","nodeType":"ElementaryTypeName","src":"1341:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4651,"mutability":"mutable","name":"stakedTokens","nameLocation":"1373:12:24","nodeType":"VariableDeclaration","scope":4656,"src":"1365:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4650,"name":"uint256","nodeType":"ElementaryTypeName","src":"1365:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4653,"mutability":"mutable","name":"startVersionBlock","nameLocation":"1403:17:24","nodeType":"VariableDeclaration","scope":4656,"src":"1395:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4652,"name":"uint256","nodeType":"ElementaryTypeName","src":"1395:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4655,"mutability":"mutable","name":"claimedRewards","nameLocation":"1439:14:24","nodeType":"VariableDeclaration","scope":4656,"src":"1431:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4654,"name":"uint256","nodeType":"ElementaryTypeName","src":"1431:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"UserInfo","nameLocation":"1322:8:24","nodeType":"StructDefinition","scope":5328,"src":"1315:145:24","visibility":"public"},{"canonicalName":"GENZStaking.UserBalanceInfo","id":4661,"members":[{"constant":false,"id":4658,"mutability":"mutable","name":"stakedTokens","nameLocation":"1507:12:24","nodeType":"VariableDeclaration","scope":4661,"src":"1499:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4657,"name":"uint256","nodeType":"ElementaryTypeName","src":"1499:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4660,"mutability":"mutable","name":"withdrawnTokens","nameLocation":"1537:15:24","nodeType":"VariableDeclaration","scope":4661,"src":"1529:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4659,"name":"uint256","nodeType":"ElementaryTypeName","src":"1529:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"UserBalanceInfo","nameLocation":"1473:15:24","nodeType":"StructDefinition","scope":5328,"src":"1466:93:24","visibility":"public"},{"canonicalName":"GENZStaking.WithdrawWaitPeriod","id":4668,"members":[{"constant":false,"id":4663,"mutability":"mutable","name":"ifTimerStarted","nameLocation":"1605:14:24","nodeType":"VariableDeclaration","scope":4668,"src":"1600:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4662,"name":"bool","nodeType":"ElementaryTypeName","src":"1600:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4665,"mutability":"mutable","name":"GENZTokenCount","nameLocation":"1637:14:24","nodeType":"VariableDeclaration","scope":4668,"src":"1629:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4664,"name":"uint256","nodeType":"ElementaryTypeName","src":"1629:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4667,"mutability":"mutable","name":"canWithdrawTime","nameLocation":"1669:15:24","nodeType":"VariableDeclaration","scope":4668,"src":"1661:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4666,"name":"uint256","nodeType":"ElementaryTypeName","src":"1661:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"WithdrawWaitPeriod","nameLocation":"1572:18:24","nodeType":"StructDefinition","scope":5328,"src":"1565:126:24","visibility":"public"},{"constant":false,"id":4673,"mutability":"mutable","name":"checkWaitTime","nameLocation":"1745:13:24","nodeType":"VariableDeclaration","scope":5328,"src":"1697:61:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod)"},"typeName":{"id":4672,"keyType":{"id":4669,"name":"address","nodeType":"ElementaryTypeName","src":"1706:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1697:39:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod)"},"valueType":{"id":4671,"nodeType":"UserDefinedTypeName","pathNode":{"id":4670,"name":"WithdrawWaitPeriod","nameLocations":["1717:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":4668,"src":"1717:18:24"},"referencedDeclaration":4668,"src":"1717:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod"}}},"visibility":"private"},{"constant":false,"id":4678,"mutability":"mutable","name":"usersInfo","nameLocation":"1802:9:24","nodeType":"VariableDeclaration","scope":5328,"src":"1765:46:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo)"},"typeName":{"id":4677,"keyType":{"id":4674,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1765:28:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo)"},"valueType":{"id":4676,"nodeType":"UserDefinedTypeName","pathNode":{"id":4675,"name":"UserInfo","nameLocations":["1784:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"1784:8:24"},"referencedDeclaration":4656,"src":"1784:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo"}}},"visibility":"private"},{"constant":false,"documentation":{"id":4679,"nodeType":"StructuredDocumentation","src":"1818:32:24","text":"versionID => VersionableInfo"},"id":4684,"mutability":"mutable","name":"versionableInfos","nameLocation":"1899:16:24","nodeType":"VariableDeclaration","scope":5328,"src":"1855:60:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VersionableInfo_$4647_storage_$","typeString":"mapping(uint256 => struct GENZStaking.VersionableInfo)"},"typeName":{"id":4683,"keyType":{"id":4680,"name":"uint256","nodeType":"ElementaryTypeName","src":"1863:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1855:35:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VersionableInfo_$4647_storage_$","typeString":"mapping(uint256 => struct GENZStaking.VersionableInfo)"},"valueType":{"id":4682,"nodeType":"UserDefinedTypeName","pathNode":{"id":4681,"name":"VersionableInfo","nameLocations":["1874:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":4647,"src":"1874:15:24"},"referencedDeclaration":4647,"src":"1874:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage_ptr","typeString":"struct GENZStaking.VersionableInfo"}}},"visibility":"private"},{"constant":false,"documentation":{"id":4685,"nodeType":"StructuredDocumentation","src":"1922:47:24","text":"userAddress => versionID => UserBalanceInfo"},"id":4692,"mutability":"mutable","name":"usersBalanceInfo","nameLocation":"2038:16:24","nodeType":"VariableDeclaration","scope":5328,"src":"1974:80:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo))"},"typeName":{"id":4691,"keyType":{"id":4686,"name":"address","nodeType":"ElementaryTypeName","src":"1982:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1974:55:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo))"},"valueType":{"id":4690,"keyType":{"id":4687,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1993:35:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo)"},"valueType":{"id":4689,"nodeType":"UserDefinedTypeName","pathNode":{"id":4688,"name":"UserBalanceInfo","nameLocations":["2012:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":4661,"src":"2012:15:24"},"referencedDeclaration":4661,"src":"2012:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage_ptr","typeString":"struct GENZStaking.UserBalanceInfo"}}}},"visibility":"private"},{"body":{"id":4708,"nodeType":"Block","src":"2178:96:24","statements":[{"expression":{"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4698,"name":"_minStakeValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"2188:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31653138","id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:4:24","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"2188:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4701,"nodeType":"ExpressionStatement","src":"2188:21:24"},{"expression":{"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4702,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"2219:10:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4704,"name":"tokenAddressGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4695,"src":"2250:16:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4703,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"2232:17:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$1470_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2232:35:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"src":"2219:48:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":4707,"nodeType":"ExpressionStatement","src":"2219:48:24"}]},"documentation":{"id":4693,"nodeType":"StructuredDocumentation","src":"2061:60:24","text":"[PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]"},"id":4709,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4695,"mutability":"mutable","name":"tokenAddressGENZ","nameLocation":"2155:16:24","nodeType":"VariableDeclaration","scope":4709,"src":"2147:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4694,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2137:40:24"},"returnParameters":{"id":4697,"nodeType":"ParameterList","parameters":[],"src":"2178:0:24"},"scope":5328,"src":"2126:148:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4727,"nodeType":"Block","src":"2341:110:24","statements":[{"expression":{"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4716,"name":"_withdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"2351:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4717,"name":"timeInDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"2368:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2381:9:24","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"2368:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2351:39:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4721,"nodeType":"ExpressionStatement","src":"2351:39:24"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4723,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"2431:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2431:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4722,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"2400:30:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2400:44:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4726,"nodeType":"ExpressionStatement","src":"2400:44:24"}]},"functionSelector":"fe4b84df","id":4728,"implemented":true,"kind":"function","modifiers":[{"id":4714,"kind":"modifierInvocation","modifierName":{"id":4713,"name":"initializer","nameLocations":["2329:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"2329:11:24"},"nodeType":"ModifierInvocation","src":"2329:11:24"}],"name":"initialize","nameLocation":"2289:10:24","nodeType":"FunctionDefinition","parameters":{"id":4712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4711,"mutability":"mutable","name":"timeInDays","nameLocation":"2308:10:24","nodeType":"VariableDeclaration","scope":4728,"src":"2300:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4710,"name":"uint256","nodeType":"ElementaryTypeName","src":"2300:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2299:20:24"},"returnParameters":{"id":4715,"nodeType":"ParameterList","parameters":[],"src":"2341:0:24"},"scope":5328,"src":"2280:171:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4736,"nodeType":"Block","src":"2493:25:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4733,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"2503:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2503:8:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4735,"nodeType":"ExpressionStatement","src":"2503:8:24"}]},"functionSelector":"8456cb59","id":4737,"implemented":true,"kind":"function","modifiers":[{"id":4731,"kind":"modifierInvocation","modifierName":{"id":4730,"name":"onlyAdmin","nameLocations":["2483:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"2483:9:24"},"nodeType":"ModifierInvocation","src":"2483:9:24"}],"name":"pause","nameLocation":"2466:5:24","nodeType":"FunctionDefinition","parameters":{"id":4729,"nodeType":"ParameterList","parameters":[],"src":"2471:2:24"},"returnParameters":{"id":4732,"nodeType":"ParameterList","parameters":[],"src":"2493:0:24"},"scope":5328,"src":"2457:61:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4745,"nodeType":"Block","src":"2562:27:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4742,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2572:8:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2572:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4744,"nodeType":"ExpressionStatement","src":"2572:10:24"}]},"functionSelector":"3f4ba83a","id":4746,"implemented":true,"kind":"function","modifiers":[{"id":4740,"kind":"modifierInvocation","modifierName":{"id":4739,"name":"onlyAdmin","nameLocations":["2552:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"2552:9:24"},"nodeType":"ModifierInvocation","src":"2552:9:24"}],"name":"unpause","nameLocation":"2533:7:24","nodeType":"FunctionDefinition","parameters":{"id":4738,"nodeType":"ParameterList","parameters":[],"src":"2540:2:24"},"returnParameters":{"id":4741,"nodeType":"ParameterList","parameters":[],"src":"2562:0:24"},"scope":5328,"src":"2524:65:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4761,"nodeType":"Block","src":"2663:84:24","statements":[{"expression":{"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4753,"name":"_minStakeValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"2673:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"2690:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2673:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4756,"nodeType":"ExpressionStatement","src":"2673:22:24"},{"eventCall":{"arguments":[{"id":4758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"2734:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4757,"name":"UpdatedMinStakingAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5464,"src":"2710:23:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2710:30:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4760,"nodeType":"EmitStatement","src":"2705:35:24"}]},"functionSelector":"77539417","id":4762,"implemented":true,"kind":"function","modifiers":[{"id":4751,"kind":"modifierInvocation","modifierName":{"id":4750,"name":"onlyAdmin","nameLocations":["2653:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"2653:9:24"},"nodeType":"ModifierInvocation","src":"2653:9:24"}],"name":"updateMinimumStakeAmount","nameLocation":"2604:24:24","nodeType":"FunctionDefinition","parameters":{"id":4749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4748,"mutability":"mutable","name":"value","nameLocation":"2637:5:24","nodeType":"VariableDeclaration","scope":4762,"src":"2629:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4747,"name":"uint256","nodeType":"ElementaryTypeName","src":"2629:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2628:15:24"},"returnParameters":{"id":4752,"nodeType":"ParameterList","parameters":[],"src":"2663:0:24"},"scope":5328,"src":"2595:152:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4780,"nodeType":"Block","src":"2887:109:24","statements":[{"expression":{"id":4774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4770,"name":"_withdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"2897:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4771,"name":"timeInMinutes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4765,"src":"2914:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":4772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2930:9:24","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"src":"2914:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2897:42:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4775,"nodeType":"ExpressionStatement","src":"2897:42:24"},{"eventCall":{"arguments":[{"id":4777,"name":"timeInMinutes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4765,"src":"2975:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4776,"name":"UpdatedWithdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"2954:20:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2954:35:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4779,"nodeType":"EmitStatement","src":"2949:40:24"}]},"documentation":{"id":4763,"nodeType":"StructuredDocumentation","src":"2753:62:24","text":"[PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]"},"functionSelector":"58418587","id":4781,"implemented":true,"kind":"function","modifiers":[{"id":4768,"kind":"modifierInvocation","modifierName":{"id":4767,"name":"onlyAdmin","nameLocations":["2877:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"2877:9:24"},"nodeType":"ModifierInvocation","src":"2877:9:24"}],"name":"setWithdrawTime","nameLocation":"2829:15:24","nodeType":"FunctionDefinition","parameters":{"id":4766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4765,"mutability":"mutable","name":"timeInMinutes","nameLocation":"2853:13:24","nodeType":"VariableDeclaration","scope":4781,"src":"2845:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2845:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2844:23:24"},"returnParameters":{"id":4769,"nodeType":"ParameterList","parameters":[],"src":"2887:0:24"},"scope":5328,"src":"2820:176:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5483],"body":{"id":4867,"nodeType":"Block","src":"3079:640:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"3093:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4792,"name":"_minStakeValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"3101:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3093:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4798,"nodeType":"IfStatement","src":"3089:102:24","trueBody":{"id":4797,"nodeType":"Block","src":"3117:74:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4794,"name":"GENZStaking__NotAMinimumStakeAmountError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"3138:40:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4796,"nodeType":"RevertStatement","src":"3131:49:24"}]}},{"expression":{"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3200:14:24","subExpression":{"id":4799,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"3202:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4801,"nodeType":"ExpressionStatement","src":"3200:14:24"},{"assignments":[4804],"declarations":[{"constant":false,"id":4804,"mutability":"mutable","name":"userInfo","nameLocation":"3241:8:24","nodeType":"VariableDeclaration","scope":4867,"src":"3224:25:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo"},"typeName":{"id":4803,"nodeType":"UserDefinedTypeName","pathNode":{"id":4802,"name":"UserInfo","nameLocations":["3224:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"3224:8:24"},"referencedDeclaration":4656,"src":"3224:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo"}},"visibility":"internal"}],"id":4809,"initialValue":{"baseExpression":{"id":4805,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"3252:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":4808,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4806,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"3262:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3262:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3252:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3224:51:24"},{"condition":{"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3288:19:24","subExpression":{"expression":{"id":4810,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"3289:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":4811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3298:9:24","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":4649,"src":"3289:18:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4826,"nodeType":"IfStatement","src":"3285:129:24","trueBody":{"id":4825,"nodeType":"Block","src":"3309:105:24","statements":[{"expression":{"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4813,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"3323:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":4815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3332:9:24","memberName":"hasStaked","nodeType":"MemberAccess","referencedDeclaration":4649,"src":"3323:18:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3344:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3323:25:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4818,"nodeType":"ExpressionStatement","src":"3323:25:24"},{"expression":{"id":4823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4819,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"3362:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":4821,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3371:17:24","memberName":"startVersionBlock","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"3362:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4822,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"3391:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3362:41:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4824,"nodeType":"ExpressionStatement","src":"3362:41:24"}]}},{"expression":{"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4827,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"3423:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":4829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3432:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4651,"src":"3423:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"3448:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3423:30:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4832,"nodeType":"ExpressionStatement","src":"3423:30:24"},{"expression":{"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":4833,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"3463:16:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":4837,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4834,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"3480:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3480:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3463:30:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":4838,"indexExpression":{"id":4836,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"3494:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3463:44:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":4839,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3508:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4658,"src":"3463:57:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"3523:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3463:65:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4842,"nodeType":"ExpressionStatement","src":"3463:65:24"},{"expression":{"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4843,"name":"totalTokensStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4631,"src":"3546:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"3567:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3546:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4846,"nodeType":"ExpressionStatement","src":"3546:26:24"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4850,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"3610:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3610:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4854,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3632:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_GENZStaking_$5328","typeString":"contract GENZStaking"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_GENZStaking_$5328","typeString":"contract GENZStaking"}],"id":4853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3624:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4852,"name":"address","nodeType":"ElementaryTypeName","src":"3624:7:24","typeDescriptions":{}}},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3624:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"3639:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4847,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"3582:10:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":4849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3593:16:24","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1780,"src":"3582:27:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1470_$","typeString":"function (contract IERC20Upgradeable,address,address,uint256)"}},"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3582:63:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4858,"nodeType":"ExpressionStatement","src":"3582:63:24"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4860,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"3671:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3671:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4862,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"3685:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4859,"name":"StakedGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5470,"src":"3660:10:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3660:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4864,"nodeType":"EmitStatement","src":"3655:36:24"},{"expression":{"hexValue":"74727565","id":4865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3708:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4790,"id":4866,"nodeType":"Return","src":"3701:11:24"}]},"functionSelector":"d6fb97a5","id":4868,"implemented":true,"kind":"function","modifiers":[{"id":4787,"kind":"modifierInvocation","modifierName":{"id":4786,"name":"nonReentrant","nameLocations":["3052:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"3052:12:24"},"nodeType":"ModifierInvocation","src":"3052:12:24"}],"name":"stakeGENZ","nameLocation":"3011:9:24","nodeType":"FunctionDefinition","overrides":{"id":4785,"nodeType":"OverrideSpecifier","overrides":[],"src":"3043:8:24"},"parameters":{"id":4784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4783,"mutability":"mutable","name":"value","nameLocation":"3029:5:24","nodeType":"VariableDeclaration","scope":4868,"src":"3021:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4782,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3020:15:24"},"returnParameters":{"id":4790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4868,"src":"3073:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4788,"name":"bool","nodeType":"ElementaryTypeName","src":"3073:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3072:6:24"},"scope":5328,"src":"3002:717:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5490],"body":{"id":4928,"nodeType":"Block","src":"3842:507:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":4882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3870:45:24","subExpression":{"components":[{"expression":{"baseExpression":{"id":4876,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"3872:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":4879,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4877,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"3886:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3886:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3872:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":4880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3900:14:24","memberName":"ifTimerStarted","nodeType":"MemberAccess","referencedDeclaration":4663,"src":"3872:42:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4881,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3871:44:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4883,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3869:47:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":4884,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"3934:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":4887,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4885,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"3948:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3948:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3934:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":4888,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3962:14:24","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4665,"src":"3934:42:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4889,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"3979:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:50:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4891,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3933:52:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3869:116:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4925,"nodeType":"IfStatement","src":"3852:469:24","trueBody":{"id":4924,"nodeType":"Block","src":"3996:325:24","statements":[{"assignments":[4895],"declarations":[{"constant":false,"id":4895,"mutability":"mutable","name":"waitingTimeCountdown","nameLocation":"4037:20:24","nodeType":"VariableDeclaration","scope":4924,"src":"4010:47:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod"},"typeName":{"id":4894,"nodeType":"UserDefinedTypeName","pathNode":{"id":4893,"name":"WithdrawWaitPeriod","nameLocations":["4010:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":4668,"src":"4010:18:24"},"referencedDeclaration":4668,"src":"4010:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod"}},"visibility":"internal"}],"id":4900,"initialValue":{"baseExpression":{"id":4896,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"4060:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":4899,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4897,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4074:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4074:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4060:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4010:77:24"},{"expression":{"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4901,"name":"waitingTimeCountdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"4101:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod storage pointer"}},"id":4903,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4122:14:24","memberName":"ifTimerStarted","nodeType":"MemberAccess","referencedDeclaration":4663,"src":"4101:35:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4139:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4101:42:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4906,"nodeType":"ExpressionStatement","src":"4101:42:24"},{"expression":{"id":4911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4907,"name":"waitingTimeCountdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"4157:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod storage pointer"}},"id":4909,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4178:14:24","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4665,"src":"4157:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"4195:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4157:43:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4912,"nodeType":"ExpressionStatement","src":"4157:43:24"},{"expression":{"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4913,"name":"waitingTimeCountdown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"4214:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage_ptr","typeString":"struct GENZStaking.WithdrawWaitPeriod storage pointer"}},"id":4915,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4235:15:24","memberName":"canWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":4667,"src":"4214:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4916,"name":"_withdrawTimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"4253:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4917,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4270:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4276:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"4270:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4253:32:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4214:71:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4921,"nodeType":"ExpressionStatement","src":"4214:71:24"},{"expression":{"hexValue":"74727565","id":4922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4306:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4875,"id":4923,"nodeType":"Return","src":"4299:11:24"}]}},{"expression":{"hexValue":"66616c7365","id":4926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4337:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4875,"id":4927,"nodeType":"Return","src":"4330:12:24"}]},"functionSelector":"6c64f0b4","id":4929,"implemented":true,"kind":"function","modifiers":[],"name":"activateWithdrawalTimer","nameLocation":"3771:23:24","nodeType":"FunctionDefinition","overrides":{"id":4872,"nodeType":"OverrideSpecifier","overrides":[],"src":"3819:8:24"},"parameters":{"id":4871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4870,"mutability":"mutable","name":"value","nameLocation":"3803:5:24","nodeType":"VariableDeclaration","scope":4929,"src":"3795:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4869,"name":"uint256","nodeType":"ElementaryTypeName","src":"3795:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3794:15:24"},"returnParameters":{"id":4875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4929,"src":"3836:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4873,"name":"bool","nodeType":"ElementaryTypeName","src":"3836:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3835:6:24"},"scope":5328,"src":"3762:587:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[5497],"body":{"id":5040,"nodeType":"Block","src":"4441:857:24","statements":[{"assignments":[4941],"declarations":[{"constant":false,"id":4941,"mutability":"mutable","name":"userInfo","nameLocation":"4468:8:24","nodeType":"VariableDeclaration","scope":5040,"src":"4451:25:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo"},"typeName":{"id":4940,"nodeType":"UserDefinedTypeName","pathNode":{"id":4939,"name":"UserInfo","nameLocations":["4451:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4656,"src":"4451:8:24"},"referencedDeclaration":4656,"src":"4451:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo"}},"visibility":"internal"}],"id":4946,"initialValue":{"baseExpression":{"id":4942,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"4479:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":4945,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4943,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4489:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4489:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4479:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4451:51:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4947,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4941,"src":"4530:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":4948,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4539:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4651,"src":"4530:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"4554:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4530:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4951,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4529:31:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4952,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4578:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4584:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"4578:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":4954,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"4596:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":4957,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4955,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4610:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4610:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4596:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":4958,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4624:15:24","memberName":"canWithdrawTime","nodeType":"MemberAccess","referencedDeclaration":4667,"src":"4596:43:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4578:61:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4577:63:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4529:111:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"4658:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"baseExpression":{"id":4963,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"4666:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":4966,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4964,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4680:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4680:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4666:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":4967,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4694:14:24","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4665,"src":"4666:42:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4658:50:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4969,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4657:52:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4529:180:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4975,"nodeType":"IfStatement","src":"4512:277:24","trueBody":{"id":4974,"nodeType":"Block","src":"4720:69:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4971,"name":"GENZStaking__TransactionFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"4741:35:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4741:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4973,"nodeType":"RevertStatement","src":"4734:44:24"}]}},{"expression":{"id":4977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4798:14:24","subExpression":{"id":4976,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"4800:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4978,"nodeType":"ExpressionStatement","src":"4798:14:24"},{"expression":{"id":4981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4979,"name":"totalTokensStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4631,"src":"4822:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4980,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"4843:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4822:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4982,"nodeType":"ExpressionStatement","src":"4822:26:24"},{"expression":{"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4983,"name":"userInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4941,"src":"4858:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage_ptr","typeString":"struct GENZStaking.UserInfo storage pointer"}},"id":4985,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4867:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4651,"src":"4858:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4986,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"4883:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:30:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4988,"nodeType":"ExpressionStatement","src":"4858:30:24"},{"expression":{"id":4997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":4989,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"4898:16:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":4993,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4990,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4915:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4915:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4898:30:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":4994,"indexExpression":{"id":4992,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"4929:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4898:44:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":4995,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4943:15:24","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4660,"src":"4898:60:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4996,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"4961:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4898:68:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4998,"nodeType":"ExpressionStatement","src":"4898:68:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":4999,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"4980:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5002,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5000,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"4994:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4994:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4980:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5003,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5008:14:24","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4665,"src":"4980:42:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"5026:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4980:51:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5015,"nodeType":"IfStatement","src":"4976:132:24","trueBody":{"id":5014,"nodeType":"Block","src":"5033:75:24","statements":[{"expression":{"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5006,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"5047:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5009,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5007,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5061:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5061:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5047:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5075:14:24","memberName":"ifTimerStarted","nodeType":"MemberAccess","referencedDeclaration":4663,"src":"5047:42:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5092:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5047:50:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5013,"nodeType":"ExpressionStatement","src":"5047:50:24"}]}},{"expression":{"id":5022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5016,"name":"checkWaitTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"5117:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_WithdrawWaitPeriod_$4668_storage_$","typeString":"mapping(address => struct GENZStaking.WithdrawWaitPeriod storage ref)"}},"id":5019,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5017,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5131:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5131:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5117:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawWaitPeriod_$4668_storage","typeString":"struct GENZStaking.WithdrawWaitPeriod storage ref"}},"id":5020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5145:14:24","memberName":"GENZTokenCount","nodeType":"MemberAccess","referencedDeclaration":4665,"src":"5117:42:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"5163:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5117:51:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5023,"nodeType":"ExpressionStatement","src":"5117:51:24"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5027,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5202:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5202:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5029,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"5216:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5024,"name":"_tokenGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"5178:10:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$1470","typeString":"contract IERC20Upgradeable"}},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5189:12:24","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1754,"src":"5178:23:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$1470_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$1470_$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5178:44:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5031,"nodeType":"ExpressionStatement","src":"5178:44:24"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5033,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5250:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"5264:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5032,"name":"UnstakedGENZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5476,"src":"5237:12:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5237:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5037,"nodeType":"EmitStatement","src":"5232:38:24"},{"expression":{"hexValue":"74727565","id":5038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5287:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4938,"id":5039,"nodeType":"Return","src":"5280:11:24"}]},"functionSelector":"060e5c6e","id":5041,"implemented":true,"kind":"function","modifiers":[{"id":4935,"kind":"modifierInvocation","modifierName":{"id":4934,"name":"nonReentrant","nameLocations":["4414:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":751,"src":"4414:12:24"},"nodeType":"ModifierInvocation","src":"4414:12:24"}],"name":"withdrawGENZ","nameLocation":"4368:12:24","nodeType":"FunctionDefinition","overrides":{"id":4933,"nodeType":"OverrideSpecifier","overrides":[],"src":"4405:8:24"},"parameters":{"id":4932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4931,"mutability":"mutable","name":"value","nameLocation":"4389:5:24","nodeType":"VariableDeclaration","scope":5041,"src":"4381:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4930,"name":"uint256","nodeType":"ElementaryTypeName","src":"4381:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4380:15:24"},"returnParameters":{"id":4938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5041,"src":"4435:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4936,"name":"bool","nodeType":"ElementaryTypeName","src":"4435:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4434:6:24"},"scope":5328,"src":"4359:939:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5048,"nodeType":"Block","src":"5357:36:24","statements":[{"expression":{"id":5046,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"5374:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5045,"id":5047,"nodeType":"Return","src":"5367:19:24"}]},"functionSelector":"77c379a4","id":5049,"implemented":true,"kind":"function","modifiers":[],"name":"getVersionID","nameLocation":"5313:12:24","nodeType":"FunctionDefinition","parameters":{"id":5042,"nodeType":"ParameterList","parameters":[],"src":"5325:2:24"},"returnParameters":{"id":5045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5049,"src":"5348:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5043,"name":"uint256","nodeType":"ElementaryTypeName","src":"5348:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5347:9:24"},"scope":5328,"src":"5304:89:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5178,"nodeType":"Block","src":"5469:1031:24","statements":[{"assignments":[5056],"declarations":[{"constant":false,"id":5056,"mutability":"mutable","name":"activeCount","nameLocation":"5487:11:24","nodeType":"VariableDeclaration","scope":5178,"src":"5479:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5055,"name":"uint256","nodeType":"ElementaryTypeName","src":"5479:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5058,"initialValue":{"hexValue":"30","id":5057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5501:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5479:23:24"},{"assignments":[5060],"declarations":[{"constant":false,"id":5060,"mutability":"mutable","name":"userStartVersion","nameLocation":"5520:16:24","nodeType":"VariableDeclaration","scope":5178,"src":"5512:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5059,"name":"uint256","nodeType":"ElementaryTypeName","src":"5512:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5066,"initialValue":{"expression":{"baseExpression":{"id":5061,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"5539:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5064,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5062,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5549:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5549:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5539:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5065,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5563:17:24","memberName":"startVersionBlock","nodeType":"MemberAccess","referencedDeclaration":4653,"src":"5539:41:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5512:68:24"},{"assignments":[5068],"declarations":[{"constant":false,"id":5068,"mutability":"mutable","name":"currVersion","nameLocation":"5598:11:24","nodeType":"VariableDeclaration","scope":5178,"src":"5590:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5067,"name":"uint256","nodeType":"ElementaryTypeName","src":"5590:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5071,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5069,"name":"getVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5049,"src":"5613:12:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5590:37:24"},{"body":{"id":5110,"nodeType":"Block","src":"5690:261:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":5079,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"5708:16:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5082,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5080,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5725:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5725:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5708:30:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5084,"indexExpression":{"id":5083,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"5739:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5708:33:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":5085,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5742:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4658,"src":"5708:46:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5757:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5708:50:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5092,"nodeType":"IfStatement","src":"5704:102:24","trueBody":{"id":5091,"nodeType":"Block","src":"5760:46:24","statements":[{"expression":{"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5778:13:24","subExpression":{"id":5088,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"5780:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5090,"nodeType":"ExpressionStatement","src":"5778:13:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":5093,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"5823:16:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5096,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5094,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"5840:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5840:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5823:30:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5098,"indexExpression":{"id":5097,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"5854:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5823:33:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"id":5099,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5857:15:24","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4660,"src":"5823:49:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5875:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5823:53:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5106,"nodeType":"IfStatement","src":"5819:105:24","trueBody":{"id":5105,"nodeType":"Block","src":"5878:46:24","statements":[{"expression":{"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5896:13:24","subExpression":{"id":5102,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"5898:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5104,"nodeType":"ExpressionStatement","src":"5896:13:24"}]}},{"expression":{"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5937:3:24","subExpression":{"id":5107,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"5939:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5109,"nodeType":"ExpressionStatement","src":"5937:3:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5076,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"5671:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5077,"name":"currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5068,"src":"5676:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5671:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5111,"initializationExpression":{"assignments":[5073],"declarations":[{"constant":false,"id":5073,"mutability":"mutable","name":"i","nameLocation":"5649:1:24","nodeType":"VariableDeclaration","scope":5111,"src":"5641:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5072,"name":"uint256","nodeType":"ElementaryTypeName","src":"5641:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5075,"initialValue":{"id":5074,"name":"userStartVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5060,"src":"5653:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5641:28:24"},"nodeType":"ForStatement","src":"5637:314:24"},{"assignments":[5116],"declarations":[{"constant":false,"id":5116,"mutability":"mutable","name":"activeVersionID","nameLocation":"5977:15:24","nodeType":"VariableDeclaration","scope":5178,"src":"5960:32:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5114,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5115,"nodeType":"ArrayTypeName","src":"5960:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5122,"initialValue":{"arguments":[{"id":5120,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5056,"src":"6009:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5995:13:24","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5117,"name":"uint256","nodeType":"ElementaryTypeName","src":"5999:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5118,"nodeType":"ArrayTypeName","src":"5999:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5995:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5960:61:24"},{"assignments":[5124],"declarations":[{"constant":false,"id":5124,"mutability":"mutable","name":"counter","nameLocation":"6039:7:24","nodeType":"VariableDeclaration","scope":5178,"src":"6031:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5123,"name":"uint256","nodeType":"ElementaryTypeName","src":"6031:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5126,"initialValue":{"hexValue":"30","id":5125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6049:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6031:19:24"},{"body":{"id":5174,"nodeType":"Block","src":"6110:352:24","statements":[{"assignments":[5136],"declarations":[{"constant":false,"id":5136,"mutability":"mutable","name":"userBalance","nameLocation":"6147:11:24","nodeType":"VariableDeclaration","scope":5174,"src":"6124:34:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo"},"typeName":{"id":5135,"nodeType":"UserDefinedTypeName","pathNode":{"id":5134,"name":"UserBalanceInfo","nameLocations":["6124:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":4661,"src":"6124:15:24"},"referencedDeclaration":4661,"src":"6124:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage_ptr","typeString":"struct GENZStaking.UserBalanceInfo"}},"visibility":"internal"}],"id":5143,"initialValue":{"baseExpression":{"baseExpression":{"id":5137,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"6161:16:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5140,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5138,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6178:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6178:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6161:30:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5142,"indexExpression":{"id":5141,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"6192:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6161:33:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6124:70:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5144,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5136,"src":"6211:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5145,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6223:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4658,"src":"6211:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6238:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6211:28:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5155,"nodeType":"IfStatement","src":"6208:94:24","trueBody":{"id":5154,"nodeType":"Block","src":"6241:61:24","statements":[{"expression":{"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5148,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"6259:15:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5150,"indexExpression":{"id":5149,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"6275:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6259:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5151,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"6286:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6259:28:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5153,"nodeType":"ExpressionStatement","src":"6259:28:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5156,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5136,"src":"6318:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5157,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6330:15:24","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4660,"src":"6318:27:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6348:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6318:31:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5167,"nodeType":"IfStatement","src":"6315:97:24","trueBody":{"id":5166,"nodeType":"Block","src":"6351:61:24","statements":[{"expression":{"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5160,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"6369:15:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5162,"indexExpression":{"id":5161,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"6385:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6369:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5163,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"6396:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6369:28:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5165,"nodeType":"ExpressionStatement","src":"6369:28:24"}]}},{"expression":{"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6425:9:24","subExpression":{"id":5168,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5124,"src":"6427:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5170,"nodeType":"ExpressionStatement","src":"6425:9:24"},{"expression":{"id":5172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6448:3:24","subExpression":{"id":5171,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"6450:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5173,"nodeType":"ExpressionStatement","src":"6448:3:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5131,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"6091:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5132,"name":"currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5068,"src":"6096:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6091:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5175,"initializationExpression":{"assignments":[5128],"declarations":[{"constant":false,"id":5128,"mutability":"mutable","name":"i","nameLocation":"6069:1:24","nodeType":"VariableDeclaration","scope":5175,"src":"6064:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5127,"name":"uint","nodeType":"ElementaryTypeName","src":"6064:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5130,"initialValue":{"id":5129,"name":"userStartVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5060,"src":"6073:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6064:25:24"},"nodeType":"ForStatement","src":"6060:402:24"},{"expression":{"id":5176,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"6478:15:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":5054,"id":5177,"nodeType":"Return","src":"6471:22:24"}]},"id":5179,"implemented":true,"kind":"function","modifiers":[],"name":"getActiveVersionID","nameLocation":"5408:18:24","nodeType":"FunctionDefinition","parameters":{"id":5050,"nodeType":"ParameterList","parameters":[],"src":"5426:2:24"},"returnParameters":{"id":5054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5179,"src":"5451:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5051,"name":"uint256","nodeType":"ElementaryTypeName","src":"5451:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5052,"nodeType":"ArrayTypeName","src":"5451:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5450:18:24"},"scope":5328,"src":"5399:1101:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5291,"nodeType":"Block","src":"6565:1069:24","statements":[{"assignments":[5185],"declarations":[{"constant":false,"id":5185,"mutability":"mutable","name":"userBalance","nameLocation":"6583:11:24","nodeType":"VariableDeclaration","scope":5291,"src":"6575:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5184,"name":"uint256","nodeType":"ElementaryTypeName","src":"6575:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5187,"initialValue":{"hexValue":"30","id":5186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6597:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6575:23:24"},{"assignments":[5192],"declarations":[{"constant":false,"id":5192,"mutability":"mutable","name":"activeVersionID","nameLocation":"6625:15:24","nodeType":"VariableDeclaration","scope":5291,"src":"6608:32:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5190,"name":"uint256","nodeType":"ElementaryTypeName","src":"6608:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5191,"nodeType":"ArrayTypeName","src":"6608:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5195,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5193,"name":"getActiveVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"6643:18:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function () view returns (uint256[] memory)"}},"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6643:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6608:55:24"},{"assignments":[5197],"declarations":[{"constant":false,"id":5197,"mutability":"mutable","name":"startVersionID","nameLocation":"6681:14:24","nodeType":"VariableDeclaration","scope":5291,"src":"6673:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5196,"name":"uint256","nodeType":"ElementaryTypeName","src":"6673:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5201,"initialValue":{"baseExpression":{"id":5198,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5192,"src":"6698:15:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5200,"indexExpression":{"hexValue":"30","id":5199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6714:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6698:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6673:43:24"},{"assignments":[5203],"declarations":[{"constant":false,"id":5203,"mutability":"mutable","name":"userPremiumEarned","nameLocation":"6734:17:24","nodeType":"VariableDeclaration","scope":5291,"src":"6726:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5202,"name":"uint256","nodeType":"ElementaryTypeName","src":"6726:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5205,"initialValue":{"hexValue":"30","id":5204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6754:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6726:29:24"},{"assignments":[5207],"declarations":[{"constant":false,"id":5207,"mutability":"mutable","name":"counter","nameLocation":"6773:7:24","nodeType":"VariableDeclaration","scope":5291,"src":"6765:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5206,"name":"uint256","nodeType":"ElementaryTypeName","src":"6765:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5209,"initialValue":{"hexValue":"30","id":5208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6783:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6765:19:24"},{"body":{"id":5287,"nodeType":"Block","src":"6846:748:24","statements":[{"assignments":[5219],"declarations":[{"constant":false,"id":5219,"mutability":"mutable","name":"userVersionBalance","nameLocation":"6883:18:24","nodeType":"VariableDeclaration","scope":5287,"src":"6860:41:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo"},"typeName":{"id":5218,"nodeType":"UserDefinedTypeName","pathNode":{"id":5217,"name":"UserBalanceInfo","nameLocations":["6860:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":4661,"src":"6860:15:24"},"referencedDeclaration":4661,"src":"6860:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage_ptr","typeString":"struct GENZStaking.UserBalanceInfo"}},"visibility":"internal"}],"id":5226,"initialValue":{"baseExpression":{"baseExpression":{"id":5220,"name":"usersBalanceInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"6904:16:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$_$","typeString":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref))"}},"id":5223,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5221,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"6921:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6921:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6904:30:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_UserBalanceInfo_$4661_storage_$","typeString":"mapping(uint256 => struct GENZStaking.UserBalanceInfo storage ref)"}},"id":5225,"indexExpression":{"id":5224,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"6935:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6904:33:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_storage","typeString":"struct GENZStaking.UserBalanceInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6860:77:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5227,"name":"activeVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5192,"src":"6954:15:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5229,"indexExpression":{"id":5228,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"6970:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6954:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5230,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"6982:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6954:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5253,"nodeType":"IfStatement","src":"6951:333:24","trueBody":{"id":5252,"nodeType":"Block","src":"6985:299:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5232,"name":"userVersionBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5219,"src":"7007:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7026:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4658,"src":"7007:31:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7041:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7007:35:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5247,"nodeType":"Block","src":"7153:90:24","statements":[{"expression":{"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5242,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"7175:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"expression":{"id":5243,"name":"userVersionBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5219,"src":"7190:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7209:15:24","memberName":"withdrawnTokens","nodeType":"MemberAccess","referencedDeclaration":4660,"src":"7190:34:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7175:49:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5246,"nodeType":"ExpressionStatement","src":"7175:49:24"}]},"id":5248,"nodeType":"IfStatement","src":"7003:240:24","trueBody":{"id":5241,"nodeType":"Block","src":"7044:87:24","statements":[{"expression":{"id":5239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5236,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"7066:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":5237,"name":"userVersionBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5219,"src":"7081:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceInfo_$4661_memory_ptr","typeString":"struct GENZStaking.UserBalanceInfo memory"}},"id":5238,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7100:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4658,"src":"7081:31:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7066:46:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5240,"nodeType":"ExpressionStatement","src":"7066:46:24"}]}},{"expression":{"id":5250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7260:9:24","subExpression":{"id":5249,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5207,"src":"7262:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5251,"nodeType":"ExpressionStatement","src":"7260:9:24"}]}},{"assignments":[5256],"declarations":[{"constant":false,"id":5256,"mutability":"mutable","name":"versionInfo","nameLocation":"7321:11:24","nodeType":"VariableDeclaration","scope":5287,"src":"7297:35:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage_ptr","typeString":"struct GENZStaking.VersionableInfo"},"typeName":{"id":5255,"nodeType":"UserDefinedTypeName","pathNode":{"id":5254,"name":"VersionableInfo","nameLocations":["7297:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":4647,"src":"7297:15:24"},"referencedDeclaration":4647,"src":"7297:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage_ptr","typeString":"struct GENZStaking.VersionableInfo"}},"visibility":"internal"}],"id":5260,"initialValue":{"baseExpression":{"id":5257,"name":"versionableInfos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"7335:16:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VersionableInfo_$4647_storage_$","typeString":"mapping(uint256 => struct GENZStaking.VersionableInfo storage ref)"}},"id":5259,"indexExpression":{"id":5258,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"7352:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7335:19:24","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage","typeString":"struct GENZStaking.VersionableInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7297:57:24"},{"assignments":[5262],"declarations":[{"constant":false,"id":5262,"mutability":"mutable","name":"duration","nameLocation":"7387:8:24","nodeType":"VariableDeclaration","scope":5287,"src":"7379:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5261,"name":"uint256","nodeType":"ElementaryTypeName","src":"7379:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5268,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5263,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"7398:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7410:7:24","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":4642,"src":"7398:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":5265,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"7420:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7432:9:24","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":4640,"src":"7420:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7398:43:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7379:62:24"},{"expression":{"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5269,"name":"userPremiumEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"7455:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5270,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5262,"src":"7478:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5271,"name":"userBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5185,"src":"7489:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7478:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":5273,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"7503:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7515:17:24","memberName":"distributedAmount","nodeType":"MemberAccess","referencedDeclaration":4644,"src":"7503:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7478:54:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7477:56:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"expression":{"id":5277,"name":"versionInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"7536:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_VersionableInfo_$4647_storage_ptr","typeString":"struct GENZStaking.VersionableInfo storage pointer"}},"id":5278,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7548:16:24","memberName":"tokenDistributed","nodeType":"MemberAccess","referencedDeclaration":4646,"src":"7536:28:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5279,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7535:30:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7477:88:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5281,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7476:90:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7455:111:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5283,"nodeType":"ExpressionStatement","src":"7455:111:24"},{"expression":{"id":5285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7580:3:24","subExpression":{"id":5284,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"7582:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5286,"nodeType":"ExpressionStatement","src":"7580:3:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5214,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"6826:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5215,"name":"_currVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4624,"src":"6831:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6826:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5288,"initializationExpression":{"assignments":[5211],"declarations":[{"constant":false,"id":5211,"mutability":"mutable","name":"i","nameLocation":"6806:1:24","nodeType":"VariableDeclaration","scope":5288,"src":"6798:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5210,"name":"uint256","nodeType":"ElementaryTypeName","src":"6798:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5213,"initialValue":{"id":5212,"name":"startVersionID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"6810:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6798:26:24"},"nodeType":"ForStatement","src":"6794:800:24"},{"expression":{"id":5289,"name":"userPremiumEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5203,"src":"7610:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5183,"id":5290,"nodeType":"Return","src":"7603:24:24"}]},"functionSelector":"3e50de30","id":5292,"implemented":true,"kind":"function","modifiers":[],"name":"calculateRewards","nameLocation":"6515:16:24","nodeType":"FunctionDefinition","parameters":{"id":5180,"nodeType":"ParameterList","parameters":[],"src":"6531:2:24"},"returnParameters":{"id":5183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5292,"src":"6556:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5181,"name":"uint256","nodeType":"ElementaryTypeName","src":"6556:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6555:9:24"},"scope":5328,"src":"6506:1128:24","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[5507],"body":{"id":5314,"nodeType":"Block","src":"7716:109:24","statements":[{"expression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5298,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"7734:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5301,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5299,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"7744:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7744:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7734:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7758:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4651,"src":"7734:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7734:40:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"7734:83:24","trueExpression":{"expression":{"baseExpression":{"id":5305,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"7777:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5308,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5306,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"7787:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7787:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7777:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7801:12:24","memberName":"stakedTokens","nodeType":"MemberAccess","referencedDeclaration":4651,"src":"7777:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5312,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7733:85:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5297,"id":5313,"nodeType":"Return","src":"7726:92:24"}]},"functionSelector":"ed0cdb1a","id":5315,"implemented":true,"kind":"function","modifiers":[],"name":"getUserStakedGENZBalance","nameLocation":"7649:24:24","nodeType":"FunctionDefinition","overrides":{"id":5294,"nodeType":"OverrideSpecifier","overrides":[],"src":"7690:8:24"},"parameters":{"id":5293,"nodeType":"ParameterList","parameters":[],"src":"7673:2:24"},"returnParameters":{"id":5297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5315,"src":"7707:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5295,"name":"uint256","nodeType":"ElementaryTypeName","src":"7707:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7706:9:24"},"scope":5328,"src":"7640:185:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5326,"nodeType":"Block","src":"7900:62:24","statements":[{"expression":{"expression":{"baseExpression":{"id":5320,"name":"usersInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4678,"src":"7917:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserInfo_$4656_storage_$","typeString":"mapping(address => struct GENZStaking.UserInfo storage ref)"}},"id":5323,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5321,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"7927:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7927:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7917:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_UserInfo_$4656_storage","typeString":"struct GENZStaking.UserInfo storage ref"}},"id":5324,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7941:14:24","memberName":"claimedRewards","nodeType":"MemberAccess","referencedDeclaration":4655,"src":"7917:38:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5319,"id":5325,"nodeType":"Return","src":"7910:45:24"}]},"functionSelector":"53b3ad7f","id":5327,"implemented":true,"kind":"function","modifiers":[],"name":"getStakerClaimedRewardInfo","nameLocation":"7840:26:24","nodeType":"FunctionDefinition","parameters":{"id":5316,"nodeType":"ParameterList","parameters":[],"src":"7866:2:24"},"returnParameters":{"id":5319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5327,"src":"7891:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5317,"name":"uint256","nodeType":"ElementaryTypeName","src":"7891:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7890:9:24"},"scope":5328,"src":"7831:131:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5329,"src":"765:7199:24","usedErrors":[4019,4615,4617]}],"src":"37:7927:24"},"id":24},"contracts/core/token/GENZERC20.sol":{"ast":{"absolutePath":"contracts/core/token/GENZERC20.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[2287],"BaseUpgradeablePausable":[4112],"BaseUpgradeablePausable__ZeroAddressError":[4019],"Constants":[4141],"ContextUpgradeable":[2329],"CountersUpgradeable":[2403],"ECDSAUpgradeable":[2939],"EIP712Upgradeable":[3089],"ERC165Upgradeable":[3133],"ERC20PermitUpgradeable":[1686],"ERC20Upgradeable":[1392],"GENZ":[5407],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[3145],"IERC20MetadataUpgradeable":[1495],"IERC20PermitUpgradeable":[1722],"IERC20Upgradeable":[1470],"Initializable":[580],"MathUpgradeable":[4010],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"StringsUpgradeable":[2578]},"id":5408,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5330,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:25"},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":5331,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5408,"sourceUnit":4113,"src":"179:45:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol","id":5332,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5408,"sourceUnit":1393,"src":"225:78:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol","id":5333,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5408,"sourceUnit":1687,"src":"304:101:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5335,"name":"ERC20Upgradeable","nameLocations":["509:16:25"],"nodeType":"IdentifierPath","referencedDeclaration":1392,"src":"509:16:25"},"id":5336,"nodeType":"InheritanceSpecifier","src":"509:16:25"},{"baseName":{"id":5337,"name":"ERC20PermitUpgradeable","nameLocations":["527:22:25"],"nodeType":"IdentifierPath","referencedDeclaration":1686,"src":"527:22:25"},"id":5338,"nodeType":"InheritanceSpecifier","src":"527:22:25"},{"baseName":{"id":5339,"name":"BaseUpgradeablePausable","nameLocations":["551:23:25"],"nodeType":"IdentifierPath","referencedDeclaration":4112,"src":"551:23:25"},"id":5340,"nodeType":"InheritanceSpecifier","src":"551:23:25"}],"canonicalName":"GENZ","contractDependencies":[],"contractKind":"contract","documentation":{"id":5334,"nodeType":"StructuredDocumentation","src":"407:85:25","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":true,"id":5407,"linearizedBaseContracts":[5407,4112,780,335,3133,3145,408,707,1686,3089,1722,1392,1495,1470,2329,580],"name":"GENZ","nameLocation":"501:4:25","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":5342,"mutability":"mutable","name":"_initVersion","nameLocation":"685:12:25","nodeType":"VariableDeclaration","scope":5407,"src":"669:28:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5341,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":5361,"nodeType":"Block","src":"751:140:25","statements":[{"expression":{"arguments":[{"hexValue":"47656e5a204c616273","id":5348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"774:11:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_8f23c609c29b7703eef350a5f8b3cbc2dcd62dabe2773835806f7c7215cf19a2","typeString":"literal_string \"GenZ Labs\""},"value":"GenZ Labs"},{"hexValue":"47454e5a","id":5349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"787:6:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_b022e764762be55e429e153401b647937861c299750a665e186cd74e2e675433","typeString":"literal_string \"GENZ\""},"value":"GENZ"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8f23c609c29b7703eef350a5f8b3cbc2dcd62dabe2773835806f7c7215cf19a2","typeString":"literal_string \"GenZ Labs\""},{"typeIdentifier":"t_stringliteral_b022e764762be55e429e153401b647937861c299750a665e186cd74e2e675433","typeString":"literal_string \"GENZ\""}],"id":5347,"name":"__ERC20_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"761:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":5350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"761:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5351,"nodeType":"ExpressionStatement","src":"761:33:25"},{"expression":{"arguments":[{"hexValue":"47454e5a","id":5353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"823:6:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_b022e764762be55e429e153401b647937861c299750a665e186cd74e2e675433","typeString":"literal_string \"GENZ\""},"value":"GENZ"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b022e764762be55e429e153401b647937861c299750a665e186cd74e2e675433","typeString":"literal_string \"GENZ\""}],"id":5352,"name":"__ERC20Permit_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"804:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"804:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5355,"nodeType":"ExpressionStatement","src":"804:26:25"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5357,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"871:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"871:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5356,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"840:30:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"840:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5360,"nodeType":"ExpressionStatement","src":"840:44:25"}]},"functionSelector":"8129fc1c","id":5362,"implemented":true,"kind":"function","modifiers":[{"id":5345,"kind":"modifierInvocation","modifierName":{"id":5344,"name":"initializer","nameLocations":["739:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"739:11:25"},"nodeType":"ModifierInvocation","src":"739:11:25"}],"name":"initialize","nameLocation":"717:10:25","nodeType":"FunctionDefinition","parameters":{"id":5343,"nodeType":"ParameterList","parameters":[],"src":"727:2:25"},"returnParameters":{"id":5346,"nodeType":"ParameterList","parameters":[],"src":"751:0:25"},"scope":5407,"src":"708:183:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"errorSelector":"19389a47","id":5364,"name":"GENZ__ImmutableChangesError","nameLocation":"903:27:25","nodeType":"ErrorDefinition","parameters":{"id":5363,"nodeType":"ParameterList","parameters":[],"src":"930:2:25"},"src":"897:36:25"},{"body":{"id":5387,"nodeType":"Block","src":"992:158:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5371,"name":"_initVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"1007:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1022:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1007:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5378,"nodeType":"IfStatement","src":"1003:83:25","trueBody":{"id":5377,"nodeType":"Block","src":"1025:61:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5374,"name":"GENZ__ImmutableChangesError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5364,"src":"1046:27:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1046:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5376,"nodeType":"RevertStatement","src":"1039:36:25"}]}},{"expression":{"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1095:14:25","subExpression":{"id":5379,"name":"_initVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"1097:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5381,"nodeType":"ExpressionStatement","src":"1095:14:25"},{"expression":{"arguments":[{"id":5383,"name":"buyContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5366,"src":"1125:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"31653235","id":5384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:4:25","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000_by_1","typeString":"int_const 10000000000000000000000000"},"value":"1e25"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_10000000000000000000000000_by_1","typeString":"int_const 10000000000000000000000000"}],"id":5382,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"1119:5:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1119:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5386,"nodeType":"ExpressionStatement","src":"1119:24:25"}]},"functionSelector":"19ab453c","id":5388,"implemented":true,"kind":"function","modifiers":[{"id":5369,"kind":"modifierInvocation","modifierName":{"id":5368,"name":"onlyAdmin","nameLocations":["982:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"982:9:25"},"nodeType":"ModifierInvocation","src":"982:9:25"}],"name":"init","nameLocation":"947:4:25","nodeType":"FunctionDefinition","parameters":{"id":5367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5366,"mutability":"mutable","name":"buyContract","nameLocation":"960:11:25","nodeType":"VariableDeclaration","scope":5388,"src":"952:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5365,"name":"address","nodeType":"ElementaryTypeName","src":"952:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"951:21:25"},"returnParameters":{"id":5370,"nodeType":"ParameterList","parameters":[],"src":"992:0:25"},"scope":5407,"src":"938:212:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5396,"nodeType":"Block","src":"1192:25:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5393,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"1202:6:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1202:8:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5395,"nodeType":"ExpressionStatement","src":"1202:8:25"}]},"functionSelector":"8456cb59","id":5397,"implemented":true,"kind":"function","modifiers":[{"id":5391,"kind":"modifierInvocation","modifierName":{"id":5390,"name":"onlyAdmin","nameLocations":["1182:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"1182:9:25"},"nodeType":"ModifierInvocation","src":"1182:9:25"}],"name":"pause","nameLocation":"1165:5:25","nodeType":"FunctionDefinition","parameters":{"id":5389,"nodeType":"ParameterList","parameters":[],"src":"1170:2:25"},"returnParameters":{"id":5392,"nodeType":"ParameterList","parameters":[],"src":"1192:0:25"},"scope":5407,"src":"1156:61:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5405,"nodeType":"Block","src":"1261:27:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5402,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"1271:8:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1271:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5404,"nodeType":"ExpressionStatement","src":"1271:10:25"}]},"functionSelector":"3f4ba83a","id":5406,"implemented":true,"kind":"function","modifiers":[{"id":5400,"kind":"modifierInvocation","modifierName":{"id":5399,"name":"onlyAdmin","nameLocations":["1251:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":4037,"src":"1251:9:25"},"nodeType":"ModifierInvocation","src":"1251:9:25"}],"name":"unpause","nameLocation":"1232:7:25","nodeType":"FunctionDefinition","parameters":{"id":5398,"nodeType":"ParameterList","parameters":[],"src":"1239:2:25"},"returnParameters":{"id":5401,"nodeType":"ParameterList","parameters":[],"src":"1261:0:25"},"scope":5407,"src":"1223:65:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5408,"src":"492:798:25","usedErrors":[4019,5364]}],"src":"32:1258:25"},"id":25},"contracts/interfaces/IBuyGENZ.sol":{"ast":{"absolutePath":"contracts/interfaces/IBuyGENZ.sol","exportedSymbols":{"IBuyGENZ":[5429]},"id":5430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5409,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IBuyGENZ","contractDependencies":[],"contractKind":"interface","fullyImplemented":true,"id":5429,"linearizedBaseContracts":[5429],"name":"IBuyGENZ","nameLocation":"67:8:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":5410,"nodeType":"StructuredDocumentation","src":"87:22:26","text":"Custom Error Codes"},"errorSelector":"6fe97ed3","id":5412,"name":"BuySellGENZ__PausedError","nameLocation":"120:24:26","nodeType":"ErrorDefinition","parameters":{"id":5411,"nodeType":"ParameterList","parameters":[],"src":"144:2:26"},"src":"114:33:26"},{"errorSelector":"8facb45e","id":5414,"name":"BuySellGENZ__LowAmountError","nameLocation":"158:27:26","nodeType":"ErrorDefinition","parameters":{"id":5413,"nodeType":"ParameterList","parameters":[],"src":"185:2:26"},"src":"152:36:26"},{"errorSelector":"4ee4a447","id":5416,"name":"BuySellGENZ__LowSZTBalanceError","nameLocation":"199:31:26","nodeType":"ErrorDefinition","parameters":{"id":5415,"nodeType":"ParameterList","parameters":[],"src":"230:2:26"},"src":"193:40:26"},{"errorSelector":"e24c1298","id":5418,"name":"BuySellGENZ__GENZBurnFailedError","nameLocation":"244:32:26","nodeType":"ErrorDefinition","parameters":{"id":5417,"nodeType":"ParameterList","parameters":[],"src":"276:2:26"},"src":"238:41:26"},{"errorSelector":"d52c622d","id":5420,"name":"BuySellGENZ__GENZMintFailedError","nameLocation":"290:32:26","nodeType":"ErrorDefinition","parameters":{"id":5419,"nodeType":"ParameterList","parameters":[],"src":"322:2:26"},"src":"284:41:26"},{"errorSelector":"6cbbb4e4","id":5422,"name":"BuySellGENZ__ImmutableChangesError","nameLocation":"336:34:26","nodeType":"ErrorDefinition","parameters":{"id":5421,"nodeType":"ParameterList","parameters":[],"src":"370:2:26"},"src":"330:43:26"},{"errorSelector":"b0afccc8","id":5424,"name":"BuySellGENZ__TransactionFailedError","nameLocation":"384:35:26","nodeType":"ErrorDefinition","parameters":{"id":5423,"nodeType":"ParameterList","parameters":[],"src":"419:2:26"},"src":"378:44:26"},{"errorSelector":"2b2cce3f","id":5426,"name":"BuySellGENZ__InsufficientBalanceError","nameLocation":"433:37:26","nodeType":"ErrorDefinition","parameters":{"id":5425,"nodeType":"ParameterList","parameters":[],"src":"470:2:26"},"src":"427:46:26"},{"errorSelector":"ba627e24","id":5428,"name":"BuySellGENZ__ZeroAddressTransactionError","nameLocation":"484:40:26","nodeType":"ErrorDefinition","parameters":{"id":5427,"nodeType":"ParameterList","parameters":[],"src":"524:2:26"},"src":"478:49:26"}],"scope":5430,"src":"57:473:26","usedErrors":[5412,5414,5416,5418,5420,5422,5424,5426,5428]}],"src":"32:498:26"},"id":26},"contracts/interfaces/IERC20Extended.sol":{"ast":{"absolutePath":"contracts/interfaces/IERC20Extended.sol","exportedSymbols":{"IERC20Extended":[5454],"IERC20Upgradeable":[1470]},"id":5455,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5431,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"33:23:27"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","id":5432,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5455,"sourceUnit":1471,"src":"58:79:27","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5434,"name":"IERC20Upgradeable","nameLocations":["263:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"263:17:27"},"id":5435,"nodeType":"InheritanceSpecifier","src":"263:17:27"}],"canonicalName":"IERC20Extended","contractDependencies":[],"contractKind":"interface","documentation":{"id":5433,"nodeType":"StructuredDocumentation","src":"139:95:27","text":" @dev Interface for the optional mint and burnFrom functions from the ERC20 standard."},"fullyImplemented":false,"id":5454,"linearizedBaseContracts":[5454,1470],"name":"IERC20Extended","nameLocation":"245:14:27","nodeType":"ContractDefinition","nodes":[{"functionSelector":"40c10f19","id":5444,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"301:4:27","nodeType":"FunctionDefinition","parameters":{"id":5440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5437,"mutability":"mutable","name":"to","nameLocation":"314:2:27","nodeType":"VariableDeclaration","scope":5444,"src":"306:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5436,"name":"address","nodeType":"ElementaryTypeName","src":"306:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5439,"mutability":"mutable","name":"amount","nameLocation":"326:6:27","nodeType":"VariableDeclaration","scope":5444,"src":"318:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5438,"name":"uint256","nodeType":"ElementaryTypeName","src":"318:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"305:28:27"},"returnParameters":{"id":5443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5444,"src":"351:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5441,"name":"bool","nodeType":"ElementaryTypeName","src":"351:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"350:6:27"},"scope":5454,"src":"292:65:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79cc6790","id":5453,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"372:8:27","nodeType":"FunctionDefinition","parameters":{"id":5449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5446,"mutability":"mutable","name":"account","nameLocation":"389:7:27","nodeType":"VariableDeclaration","scope":5453,"src":"381:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5445,"name":"address","nodeType":"ElementaryTypeName","src":"381:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5448,"mutability":"mutable","name":"amount","nameLocation":"406:6:27","nodeType":"VariableDeclaration","scope":5453,"src":"398:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5447,"name":"uint256","nodeType":"ElementaryTypeName","src":"398:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"380:33:27"},"returnParameters":{"id":5452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5453,"src":"431:4:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5450,"name":"bool","nodeType":"ElementaryTypeName","src":"431:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"430:6:27"},"scope":5454,"src":"363:74:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5455,"src":"235:209:27","usedErrors":[]}],"src":"33:411:27"},"id":27},"contracts/interfaces/IGENZStaking.sol":{"ast":{"absolutePath":"contracts/interfaces/IGENZStaking.sol","exportedSymbols":{"IGENZStaking":[5508]},"id":5509,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":5456,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IGENZStaking","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5508,"linearizedBaseContracts":[5508],"name":"IGENZStaking","nameLocation":"72:12:28","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"c43e5db88f387521adfb9f79c0c9efd47004dc3a041358383ecccb1a1509dbf6","id":5460,"name":"UpdatedWithdrawTimer","nameLocation":"98:20:28","nodeType":"EventDefinition","parameters":{"id":5459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5458,"indexed":true,"mutability":"mutable","name":"timeInMinutes","nameLocation":"135:13:28","nodeType":"VariableDeclaration","scope":5460,"src":"119:29:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5457,"name":"uint256","nodeType":"ElementaryTypeName","src":"119:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"118:31:28"},"src":"92:58:28"},{"anonymous":false,"eventSelector":"4e84e59515fa6d59eedd951d065c81f1962f0e5132f2e9120b47d64c7b33a177","id":5464,"name":"UpdatedMinStakingAmount","nameLocation":"162:23:28","nodeType":"EventDefinition","parameters":{"id":5463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5462,"indexed":true,"mutability":"mutable","name":"value","nameLocation":"202:5:28","nodeType":"VariableDeclaration","scope":5464,"src":"186:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5461,"name":"uint256","nodeType":"ElementaryTypeName","src":"186:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"185:23:28"},"src":"156:53:28"},{"anonymous":false,"eventSelector":"f1e64f5ab94083442836ae6ef7e94101f7fcc786c3e761b00d5f4e10c6c20196","id":5470,"name":"StakedGENZ","nameLocation":"221:10:28","nodeType":"EventDefinition","parameters":{"id":5469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5466,"indexed":true,"mutability":"mutable","name":"userAddress","nameLocation":"248:11:28","nodeType":"VariableDeclaration","scope":5470,"src":"232:27:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5465,"name":"address","nodeType":"ElementaryTypeName","src":"232:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5468,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"269:5:28","nodeType":"VariableDeclaration","scope":5470,"src":"261:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5467,"name":"uint256","nodeType":"ElementaryTypeName","src":"261:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"231:44:28"},"src":"215:61:28"},{"anonymous":false,"eventSelector":"33acb29a4ba6d440da1a7ba75e505a000b362f21a991b589437f8f04dd98fd6b","id":5476,"name":"UnstakedGENZ","nameLocation":"288:12:28","nodeType":"EventDefinition","parameters":{"id":5475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5472,"indexed":true,"mutability":"mutable","name":"userAddress","nameLocation":"317:11:28","nodeType":"VariableDeclaration","scope":5476,"src":"301:27:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5471,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5474,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"338:5:28","nodeType":"VariableDeclaration","scope":5476,"src":"330:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5473,"name":"uint256","nodeType":"ElementaryTypeName","src":"330:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"300:44:28"},"src":"282:63:28"},{"functionSelector":"d6fb97a5","id":5483,"implemented":false,"kind":"function","modifiers":[],"name":"stakeGENZ","nameLocation":"360:9:28","nodeType":"FunctionDefinition","parameters":{"id":5479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5478,"mutability":"mutable","name":"_value","nameLocation":"378:6:28","nodeType":"VariableDeclaration","scope":5483,"src":"370:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5477,"name":"uint256","nodeType":"ElementaryTypeName","src":"370:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"369:16:28"},"returnParameters":{"id":5482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5483,"src":"403:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5480,"name":"bool","nodeType":"ElementaryTypeName","src":"403:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"402:6:28"},"scope":5508,"src":"351:58:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6c64f0b4","id":5490,"implemented":false,"kind":"function","modifiers":[],"name":"activateWithdrawalTimer","nameLocation":"424:23:28","nodeType":"FunctionDefinition","parameters":{"id":5486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5485,"mutability":"mutable","name":"_value","nameLocation":"456:6:28","nodeType":"VariableDeclaration","scope":5490,"src":"448:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5484,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"447:16:28"},"returnParameters":{"id":5489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5490,"src":"481:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5487,"name":"bool","nodeType":"ElementaryTypeName","src":"481:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"480:6:28"},"scope":5508,"src":"415:72:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"060e5c6e","id":5497,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawGENZ","nameLocation":"502:12:28","nodeType":"FunctionDefinition","parameters":{"id":5493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5492,"mutability":"mutable","name":"_value","nameLocation":"523:6:28","nodeType":"VariableDeclaration","scope":5497,"src":"515:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5491,"name":"uint256","nodeType":"ElementaryTypeName","src":"515:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"514:16:28"},"returnParameters":{"id":5496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5497,"src":"548:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5494,"name":"bool","nodeType":"ElementaryTypeName","src":"548:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"547:6:28"},"scope":5508,"src":"493:61:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b0e31b2d","id":5502,"implemented":false,"kind":"function","modifiers":[],"name":"totalTokensStaked","nameLocation":"569:17:28","nodeType":"FunctionDefinition","parameters":{"id":5498,"nodeType":"ParameterList","parameters":[],"src":"586:2:28"},"returnParameters":{"id":5501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5502,"src":"611:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5499,"name":"uint256","nodeType":"ElementaryTypeName","src":"611:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"610:9:28"},"scope":5508,"src":"560:60:28","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ed0cdb1a","id":5507,"implemented":false,"kind":"function","modifiers":[],"name":"getUserStakedGENZBalance","nameLocation":"635:24:28","nodeType":"FunctionDefinition","parameters":{"id":5503,"nodeType":"ParameterList","parameters":[],"src":"659:2:28"},"returnParameters":{"id":5506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5507,"src":"684:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5504,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"683:9:28"},"scope":5508,"src":"626:67:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5509,"src":"62:634:28","usedErrors":[]}],"src":"37:659:28"},"id":28},"contracts/interfaces/IGlobalPauseOperation.sol":{"ast":{"absolutePath":"contracts/interfaces/IGlobalPauseOperation.sol","exportedSymbols":{"IGlobalPauseOperation":[5538]},"id":5539,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5510,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IGlobalPauseOperation","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5538,"linearizedBaseContracts":[5538],"name":"IGlobalPauseOperation","nameLocation":"67:21:29","nodeType":"ContractDefinition","nodes":[{"errorSelector":"4806cc9f","id":5512,"name":"GlobalPauseOps__ZeroAddressInputError","nameLocation":"102:37:29","nodeType":"ErrorDefinition","parameters":{"id":5511,"nodeType":"ParameterList","parameters":[],"src":"139:2:29"},"src":"96:46:29"},{"errorSelector":"0dfbbf38","id":5514,"name":"GlobalPauseOperation__ImmutableChangesError","nameLocation":"154:43:29","nodeType":"ErrorDefinition","parameters":{"id":5513,"nodeType":"ParameterList","parameters":[],"src":"197:2:29"},"src":"148:52:29"},{"anonymous":false,"eventSelector":"ced598d6b2f70b0acf8f61670ecfc67f6a33a9615186db06b6f697da4236590c","id":5518,"name":"PausedOperation","nameLocation":"212:15:29","nodeType":"EventDefinition","parameters":{"id":5517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5516,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"236:7:29","nodeType":"VariableDeclaration","scope":5518,"src":"228:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5515,"name":"address","nodeType":"ElementaryTypeName","src":"228:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"227:17:29"},"src":"206:39:29"},{"anonymous":false,"eventSelector":"800fbe4f45115bec6578674f3cdb3bc672a34ec27719b3259f8ee19044904bfc","id":5522,"name":"UnpausedOperation","nameLocation":"257:17:29","nodeType":"EventDefinition","parameters":{"id":5521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5520,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"283:7:29","nodeType":"VariableDeclaration","scope":5522,"src":"275:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5519,"name":"address","nodeType":"ElementaryTypeName","src":"275:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"274:17:29"},"src":"251:41:29"},{"functionSelector":"c9d07020","id":5527,"implemented":false,"kind":"function","modifiers":[],"name":"pauseOperation","nameLocation":"307:14:29","nodeType":"FunctionDefinition","parameters":{"id":5523,"nodeType":"ParameterList","parameters":[],"src":"321:2:29"},"returnParameters":{"id":5526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5527,"src":"341:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5524,"name":"bool","nodeType":"ElementaryTypeName","src":"341:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"340:6:29"},"scope":5538,"src":"298:49:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"39511e99","id":5532,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseOperation","nameLocation":"362:16:29","nodeType":"FunctionDefinition","parameters":{"id":5528,"nodeType":"ParameterList","parameters":[],"src":"378:2:29"},"returnParameters":{"id":5531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5532,"src":"398:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5529,"name":"bool","nodeType":"ElementaryTypeName","src":"398:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"397:6:29"},"scope":5538,"src":"353:51:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b187bd26","id":5537,"implemented":false,"kind":"function","modifiers":[],"name":"isPaused","nameLocation":"423:8:29","nodeType":"FunctionDefinition","parameters":{"id":5533,"nodeType":"ParameterList","parameters":[],"src":"431:2:29"},"returnParameters":{"id":5536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5537,"src":"456:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5534,"name":"bool","nodeType":"ElementaryTypeName","src":"456:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"455:6:29"},"scope":5538,"src":"414:48:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5539,"src":"57:407:29","usedErrors":[5512,5514]}],"src":"32:432:29"},"id":29}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":3132,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":721,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":779,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol":{"ERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611233806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b10565b60405180910390f35b6100e660048036038101906100e19190610bcb565b610308565b6040516100f39190610c26565b60405180910390f35b61010461032b565b6040516101119190610c50565b60405180910390f35b610134600480360381019061012f9190610c6b565b610335565b6040516101419190610c26565b60405180910390f35b610152610364565b60405161015f9190610cda565b60405180910390f35b610182600480360381019061017d9190610bcb565b61036d565b60405161018f9190610c26565b60405180910390f35b6101b260048036038101906101ad9190610cf5565b6103a4565b6040516101bf9190610c50565b60405180910390f35b6101d06103ed565b6040516101dd9190610b10565b60405180910390f35b61020060048036038101906101fb9190610bcb565b61047f565b60405161020d9190610c26565b60405180910390f35b610230600480360381019061022b9190610bcb565b6104f6565b60405161023d9190610c26565b60405180910390f35b610260600480360381019061025b9190610d22565b610519565b60405161026d9190610c50565b60405180910390f35b60606036805461028590610d91565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d91565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610771565b6103588585856107fd565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610df1565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610d91565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610d91565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610e97565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107fd565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90610fbb565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107649190610c50565b60405180910390a3505050565b600061077d8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f757818110156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090611027565b60405180910390fd5b6107f684848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906110b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d29061114b565b60405180910390fd5b6108e6838383610a76565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906111dd565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5d9190610c50565b60405180910390a3610a70848484610a7b565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aba578082015181840152602081019050610a9f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ae282610a80565b610aec8185610a8b565b9350610afc818560208601610a9c565b610b0581610ac6565b840191505092915050565b60006020820190508181036000830152610b2a8184610ad7565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6282610b37565b9050919050565b610b7281610b57565b8114610b7d57600080fd5b50565b600081359050610b8f81610b69565b92915050565b6000819050919050565b610ba881610b95565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b60008060408385031215610be257610be1610b32565b5b6000610bf085828601610b80565b9250506020610c0185828601610bb6565b9150509250929050565b60008115159050919050565b610c2081610c0b565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b610c4a81610b95565b82525050565b6000602082019050610c656000830184610c41565b92915050565b600080600060608486031215610c8457610c83610b32565b5b6000610c9286828701610b80565b9350506020610ca386828701610b80565b9250506040610cb486828701610bb6565b9150509250925092565b600060ff82169050919050565b610cd481610cbe565b82525050565b6000602082019050610cef6000830184610ccb565b92915050565b600060208284031215610d0b57610d0a610b32565b5b6000610d1984828501610b80565b91505092915050565b60008060408385031215610d3957610d38610b32565b5b6000610d4785828601610b80565b9250506020610d5885828601610b80565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da957607f821691505b602082108103610dbc57610dbb610d62565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dfc82610b95565b9150610e0783610b95565b9250828201905080821115610e1f57610e1e610dc2565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e81602583610a8b565b9150610e8c82610e25565b604082019050919050565b60006020820190508181036000830152610eb081610e74565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f13602483610a8b565b9150610f1e82610eb7565b604082019050919050565b60006020820190508181036000830152610f4281610f06565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa5602283610a8b565b9150610fb082610f49565b604082019050919050565b60006020820190508181036000830152610fd481610f98565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611011601d83610a8b565b915061101c82610fdb565b602082019050919050565b6000602082019050818103600083015261104081611004565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110a3602583610a8b565b91506110ae82611047565b604082019050919050565b600060208201905081810360008301526110d281611096565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611135602383610a8b565b9150611140826110d9565b604082019050919050565b6000602082019050818103600083015261116481611128565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c7602683610a8b565b91506111d28261116b565b604082019050919050565b600060208201905081810360008301526111f6816111ba565b905091905056fea2646970667358221220b832ecfe8fd7cf5106df047d4382c107333a0f61112136e6cf49a3a25c5f8d0b64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1233 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF5 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDF1 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67D SWAP1 PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77D DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x863 SWAP1 PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x964 SWAP1 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA70 DUP5 DUP5 DUP5 PUSH2 0xA7B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE2 DUP3 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xAEC DUP2 DUP6 PUSH2 0xA8B JUMP JUMPDEST SWAP4 POP PUSH2 0xAFC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH2 0xB05 DUP2 PUSH2 0xAC6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB2A DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB62 DUP3 PUSH2 0xB37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB72 DUP2 PUSH2 0xB57 JUMP JUMPDEST DUP2 EQ PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8F DUP2 PUSH2 0xB69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA8 DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP2 EQ PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC5 DUP2 PUSH2 0xB9F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBF0 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC01 DUP6 DUP3 DUP7 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC20 DUP2 PUSH2 0xC0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC3B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC17 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC4A DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC84 JUMPI PUSH2 0xC83 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC92 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCA3 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB4 DUP7 DUP3 DUP8 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD4 DUP2 PUSH2 0xCBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0B JUMPI PUSH2 0xD0A PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD19 DUP5 DUP3 DUP6 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD39 JUMPI PUSH2 0xD38 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD47 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD58 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDBC JUMPI PUSH2 0xDBB PUSH2 0xD62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDFC DUP3 PUSH2 0xB95 JUMP JUMPDEST SWAP2 POP PUSH2 0xE07 DUP4 PUSH2 0xB95 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1F JUMPI PUSH2 0xE1E PUSH2 0xDC2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xE8C DUP3 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEB0 DUP2 PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF13 PUSH1 0x24 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xF1E DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF42 DUP2 PUSH2 0xF06 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA5 PUSH1 0x22 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xFB0 DUP3 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD4 DUP2 PUSH2 0xF98 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1011 PUSH1 0x1D DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x101C DUP3 PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1040 DUP2 PUSH2 0x1004 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10A3 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x10AE DUP3 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10D2 DUP2 PUSH2 0x1096 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1135 PUSH1 0x23 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1140 DUP3 PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1164 DUP2 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C7 PUSH1 0x26 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x11D2 DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F6 DUP2 PUSH2 0x11BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 ORIGIN 0xEC INVALID DUP16 0xD7 0xCF MLOAD MOD 0xDF DIV PUSH30 0x4382C107333A0F61112136E6CF49A3A25C5F8D0B64736F6C634300081000 CALLER ","sourceMap":"1480:12159:6:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1386":{"entryPoint":2683,"id":1386,"parameterSlots":3,"returnSlots":0},"@_approve_1321":{"entryPoint":1448,"id":1321,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1375":{"entryPoint":2678,"id":1375,"parameterSlots":3,"returnSlots":0},"@_msgSender_2314":{"entryPoint":1440,"id":2314,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_1364":{"entryPoint":1905,"id":1364,"parameterSlots":3,"returnSlots":0},"@_transfer_1147":{"entryPoint":2045,"id":1147,"parameterSlots":3,"returnSlots":0},"@allowance_942":{"entryPoint":1305,"id":942,"parameterSlots":2,"returnSlots":1},"@approve_967":{"entryPoint":776,"id":967,"parameterSlots":2,"returnSlots":1},"@balanceOf_899":{"entryPoint":932,"id":899,"parameterSlots":1,"returnSlots":1},"@decimals_875":{"entryPoint":868,"id":875,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1070":{"entryPoint":1151,"id":1070,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1029":{"entryPoint":877,"id":1029,"parameterSlots":2,"returnSlots":1},"@name_855":{"entryPoint":630,"id":855,"parameterSlots":0,"returnSlots":1},"@symbol_865":{"entryPoint":1005,"id":865,"parameterSlots":0,"returnSlots":1},"@totalSupply_885":{"entryPoint":811,"id":885,"parameterSlots":0,"returnSlots":1},"@transferFrom_1000":{"entryPoint":821,"id":1000,"parameterSlots":3,"returnSlots":1},"@transfer_924":{"entryPoint":1270,"id":924,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2944,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":2998,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3362,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3179,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3019,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3095,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2775,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":4392,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":3992,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":4100,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":4538,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":4246,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":3846,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":3700,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3137,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3275,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3110,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2832,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4427,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4027,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4135,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4573,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4281,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3881,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3735,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3152,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3290,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2688,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2699,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3569,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2903,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3083,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2871,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2965,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3262,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2716,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3522,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":3426,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2866,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2758,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":4313,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":3913,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":4059,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":4459,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":4167,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":3767,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":3621,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2921,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2975,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13699:30","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:30","statements":[{"nodeType":"YulAssignment","src":"77:22:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:30"},"nodeType":"YulFunctionCall","src":"87:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:30"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:30","type":""}],"src":"7:99:30"},{"body":{"nodeType":"YulBlock","src":"208:73:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:30"},"nodeType":"YulFunctionCall","src":"218:19:30"},"nodeType":"YulExpressionStatement","src":"218:19:30"},{"nodeType":"YulAssignment","src":"246:29:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:30"},"nodeType":"YulFunctionCall","src":"261:14:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:30","type":""}],"src":"112:169:30"},{"body":{"nodeType":"YulBlock","src":"349:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"359:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"368:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"363:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"428:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"453:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"458:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"449:3:30"},"nodeType":"YulFunctionCall","src":"449:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"472:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"477:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:30"},"nodeType":"YulFunctionCall","src":"468:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"462:5:30"},"nodeType":"YulFunctionCall","src":"462:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"442:6:30"},"nodeType":"YulFunctionCall","src":"442:39:30"},"nodeType":"YulExpressionStatement","src":"442:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"392:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"386:2:30"},"nodeType":"YulFunctionCall","src":"386:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"400:19:30","statements":[{"nodeType":"YulAssignment","src":"402:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"411:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"414:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"407:3:30"},"nodeType":"YulFunctionCall","src":"407:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"402:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"382:3:30","statements":[]},"src":"378:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"511:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"516:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:30"},"nodeType":"YulFunctionCall","src":"507:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"525:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"500:6:30"},"nodeType":"YulFunctionCall","src":"500:27:30"},"nodeType":"YulExpressionStatement","src":"500:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"331:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"336:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"341:6:30","type":""}],"src":"287:246:30"},{"body":{"nodeType":"YulBlock","src":"587:54:30","statements":[{"nodeType":"YulAssignment","src":"597:38:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"615:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"622:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"611:3:30"},"nodeType":"YulFunctionCall","src":"611:14:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"631:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"627:3:30"},"nodeType":"YulFunctionCall","src":"627:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"607:3:30"},"nodeType":"YulFunctionCall","src":"607:28:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"597:6:30"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"570:5:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"580:6:30","type":""}],"src":"539:102:30"},{"body":{"nodeType":"YulBlock","src":"739:285:30","statements":[{"nodeType":"YulVariableDeclaration","src":"749:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"796:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"763:32:30"},"nodeType":"YulFunctionCall","src":"763:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"753:6:30","type":""}]},{"nodeType":"YulAssignment","src":"811:78:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"877:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"882:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"818:58:30"},"nodeType":"YulFunctionCall","src":"818:71:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"811:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"937:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"944:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:30"},"nodeType":"YulFunctionCall","src":"933:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"951:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"956:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"898:34:30"},"nodeType":"YulFunctionCall","src":"898:65:30"},"nodeType":"YulExpressionStatement","src":"898:65:30"},{"nodeType":"YulAssignment","src":"972:46:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"983:3:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1010:6:30"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"988:21:30"},"nodeType":"YulFunctionCall","src":"988:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"979:3:30"},"nodeType":"YulFunctionCall","src":"979:39:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"972:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"720:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"727:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"735:3:30","type":""}],"src":"647:377:30"},{"body":{"nodeType":"YulBlock","src":"1148:195:30","statements":[{"nodeType":"YulAssignment","src":"1158:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1170:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1166:3:30"},"nodeType":"YulFunctionCall","src":"1166:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1158:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1205:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1216:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1201:3:30"},"nodeType":"YulFunctionCall","src":"1201:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1220:3:30"},"nodeType":"YulFunctionCall","src":"1220:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1194:6:30"},"nodeType":"YulFunctionCall","src":"1194:47:30"},"nodeType":"YulExpressionStatement","src":"1194:47:30"},{"nodeType":"YulAssignment","src":"1250:86:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1322:6:30"},{"name":"tail","nodeType":"YulIdentifier","src":"1331:4:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1258:63:30"},"nodeType":"YulFunctionCall","src":"1258:78:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1250:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1120:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1132:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1143:4:30","type":""}],"src":"1030:313:30"},{"body":{"nodeType":"YulBlock","src":"1389:35:30","statements":[{"nodeType":"YulAssignment","src":"1399:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1409:5:30"},"nodeType":"YulFunctionCall","src":"1409:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1399:6:30"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1382:6:30","type":""}],"src":"1349:75:30"},{"body":{"nodeType":"YulBlock","src":"1519:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1536:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1529:6:30"},"nodeType":"YulFunctionCall","src":"1529:12:30"},"nodeType":"YulExpressionStatement","src":"1529:12:30"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1430:117:30"},{"body":{"nodeType":"YulBlock","src":"1642:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1659:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1662:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1652:6:30"},"nodeType":"YulFunctionCall","src":"1652:12:30"},"nodeType":"YulExpressionStatement","src":"1652:12:30"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1553:117:30"},{"body":{"nodeType":"YulBlock","src":"1721:81:30","statements":[{"nodeType":"YulAssignment","src":"1731:65:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1746:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"1753:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1742:3:30"},"nodeType":"YulFunctionCall","src":"1742:54:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1731:7:30"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1703:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1713:7:30","type":""}],"src":"1676:126:30"},{"body":{"nodeType":"YulBlock","src":"1853:51:30","statements":[{"nodeType":"YulAssignment","src":"1863:35:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1892:5:30"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1874:17:30"},"nodeType":"YulFunctionCall","src":"1874:24:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1863:7:30"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1835:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1845:7:30","type":""}],"src":"1808:96:30"},{"body":{"nodeType":"YulBlock","src":"1953:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"2010:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2019:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2022:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2012:6:30"},"nodeType":"YulFunctionCall","src":"2012:12:30"},"nodeType":"YulExpressionStatement","src":"2012:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1976:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2001:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1983:17:30"},"nodeType":"YulFunctionCall","src":"1983:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1973:2:30"},"nodeType":"YulFunctionCall","src":"1973:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1966:6:30"},"nodeType":"YulFunctionCall","src":"1966:43:30"},"nodeType":"YulIf","src":"1963:63:30"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1946:5:30","type":""}],"src":"1910:122:30"},{"body":{"nodeType":"YulBlock","src":"2090:87:30","statements":[{"nodeType":"YulAssignment","src":"2100:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2122:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2109:12:30"},"nodeType":"YulFunctionCall","src":"2109:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2100:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2165:5:30"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2138:26:30"},"nodeType":"YulFunctionCall","src":"2138:33:30"},"nodeType":"YulExpressionStatement","src":"2138:33:30"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2068:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"2076:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2084:5:30","type":""}],"src":"2038:139:30"},{"body":{"nodeType":"YulBlock","src":"2228:32:30","statements":[{"nodeType":"YulAssignment","src":"2238:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"2249:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2238:7:30"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2210:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2220:7:30","type":""}],"src":"2183:77:30"},{"body":{"nodeType":"YulBlock","src":"2309:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"2366:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2375:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2378:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2368:6:30"},"nodeType":"YulFunctionCall","src":"2368:12:30"},"nodeType":"YulExpressionStatement","src":"2368:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2332:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2357:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2339:17:30"},"nodeType":"YulFunctionCall","src":"2339:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2329:2:30"},"nodeType":"YulFunctionCall","src":"2329:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2322:6:30"},"nodeType":"YulFunctionCall","src":"2322:43:30"},"nodeType":"YulIf","src":"2319:63:30"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2302:5:30","type":""}],"src":"2266:122:30"},{"body":{"nodeType":"YulBlock","src":"2446:87:30","statements":[{"nodeType":"YulAssignment","src":"2456:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2478:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2465:12:30"},"nodeType":"YulFunctionCall","src":"2465:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2456:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2521:5:30"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2494:26:30"},"nodeType":"YulFunctionCall","src":"2494:33:30"},"nodeType":"YulExpressionStatement","src":"2494:33:30"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2424:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"2432:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2440:5:30","type":""}],"src":"2394:139:30"},{"body":{"nodeType":"YulBlock","src":"2622:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"2668:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2670:77:30"},"nodeType":"YulFunctionCall","src":"2670:79:30"},"nodeType":"YulExpressionStatement","src":"2670:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2643:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2652:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2639:3:30"},"nodeType":"YulFunctionCall","src":"2639:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2664:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2635:3:30"},"nodeType":"YulFunctionCall","src":"2635:32:30"},"nodeType":"YulIf","src":"2632:119:30"},{"nodeType":"YulBlock","src":"2761:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2776:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2790:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2780:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2805:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2840:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2851:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2836:3:30"},"nodeType":"YulFunctionCall","src":"2836:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2815:20:30"},"nodeType":"YulFunctionCall","src":"2815:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2805:6:30"}]}]},{"nodeType":"YulBlock","src":"2888:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2903:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2917:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2907:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2933:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2979:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:30"},"nodeType":"YulFunctionCall","src":"2964:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2988:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2943:20:30"},"nodeType":"YulFunctionCall","src":"2943:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2933:6:30"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2584:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2595:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2607:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2615:6:30","type":""}],"src":"2539:474:30"},{"body":{"nodeType":"YulBlock","src":"3061:48:30","statements":[{"nodeType":"YulAssignment","src":"3071:32:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3096:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3089:6:30"},"nodeType":"YulFunctionCall","src":"3089:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3082:6:30"},"nodeType":"YulFunctionCall","src":"3082:21:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3071:7:30"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3043:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3053:7:30","type":""}],"src":"3019:90:30"},{"body":{"nodeType":"YulBlock","src":"3174:50:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3191:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3211:5:30"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3196:14:30"},"nodeType":"YulFunctionCall","src":"3196:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3184:6:30"},"nodeType":"YulFunctionCall","src":"3184:34:30"},"nodeType":"YulExpressionStatement","src":"3184:34:30"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3162:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3169:3:30","type":""}],"src":"3115:109:30"},{"body":{"nodeType":"YulBlock","src":"3322:118:30","statements":[{"nodeType":"YulAssignment","src":"3332:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3344:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3355:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3340:3:30"},"nodeType":"YulFunctionCall","src":"3340:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3332:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3406:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3419:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3430:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3415:3:30"},"nodeType":"YulFunctionCall","src":"3415:17:30"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3368:37:30"},"nodeType":"YulFunctionCall","src":"3368:65:30"},"nodeType":"YulExpressionStatement","src":"3368:65:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3294:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3306:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3317:4:30","type":""}],"src":"3230:210:30"},{"body":{"nodeType":"YulBlock","src":"3511:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3528:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3551:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3533:17:30"},"nodeType":"YulFunctionCall","src":"3533:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3521:6:30"},"nodeType":"YulFunctionCall","src":"3521:37:30"},"nodeType":"YulExpressionStatement","src":"3521:37:30"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3499:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3506:3:30","type":""}],"src":"3446:118:30"},{"body":{"nodeType":"YulBlock","src":"3668:124:30","statements":[{"nodeType":"YulAssignment","src":"3678:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3690:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3701:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3686:3:30"},"nodeType":"YulFunctionCall","src":"3686:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3678:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3758:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3771:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3782:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3767:3:30"},"nodeType":"YulFunctionCall","src":"3767:17:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3714:43:30"},"nodeType":"YulFunctionCall","src":"3714:71:30"},"nodeType":"YulExpressionStatement","src":"3714:71:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3640:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3652:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3663:4:30","type":""}],"src":"3570:222:30"},{"body":{"nodeType":"YulBlock","src":"3898:519:30","statements":[{"body":{"nodeType":"YulBlock","src":"3944:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3946:77:30"},"nodeType":"YulFunctionCall","src":"3946:79:30"},"nodeType":"YulExpressionStatement","src":"3946:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3919:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3915:3:30"},"nodeType":"YulFunctionCall","src":"3915:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3940:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3911:3:30"},"nodeType":"YulFunctionCall","src":"3911:32:30"},"nodeType":"YulIf","src":"3908:119:30"},{"nodeType":"YulBlock","src":"4037:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4052:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4066:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4056:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4081:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4116:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4127:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4112:3:30"},"nodeType":"YulFunctionCall","src":"4112:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4136:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4091:20:30"},"nodeType":"YulFunctionCall","src":"4091:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4081:6:30"}]}]},{"nodeType":"YulBlock","src":"4164:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4179:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4193:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4183:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4209:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4244:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4255:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4240:3:30"},"nodeType":"YulFunctionCall","src":"4240:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4264:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4219:20:30"},"nodeType":"YulFunctionCall","src":"4219:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4209:6:30"}]}]},{"nodeType":"YulBlock","src":"4292:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4307:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:2:30","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4311:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4337:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4372:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4383:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:30"},"nodeType":"YulFunctionCall","src":"4368:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4392:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4347:20:30"},"nodeType":"YulFunctionCall","src":"4347:53:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4337:6:30"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3852:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3863:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3875:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3883:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3891:6:30","type":""}],"src":"3798:619:30"},{"body":{"nodeType":"YulBlock","src":"4466:43:30","statements":[{"nodeType":"YulAssignment","src":"4476:27:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4491:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4498:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4487:3:30"},"nodeType":"YulFunctionCall","src":"4487:16:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4476:7:30"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4448:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4458:7:30","type":""}],"src":"4423:86:30"},{"body":{"nodeType":"YulBlock","src":"4576:51:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4593:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4614:5:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4598:15:30"},"nodeType":"YulFunctionCall","src":"4598:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4586:6:30"},"nodeType":"YulFunctionCall","src":"4586:35:30"},"nodeType":"YulExpressionStatement","src":"4586:35:30"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4564:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4571:3:30","type":""}],"src":"4515:112:30"},{"body":{"nodeType":"YulBlock","src":"4727:120:30","statements":[{"nodeType":"YulAssignment","src":"4737:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4749:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4745:3:30"},"nodeType":"YulFunctionCall","src":"4745:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4737:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4813:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4826:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4837:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4822:3:30"},"nodeType":"YulFunctionCall","src":"4822:17:30"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4773:39:30"},"nodeType":"YulFunctionCall","src":"4773:67:30"},"nodeType":"YulExpressionStatement","src":"4773:67:30"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4699:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4711:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4722:4:30","type":""}],"src":"4633:214:30"},{"body":{"nodeType":"YulBlock","src":"4919:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"4965:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4967:77:30"},"nodeType":"YulFunctionCall","src":"4967:79:30"},"nodeType":"YulExpressionStatement","src":"4967:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4940:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4949:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4936:3:30"},"nodeType":"YulFunctionCall","src":"4936:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4961:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4932:3:30"},"nodeType":"YulFunctionCall","src":"4932:32:30"},"nodeType":"YulIf","src":"4929:119:30"},{"nodeType":"YulBlock","src":"5058:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5073:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5087:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5077:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5102:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5148:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:30"},"nodeType":"YulFunctionCall","src":"5133:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5157:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5112:20:30"},"nodeType":"YulFunctionCall","src":"5112:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5102:6:30"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4900:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4912:6:30","type":""}],"src":"4853:329:30"},{"body":{"nodeType":"YulBlock","src":"5271:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"5317:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5319:77:30"},"nodeType":"YulFunctionCall","src":"5319:79:30"},"nodeType":"YulExpressionStatement","src":"5319:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5292:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5301:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5288:3:30"},"nodeType":"YulFunctionCall","src":"5288:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5313:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5284:3:30"},"nodeType":"YulFunctionCall","src":"5284:32:30"},"nodeType":"YulIf","src":"5281:119:30"},{"nodeType":"YulBlock","src":"5410:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5425:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5439:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5429:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5454:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5489:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5500:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5485:3:30"},"nodeType":"YulFunctionCall","src":"5485:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5509:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5464:20:30"},"nodeType":"YulFunctionCall","src":"5464:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5454:6:30"}]}]},{"nodeType":"YulBlock","src":"5537:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5552:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5566:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5556:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5582:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5617:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5628:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5613:3:30"},"nodeType":"YulFunctionCall","src":"5613:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5637:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5592:20:30"},"nodeType":"YulFunctionCall","src":"5592:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5582:6:30"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5233:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5244:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5256:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5264:6:30","type":""}],"src":"5188:474:30"},{"body":{"nodeType":"YulBlock","src":"5696:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5713:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5716:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5706:6:30"},"nodeType":"YulFunctionCall","src":"5706:88:30"},"nodeType":"YulExpressionStatement","src":"5706:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5810:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5813:4:30","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5803:6:30"},"nodeType":"YulFunctionCall","src":"5803:15:30"},"nodeType":"YulExpressionStatement","src":"5803:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5834:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5837:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5827:6:30"},"nodeType":"YulFunctionCall","src":"5827:15:30"},"nodeType":"YulExpressionStatement","src":"5827:15:30"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"5668:180:30"},{"body":{"nodeType":"YulBlock","src":"5905:269:30","statements":[{"nodeType":"YulAssignment","src":"5915:22:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5929:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"5935:1:30","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5925:3:30"},"nodeType":"YulFunctionCall","src":"5925:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5915:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"5946:38:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5976:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"5982:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5972:3:30"},"nodeType":"YulFunctionCall","src":"5972:12:30"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5950:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"6023:51:30","statements":[{"nodeType":"YulAssignment","src":"6037:27:30","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6051:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6059:4:30","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6047:3:30"},"nodeType":"YulFunctionCall","src":"6047:17:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6037:6:30"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6003:18:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5996:6:30"},"nodeType":"YulFunctionCall","src":"5996:26:30"},"nodeType":"YulIf","src":"5993:81:30"},{"body":{"nodeType":"YulBlock","src":"6126:42:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6140:16:30"},"nodeType":"YulFunctionCall","src":"6140:18:30"},"nodeType":"YulExpressionStatement","src":"6140:18:30"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6090:18:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6113:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6121:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6110:2:30"},"nodeType":"YulFunctionCall","src":"6110:14:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6087:2:30"},"nodeType":"YulFunctionCall","src":"6087:38:30"},"nodeType":"YulIf","src":"6084:84:30"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5889:4:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5898:6:30","type":""}],"src":"5854:320:30"},{"body":{"nodeType":"YulBlock","src":"6208:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6225:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6228:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6218:6:30"},"nodeType":"YulFunctionCall","src":"6218:88:30"},"nodeType":"YulExpressionStatement","src":"6218:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6322:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6325:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6315:6:30"},"nodeType":"YulFunctionCall","src":"6315:15:30"},"nodeType":"YulExpressionStatement","src":"6315:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6346:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6349:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6339:6:30"},"nodeType":"YulFunctionCall","src":"6339:15:30"},"nodeType":"YulExpressionStatement","src":"6339:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6180:180:30"},{"body":{"nodeType":"YulBlock","src":"6410:147:30","statements":[{"nodeType":"YulAssignment","src":"6420:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6443:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6425:17:30"},"nodeType":"YulFunctionCall","src":"6425:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6420:1:30"}]},{"nodeType":"YulAssignment","src":"6454:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6477:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6459:17:30"},"nodeType":"YulFunctionCall","src":"6459:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6454:1:30"}]},{"nodeType":"YulAssignment","src":"6488:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6499:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"6502:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6495:3:30"},"nodeType":"YulFunctionCall","src":"6495:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6488:3:30"}]},{"body":{"nodeType":"YulBlock","src":"6528:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6530:16:30"},"nodeType":"YulFunctionCall","src":"6530:18:30"},"nodeType":"YulExpressionStatement","src":"6530:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6520:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"6523:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6517:2:30"},"nodeType":"YulFunctionCall","src":"6517:10:30"},"nodeType":"YulIf","src":"6514:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6397:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"6400:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6406:3:30","type":""}],"src":"6366:191:30"},{"body":{"nodeType":"YulBlock","src":"6669:118:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6691:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6699:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6687:3:30"},"nodeType":"YulFunctionCall","src":"6687:14:30"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6703:34:30","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6680:6:30"},"nodeType":"YulFunctionCall","src":"6680:58:30"},"nodeType":"YulExpressionStatement","src":"6680:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6759:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6767:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6755:3:30"},"nodeType":"YulFunctionCall","src":"6755:15:30"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6772:7:30","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6748:6:30"},"nodeType":"YulFunctionCall","src":"6748:32:30"},"nodeType":"YulExpressionStatement","src":"6748:32:30"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6661:6:30","type":""}],"src":"6563:224:30"},{"body":{"nodeType":"YulBlock","src":"6939:220:30","statements":[{"nodeType":"YulAssignment","src":"6949:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7015:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"7020:2:30","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6956:58:30"},"nodeType":"YulFunctionCall","src":"6956:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6949:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7121:3:30"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"7032:88:30"},"nodeType":"YulFunctionCall","src":"7032:93:30"},"nodeType":"YulExpressionStatement","src":"7032:93:30"},{"nodeType":"YulAssignment","src":"7134:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7145:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"7150:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7141:3:30"},"nodeType":"YulFunctionCall","src":"7141:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7134:3:30"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6927:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6935:3:30","type":""}],"src":"6793:366:30"},{"body":{"nodeType":"YulBlock","src":"7336:248:30","statements":[{"nodeType":"YulAssignment","src":"7346:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7358:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7369:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7354:3:30"},"nodeType":"YulFunctionCall","src":"7354:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7346:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7393:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7404:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7389:3:30"},"nodeType":"YulFunctionCall","src":"7389:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7412:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7418:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7408:3:30"},"nodeType":"YulFunctionCall","src":"7408:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7382:6:30"},"nodeType":"YulFunctionCall","src":"7382:47:30"},"nodeType":"YulExpressionStatement","src":"7382:47:30"},{"nodeType":"YulAssignment","src":"7438:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7572:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7446:124:30"},"nodeType":"YulFunctionCall","src":"7446:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7438:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7316:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7331:4:30","type":""}],"src":"7165:419:30"},{"body":{"nodeType":"YulBlock","src":"7696:117:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7718:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7726:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7714:3:30"},"nodeType":"YulFunctionCall","src":"7714:14:30"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7730:34:30","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7707:6:30"},"nodeType":"YulFunctionCall","src":"7707:58:30"},"nodeType":"YulExpressionStatement","src":"7707:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7786:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7794:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7782:3:30"},"nodeType":"YulFunctionCall","src":"7782:15:30"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7799:6:30","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7775:6:30"},"nodeType":"YulFunctionCall","src":"7775:31:30"},"nodeType":"YulExpressionStatement","src":"7775:31:30"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7688:6:30","type":""}],"src":"7590:223:30"},{"body":{"nodeType":"YulBlock","src":"7965:220:30","statements":[{"nodeType":"YulAssignment","src":"7975:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8041:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8046:2:30","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7982:58:30"},"nodeType":"YulFunctionCall","src":"7982:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7975:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8147:3:30"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"8058:88:30"},"nodeType":"YulFunctionCall","src":"8058:93:30"},"nodeType":"YulExpressionStatement","src":"8058:93:30"},{"nodeType":"YulAssignment","src":"8160:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8171:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8176:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8167:3:30"},"nodeType":"YulFunctionCall","src":"8167:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8160:3:30"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7953:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7961:3:30","type":""}],"src":"7819:366:30"},{"body":{"nodeType":"YulBlock","src":"8362:248:30","statements":[{"nodeType":"YulAssignment","src":"8372:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8384:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8395:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8380:3:30"},"nodeType":"YulFunctionCall","src":"8380:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8372:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8419:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8430:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8415:3:30"},"nodeType":"YulFunctionCall","src":"8415:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8438:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"8444:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8434:3:30"},"nodeType":"YulFunctionCall","src":"8434:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8408:6:30"},"nodeType":"YulFunctionCall","src":"8408:47:30"},"nodeType":"YulExpressionStatement","src":"8408:47:30"},{"nodeType":"YulAssignment","src":"8464:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8598:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8472:124:30"},"nodeType":"YulFunctionCall","src":"8472:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8464:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8342:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8357:4:30","type":""}],"src":"8191:419:30"},{"body":{"nodeType":"YulBlock","src":"8722:115:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8744:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8752:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8740:3:30"},"nodeType":"YulFunctionCall","src":"8740:14:30"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"8756:34:30","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8733:6:30"},"nodeType":"YulFunctionCall","src":"8733:58:30"},"nodeType":"YulExpressionStatement","src":"8733:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8812:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8820:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8808:3:30"},"nodeType":"YulFunctionCall","src":"8808:15:30"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"8825:4:30","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:30"},"nodeType":"YulFunctionCall","src":"8801:29:30"},"nodeType":"YulExpressionStatement","src":"8801:29:30"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8714:6:30","type":""}],"src":"8616:221:30"},{"body":{"nodeType":"YulBlock","src":"8989:220:30","statements":[{"nodeType":"YulAssignment","src":"8999:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9065:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"9070:2:30","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9006:58:30"},"nodeType":"YulFunctionCall","src":"9006:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8999:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9171:3:30"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"9082:88:30"},"nodeType":"YulFunctionCall","src":"9082:93:30"},"nodeType":"YulExpressionStatement","src":"9082:93:30"},{"nodeType":"YulAssignment","src":"9184:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9195:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"9200:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9191:3:30"},"nodeType":"YulFunctionCall","src":"9191:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9184:3:30"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8977:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8985:3:30","type":""}],"src":"8843:366:30"},{"body":{"nodeType":"YulBlock","src":"9386:248:30","statements":[{"nodeType":"YulAssignment","src":"9396:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9408:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9419:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9404:3:30"},"nodeType":"YulFunctionCall","src":"9404:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9396:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9454:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9439:3:30"},"nodeType":"YulFunctionCall","src":"9439:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9462:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9468:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9458:3:30"},"nodeType":"YulFunctionCall","src":"9458:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9432:6:30"},"nodeType":"YulFunctionCall","src":"9432:47:30"},"nodeType":"YulExpressionStatement","src":"9432:47:30"},{"nodeType":"YulAssignment","src":"9488:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9622:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9496:124:30"},"nodeType":"YulFunctionCall","src":"9496:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9488:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9366:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9381:4:30","type":""}],"src":"9215:419:30"},{"body":{"nodeType":"YulBlock","src":"9746:73:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9768:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9776:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9764:3:30"},"nodeType":"YulFunctionCall","src":"9764:14:30"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"9780:31:30","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9757:6:30"},"nodeType":"YulFunctionCall","src":"9757:55:30"},"nodeType":"YulExpressionStatement","src":"9757:55:30"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9738:6:30","type":""}],"src":"9640:179:30"},{"body":{"nodeType":"YulBlock","src":"9971:220:30","statements":[{"nodeType":"YulAssignment","src":"9981:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10047:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"10052:2:30","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9988:58:30"},"nodeType":"YulFunctionCall","src":"9988:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9981:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10153:3:30"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"10064:88:30"},"nodeType":"YulFunctionCall","src":"10064:93:30"},"nodeType":"YulExpressionStatement","src":"10064:93:30"},{"nodeType":"YulAssignment","src":"10166:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10177:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"10182:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10173:3:30"},"nodeType":"YulFunctionCall","src":"10173:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10166:3:30"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9959:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9967:3:30","type":""}],"src":"9825:366:30"},{"body":{"nodeType":"YulBlock","src":"10368:248:30","statements":[{"nodeType":"YulAssignment","src":"10378:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10390:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10401:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10386:3:30"},"nodeType":"YulFunctionCall","src":"10386:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10378:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10425:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10436:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10421:3:30"},"nodeType":"YulFunctionCall","src":"10421:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10444:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10450:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10440:3:30"},"nodeType":"YulFunctionCall","src":"10440:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10414:6:30"},"nodeType":"YulFunctionCall","src":"10414:47:30"},"nodeType":"YulExpressionStatement","src":"10414:47:30"},{"nodeType":"YulAssignment","src":"10470:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10604:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10478:124:30"},"nodeType":"YulFunctionCall","src":"10478:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10470:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10348:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10363:4:30","type":""}],"src":"10197:419:30"},{"body":{"nodeType":"YulBlock","src":"10728:118:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10750:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10758:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10746:3:30"},"nodeType":"YulFunctionCall","src":"10746:14:30"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10762:34:30","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10739:6:30"},"nodeType":"YulFunctionCall","src":"10739:58:30"},"nodeType":"YulExpressionStatement","src":"10739:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10818:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10826:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10814:3:30"},"nodeType":"YulFunctionCall","src":"10814:15:30"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10831:7:30","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10807:6:30"},"nodeType":"YulFunctionCall","src":"10807:32:30"},"nodeType":"YulExpressionStatement","src":"10807:32:30"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10720:6:30","type":""}],"src":"10622:224:30"},{"body":{"nodeType":"YulBlock","src":"10998:220:30","statements":[{"nodeType":"YulAssignment","src":"11008:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11074:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11079:2:30","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11015:58:30"},"nodeType":"YulFunctionCall","src":"11015:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11008:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11180:3:30"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"11091:88:30"},"nodeType":"YulFunctionCall","src":"11091:93:30"},"nodeType":"YulExpressionStatement","src":"11091:93:30"},{"nodeType":"YulAssignment","src":"11193:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11204:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11209:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:30"},"nodeType":"YulFunctionCall","src":"11200:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11193:3:30"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10986:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10994:3:30","type":""}],"src":"10852:366:30"},{"body":{"nodeType":"YulBlock","src":"11395:248:30","statements":[{"nodeType":"YulAssignment","src":"11405:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11417:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11428:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11413:3:30"},"nodeType":"YulFunctionCall","src":"11413:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11405:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11452:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11463:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11448:3:30"},"nodeType":"YulFunctionCall","src":"11448:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11471:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"11477:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11467:3:30"},"nodeType":"YulFunctionCall","src":"11467:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11441:6:30"},"nodeType":"YulFunctionCall","src":"11441:47:30"},"nodeType":"YulExpressionStatement","src":"11441:47:30"},{"nodeType":"YulAssignment","src":"11497:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11631:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11505:124:30"},"nodeType":"YulFunctionCall","src":"11505:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11497:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11375:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11390:4:30","type":""}],"src":"11224:419:30"},{"body":{"nodeType":"YulBlock","src":"11755:116:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11777:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11785:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11773:3:30"},"nodeType":"YulFunctionCall","src":"11773:14:30"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"11789:34:30","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11766:6:30"},"nodeType":"YulFunctionCall","src":"11766:58:30"},"nodeType":"YulExpressionStatement","src":"11766:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11845:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11853:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11841:3:30"},"nodeType":"YulFunctionCall","src":"11841:15:30"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"11858:5:30","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11834:6:30"},"nodeType":"YulFunctionCall","src":"11834:30:30"},"nodeType":"YulExpressionStatement","src":"11834:30:30"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11747:6:30","type":""}],"src":"11649:222:30"},{"body":{"nodeType":"YulBlock","src":"12023:220:30","statements":[{"nodeType":"YulAssignment","src":"12033:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12099:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"12104:2:30","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12040:58:30"},"nodeType":"YulFunctionCall","src":"12040:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12033:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12205:3:30"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"12116:88:30"},"nodeType":"YulFunctionCall","src":"12116:93:30"},"nodeType":"YulExpressionStatement","src":"12116:93:30"},{"nodeType":"YulAssignment","src":"12218:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12229:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"12234:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12225:3:30"},"nodeType":"YulFunctionCall","src":"12225:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12218:3:30"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12011:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12019:3:30","type":""}],"src":"11877:366:30"},{"body":{"nodeType":"YulBlock","src":"12420:248:30","statements":[{"nodeType":"YulAssignment","src":"12430:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12442:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12453:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12438:3:30"},"nodeType":"YulFunctionCall","src":"12438:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12430:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12477:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12488:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12473:3:30"},"nodeType":"YulFunctionCall","src":"12473:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12496:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"12502:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12492:3:30"},"nodeType":"YulFunctionCall","src":"12492:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12466:6:30"},"nodeType":"YulFunctionCall","src":"12466:47:30"},"nodeType":"YulExpressionStatement","src":"12466:47:30"},{"nodeType":"YulAssignment","src":"12522:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12656:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12530:124:30"},"nodeType":"YulFunctionCall","src":"12530:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12522:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12400:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12415:4:30","type":""}],"src":"12249:419:30"},{"body":{"nodeType":"YulBlock","src":"12780:119:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12802:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12810:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12798:3:30"},"nodeType":"YulFunctionCall","src":"12798:14:30"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"12814:34:30","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12791:6:30"},"nodeType":"YulFunctionCall","src":"12791:58:30"},"nodeType":"YulExpressionStatement","src":"12791:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12870:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12878:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12866:3:30"},"nodeType":"YulFunctionCall","src":"12866:15:30"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"12883:8:30","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12859:6:30"},"nodeType":"YulFunctionCall","src":"12859:33:30"},"nodeType":"YulExpressionStatement","src":"12859:33:30"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12772:6:30","type":""}],"src":"12674:225:30"},{"body":{"nodeType":"YulBlock","src":"13051:220:30","statements":[{"nodeType":"YulAssignment","src":"13061:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13127:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"13132:2:30","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13068:58:30"},"nodeType":"YulFunctionCall","src":"13068:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13061:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13233:3:30"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"13144:88:30"},"nodeType":"YulFunctionCall","src":"13144:93:30"},"nodeType":"YulExpressionStatement","src":"13144:93:30"},{"nodeType":"YulAssignment","src":"13246:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13257:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"13262:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13253:3:30"},"nodeType":"YulFunctionCall","src":"13253:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13246:3:30"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13039:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13047:3:30","type":""}],"src":"12905:366:30"},{"body":{"nodeType":"YulBlock","src":"13448:248:30","statements":[{"nodeType":"YulAssignment","src":"13458:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13470:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13481:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13466:3:30"},"nodeType":"YulFunctionCall","src":"13466:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13458:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13505:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13516:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13501:3:30"},"nodeType":"YulFunctionCall","src":"13501:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13524:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"13530:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13520:3:30"},"nodeType":"YulFunctionCall","src":"13520:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13494:6:30"},"nodeType":"YulFunctionCall","src":"13494:47:30"},"nodeType":"YulExpressionStatement","src":"13494:47:30"},{"nodeType":"YulAssignment","src":"13550:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13684:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13558:124:30"},"nodeType":"YulFunctionCall","src":"13558:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13550:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13428:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13443:4:30","type":""}],"src":"13277:419:30"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b10565b60405180910390f35b6100e660048036038101906100e19190610bcb565b610308565b6040516100f39190610c26565b60405180910390f35b61010461032b565b6040516101119190610c50565b60405180910390f35b610134600480360381019061012f9190610c6b565b610335565b6040516101419190610c26565b60405180910390f35b610152610364565b60405161015f9190610cda565b60405180910390f35b610182600480360381019061017d9190610bcb565b61036d565b60405161018f9190610c26565b60405180910390f35b6101b260048036038101906101ad9190610cf5565b6103a4565b6040516101bf9190610c50565b60405180910390f35b6101d06103ed565b6040516101dd9190610b10565b60405180910390f35b61020060048036038101906101fb9190610bcb565b61047f565b60405161020d9190610c26565b60405180910390f35b610230600480360381019061022b9190610bcb565b6104f6565b60405161023d9190610c26565b60405180910390f35b610260600480360381019061025b9190610d22565b610519565b60405161026d9190610c50565b60405180910390f35b60606036805461028590610d91565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d91565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610771565b6103588585856107fd565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610df1565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610d91565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610d91565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610e97565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107fd565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f29565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90610fbb565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107649190610c50565b60405180910390a3505050565b600061077d8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f757818110156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090611027565b60405180910390fd5b6107f684848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906110b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d29061114b565b60405180910390fd5b6108e6838383610a76565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610964906111dd565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5d9190610c50565b60405180910390a3610a70848484610a7b565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aba578082015181840152602081019050610a9f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ae282610a80565b610aec8185610a8b565b9350610afc818560208601610a9c565b610b0581610ac6565b840191505092915050565b60006020820190508181036000830152610b2a8184610ad7565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6282610b37565b9050919050565b610b7281610b57565b8114610b7d57600080fd5b50565b600081359050610b8f81610b69565b92915050565b6000819050919050565b610ba881610b95565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b60008060408385031215610be257610be1610b32565b5b6000610bf085828601610b80565b9250506020610c0185828601610bb6565b9150509250929050565b60008115159050919050565b610c2081610c0b565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b610c4a81610b95565b82525050565b6000602082019050610c656000830184610c41565b92915050565b600080600060608486031215610c8457610c83610b32565b5b6000610c9286828701610b80565b9350506020610ca386828701610b80565b9250506040610cb486828701610bb6565b9150509250925092565b600060ff82169050919050565b610cd481610cbe565b82525050565b6000602082019050610cef6000830184610ccb565b92915050565b600060208284031215610d0b57610d0a610b32565b5b6000610d1984828501610b80565b91505092915050565b60008060408385031215610d3957610d38610b32565b5b6000610d4785828601610b80565b9250506020610d5885828601610b80565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da957607f821691505b602082108103610dbc57610dbb610d62565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dfc82610b95565b9150610e0783610b95565b9250828201905080821115610e1f57610e1e610dc2565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e81602583610a8b565b9150610e8c82610e25565b604082019050919050565b60006020820190508181036000830152610eb081610e74565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f13602483610a8b565b9150610f1e82610eb7565b604082019050919050565b60006020820190508181036000830152610f4281610f06565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa5602283610a8b565b9150610fb082610f49565b604082019050919050565b60006020820190508181036000830152610fd481610f98565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611011601d83610a8b565b915061101c82610fdb565b602082019050919050565b6000602082019050818103600083015261104081611004565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110a3602583610a8b565b91506110ae82611047565b604082019050919050565b600060208201905081810360008301526110d281611096565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611135602383610a8b565b9150611140826110d9565b604082019050919050565b6000602082019050818103600083015261116481611128565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c7602683610a8b565b91506111d28261116b565b604082019050919050565b600060208201905081810360008301526111f6816111ba565b905091905056fea2646970667358221220b832ecfe8fd7cf5106df047d4382c107333a0f61112136e6cf49a3a25c5f8d0b64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCF5 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB10 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBCB JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD22 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDF1 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xD91 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67D SWAP1 PUSH2 0xFBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77D DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0x1027 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x863 SWAP1 PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x964 SWAP1 PUSH2 0x11DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0xC50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA70 DUP5 DUP5 DUP5 PUSH2 0xA7B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE2 DUP3 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xAEC DUP2 DUP6 PUSH2 0xA8B JUMP JUMPDEST SWAP4 POP PUSH2 0xAFC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH2 0xB05 DUP2 PUSH2 0xAC6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB2A DUP2 DUP5 PUSH2 0xAD7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB62 DUP3 PUSH2 0xB37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB72 DUP2 PUSH2 0xB57 JUMP JUMPDEST DUP2 EQ PUSH2 0xB7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8F DUP2 PUSH2 0xB69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBA8 DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP2 EQ PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBC5 DUP2 PUSH2 0xB9F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBE2 JUMPI PUSH2 0xBE1 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBF0 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC01 DUP6 DUP3 DUP7 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC20 DUP2 PUSH2 0xC0B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC3B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC17 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC4A DUP2 PUSH2 0xB95 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC65 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC41 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC84 JUMPI PUSH2 0xC83 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC92 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCA3 DUP7 DUP3 DUP8 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCB4 DUP7 DUP3 DUP8 ADD PUSH2 0xBB6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCD4 DUP2 PUSH2 0xCBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0B JUMPI PUSH2 0xD0A PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD19 DUP5 DUP3 DUP6 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD39 JUMPI PUSH2 0xD38 PUSH2 0xB32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD47 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD58 DUP6 DUP3 DUP7 ADD PUSH2 0xB80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDA9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDBC JUMPI PUSH2 0xDBB PUSH2 0xD62 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xDFC DUP3 PUSH2 0xB95 JUMP JUMPDEST SWAP2 POP PUSH2 0xE07 DUP4 PUSH2 0xB95 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE1F JUMPI PUSH2 0xE1E PUSH2 0xDC2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE81 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xE8C DUP3 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEB0 DUP2 PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF13 PUSH1 0x24 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xF1E DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF42 DUP2 PUSH2 0xF06 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFA5 PUSH1 0x22 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xFB0 DUP3 PUSH2 0xF49 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFD4 DUP2 PUSH2 0xF98 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1011 PUSH1 0x1D DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x101C DUP3 PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1040 DUP2 PUSH2 0x1004 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10A3 PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x10AE DUP3 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10D2 DUP2 PUSH2 0x1096 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1135 PUSH1 0x23 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1140 DUP3 PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1164 DUP2 PUSH2 0x1128 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11C7 PUSH1 0x26 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x11D2 DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11F6 DUP2 PUSH2 0x11BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 ORIGIN 0xEC INVALID DUP16 0xD7 0xCF MLOAD MOD 0xDF DIV PUSH30 0x4382C107333A0F61112136E6CF49A3A25C5F8D0B64736F6C634300081000 CALLER ","sourceMap":"1480:12159:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3579:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5527:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3428:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6208:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3743:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2702:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6929:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4064:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4311:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2491:98;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;4867:13;4883:12;:10;:12::i;:::-;4867:28;;4905:32;4914:5;4921:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;:::o;3579:106::-;3640:7;3666:12;;3659:19;;3579:106;:::o;5527:286::-;5654:4;5670:15;5688:12;:10;:12::i;:::-;5670:30;;5710:38;5726:4;5732:7;5741:6;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;5802:4;5795:11;;;5527:286;;;;;:::o;3428:91::-;3486:5;3510:2;3503:9;;3428:91;:::o;6208:234::-;6296:4;6312:13;6328:12;:10;:12::i;:::-;6312:28;;6350:64;6359:5;6366:7;6403:10;6375:25;6385:5;6392:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;:::-;6431:4;6424:11;;;6208:234;;;;:::o;3743:125::-;3817:7;3843:9;:18;3853:7;3843:18;;;;;;;;;;;;;;;;3836:25;;3743:125;;;:::o;2702:102::-;2758:13;2790:7;2783:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2702:102;:::o;6929:427::-;7022:4;7038:13;7054:12;:10;:12::i;:::-;7038:28;;7076:24;7103:25;7113:5;7120:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;7345:4;7338:11;;;;6929:427;;;;:::o;4064:189::-;4143:4;4159:13;4175:12;:10;:12::i;:::-;4159:28;;4197;4207:5;4214:2;4218:6;4197:9;:28::i;:::-;4242:4;4235:11;;;4064:189;;;;:::o;4311:149::-;4400:7;4426:11;:18;4438:5;4426:18;;;;;;;;;;;;;;;:27;4445:7;4426:27;;;;;;;;;;;;;;;;4419:34;;4311:149;;;;:::o;850:96:13:-;903:7;929:10;922:17;;850:96;:::o;10841:370:6:-;10989:1;10972:19;;:5;:19;;;10964:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11069:1;11050:21;;:7;:21;;;11042:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11151:6;11121:11;:18;11133:5;11121:18;;;;;;;;;;;;;;;:27;11140:7;11121:27;;;;;;;;;;;;;;;:36;;;;11188:7;11172:32;;11181:5;11172:32;;;11197:6;11172:32;;;;;;:::i;:::-;;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;11708:17;11688:16;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11684:243;11612:321;11492:441;;;:::o;7810:818::-;7952:1;7936:18;;:4;:18;;;7928:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8028:1;8014:16;;:2;:16;;;8006:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;8130:19;8152:9;:15;8162:4;8152:15;;;;;;;;;;;;;;;;8130:37;;8200:6;8185:11;:21;;8177:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8315:6;8301:11;:20;8283:9;:15;8293:4;8283:15;;;;;;;;;;;;;;;:38;;;;8515:6;8498:9;:13;8508:2;8498:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8562:2;8547:26;;8556:4;8547:26;;;8566:6;8547:26;;;;;;:::i;:::-;;;;;;;;8584:37;8604:4;8610:2;8614:6;8584:19;:37::i;:::-;7918:710;7810:818;;;:::o;12517:121::-;;;;:::o;13226:120::-;;;;:::o;7:99:30:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:474::-;5256:6;5264;5313:2;5301:9;5292:7;5288:23;5284:32;5281:119;;;5319:79;;:::i;:::-;5281:119;5439:1;5464:53;5509:7;5500:6;5489:9;5485:22;5464:53;:::i;:::-;5454:63;;5410:117;5566:2;5592:53;5637:7;5628:6;5617:9;5613:22;5592:53;:::i;:::-;5582:63;;5537:118;5188:474;;;;;:::o;5668:180::-;5716:77;5713:1;5706:88;5813:4;5810:1;5803:15;5837:4;5834:1;5827:15;5854:320;5898:6;5935:1;5929:4;5925:12;5915:22;;5982:1;5976:4;5972:12;6003:18;5993:81;;6059:4;6051:6;6047:17;6037:27;;5993:81;6121:2;6113:6;6110:14;6090:18;6087:38;6084:84;;6140:18;;:::i;:::-;6084:84;5905:269;5854:320;;;:::o;6180:180::-;6228:77;6225:1;6218:88;6325:4;6322:1;6315:15;6349:4;6346:1;6339:15;6366:191;6406:3;6425:20;6443:1;6425:20;:::i;:::-;6420:25;;6459:20;6477:1;6459:20;:::i;:::-;6454:25;;6502:1;6499;6495:9;6488:16;;6523:3;6520:1;6517:10;6514:36;;;6530:18;;:::i;:::-;6514:36;6366:191;;;;:::o;6563:224::-;6703:34;6699:1;6691:6;6687:14;6680:58;6772:7;6767:2;6759:6;6755:15;6748:32;6563:224;:::o;6793:366::-;6935:3;6956:67;7020:2;7015:3;6956:67;:::i;:::-;6949:74;;7032:93;7121:3;7032:93;:::i;:::-;7150:2;7145:3;7141:12;7134:19;;6793:366;;;:::o;7165:419::-;7331:4;7369:2;7358:9;7354:18;7346:26;;7418:9;7412:4;7408:20;7404:1;7393:9;7389:17;7382:47;7446:131;7572:4;7446:131;:::i;:::-;7438:139;;7165:419;;;:::o;7590:223::-;7730:34;7726:1;7718:6;7714:14;7707:58;7799:6;7794:2;7786:6;7782:15;7775:31;7590:223;:::o;7819:366::-;7961:3;7982:67;8046:2;8041:3;7982:67;:::i;:::-;7975:74;;8058:93;8147:3;8058:93;:::i;:::-;8176:2;8171:3;8167:12;8160:19;;7819:366;;;:::o;8191:419::-;8357:4;8395:2;8384:9;8380:18;8372:26;;8444:9;8438:4;8434:20;8430:1;8419:9;8415:17;8408:47;8472:131;8598:4;8472:131;:::i;:::-;8464:139;;8191:419;;;:::o;8616:221::-;8756:34;8752:1;8744:6;8740:14;8733:58;8825:4;8820:2;8812:6;8808:15;8801:29;8616:221;:::o;8843:366::-;8985:3;9006:67;9070:2;9065:3;9006:67;:::i;:::-;8999:74;;9082:93;9171:3;9082:93;:::i;:::-;9200:2;9195:3;9191:12;9184:19;;8843:366;;;:::o;9215:419::-;9381:4;9419:2;9408:9;9404:18;9396:26;;9468:9;9462:4;9458:20;9454:1;9443:9;9439:17;9432:47;9496:131;9622:4;9496:131;:::i;:::-;9488:139;;9215:419;;;:::o;9640:179::-;9780:31;9776:1;9768:6;9764:14;9757:55;9640:179;:::o;9825:366::-;9967:3;9988:67;10052:2;10047:3;9988:67;:::i;:::-;9981:74;;10064:93;10153:3;10064:93;:::i;:::-;10182:2;10177:3;10173:12;10166:19;;9825:366;;;:::o;10197:419::-;10363:4;10401:2;10390:9;10386:18;10378:26;;10450:9;10444:4;10440:20;10436:1;10425:9;10421:17;10414:47;10478:131;10604:4;10478:131;:::i;:::-;10470:139;;10197:419;;;:::o;10622:224::-;10762:34;10758:1;10750:6;10746:14;10739:58;10831:7;10826:2;10818:6;10814:15;10807:32;10622:224;:::o;10852:366::-;10994:3;11015:67;11079:2;11074:3;11015:67;:::i;:::-;11008:74;;11091:93;11180:3;11091:93;:::i;:::-;11209:2;11204:3;11200:12;11193:19;;10852:366;;;:::o;11224:419::-;11390:4;11428:2;11417:9;11413:18;11405:26;;11477:9;11471:4;11467:20;11463:1;11452:9;11448:17;11441:47;11505:131;11631:4;11505:131;:::i;:::-;11497:139;;11224:419;;;:::o;11649:222::-;11789:34;11785:1;11777:6;11773:14;11766:58;11858:5;11853:2;11845:6;11841:15;11834:30;11649:222;:::o;11877:366::-;12019:3;12040:67;12104:2;12099:3;12040:67;:::i;:::-;12033:74;;12116:93;12205:3;12116:93;:::i;:::-;12234:2;12229:3;12225:12;12218:19;;11877:366;;;:::o;12249:419::-;12415:4;12453:2;12442:9;12438:18;12430:26;;12502:9;12496:4;12492:20;12488:1;12477:9;12473:17;12466:47;12530:131;12656:4;12530:131;:::i;:::-;12522:139;;12249:419;;;:::o;12674:225::-;12814:34;12810:1;12802:6;12798:14;12791:58;12883:8;12878:2;12870:6;12866:15;12859:33;12674:225;:::o;12905:366::-;13047:3;13068:67;13132:2;13127:3;13068:67;:::i;:::-;13061:74;;13144:93;13233:3;13144:93;:::i;:::-;13262:2;13257:3;13253:12;13246:19;;12905:366;;;:::o;13277:419::-;13443:4;13481:2;13470:9;13466:18;13458:26;;13530:9;13524:4;13520:20;13516:1;13505:9;13501:17;13494:47;13558:131;13684:4;13558:131;:::i;:::-;13550:139;;13277:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"931800","executionCost":"968","totalCost":"932768"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2863","decimals()":"432","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2482","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"__ERC20_init(string memory,string memory)":"infinite","__ERC20_init_unchained(string memory,string memory)":"infinite","_afterTokenTransfer(address,address,uint256)":"15","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":799,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":805,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":807,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":809,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1391,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"IERC20MetadataUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol":{"ERC20PermitUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:storage-size":"51","details":"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"_PERMIT_TYPEHASH_DEPRECATED_SLOT":{"custom:oz-renamed-from":"_PERMIT_TYPEHASH","details":"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."},"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:storage-size\":\"51\",\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":\"ERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":799,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":805,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":807,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":809,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":811,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1391,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":2948,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_HASHED_NAME","offset":0,"slot":"101","type":"t_bytes32"},{"astId":2950,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_HASHED_VERSION","offset":0,"slot":"102","type":"t_bytes32"},{"astId":3088,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"103","type":"t_array(t_uint256)50_storage"},{"astId":1521,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_nonces","offset":0,"slot":"153","type":"t_mapping(t_address,t_struct(Counter)2335_storage)"},{"astId":1529,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"154","type":"t_bytes32"},{"astId":1685,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)2335_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)2335_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2335_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2334,"contract":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol":{"CountersUpgradeable":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220acdbe7b1efab60fa3d8c1807bf4151ce447706b12e08d2701697ee3fcb7daa3964736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0xDB 0xE7 0xB1 0xEF 0xAB PUSH1 0xFA RETURNDATASIZE DUP13 XOR SMOD 0xBF COINBASE MLOAD 0xCE DIFFICULTY PUSH24 0x6B12E08D2701697EE3FCB7DAA3964736F6C634300081000 CALLER ","sourceMap":"424:982:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220acdbe7b1efab60fa3d8c1807bf4151ce447706b12e08d2701697ee3fcb7daa3964736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0xDB 0xE7 0xB1 0xEF 0xAB PUSH1 0xFA RETURNDATASIZE DUP13 XOR SMOD 0xBF COINBASE MLOAD 0xCE DIFFICULTY PUSH24 0x6B12E08D2701697EE3FCB7DAA3964736F6C634300081000 CALLER ","sourceMap":"424:982:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct CountersUpgradeable.Counter storage pointer)":"infinite","decrement(struct CountersUpgradeable.Counter storage pointer)":"infinite","increment(struct CountersUpgradeable.Counter storage pointer)":"infinite","reset(struct CountersUpgradeable.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049df7c6d111ac3836089c4bc9b10fdd3ff3004226d2752899316db39a77f89e864736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xDF PUSH29 0x6D111AC3836089C4BC9B10FDD3FF3004226D2752899316DB39A77F89E8 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"380:8190:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049df7c6d111ac3836089c4bc9b10fdd3ff3004226d2752899316db39a77f89e864736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xDF PUSH29 0x6D111AC3836089C4BC9B10FDD3FF3004226D2752899316DB39A77F89E8 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"380:8190:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol":{"EIP712Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:storage-size":"52","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:storage-size\":\"52\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":\"EIP712Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2948,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_NAME","offset":0,"slot":"1","type":"t_bytes32"},{"astId":2950,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"_HASHED_VERSION","offset":0,"slot":"2","type":"t_bytes32"},{"astId":3088,"contract":"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable","label":"__gap","offset":0,"slot":"3","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":3132,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BaseUpgradeablePausable.sol":{"BaseUpgradeablePausable":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13BD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:21:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":1247,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":1992,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_4097":{"entryPoint":850,"id":4097,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":1903,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":2467,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":2073,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":2575,"id":740,"parameterSlots":0,"returnSlots":0},"@_checkRole_107":{"entryPoint":1424,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":2334,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":1444,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_2314":{"entryPoint":1669,"id":2314,"parameterSlots":0,"returnSlots":1},"@_revokeRole_329":{"entryPoint":1677,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":2242,"id":266,"parameterSlots":2,"returnSlots":0},"@getAdminRole_4132":{"entryPoint":2162,"id":4132,"parameterSlots":0,"returnSlots":1},"@getPauserRole_4140":{"entryPoint":2202,"id":4140,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":631,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":663,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":1140,"id":94,"parameterSlots":2,"returnSlots":1},"@isAdmin_4111":{"entryPoint":1254,"id":4111,"parameterSlots":0,"returnSlots":1},"@paused_646":{"entryPoint":827,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":696,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":1285,"id":201,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3127":{"entryPoint":1318,"id":3127,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":509,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_2557":{"entryPoint":2709,"id":2557,"parameterSlots":2,"returnSlots":1},"@toHexString_2577":{"entryPoint":2664,"id":2577,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3687,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":3506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":3353,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3527,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":3708,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3374,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3431,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3572,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":4466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":4932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":4059,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4178,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4356,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":3913,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4391,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3446,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4967,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4094,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3948,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":4213,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3817,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4126,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4704,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":4614,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3646,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3419,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":3286,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3614,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4557,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4224,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":4850,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4567,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4803,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4756,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3281,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4449,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":4891,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":3980,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":4137,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":4315,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":3834,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3664,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":3483,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":3330,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12337:30","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:30","statements":[{"nodeType":"YulAssignment","src":"57:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:30"},"nodeType":"YulFunctionCall","src":"67:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:30"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:30","type":""}],"src":"7:75:30"},{"body":{"nodeType":"YulBlock","src":"177:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:30"},"nodeType":"YulFunctionCall","src":"187:12:30"},"nodeType":"YulExpressionStatement","src":"187:12:30"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:30"},{"body":{"nodeType":"YulBlock","src":"300:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:30"},"nodeType":"YulFunctionCall","src":"310:12:30"},"nodeType":"YulExpressionStatement","src":"310:12:30"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:30"},{"body":{"nodeType":"YulBlock","src":"378:105:30","statements":[{"nodeType":"YulAssignment","src":"388:89:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:30"},"nodeType":"YulFunctionCall","src":"399:78:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:30"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:30","type":""}],"src":"334:149:30"},{"body":{"nodeType":"YulBlock","src":"531:78:30","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:30"},"nodeType":"YulFunctionCall","src":"589:12:30"},"nodeType":"YulExpressionStatement","src":"589:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:30"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:30"},"nodeType":"YulFunctionCall","src":"561:23:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:30"},"nodeType":"YulFunctionCall","src":"551:34:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:30"},"nodeType":"YulFunctionCall","src":"544:42:30"},"nodeType":"YulIf","src":"541:62:30"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:30","type":""}],"src":"489:120:30"},{"body":{"nodeType":"YulBlock","src":"666:86:30","statements":[{"nodeType":"YulAssignment","src":"676:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:30"},"nodeType":"YulFunctionCall","src":"685:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:30"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:30"},"nodeType":"YulFunctionCall","src":"714:32:30"},"nodeType":"YulExpressionStatement","src":"714:32:30"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:30","type":""}],"src":"615:137:30"},{"body":{"nodeType":"YulBlock","src":"823:262:30","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:30"},"nodeType":"YulFunctionCall","src":"871:79:30"},"nodeType":"YulExpressionStatement","src":"871:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:30"},"nodeType":"YulFunctionCall","src":"840:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:30"},"nodeType":"YulFunctionCall","src":"836:32:30"},"nodeType":"YulIf","src":"833:119:30"},{"nodeType":"YulBlock","src":"962:116:30","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:30"},"nodeType":"YulFunctionCall","src":"1036:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:30"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:30"},"nodeType":"YulFunctionCall","src":"1016:52:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:30","type":""}],"src":"758:327:30"},{"body":{"nodeType":"YulBlock","src":"1133:48:30","statements":[{"nodeType":"YulAssignment","src":"1143:32:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:30"},"nodeType":"YulFunctionCall","src":"1161:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:30"},"nodeType":"YulFunctionCall","src":"1154:21:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:30"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:30","type":""}],"src":"1091:90:30"},{"body":{"nodeType":"YulBlock","src":"1246:50:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:30"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:30"},"nodeType":"YulFunctionCall","src":"1268:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:30"},"nodeType":"YulFunctionCall","src":"1256:34:30"},"nodeType":"YulExpressionStatement","src":"1256:34:30"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:30","type":""}],"src":"1187:109:30"},{"body":{"nodeType":"YulBlock","src":"1394:118:30","statements":[{"nodeType":"YulAssignment","src":"1404:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:30"},"nodeType":"YulFunctionCall","src":"1412:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:30"},"nodeType":"YulFunctionCall","src":"1487:17:30"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:30"},"nodeType":"YulFunctionCall","src":"1440:65:30"},"nodeType":"YulExpressionStatement","src":"1440:65:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:30","type":""}],"src":"1302:210:30"},{"body":{"nodeType":"YulBlock","src":"1563:32:30","statements":[{"nodeType":"YulAssignment","src":"1573:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:30"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:30","type":""}],"src":"1518:77:30"},{"body":{"nodeType":"YulBlock","src":"1644:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:30"},"nodeType":"YulFunctionCall","src":"1703:12:30"},"nodeType":"YulExpressionStatement","src":"1703:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1674:17:30"},"nodeType":"YulFunctionCall","src":"1674:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:30"},"nodeType":"YulFunctionCall","src":"1664:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:30"},"nodeType":"YulFunctionCall","src":"1657:43:30"},"nodeType":"YulIf","src":"1654:63:30"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:30","type":""}],"src":"1601:122:30"},{"body":{"nodeType":"YulBlock","src":"1781:87:30","statements":[{"nodeType":"YulAssignment","src":"1791:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:30"},"nodeType":"YulFunctionCall","src":"1800:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:30"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1829:26:30"},"nodeType":"YulFunctionCall","src":"1829:33:30"},"nodeType":"YulExpressionStatement","src":"1829:33:30"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:30","type":""}],"src":"1729:139:30"},{"body":{"nodeType":"YulBlock","src":"1940:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:30"},"nodeType":"YulFunctionCall","src":"1988:79:30"},"nodeType":"YulExpressionStatement","src":"1988:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:30"},"nodeType":"YulFunctionCall","src":"1957:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:30"},"nodeType":"YulFunctionCall","src":"1953:32:30"},"nodeType":"YulIf","src":"1950:119:30"},{"nodeType":"YulBlock","src":"2079:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:30"},"nodeType":"YulFunctionCall","src":"2154:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2133:20:30"},"nodeType":"YulFunctionCall","src":"2133:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:30","type":""}],"src":"1874:329:30"},{"body":{"nodeType":"YulBlock","src":"2274:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2291:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2314:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2296:17:30"},"nodeType":"YulFunctionCall","src":"2296:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2284:6:30"},"nodeType":"YulFunctionCall","src":"2284:37:30"},"nodeType":"YulExpressionStatement","src":"2284:37:30"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2262:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2269:3:30","type":""}],"src":"2209:118:30"},{"body":{"nodeType":"YulBlock","src":"2431:124:30","statements":[{"nodeType":"YulAssignment","src":"2441:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2453:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2464:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2449:3:30"},"nodeType":"YulFunctionCall","src":"2449:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2441:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2521:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2534:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2545:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:30"},"nodeType":"YulFunctionCall","src":"2530:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"2477:43:30"},"nodeType":"YulFunctionCall","src":"2477:71:30"},"nodeType":"YulExpressionStatement","src":"2477:71:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2403:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2415:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2426:4:30","type":""}],"src":"2333:222:30"},{"body":{"nodeType":"YulBlock","src":"2606:81:30","statements":[{"nodeType":"YulAssignment","src":"2616:65:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2631:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"2638:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2627:3:30"},"nodeType":"YulFunctionCall","src":"2627:54:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2616:7:30"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2588:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2598:7:30","type":""}],"src":"2561:126:30"},{"body":{"nodeType":"YulBlock","src":"2738:51:30","statements":[{"nodeType":"YulAssignment","src":"2748:35:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2777:5:30"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2759:17:30"},"nodeType":"YulFunctionCall","src":"2759:24:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2748:7:30"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2720:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2730:7:30","type":""}],"src":"2693:96:30"},{"body":{"nodeType":"YulBlock","src":"2838:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"2895:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2904:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2907:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2897:6:30"},"nodeType":"YulFunctionCall","src":"2897:12:30"},"nodeType":"YulExpressionStatement","src":"2897:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2861:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2886:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2868:17:30"},"nodeType":"YulFunctionCall","src":"2868:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2858:2:30"},"nodeType":"YulFunctionCall","src":"2858:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2851:6:30"},"nodeType":"YulFunctionCall","src":"2851:43:30"},"nodeType":"YulIf","src":"2848:63:30"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2831:5:30","type":""}],"src":"2795:122:30"},{"body":{"nodeType":"YulBlock","src":"2975:87:30","statements":[{"nodeType":"YulAssignment","src":"2985:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3007:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2994:12:30"},"nodeType":"YulFunctionCall","src":"2994:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2985:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3050:5:30"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3023:26:30"},"nodeType":"YulFunctionCall","src":"3023:33:30"},"nodeType":"YulExpressionStatement","src":"3023:33:30"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2953:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"2961:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2969:5:30","type":""}],"src":"2923:139:30"},{"body":{"nodeType":"YulBlock","src":"3151:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"3197:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3199:77:30"},"nodeType":"YulFunctionCall","src":"3199:79:30"},"nodeType":"YulExpressionStatement","src":"3199:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3172:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3181:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3168:3:30"},"nodeType":"YulFunctionCall","src":"3168:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3193:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3164:3:30"},"nodeType":"YulFunctionCall","src":"3164:32:30"},"nodeType":"YulIf","src":"3161:119:30"},{"nodeType":"YulBlock","src":"3290:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3305:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3319:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3309:6:30","type":""}]},{"nodeType":"YulAssignment","src":"3334:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3369:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"3380:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3365:3:30"},"nodeType":"YulFunctionCall","src":"3365:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3389:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3344:20:30"},"nodeType":"YulFunctionCall","src":"3344:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3334:6:30"}]}]},{"nodeType":"YulBlock","src":"3417:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3432:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3446:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3436:6:30","type":""}]},{"nodeType":"YulAssignment","src":"3462:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3497:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"3508:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3493:3:30"},"nodeType":"YulFunctionCall","src":"3493:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3517:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3472:20:30"},"nodeType":"YulFunctionCall","src":"3472:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3462:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3113:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3124:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3136:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3144:6:30","type":""}],"src":"3068:474:30"},{"body":{"nodeType":"YulBlock","src":"3614:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"3660:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3662:77:30"},"nodeType":"YulFunctionCall","src":"3662:79:30"},"nodeType":"YulExpressionStatement","src":"3662:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3635:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3644:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3631:3:30"},"nodeType":"YulFunctionCall","src":"3631:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3656:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3627:3:30"},"nodeType":"YulFunctionCall","src":"3627:32:30"},"nodeType":"YulIf","src":"3624:119:30"},{"nodeType":"YulBlock","src":"3753:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3768:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3782:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3772:6:30","type":""}]},{"nodeType":"YulAssignment","src":"3797:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3832:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"3843:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3828:3:30"},"nodeType":"YulFunctionCall","src":"3828:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3852:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3807:20:30"},"nodeType":"YulFunctionCall","src":"3807:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3797:6:30"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3584:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3595:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3607:6:30","type":""}],"src":"3548:329:30"},{"body":{"nodeType":"YulBlock","src":"3979:73:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3996:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"4001:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3989:6:30"},"nodeType":"YulFunctionCall","src":"3989:19:30"},"nodeType":"YulExpressionStatement","src":"3989:19:30"},{"nodeType":"YulAssignment","src":"4017:29:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4036:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4041:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4032:3:30"},"nodeType":"YulFunctionCall","src":"4032:14:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4017:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3951:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"3956:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3967:11:30","type":""}],"src":"3883:169:30"},{"body":{"nodeType":"YulBlock","src":"4164:128:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4186:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"4194:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:30"},"nodeType":"YulFunctionCall","src":"4182:14:30"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"4198:34:30","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4175:6:30"},"nodeType":"YulFunctionCall","src":"4175:58:30"},"nodeType":"YulExpressionStatement","src":"4175:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4254:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"4262:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4250:3:30"},"nodeType":"YulFunctionCall","src":"4250:15:30"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"4267:17:30","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4243:6:30"},"nodeType":"YulFunctionCall","src":"4243:42:30"},"nodeType":"YulExpressionStatement","src":"4243:42:30"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"4156:6:30","type":""}],"src":"4058:234:30"},{"body":{"nodeType":"YulBlock","src":"4444:220:30","statements":[{"nodeType":"YulAssignment","src":"4454:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4520:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4525:2:30","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4461:58:30"},"nodeType":"YulFunctionCall","src":"4461:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4454:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4626:3:30"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"4537:88:30"},"nodeType":"YulFunctionCall","src":"4537:93:30"},"nodeType":"YulExpressionStatement","src":"4537:93:30"},{"nodeType":"YulAssignment","src":"4639:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4650:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"4655:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4646:3:30"},"nodeType":"YulFunctionCall","src":"4646:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4639:3:30"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4432:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4440:3:30","type":""}],"src":"4298:366:30"},{"body":{"nodeType":"YulBlock","src":"4841:248:30","statements":[{"nodeType":"YulAssignment","src":"4851:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4863:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4874:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4859:3:30"},"nodeType":"YulFunctionCall","src":"4859:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4851:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4909:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:30"},"nodeType":"YulFunctionCall","src":"4894:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4917:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4923:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4913:3:30"},"nodeType":"YulFunctionCall","src":"4913:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4887:6:30"},"nodeType":"YulFunctionCall","src":"4887:47:30"},"nodeType":"YulExpressionStatement","src":"4887:47:30"},{"nodeType":"YulAssignment","src":"4943:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5077:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4951:124:30"},"nodeType":"YulFunctionCall","src":"4951:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4943:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4821:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4836:4:30","type":""}],"src":"4670:419:30"},{"body":{"nodeType":"YulBlock","src":"5201:124:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5223:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5231:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:30"},"nodeType":"YulFunctionCall","src":"5219:14:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"5235:34:30","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:30"},"nodeType":"YulFunctionCall","src":"5212:58:30"},"nodeType":"YulExpressionStatement","src":"5212:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5291:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5299:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5287:3:30"},"nodeType":"YulFunctionCall","src":"5287:15:30"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"5304:13:30","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5280:6:30"},"nodeType":"YulFunctionCall","src":"5280:38:30"},"nodeType":"YulExpressionStatement","src":"5280:38:30"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5193:6:30","type":""}],"src":"5095:230:30"},{"body":{"nodeType":"YulBlock","src":"5477:220:30","statements":[{"nodeType":"YulAssignment","src":"5487:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5553:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5558:2:30","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5494:58:30"},"nodeType":"YulFunctionCall","src":"5494:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5487:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5659:3:30"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"5570:88:30"},"nodeType":"YulFunctionCall","src":"5570:93:30"},"nodeType":"YulExpressionStatement","src":"5570:93:30"},{"nodeType":"YulAssignment","src":"5672:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5683:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5688:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5679:3:30"},"nodeType":"YulFunctionCall","src":"5679:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5672:3:30"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5465:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5473:3:30","type":""}],"src":"5331:366:30"},{"body":{"nodeType":"YulBlock","src":"5874:248:30","statements":[{"nodeType":"YulAssignment","src":"5884:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5896:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5907:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5892:3:30"},"nodeType":"YulFunctionCall","src":"5892:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5884:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5931:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5927:3:30"},"nodeType":"YulFunctionCall","src":"5927:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5950:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5956:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5946:3:30"},"nodeType":"YulFunctionCall","src":"5946:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5920:6:30"},"nodeType":"YulFunctionCall","src":"5920:47:30"},"nodeType":"YulExpressionStatement","src":"5920:47:30"},{"nodeType":"YulAssignment","src":"5976:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6110:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5984:124:30"},"nodeType":"YulFunctionCall","src":"5984:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5976:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5854:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5869:4:30","type":""}],"src":"5703:419:30"},{"body":{"nodeType":"YulBlock","src":"6242:34:30","statements":[{"nodeType":"YulAssignment","src":"6252:18:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"6267:3:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6252:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6214:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"6219:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6230:11:30","type":""}],"src":"6128:148:30"},{"body":{"nodeType":"YulBlock","src":"6388:67:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6410:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"6418:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6406:3:30"},"nodeType":"YulFunctionCall","src":"6406:14:30"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"6422:25:30","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6399:6:30"},"nodeType":"YulFunctionCall","src":"6399:49:30"},"nodeType":"YulExpressionStatement","src":"6399:49:30"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6380:6:30","type":""}],"src":"6282:173:30"},{"body":{"nodeType":"YulBlock","src":"6625:238:30","statements":[{"nodeType":"YulAssignment","src":"6635:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6719:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6724:2:30","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6642:76:30"},"nodeType":"YulFunctionCall","src":"6642:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6635:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6825:3:30"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"6736:88:30"},"nodeType":"YulFunctionCall","src":"6736:93:30"},"nodeType":"YulExpressionStatement","src":"6736:93:30"},{"nodeType":"YulAssignment","src":"6838:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6849:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6854:2:30","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6845:3:30"},"nodeType":"YulFunctionCall","src":"6845:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6838:3:30"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6613:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6621:3:30","type":""}],"src":"6461:402:30"},{"body":{"nodeType":"YulBlock","src":"6928:40:30","statements":[{"nodeType":"YulAssignment","src":"6939:22:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6955:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6949:5:30"},"nodeType":"YulFunctionCall","src":"6949:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6939:6:30"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6911:5:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6921:6:30","type":""}],"src":"6869:99:30"},{"body":{"nodeType":"YulBlock","src":"7036:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"7046:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"7055:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7050:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"7115:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7140:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"7145:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7136:3:30"},"nodeType":"YulFunctionCall","src":"7136:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7159:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"7164:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7155:3:30"},"nodeType":"YulFunctionCall","src":"7155:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7149:5:30"},"nodeType":"YulFunctionCall","src":"7149:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7129:6:30"},"nodeType":"YulFunctionCall","src":"7129:39:30"},"nodeType":"YulExpressionStatement","src":"7129:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7076:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"7079:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7073:2:30"},"nodeType":"YulFunctionCall","src":"7073:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7087:19:30","statements":[{"nodeType":"YulAssignment","src":"7089:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7098:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"7101:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7094:3:30"},"nodeType":"YulFunctionCall","src":"7094:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7089:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"7069:3:30","statements":[]},"src":"7065:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7198:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"7203:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7194:3:30"},"nodeType":"YulFunctionCall","src":"7194:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"7212:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7187:6:30"},"nodeType":"YulFunctionCall","src":"7187:27:30"},"nodeType":"YulExpressionStatement","src":"7187:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7018:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7023:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"7028:6:30","type":""}],"src":"6974:246:30"},{"body":{"nodeType":"YulBlock","src":"7336:280:30","statements":[{"nodeType":"YulVariableDeclaration","src":"7346:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7393:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7360:32:30"},"nodeType":"YulFunctionCall","src":"7360:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7350:6:30","type":""}]},{"nodeType":"YulAssignment","src":"7408:96:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7492:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"7497:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7415:76:30"},"nodeType":"YulFunctionCall","src":"7415:89:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7408:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7552:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"7559:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7548:3:30"},"nodeType":"YulFunctionCall","src":"7548:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"7566:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"7571:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7513:34:30"},"nodeType":"YulFunctionCall","src":"7513:65:30"},"nodeType":"YulExpressionStatement","src":"7513:65:30"},{"nodeType":"YulAssignment","src":"7587:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7598:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"7603:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7594:3:30"},"nodeType":"YulFunctionCall","src":"7594:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7587:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7317:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7324:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7332:3:30","type":""}],"src":"7226:390:30"},{"body":{"nodeType":"YulBlock","src":"7728:61:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7750:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7758:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7746:3:30"},"nodeType":"YulFunctionCall","src":"7746:14:30"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"7762:19:30","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7739:6:30"},"nodeType":"YulFunctionCall","src":"7739:43:30"},"nodeType":"YulExpressionStatement","src":"7739:43:30"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7720:6:30","type":""}],"src":"7622:167:30"},{"body":{"nodeType":"YulBlock","src":"7959:238:30","statements":[{"nodeType":"YulAssignment","src":"7969:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8053:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:30","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7976:76:30"},"nodeType":"YulFunctionCall","src":"7976:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7969:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8159:3:30"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"8070:88:30"},"nodeType":"YulFunctionCall","src":"8070:93:30"},"nodeType":"YulExpressionStatement","src":"8070:93:30"},{"nodeType":"YulAssignment","src":"8172:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8183:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8188:2:30","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8179:3:30"},"nodeType":"YulFunctionCall","src":"8179:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8172:3:30"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7947:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7955:3:30","type":""}],"src":"7795:402:30"},{"body":{"nodeType":"YulBlock","src":"8589:581:30","statements":[{"nodeType":"YulAssignment","src":"8600:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8751:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8607:142:30"},"nodeType":"YulFunctionCall","src":"8607:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8600:3:30"}]},{"nodeType":"YulAssignment","src":"8765:102:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8854:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"8863:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8772:81:30"},"nodeType":"YulFunctionCall","src":"8772:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8765:3:30"}]},{"nodeType":"YulAssignment","src":"8877:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9028:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8884:142:30"},"nodeType":"YulFunctionCall","src":"8884:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8877:3:30"}]},{"nodeType":"YulAssignment","src":"9042:102:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9131:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"9140:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9049:81:30"},"nodeType":"YulFunctionCall","src":"9049:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9042:3:30"}]},{"nodeType":"YulAssignment","src":"9154:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"9161:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9154:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8560:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8566:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8574:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8585:3:30","type":""}],"src":"8203:967:30"},{"body":{"nodeType":"YulBlock","src":"9224:54:30","statements":[{"nodeType":"YulAssignment","src":"9234:38:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9252:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"9259:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9248:3:30"},"nodeType":"YulFunctionCall","src":"9248:14:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9268:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9264:3:30"},"nodeType":"YulFunctionCall","src":"9264:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9244:3:30"},"nodeType":"YulFunctionCall","src":"9244:28:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9234:6:30"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9207:5:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"9217:6:30","type":""}],"src":"9176:102:30"},{"body":{"nodeType":"YulBlock","src":"9376:285:30","statements":[{"nodeType":"YulVariableDeclaration","src":"9386:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9433:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9400:32:30"},"nodeType":"YulFunctionCall","src":"9400:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9390:6:30","type":""}]},{"nodeType":"YulAssignment","src":"9448:78:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9514:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"9519:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9455:58:30"},"nodeType":"YulFunctionCall","src":"9455:71:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9448:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9574:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"9581:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9570:3:30"},"nodeType":"YulFunctionCall","src":"9570:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"9588:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"9593:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9535:34:30"},"nodeType":"YulFunctionCall","src":"9535:65:30"},"nodeType":"YulExpressionStatement","src":"9535:65:30"},{"nodeType":"YulAssignment","src":"9609:46:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9620:3:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9647:6:30"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9625:21:30"},"nodeType":"YulFunctionCall","src":"9625:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9616:3:30"},"nodeType":"YulFunctionCall","src":"9616:39:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9609:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9357:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9364:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9372:3:30","type":""}],"src":"9284:377:30"},{"body":{"nodeType":"YulBlock","src":"9785:195:30","statements":[{"nodeType":"YulAssignment","src":"9795:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9807:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9818:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:30"},"nodeType":"YulFunctionCall","src":"9803:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9795:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9842:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9853:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9838:3:30"},"nodeType":"YulFunctionCall","src":"9838:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9861:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9867:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9857:3:30"},"nodeType":"YulFunctionCall","src":"9857:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9831:6:30"},"nodeType":"YulFunctionCall","src":"9831:47:30"},"nodeType":"YulExpressionStatement","src":"9831:47:30"},{"nodeType":"YulAssignment","src":"9887:86:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9959:6:30"},{"name":"tail","nodeType":"YulIdentifier","src":"9968:4:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9895:63:30"},"nodeType":"YulFunctionCall","src":"9895:78:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9887:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9757:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9769:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9780:4:30","type":""}],"src":"9667:313:30"},{"body":{"nodeType":"YulBlock","src":"10031:32:30","statements":[{"nodeType":"YulAssignment","src":"10041:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"10052:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10041:7:30"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10013:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10023:7:30","type":""}],"src":"9986:77:30"},{"body":{"nodeType":"YulBlock","src":"10097:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10114:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10117:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10107:6:30"},"nodeType":"YulFunctionCall","src":"10107:88:30"},"nodeType":"YulExpressionStatement","src":"10107:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10211:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10214:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10204:6:30"},"nodeType":"YulFunctionCall","src":"10204:15:30"},"nodeType":"YulExpressionStatement","src":"10204:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10235:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10238:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10228:6:30"},"nodeType":"YulFunctionCall","src":"10228:15:30"},"nodeType":"YulExpressionStatement","src":"10228:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10069:180:30"},{"body":{"nodeType":"YulBlock","src":"10303:300:30","statements":[{"nodeType":"YulAssignment","src":"10313:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10336:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10318:17:30"},"nodeType":"YulFunctionCall","src":"10318:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10313:1:30"}]},{"nodeType":"YulAssignment","src":"10347:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10370:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10352:17:30"},"nodeType":"YulFunctionCall","src":"10352:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10347:1:30"}]},{"body":{"nodeType":"YulBlock","src":"10545:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10547:16:30"},"nodeType":"YulFunctionCall","src":"10547:18:30"},"nodeType":"YulExpressionStatement","src":"10547:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10457:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10450:6:30"},"nodeType":"YulFunctionCall","src":"10450:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10443:6:30"},"nodeType":"YulFunctionCall","src":"10443:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10465:1:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10472:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"10540:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10468:3:30"},"nodeType":"YulFunctionCall","src":"10468:74:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10462:2:30"},"nodeType":"YulFunctionCall","src":"10462:81:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10439:3:30"},"nodeType":"YulFunctionCall","src":"10439:105:30"},"nodeType":"YulIf","src":"10436:131:30"},{"nodeType":"YulAssignment","src":"10577:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10592:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"10595:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10588:3:30"},"nodeType":"YulFunctionCall","src":"10588:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"10577:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10286:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"10289:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"10295:7:30","type":""}],"src":"10255:348:30"},{"body":{"nodeType":"YulBlock","src":"10653:147:30","statements":[{"nodeType":"YulAssignment","src":"10663:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10686:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10668:17:30"},"nodeType":"YulFunctionCall","src":"10668:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10663:1:30"}]},{"nodeType":"YulAssignment","src":"10697:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10720:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10702:17:30"},"nodeType":"YulFunctionCall","src":"10702:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10697:1:30"}]},{"nodeType":"YulAssignment","src":"10731:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10742:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"10745:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10738:3:30"},"nodeType":"YulFunctionCall","src":"10738:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10731:3:30"}]},{"body":{"nodeType":"YulBlock","src":"10771:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10773:16:30"},"nodeType":"YulFunctionCall","src":"10773:18:30"},"nodeType":"YulExpressionStatement","src":"10773:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10763:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"10766:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10760:2:30"},"nodeType":"YulFunctionCall","src":"10760:10:30"},"nodeType":"YulIf","src":"10757:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10640:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"10643:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10649:3:30","type":""}],"src":"10609:191:30"},{"body":{"nodeType":"YulBlock","src":"10834:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10851:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10854:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10844:6:30"},"nodeType":"YulFunctionCall","src":"10844:88:30"},"nodeType":"YulExpressionStatement","src":"10844:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10948:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10951:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10941:6:30"},"nodeType":"YulFunctionCall","src":"10941:15:30"},"nodeType":"YulExpressionStatement","src":"10941:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10972:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10975:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10965:6:30"},"nodeType":"YulFunctionCall","src":"10965:15:30"},"nodeType":"YulExpressionStatement","src":"10965:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10806:180:30"},{"body":{"nodeType":"YulBlock","src":"11020:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11037:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11040:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11030:6:30"},"nodeType":"YulFunctionCall","src":"11030:88:30"},"nodeType":"YulExpressionStatement","src":"11030:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11134:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11137:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11127:6:30"},"nodeType":"YulFunctionCall","src":"11127:15:30"},"nodeType":"YulExpressionStatement","src":"11127:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11158:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11161:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11151:6:30"},"nodeType":"YulFunctionCall","src":"11151:15:30"},"nodeType":"YulExpressionStatement","src":"11151:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10992:180:30"},{"body":{"nodeType":"YulBlock","src":"11221:128:30","statements":[{"nodeType":"YulAssignment","src":"11231:33:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11258:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11240:17:30"},"nodeType":"YulFunctionCall","src":"11240:24:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11231:5:30"}]},{"body":{"nodeType":"YulBlock","src":"11292:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11294:16:30"},"nodeType":"YulFunctionCall","src":"11294:18:30"},"nodeType":"YulExpressionStatement","src":"11294:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11279:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11286:4:30","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11276:2:30"},"nodeType":"YulFunctionCall","src":"11276:15:30"},"nodeType":"YulIf","src":"11273:41:30"},{"nodeType":"YulAssignment","src":"11323:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11334:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11341:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11330:3:30"},"nodeType":"YulFunctionCall","src":"11330:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11323:3:30"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11207:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11217:3:30","type":""}],"src":"11178:171:30"},{"body":{"nodeType":"YulBlock","src":"11461:76:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11483:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11491:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11479:3:30"},"nodeType":"YulFunctionCall","src":"11479:14:30"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"11495:34:30","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11472:6:30"},"nodeType":"YulFunctionCall","src":"11472:58:30"},"nodeType":"YulExpressionStatement","src":"11472:58:30"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11453:6:30","type":""}],"src":"11355:182:30"},{"body":{"nodeType":"YulBlock","src":"11689:220:30","statements":[{"nodeType":"YulAssignment","src":"11699:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11765:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11770:2:30","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11706:58:30"},"nodeType":"YulFunctionCall","src":"11706:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11699:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11871:3:30"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"11782:88:30"},"nodeType":"YulFunctionCall","src":"11782:93:30"},"nodeType":"YulExpressionStatement","src":"11782:93:30"},{"nodeType":"YulAssignment","src":"11884:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11895:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11900:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11891:3:30"},"nodeType":"YulFunctionCall","src":"11891:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11884:3:30"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11677:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11685:3:30","type":""}],"src":"11543:366:30"},{"body":{"nodeType":"YulBlock","src":"12086:248:30","statements":[{"nodeType":"YulAssignment","src":"12096:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12108:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12119:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12104:3:30"},"nodeType":"YulFunctionCall","src":"12104:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12096:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12143:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12154:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12139:3:30"},"nodeType":"YulFunctionCall","src":"12139:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12162:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"12168:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12158:3:30"},"nodeType":"YulFunctionCall","src":"12158:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12132:6:30"},"nodeType":"YulFunctionCall","src":"12132:47:30"},"nodeType":"YulExpressionStatement","src":"12132:47:30"},{"nodeType":"YulAssignment","src":"12188:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12322:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12196:124:30"},"nodeType":"YulFunctionCall","src":"12196:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12188:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12066:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12081:4:30","type":""}],"src":"11915:419:30"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c80636e810b1a116100665780636e810b1a1461015957806391d1485414610175578063a217fddf146101a5578063b6db75a0146101c3578063d547741f146101e15761009e565b806301ffc9a7146100a3578063248a9ca3146100d35780632f2ff15d1461010357806336568abe1461011f5780635c975abb1461013b575b600080fd5b6100bd60048036038101906100b89190610d2e565b6101fd565b6040516100ca9190610d76565b60405180910390f35b6100ed60048036038101906100e89190610dc7565b610277565b6040516100fa9190610e03565b60405180910390f35b61011d60048036038101906101189190610e7c565b610297565b005b61013960048036038101906101349190610e7c565b6102b8565b005b61014361033b565b6040516101509190610d76565b60405180910390f35b610173600480360381019061016e9190610ebc565b610352565b005b61018f600480360381019061018a9190610e7c565b610474565b60405161019c9190610d76565b60405180910390f35b6101ad6104df565b6040516101ba9190610e03565b60405180910390f35b6101cb6104e6565b6040516101d89190610d76565b60405180910390f35b6101fb60048036038101906101f69190610e7c565b610505565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610270575061026f82610526565b5b9050919050565b600060976000838152602001908152602001600020600101549050919050565b6102a082610277565b6102a981610590565b6102b383836105a4565b505050565b6102c0610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032490610f6c565b60405180910390fd5b610337828261068d565b5050565b6000603360009054906101000a900460ff16905090565b600060019054906101000a900460ff166103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039890610ffe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610407576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61040f61076f565b6104176107c8565b61041f610819565b61043061042a610872565b826105a4565b61044161043b61089a565b826105a4565b61045961044c61089a565b610454610872565b6108c2565b610471610464610872565b61046c610872565b6108c2565b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006105006104f3610872565b6104fb610685565b610474565b905090565b61050e82610277565b61051781610590565b610521838361068d565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6105a18161059c610685565b61091e565b50565b6105ae8282610474565b6106815760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610626610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6106978282610474565b1561076b5760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610710610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600060019054906101000a900460ff166107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b590610ffe565b60405180910390fd5b6107c66109a3565b565b600060019054906101000a900460ff16610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e90610ffe565b60405180910390fd5b565b600060019054906101000a900460ff16610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90610ffe565b60405180910390fd5b610870610a0f565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b60006108cd83610277565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6109288282610474565b61099f5761093581610a68565b6109438360001c6020610a95565b604051602001610954929190611127565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099691906111ab565b60405180910390fd5b5050565b600060019054906101000a900460ff166109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990610ffe565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16610a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5590610ffe565b60405180910390fd5b600160c981905550565b6060610a8e8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610a95565b9050919050565b606060006002836002610aa89190611206565b610ab29190611260565b67ffffffffffffffff811115610acb57610aca611294565b5b6040519080825280601f01601f191660200182016040528015610afd5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b3557610b346112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610b9957610b986112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610bd99190611206565b610be39190611260565b90505b6001811115610c83577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610c2557610c246112c3565b5b1a60f81b828281518110610c3c57610c3b6112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610c7c906112f2565b9050610be6565b5060008414610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611367565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d0b81610cd6565b8114610d1657600080fd5b50565b600081359050610d2881610d02565b92915050565b600060208284031215610d4457610d43610cd1565b5b6000610d5284828501610d19565b91505092915050565b60008115159050919050565b610d7081610d5b565b82525050565b6000602082019050610d8b6000830184610d67565b92915050565b6000819050919050565b610da481610d91565b8114610daf57600080fd5b50565b600081359050610dc181610d9b565b92915050565b600060208284031215610ddd57610ddc610cd1565b5b6000610deb84828501610db2565b91505092915050565b610dfd81610d91565b82525050565b6000602082019050610e186000830184610df4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4982610e1e565b9050919050565b610e5981610e3e565b8114610e6457600080fd5b50565b600081359050610e7681610e50565b92915050565b60008060408385031215610e9357610e92610cd1565b5b6000610ea185828601610db2565b9250506020610eb285828601610e67565b9150509250929050565b600060208284031215610ed257610ed1610cd1565b5b6000610ee084828501610e67565b91505092915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000610f56602f83610ee9565b9150610f6182610efa565b604082019050919050565b60006020820190508181036000830152610f8581610f49565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610fe8602b83610ee9565b9150610ff382610f8c565b604082019050919050565b6000602082019050818103600083015261101781610fdb565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061105f60178361101e565b915061106a82611029565b601782019050919050565b600081519050919050565b60005b8381101561109e578082015181840152602081019050611083565b60008484015250505050565b60006110b582611075565b6110bf818561101e565b93506110cf818560208601611080565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061111160118361101e565b915061111c826110db565b601182019050919050565b600061113282611052565b915061113e82856110aa565b915061114982611104565b915061115582846110aa565b91508190509392505050565b6000601f19601f8301169050919050565b600061117d82611075565b6111878185610ee9565b9350611197818560208601611080565b6111a081611161565b840191505092915050565b600060208201905081810360008301526111c58184611172565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611211826111cd565b915061121c836111cd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611255576112546111d7565b5b828202905092915050565b600061126b826111cd565b9150611276836111cd565b925082820190508082111561128e5761128d6111d7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006112fd826111cd565b9150600082036113105761130f6111d7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611351602083610ee9565b915061135c8261131b565b602082019050919050565b6000602082019050818103600083015261138081611344565b905091905056fea2646970667358221220b74f206dcdcdebf392d7459b2ab1515c54cd9fe4808a3e861b805703bc1e9a2864736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:21;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:21;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2903:213;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4708:129::-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:21:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:21::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;1289:117:21:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;1060:166:18:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;850:96:13:-;903:7;929:10;922:17;;850:96;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;1063:97:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:22:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;4026:501::-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;1166:95:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2146:149:15:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:30:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:118::-;2296:24;2314:5;2296:24;:::i;:::-;2291:3;2284:37;2209:118;;:::o;2333:222::-;2426:4;2464:2;2453:9;2449:18;2441:26;;2477:71;2545:1;2534:9;2530:17;2521:6;2477:71;:::i;:::-;2333:222;;;;:::o;2561:126::-;2598:7;2638:42;2631:5;2627:54;2616:65;;2561:126;;;:::o;2693:96::-;2730:7;2759:24;2777:5;2759:24;:::i;:::-;2748:35;;2693:96;;;:::o;2795:122::-;2868:24;2886:5;2868:24;:::i;:::-;2861:5;2858:35;2848:63;;2907:1;2904;2897:12;2848:63;2795:122;:::o;2923:139::-;2969:5;3007:6;2994:20;2985:29;;3023:33;3050:5;3023:33;:::i;:::-;2923:139;;;;:::o;3068:474::-;3136:6;3144;3193:2;3181:9;3172:7;3168:23;3164:32;3161:119;;;3199:79;;:::i;:::-;3161:119;3319:1;3344:53;3389:7;3380:6;3369:9;3365:22;3344:53;:::i;:::-;3334:63;;3290:117;3446:2;3472:53;3517:7;3508:6;3497:9;3493:22;3472:53;:::i;:::-;3462:63;;3417:118;3068:474;;;;;:::o;3548:329::-;3607:6;3656:2;3644:9;3635:7;3631:23;3627:32;3624:119;;;3662:79;;:::i;:::-;3624:119;3782:1;3807:53;3852:7;3843:6;3832:9;3828:22;3807:53;:::i;:::-;3797:63;;3753:117;3548:329;;;;:::o;3883:169::-;3967:11;4001:6;3996:3;3989:19;4041:4;4036:3;4032:14;4017:29;;3883:169;;;;:::o;4058:234::-;4198:34;4194:1;4186:6;4182:14;4175:58;4267:17;4262:2;4254:6;4250:15;4243:42;4058:234;:::o;4298:366::-;4440:3;4461:67;4525:2;4520:3;4461:67;:::i;:::-;4454:74;;4537:93;4626:3;4537:93;:::i;:::-;4655:2;4650:3;4646:12;4639:19;;4298:366;;;:::o;4670:419::-;4836:4;4874:2;4863:9;4859:18;4851:26;;4923:9;4917:4;4913:20;4909:1;4898:9;4894:17;4887:47;4951:131;5077:4;4951:131;:::i;:::-;4943:139;;4670:419;;;:::o;5095:230::-;5235:34;5231:1;5223:6;5219:14;5212:58;5304:13;5299:2;5291:6;5287:15;5280:38;5095:230;:::o;5331:366::-;5473:3;5494:67;5558:2;5553:3;5494:67;:::i;:::-;5487:74;;5570:93;5659:3;5570:93;:::i;:::-;5688:2;5683:3;5679:12;5672:19;;5331:366;;;:::o;5703:419::-;5869:4;5907:2;5896:9;5892:18;5884:26;;5956:9;5950:4;5946:20;5942:1;5931:9;5927:17;5920:47;5984:131;6110:4;5984:131;:::i;:::-;5976:139;;5703:419;;;:::o;6128:148::-;6230:11;6267:3;6252:18;;6128:148;;;;:::o;6282:173::-;6422:25;6418:1;6410:6;6406:14;6399:49;6282:173;:::o;6461:402::-;6621:3;6642:85;6724:2;6719:3;6642:85;:::i;:::-;6635:92;;6736:93;6825:3;6736:93;:::i;:::-;6854:2;6849:3;6845:12;6838:19;;6461:402;;;:::o;6869:99::-;6921:6;6955:5;6949:12;6939:22;;6869:99;;;:::o;6974:246::-;7055:1;7065:113;7079:6;7076:1;7073:13;7065:113;;;7164:1;7159:3;7155:11;7149:18;7145:1;7140:3;7136:11;7129:39;7101:2;7098:1;7094:10;7089:15;;7065:113;;;7212:1;7203:6;7198:3;7194:16;7187:27;7036:184;6974:246;;;:::o;7226:390::-;7332:3;7360:39;7393:5;7360:39;:::i;:::-;7415:89;7497:6;7492:3;7415:89;:::i;:::-;7408:96;;7513:65;7571:6;7566:3;7559:4;7552:5;7548:16;7513:65;:::i;:::-;7603:6;7598:3;7594:16;7587:23;;7336:280;7226:390;;;;:::o;7622:167::-;7762:19;7758:1;7750:6;7746:14;7739:43;7622:167;:::o;7795:402::-;7955:3;7976:85;8058:2;8053:3;7976:85;:::i;:::-;7969:92;;8070:93;8159:3;8070:93;:::i;:::-;8188:2;8183:3;8179:12;8172:19;;7795:402;;;:::o;8203:967::-;8585:3;8607:148;8751:3;8607:148;:::i;:::-;8600:155;;8772:95;8863:3;8854:6;8772:95;:::i;:::-;8765:102;;8884:148;9028:3;8884:148;:::i;:::-;8877:155;;9049:95;9140:3;9131:6;9049:95;:::i;:::-;9042:102;;9161:3;9154:10;;8203:967;;;;;:::o;9176:102::-;9217:6;9268:2;9264:7;9259:2;9252:5;9248:14;9244:28;9234:38;;9176:102;;;:::o;9284:377::-;9372:3;9400:39;9433:5;9400:39;:::i;:::-;9455:71;9519:6;9514:3;9455:71;:::i;:::-;9448:78;;9535:65;9593:6;9588:3;9581:4;9574:5;9570:16;9535:65;:::i;:::-;9625:29;9647:6;9625:29;:::i;:::-;9620:3;9616:39;9609:46;;9376:285;9284:377;;;;:::o;9667:313::-;9780:4;9818:2;9807:9;9803:18;9795:26;;9867:9;9861:4;9857:20;9853:1;9842:9;9838:17;9831:47;9895:78;9968:4;9959:6;9895:78;:::i;:::-;9887:86;;9667:313;;;;:::o;9986:77::-;10023:7;10052:5;10041:16;;9986:77;;;:::o;10069:180::-;10117:77;10114:1;10107:88;10214:4;10211:1;10204:15;10238:4;10235:1;10228:15;10255:348;10295:7;10318:20;10336:1;10318:20;:::i;:::-;10313:25;;10352:20;10370:1;10352:20;:::i;:::-;10347:25;;10540:1;10472:66;10468:74;10465:1;10462:81;10457:1;10450:9;10443:17;10439:105;10436:131;;;10547:18;;:::i;:::-;10436:131;10595:1;10592;10588:9;10577:20;;10255:348;;;;:::o;10609:191::-;10649:3;10668:20;10686:1;10668:20;:::i;:::-;10663:25;;10702:20;10720:1;10702:20;:::i;:::-;10697:25;;10745:1;10742;10738:9;10731:16;;10766:3;10763:1;10760:10;10757:36;;;10773:18;;:::i;:::-;10757:36;10609:191;;;;:::o;10806:180::-;10854:77;10851:1;10844:88;10951:4;10948:1;10941:15;10975:4;10972:1;10965:15;10992:180;11040:77;11037:1;11030:88;11137:4;11134:1;11127:15;11161:4;11158:1;11151:15;11178:171;11217:3;11240:24;11258:5;11240:24;:::i;:::-;11231:33;;11286:4;11279:5;11276:15;11273:41;;11294:18;;:::i;:::-;11273:41;11341:1;11334:5;11330:13;11323:20;;11178:171;;;:::o;11355:182::-;11495:34;11491:1;11483:6;11479:14;11472:58;11355:182;:::o;11543:366::-;11685:3;11706:67;11770:2;11765:3;11706:67;:::i;:::-;11699:74;;11782:93;11871:3;11782:93;:::i;:::-;11900:2;11895:3;11891:12;11884:19;;11543:366;;;:::o;11915:419::-;12081:4;12119:2;12108:9;12104:18;12096:26;;12168:9;12162:4;12158:20;12154:1;12143:9;12139:17;12132:47;12196:131;12322:4;12196:131;:::i;:::-;12188:139;;11915:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1010600","executionCost":"1047","totalCost":"1011647"},"external":{"DEFAULT_ADMIN_ROLE()":"379","__BaseUpgradeablePausable_init(address)":"infinite","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3162","isAdmin()":"2836","paused()":"2568","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"728"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isAdmin()":"b6db75a0","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseUpgradeablePausable.sol\":\"BaseUpgradeablePausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3132,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Constants.sol":{"Constants":{"abi":[{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"610124610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH2 0x124 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4119":{"entryPoint":118,"id":4119,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_4124":{"entryPoint":154,"id":4124,"parameterSlots":0,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack_library":{"entryPoint":200,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed":{"entryPoint":213,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":190,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:463:30","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:30","statements":[{"nodeType":"YulAssignment","src":"62:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:30"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:30","type":""}],"src":"7:77:30"},{"body":{"nodeType":"YulBlock","src":"163:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"180:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"203:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"185:17:30"},"nodeType":"YulFunctionCall","src":"185:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:30"},"nodeType":"YulFunctionCall","src":"173:37:30"},"nodeType":"YulExpressionStatement","src":"173:37:30"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"151:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"158:3:30","type":""}],"src":"90:126:30"},{"body":{"nodeType":"YulBlock","src":"328:132:30","statements":[{"nodeType":"YulAssignment","src":"338:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"361:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"346:3:30"},"nodeType":"YulFunctionCall","src":"346:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"338:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"426:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"439:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"450:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"435:3:30"},"nodeType":"YulFunctionCall","src":"435:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulIdentifier","src":"374:51:30"},"nodeType":"YulFunctionCall","src":"374:79:30"},"nodeType":"YulExpressionStatement","src":"374:79:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"300:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"312:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"323:4:30","type":""}],"src":"222:238:30"}]},"contents":"{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;87:60;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;153:62;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;87:60;124:23;87:60;:::o;153:62::-;191:24;153:62;:::o;7:77:30:-;44:7;73:5;62:16;;7:77;;;:::o;90:126::-;185:24;203:5;185:24;:::i;:::-;180:3;173:37;90:126;;:::o;222:238::-;323:4;361:2;350:9;346:18;338:26;;374:79;450:1;439:9;435:17;426:6;374:79;:::i;:::-;222:238;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"58400","executionCost":"136","totalCost":"58536"},"external":{"ADMIN_ROLE()":"291","PAUSER_ROLE()":"313"},"internal":{"getAdminRole()":"infinite","getPauserRole()":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","PAUSER_ROLE()":"e63ab1e9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Constants.sol\":\"Constants\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/core/buySell/BuyGENZ.sol":{"BuyGENZ":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"decimals","type":"uint256"},{"internalType":"address","name":"tokenDAI","type":"address"},{"internalType":"address","name":"tokenGENZ","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"BuyGENZ__TransactionFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__GENZBurnFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__GENZMintFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ImmutableChangesError","type":"error"},{"inputs":[],"name":"BuySellGENZ__InsufficientBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowAmountError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowSZTBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__PausedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__TransactionFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ZeroAddressTransactionError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"buyGENZToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"issuedTokensGENZ","type":"uint256"},{"internalType":"uint256","name":"requiredTokens","type":"uint256"}],"name":"calculatePriceGENZ","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentTokenPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGENZTokenCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pauseOperationAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenPrice","type":"uint256"}],"name":"updateBaseSalePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"valueInDays","type":"uint256"}],"name":"updateMinimumWithdrawalPeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawStakedToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{"buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)":{"params":{"value":": amount of SZT tokens user wishes to purchase"}},"constructor":{"custom:oz-upgrades-unsafe-allow-constructor":"","details":"initializing _tokenDAI","params":{"tokenDAI":": address of the DAI token"}},"getGENZTokenCount()":{"details":"returns the token in circulation"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"initialize(address)":{"details":"one time function to initialize the contract","params":{"pauseOperationAddress":": address of the Global Pause Operation contract"}},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4264":{"entryPoint":null,"id":4264,"parameterSlots":4,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":319,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256t_addresst_address_fromMemory":{"entryPoint":443,"id":null,"parameterSlots":2,"returnSlots":4},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":1169,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":617,"id":null,"parameterSlots":4,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":944,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":708,"id":null,"parameterSlots":3,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":1025,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":374,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":342,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":283,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":557,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":1122,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":278,"id":null,"parameterSlots":0,"returnSlots":0},"shift_right_1_unsigned":{"entryPoint":604,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":394,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":293,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5277:30","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:30","statements":[{"nodeType":"YulAssignment","src":"57:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:30"},"nodeType":"YulFunctionCall","src":"67:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:30"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:30","type":""}],"src":"7:75:30"},{"body":{"nodeType":"YulBlock","src":"177:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:30"},"nodeType":"YulFunctionCall","src":"187:12:30"},"nodeType":"YulExpressionStatement","src":"187:12:30"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:30"},{"body":{"nodeType":"YulBlock","src":"300:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:30"},"nodeType":"YulFunctionCall","src":"310:12:30"},"nodeType":"YulExpressionStatement","src":"310:12:30"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:30"},{"body":{"nodeType":"YulBlock","src":"379:32:30","statements":[{"nodeType":"YulAssignment","src":"389:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:30"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:30","type":""}],"src":"334:77:30"},{"body":{"nodeType":"YulBlock","src":"460:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:30"},"nodeType":"YulFunctionCall","src":"519:12:30"},"nodeType":"YulExpressionStatement","src":"519:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:30"},"nodeType":"YulFunctionCall","src":"490:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:30"},"nodeType":"YulFunctionCall","src":"480:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:30"},"nodeType":"YulFunctionCall","src":"473:43:30"},"nodeType":"YulIf","src":"470:63:30"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:30","type":""}],"src":"417:122:30"},{"body":{"nodeType":"YulBlock","src":"608:80:30","statements":[{"nodeType":"YulAssignment","src":"618:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"633:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"627:5:30"},"nodeType":"YulFunctionCall","src":"627:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"618:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:30"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"649:26:30"},"nodeType":"YulFunctionCall","src":"649:33:30"},"nodeType":"YulExpressionStatement","src":"649:33:30"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"586:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"594:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"602:5:30","type":""}],"src":"545:143:30"},{"body":{"nodeType":"YulBlock","src":"739:81:30","statements":[{"nodeType":"YulAssignment","src":"749:65:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"764:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"771:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"760:3:30"},"nodeType":"YulFunctionCall","src":"760:54:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"749:7:30"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"721:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"731:7:30","type":""}],"src":"694:126:30"},{"body":{"nodeType":"YulBlock","src":"871:51:30","statements":[{"nodeType":"YulAssignment","src":"881:35:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"910:5:30"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"892:17:30"},"nodeType":"YulFunctionCall","src":"892:24:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"881:7:30"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"853:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"863:7:30","type":""}],"src":"826:96:30"},{"body":{"nodeType":"YulBlock","src":"971:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"1028:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1040:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1030:6:30"},"nodeType":"YulFunctionCall","src":"1030:12:30"},"nodeType":"YulExpressionStatement","src":"1030:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"994:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1019:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1001:17:30"},"nodeType":"YulFunctionCall","src":"1001:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"991:2:30"},"nodeType":"YulFunctionCall","src":"991:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"984:6:30"},"nodeType":"YulFunctionCall","src":"984:43:30"},"nodeType":"YulIf","src":"981:63:30"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"964:5:30","type":""}],"src":"928:122:30"},{"body":{"nodeType":"YulBlock","src":"1119:80:30","statements":[{"nodeType":"YulAssignment","src":"1129:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1138:5:30"},"nodeType":"YulFunctionCall","src":"1138:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1129:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1187:5:30"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1160:26:30"},"nodeType":"YulFunctionCall","src":"1160:33:30"},"nodeType":"YulExpressionStatement","src":"1160:33:30"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"1105:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1113:5:30","type":""}],"src":"1056:143:30"},{"body":{"nodeType":"YulBlock","src":"1333:692:30","statements":[{"body":{"nodeType":"YulBlock","src":"1380:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1382:77:30"},"nodeType":"YulFunctionCall","src":"1382:79:30"},"nodeType":"YulExpressionStatement","src":"1382:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1354:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1363:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1350:3:30"},"nodeType":"YulFunctionCall","src":"1350:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1375:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1346:3:30"},"nodeType":"YulFunctionCall","src":"1346:33:30"},"nodeType":"YulIf","src":"1343:120:30"},{"nodeType":"YulBlock","src":"1473:128:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1488:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1502:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1492:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1517:74:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1563:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1574:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1559:3:30"},"nodeType":"YulFunctionCall","src":"1559:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1583:7:30"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1527:31:30"},"nodeType":"YulFunctionCall","src":"1527:64:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1517:6:30"}]}]},{"nodeType":"YulBlock","src":"1611:129:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1626:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1640:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1630:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1656:74:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1702:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1713:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1698:3:30"},"nodeType":"YulFunctionCall","src":"1698:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1722:7:30"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1666:31:30"},"nodeType":"YulFunctionCall","src":"1666:64:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1656:6:30"}]}]},{"nodeType":"YulBlock","src":"1750:129:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1765:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1779:2:30","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1795:74:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1841:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1852:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1837:3:30"},"nodeType":"YulFunctionCall","src":"1837:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1861:7:30"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1805:31:30"},"nodeType":"YulFunctionCall","src":"1805:64:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1795:6:30"}]}]},{"nodeType":"YulBlock","src":"1889:129:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1904:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1918:2:30","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1908:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1934:74:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1980:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1991:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1976:3:30"},"nodeType":"YulFunctionCall","src":"1976:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2000:7:30"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1944:31:30"},"nodeType":"YulFunctionCall","src":"1944:64:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1934:6:30"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1279:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1290:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1302:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1310:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1318:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1326:6:30","type":""}],"src":"1205:820:30"},{"body":{"nodeType":"YulBlock","src":"2059:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2076:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2079:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2069:6:30"},"nodeType":"YulFunctionCall","src":"2069:88:30"},"nodeType":"YulExpressionStatement","src":"2069:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2173:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2176:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2166:6:30"},"nodeType":"YulFunctionCall","src":"2166:15:30"},"nodeType":"YulExpressionStatement","src":"2166:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2197:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2200:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2190:6:30"},"nodeType":"YulFunctionCall","src":"2190:15:30"},"nodeType":"YulExpressionStatement","src":"2190:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2031:180:30"},{"body":{"nodeType":"YulBlock","src":"2268:51:30","statements":[{"nodeType":"YulAssignment","src":"2278:34:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2303:1:30","type":"","value":"1"},{"name":"value","nodeType":"YulIdentifier","src":"2306:5:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2299:3:30"},"nodeType":"YulFunctionCall","src":"2299:13:30"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"2278:8:30"}]}]},"name":"shift_right_1_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2249:5:30","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"2259:8:30","type":""}],"src":"2217:102:30"},{"body":{"nodeType":"YulBlock","src":"2398:775:30","statements":[{"nodeType":"YulAssignment","src":"2408:15:30","value":{"name":"_power","nodeType":"YulIdentifier","src":"2417:6:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2408:5:30"}]},{"nodeType":"YulAssignment","src":"2432:14:30","value":{"name":"_base","nodeType":"YulIdentifier","src":"2441:5:30"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"2432:4:30"}]},{"body":{"nodeType":"YulBlock","src":"2490:677:30","statements":[{"body":{"nodeType":"YulBlock","src":"2578:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2580:16:30"},"nodeType":"YulFunctionCall","src":"2580:18:30"},"nodeType":"YulExpressionStatement","src":"2580:18:30"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2556:4:30"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"2566:3:30"},{"name":"base","nodeType":"YulIdentifier","src":"2571:4:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2562:3:30"},"nodeType":"YulFunctionCall","src":"2562:14:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2553:2:30"},"nodeType":"YulFunctionCall","src":"2553:24:30"},"nodeType":"YulIf","src":"2550:50:30"},{"body":{"nodeType":"YulBlock","src":"2645:419:30","statements":[{"nodeType":"YulAssignment","src":"3025:25:30","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"3038:5:30"},{"name":"base","nodeType":"YulIdentifier","src":"3045:4:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3034:3:30"},"nodeType":"YulFunctionCall","src":"3034:16:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3025:5:30"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2620:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"2630:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2616:3:30"},"nodeType":"YulFunctionCall","src":"2616:16:30"},"nodeType":"YulIf","src":"2613:451:30"},{"nodeType":"YulAssignment","src":"3077:23:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3089:4:30"},{"name":"base","nodeType":"YulIdentifier","src":"3095:4:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3085:3:30"},"nodeType":"YulFunctionCall","src":"3085:15:30"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"3077:4:30"}]},{"nodeType":"YulAssignment","src":"3113:44:30","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3148:8:30"}],"functionName":{"name":"shift_right_1_unsigned","nodeType":"YulIdentifier","src":"3125:22:30"},"nodeType":"YulFunctionCall","src":"3125:32:30"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"3113:8:30"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2466:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"2476:1:30","type":"","value":"1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2463:2:30"},"nodeType":"YulFunctionCall","src":"2463:15:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2479:2:30","statements":[]},"pre":{"nodeType":"YulBlock","src":"2459:3:30","statements":[]},"src":"2455:712:30"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_power","nodeType":"YulTypedName","src":"2353:6:30","type":""},{"name":"_base","nodeType":"YulTypedName","src":"2361:5:30","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"2368:8:30","type":""},{"name":"max","nodeType":"YulTypedName","src":"2378:3:30","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"2386:5:30","type":""},{"name":"base","nodeType":"YulTypedName","src":"2393:4:30","type":""}],"src":"2325:848:30"},{"body":{"nodeType":"YulBlock","src":"3239:1013:30","statements":[{"body":{"nodeType":"YulBlock","src":"3434:20:30","statements":[{"nodeType":"YulAssignment","src":"3436:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3445:1:30","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3436:5:30"}]},{"nodeType":"YulLeave","src":"3447:5:30"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3424:8:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3417:6:30"},"nodeType":"YulFunctionCall","src":"3417:16:30"},"nodeType":"YulIf","src":"3414:40:30"},{"body":{"nodeType":"YulBlock","src":"3479:20:30","statements":[{"nodeType":"YulAssignment","src":"3481:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3490:1:30","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3481:5:30"}]},{"nodeType":"YulLeave","src":"3492:5:30"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3473:4:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3466:6:30"},"nodeType":"YulFunctionCall","src":"3466:12:30"},"nodeType":"YulIf","src":"3463:36:30"},{"cases":[{"body":{"nodeType":"YulBlock","src":"3609:20:30","statements":[{"nodeType":"YulAssignment","src":"3611:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3620:1:30","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3611:5:30"}]},{"nodeType":"YulLeave","src":"3622:5:30"}]},"nodeType":"YulCase","src":"3602:27:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3607:1:30","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3653:176:30","statements":[{"body":{"nodeType":"YulBlock","src":"3688:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3690:16:30"},"nodeType":"YulFunctionCall","src":"3690:18:30"},"nodeType":"YulExpressionStatement","src":"3690:18:30"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3673:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"3683:3:30","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3670:2:30"},"nodeType":"YulFunctionCall","src":"3670:17:30"},"nodeType":"YulIf","src":"3667:43:30"},{"nodeType":"YulAssignment","src":"3723:25:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3736:1:30","type":"","value":"2"},{"name":"exponent","nodeType":"YulIdentifier","src":"3739:8:30"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"3732:3:30"},"nodeType":"YulFunctionCall","src":"3732:16:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3723:5:30"}]},{"body":{"nodeType":"YulBlock","src":"3779:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3781:16:30"},"nodeType":"YulFunctionCall","src":"3781:18:30"},"nodeType":"YulExpressionStatement","src":"3781:18:30"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"3767:5:30"},{"name":"max","nodeType":"YulIdentifier","src":"3774:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3764:2:30"},"nodeType":"YulFunctionCall","src":"3764:14:30"},"nodeType":"YulIf","src":"3761:40:30"},{"nodeType":"YulLeave","src":"3814:5:30"}]},"nodeType":"YulCase","src":"3638:191:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3643:1:30","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"3559:4:30"},"nodeType":"YulSwitch","src":"3552:277:30"},{"body":{"nodeType":"YulBlock","src":"3961:123:30","statements":[{"nodeType":"YulAssignment","src":"3975:28:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3988:4:30"},{"name":"exponent","nodeType":"YulIdentifier","src":"3994:8:30"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"3984:3:30"},"nodeType":"YulFunctionCall","src":"3984:19:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3975:5:30"}]},{"body":{"nodeType":"YulBlock","src":"4034:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4036:16:30"},"nodeType":"YulFunctionCall","src":"4036:18:30"},"nodeType":"YulExpressionStatement","src":"4036:18:30"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4022:5:30"},{"name":"max","nodeType":"YulIdentifier","src":"4029:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4019:2:30"},"nodeType":"YulFunctionCall","src":"4019:14:30"},"nodeType":"YulIf","src":"4016:40:30"},{"nodeType":"YulLeave","src":"4069:5:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3864:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"3870:2:30","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3861:2:30"},"nodeType":"YulFunctionCall","src":"3861:12:30"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3878:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"3888:2:30","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3875:2:30"},"nodeType":"YulFunctionCall","src":"3875:16:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3857:3:30"},"nodeType":"YulFunctionCall","src":"3857:35:30"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3913:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"3919:3:30","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3910:2:30"},"nodeType":"YulFunctionCall","src":"3910:13:30"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3928:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"3938:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3925:2:30"},"nodeType":"YulFunctionCall","src":"3925:16:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3906:3:30"},"nodeType":"YulFunctionCall","src":"3906:36:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3841:2:30"},"nodeType":"YulFunctionCall","src":"3841:111:30"},"nodeType":"YulIf","src":"3838:246:30"},{"nodeType":"YulAssignment","src":"4094:57:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4128:1:30","type":"","value":"1"},{"name":"base","nodeType":"YulIdentifier","src":"4131:4:30"},{"name":"exponent","nodeType":"YulIdentifier","src":"4137:8:30"},{"name":"max","nodeType":"YulIdentifier","src":"4147:3:30"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"4109:18:30"},"nodeType":"YulFunctionCall","src":"4109:42:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4094:5:30"},{"name":"base","nodeType":"YulIdentifier","src":"4101:4:30"}]},{"body":{"nodeType":"YulBlock","src":"4190:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4192:16:30"},"nodeType":"YulFunctionCall","src":"4192:18:30"},"nodeType":"YulExpressionStatement","src":"4192:18:30"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4167:5:30"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"4178:3:30"},{"name":"base","nodeType":"YulIdentifier","src":"4183:4:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4174:3:30"},"nodeType":"YulFunctionCall","src":"4174:14:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4164:2:30"},"nodeType":"YulFunctionCall","src":"4164:25:30"},"nodeType":"YulIf","src":"4161:51:30"},{"nodeType":"YulAssignment","src":"4221:25:30","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4234:5:30"},{"name":"base","nodeType":"YulIdentifier","src":"4241:4:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4230:3:30"},"nodeType":"YulFunctionCall","src":"4230:16:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4221:5:30"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"3209:4:30","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"3215:8:30","type":""},{"name":"max","nodeType":"YulTypedName","src":"3225:3:30","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"3233:5:30","type":""}],"src":"3179:1073:30"},{"body":{"nodeType":"YulBlock","src":"4324:219:30","statements":[{"nodeType":"YulAssignment","src":"4334:31:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4360:4:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4342:17:30"},"nodeType":"YulFunctionCall","src":"4342:23:30"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"4334:4:30"}]},{"nodeType":"YulAssignment","src":"4374:39:30","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4404:8:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4386:17:30"},"nodeType":"YulFunctionCall","src":"4386:27:30"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"4374:8:30"}]},{"nodeType":"YulAssignment","src":"4423:113:30","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4453:4:30"},{"name":"exponent","nodeType":"YulIdentifier","src":"4459:8:30"},{"kind":"number","nodeType":"YulLiteral","src":"4469:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"4432:20:30"},"nodeType":"YulFunctionCall","src":"4432:104:30"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4423:5:30"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"4299:4:30","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"4305:8:30","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"4318:5:30","type":""}],"src":"4258:285:30"},{"body":{"nodeType":"YulBlock","src":"4597:300:30","statements":[{"nodeType":"YulAssignment","src":"4607:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4630:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4612:17:30"},"nodeType":"YulFunctionCall","src":"4612:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"4607:1:30"}]},{"nodeType":"YulAssignment","src":"4641:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4664:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4646:17:30"},"nodeType":"YulFunctionCall","src":"4646:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"4641:1:30"}]},{"body":{"nodeType":"YulBlock","src":"4839:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4841:16:30"},"nodeType":"YulFunctionCall","src":"4841:18:30"},"nodeType":"YulExpressionStatement","src":"4841:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4751:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4744:6:30"},"nodeType":"YulFunctionCall","src":"4744:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4737:6:30"},"nodeType":"YulFunctionCall","src":"4737:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4759:1:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4766:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"4834:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4762:3:30"},"nodeType":"YulFunctionCall","src":"4762:74:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4756:2:30"},"nodeType":"YulFunctionCall","src":"4756:81:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4733:3:30"},"nodeType":"YulFunctionCall","src":"4733:105:30"},"nodeType":"YulIf","src":"4730:131:30"},{"nodeType":"YulAssignment","src":"4871:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4886:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"4889:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4882:3:30"},"nodeType":"YulFunctionCall","src":"4882:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"4871:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4580:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"4583:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"4589:7:30","type":""}],"src":"4549:348:30"},{"body":{"nodeType":"YulBlock","src":"4931:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4948:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4951:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4941:6:30"},"nodeType":"YulFunctionCall","src":"4941:88:30"},"nodeType":"YulExpressionStatement","src":"4941:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5045:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5048:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5038:6:30"},"nodeType":"YulFunctionCall","src":"5038:15:30"},"nodeType":"YulExpressionStatement","src":"5038:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5069:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5072:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5062:6:30"},"nodeType":"YulFunctionCall","src":"5062:15:30"},"nodeType":"YulExpressionStatement","src":"5062:15:30"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"4903:180:30"},{"body":{"nodeType":"YulBlock","src":"5131:143:30","statements":[{"nodeType":"YulAssignment","src":"5141:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5164:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5146:17:30"},"nodeType":"YulFunctionCall","src":"5146:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"5141:1:30"}]},{"nodeType":"YulAssignment","src":"5175:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5198:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5180:17:30"},"nodeType":"YulFunctionCall","src":"5180:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"5175:1:30"}]},{"body":{"nodeType":"YulBlock","src":"5222:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"5224:16:30"},"nodeType":"YulFunctionCall","src":"5224:18:30"},"nodeType":"YulExpressionStatement","src":"5224:18:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5219:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5212:6:30"},"nodeType":"YulFunctionCall","src":"5212:9:30"},"nodeType":"YulIf","src":"5209:35:30"},{"nodeType":"YulAssignment","src":"5254:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5263:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"5266:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5259:3:30"},"nodeType":"YulFunctionCall","src":"5259:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5254:1:30"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5120:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"5123:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"5129:1:30","type":""}],"src":"5089:185:30"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x34A5 CODESIZE SUB DUP1 PUSH3 0x34A5 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x1BB JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP3 PUSH1 0xA PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x3B0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP6 PUSH3 0xF9 SWAP2 SWAP1 PUSH3 0x401 JUMP JUMPDEST PUSH3 0x105 SWAP2 SWAP1 PUSH3 0x491 JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 MSTORE POP POP POP POP POP POP PUSH3 0x4C9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x130 DUP2 PUSH3 0x11B JUMP JUMPDEST DUP2 EQ PUSH3 0x13C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x150 DUP2 PUSH3 0x125 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x183 DUP3 PUSH3 0x156 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x195 DUP2 PUSH3 0x176 JUMP JUMPDEST DUP2 EQ PUSH3 0x1A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1B5 DUP2 PUSH3 0x18A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1D8 JUMPI PUSH3 0x1D7 PUSH3 0x116 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1E8 DUP8 DUP3 DUP9 ADD PUSH3 0x13F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x1FB DUP8 DUP3 DUP9 ADD PUSH3 0x13F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x20E DUP8 DUP3 DUP9 ADD PUSH3 0x1A4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH3 0x221 DUP8 DUP3 DUP9 ADD PUSH3 0x1A4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH3 0x2BB JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH3 0x293 JUMPI PUSH3 0x292 PUSH3 0x22D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH3 0x2A3 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH3 0x2B3 DUP6 PUSH3 0x25C JUMP JUMPDEST SWAP5 POP PUSH3 0x273 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x2D6 JUMPI PUSH1 0x1 SWAP1 POP PUSH3 0x3A9 JUMP JUMPDEST DUP2 PUSH3 0x2E6 JUMPI PUSH1 0x0 SWAP1 POP PUSH3 0x3A9 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x2FF JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x30A JUMPI PUSH3 0x340 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x3A9 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x31F JUMPI PUSH3 0x31E PUSH3 0x22D JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH3 0x339 JUMPI PUSH3 0x338 PUSH3 0x22D JUMP JUMPDEST JUMPDEST POP PUSH3 0x3A9 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x37A JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH3 0x374 JUMPI PUSH3 0x373 PUSH3 0x22D JUMP JUMPDEST JUMPDEST PUSH3 0x3A9 JUMP JUMPDEST PUSH3 0x389 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH3 0x269 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH3 0x3A3 JUMPI PUSH3 0x3A2 PUSH3 0x22D JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3BD DUP3 PUSH3 0x11B JUMP JUMPDEST SWAP2 POP PUSH3 0x3CA DUP4 PUSH3 0x11B JUMP JUMPDEST SWAP3 POP PUSH3 0x3F9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH3 0x2C4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x40E DUP3 PUSH3 0x11B JUMP JUMPDEST SWAP2 POP PUSH3 0x41B DUP4 PUSH3 0x11B JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x457 JUMPI PUSH3 0x456 PUSH3 0x22D JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x49E DUP3 PUSH3 0x11B JUMP JUMPDEST SWAP2 POP PUSH3 0x4AB DUP4 PUSH3 0x11B JUMP JUMPDEST SWAP3 POP DUP3 PUSH3 0x4BE JUMPI PUSH3 0x4BD PUSH3 0x462 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x2F9B PUSH3 0x50A PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x853 ADD MSTORE PUSH1 0x0 PUSH2 0xD91 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x6CF ADD MSTORE PUSH2 0x8AB ADD MSTORE PUSH1 0x0 PUSH2 0x47D ADD MSTORE PUSH2 0x2F9B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74A7DCE5 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xB6DB75A0 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xEAEF3999 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0xF751758B EQ PUSH2 0x37C JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x74A7DCE5 EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x869EAC93 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2EC JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x34D131BF GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x34D131BF EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x26E JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x51E6CB1 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x6FB46BA EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x146 SWAP2 SWAP1 PUSH2 0x1FED JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x176 SWAP2 SWAP1 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x197 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP3 SWAP2 SWAP1 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x2161 JUMP JUMPDEST PUSH2 0x54C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x56C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x228F JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x244 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23F SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x907 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24E PUSH2 0x98A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0x9DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x230A JUMP JUMPDEST PUSH2 0x9F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x292 PUSH2 0xB14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B0 PUSH2 0xB1E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BA PUSH2 0xB6F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D1 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0xDD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F4 PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x312 PUSH2 0xE4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x342 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33D SWAP2 SWAP1 PUSH2 0x230A JUMP JUMPDEST PUSH2 0xE69 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x1009 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x102A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH2 0x1095 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x40D JUMPI POP PUSH2 0x40C DUP3 PUSH2 0x10C3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x41C PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x45B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x46A SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH1 0xFF DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xFD SLOAD PUSH32 0x0 PUSH2 0x4A6 SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x4BE SWAP2 SWAP1 PUSH2 0x247E JUMP JUMPDEST DUP7 PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH1 0x2 DUP4 DUP6 PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST PUSH2 0x4F8 SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xFE SLOAD PUSH2 0x50A SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 DUP10 PUSH2 0x523 SWAP2 SWAP1 PUSH2 0x247E JUMP JUMPDEST DUP4 PUSH2 0x52E SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x538 SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x575 DUP3 PUSH2 0x54C JUMP JUMPDEST PUSH2 0x57E DUP2 PUSH2 0x112D JUMP JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0x1141 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x597 PUSH2 0x1222 JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH2 0x5A3 PUSH2 0x9DB JUMP JUMPDEST ISZERO ISZERO EQ ISZERO DUP1 ISZERO PUSH2 0x649 JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB187BD26 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x644 SWAP2 SWAP1 PUSH2 0x2572 JUMP JUMPDEST ISZERO ISZERO EQ ISZERO JUMPDEST PUSH2 0x652 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP7 LT ISZERO PUSH2 0x694 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8FACB45E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7080 PUSH1 0xFF PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6A8 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x6CA PUSH1 0xFC SLOAD DUP9 PUSH1 0xFC SLOAD PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST SWAP2 POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x711 PUSH2 0x1271 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76E SWAP2 SWAP1 PUSH2 0x25DE JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B2CCE3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0x7B6 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP8 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x806 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFF SLOAD TIMESTAMP PUSH2 0x838 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x89C PUSH2 0x84B PUSH2 0x1271 JUMP JUMPDEST ADDRESS DUP5 DUP11 DUP11 DUP11 DUP11 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1279 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x8F0 PUSH2 0x8A7 PUSH2 0x1271 JUMP JUMPDEST ADDRESS DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1446 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x8FE PUSH2 0x14CF JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x90F PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x97C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x973 SWAP1 PUSH2 0x267D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x986 DUP3 DUP3 PUSH2 0x14D9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x992 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x9D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9C8 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9D9 PUSH2 0x15BB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA38 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAAF PUSH2 0x161E JUMP JUMPDEST PUSH2 0xAB7 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0xABF PUSH2 0x16C8 JUMP JUMPDEST PUSH2 0xAD0 PUSH2 0xACA PUSH2 0x1721 JUMP JUMPDEST DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH2 0xAE1 PUSH2 0xADB PUSH2 0x1749 JUMP JUMPDEST DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH2 0xAF9 PUSH2 0xAEC PUSH2 0x1749 JUMP JUMPDEST PUSH2 0xAF4 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xB11 PUSH2 0xB04 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0xB0C PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1771 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB26 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0xB65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5C SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB6D PUSH2 0x17CD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x101 PUSH1 0x0 PUSH2 0xB7C PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH2 0x101 PUSH1 0x0 PUSH2 0xC0B PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT ISZERO PUSH2 0xC81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xC90 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xCDF PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xD42 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xDD5 PUSH2 0xD8E PUSH2 0x1271 JUMP JUMPDEST DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1830 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE64 PUSH2 0xE57 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0xE5F PUSH2 0x1271 JUMP JUMPDEST PUSH2 0xDD8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xE9A JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xEC7 JUMPI POP PUSH2 0xEA9 ADDRESS PUSH2 0x18B6 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xEC6 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xF06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFD SWAP1 PUSH2 0x27A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xF43 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 PUSH1 0xFE DUP2 SWAP1 SSTORE POP DUP2 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xFAC PUSH2 0xFA7 PUSH2 0x1271 JUMP JUMPDEST PUSH2 0x9F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xFFC SWAP2 SWAP1 PUSH2 0x2806 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1012 DUP3 PUSH2 0x54C JUMP JUMPDEST PUSH2 0x101B DUP2 PUSH2 0x112D JUMP JUMPDEST PUSH2 0x1025 DUP4 DUP4 PUSH2 0x14D9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1032 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x1071 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1068 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x108C SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10B9 PUSH1 0xFC SLOAD PUSH8 0xDE0B6B3A7640000 PUSH1 0xFC SLOAD PUSH2 0x10B4 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x113E DUP2 PUSH2 0x1139 PUSH2 0x1271 JUMP JUMPDEST PUSH2 0x18D9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x114B DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x121E JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x11C3 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1267 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x125E SWAP1 PUSH2 0x286D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12B4 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x25DE JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x133C SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x289C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x136A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A9 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13EA SWAP2 SWAP1 PUSH2 0x25DE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x13F9 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST DUP2 EQ PUSH2 0x143A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1431 SWAP1 PUSH2 0x297D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x14C9 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1467 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x299D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x195E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x14E3 DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST ISZERO PUSH2 0x15B7 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x155C PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x15C3 PUSH2 0x1A25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1607 PUSH2 0x1271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1614 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x166D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1664 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1675 PUSH2 0x1A6E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x16C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16BD SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1717 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x170E SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x171F PUSH2 0x1ADA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x177C DUP4 PUSH2 0x54C JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x17D5 PUSH2 0x1B33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1819 PUSH2 0x1271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1826 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x18B1 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x184F SWAP3 SWAP2 SWAP1 PUSH2 0x29D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x195E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E3 DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x195A JUMPI PUSH2 0x18F0 DUP2 PUSH2 0x1B7D JUMP JUMPDEST PUSH2 0x18FE DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x1BAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x190F SWAP3 SWAP2 SWAP1 PUSH2 0x2B06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1951 SWAP2 SWAP1 PUSH2 0x2B8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19C0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DE6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1A20 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x19E0 SWAP2 SWAP1 PUSH2 0x2572 JUMP JUMPDEST PUSH2 0x1A1F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A16 SWAP1 PUSH2 0x2C1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1A2D PUSH2 0x9DB JUMP JUMPDEST PUSH2 0x1A6C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A63 SWAP1 PUSH2 0x2C8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1ABD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AB4 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B20 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1B3B PUSH2 0x9DB JUMP JUMPDEST ISZERO PUSH2 0x1B7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B72 SWAP1 PUSH2 0x2CF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BA3 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x1BAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x1BBD SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x1BC7 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BE0 JUMPI PUSH2 0x1BDF PUSH2 0x2D16 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C12 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C4A JUMPI PUSH2 0x1C49 PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1CAE JUMPI PUSH2 0x1CAD PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x1CEE SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x1CF8 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1D98 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x1D3A JUMPI PUSH2 0x1D39 PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D51 JUMPI PUSH2 0x1D50 PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x1D91 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CFB JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x1DDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD3 SWAP1 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DF5 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DFE JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E43 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3A SWAP1 PUSH2 0x2E7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E6C SWAP2 SWAP1 PUSH2 0x2EE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1EA9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EAE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EBF DUP8 DUP4 DUP4 DUP8 PUSH2 0x1ECB JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1F2D JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1F25 JUMPI PUSH2 0x1EE5 DUP6 PUSH2 0x18B6 JUMP JUMPDEST PUSH2 0x1F24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F1B SWAP1 PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1F38 JUMP JUMPDEST PUSH2 0x1F37 DUP4 DUP4 PUSH2 0x1F40 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1F53 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F87 SWAP2 SWAP1 PUSH2 0x2B8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FCA DUP2 PUSH2 0x1F95 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FE7 DUP2 PUSH2 0x1FC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2003 JUMPI PUSH2 0x2002 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2011 DUP5 DUP3 DUP6 ADD PUSH2 0x1FD8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x202F DUP2 PUSH2 0x201A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x204A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2026 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2063 DUP2 PUSH2 0x2050 JUMP JUMPDEST DUP2 EQ PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2080 DUP2 PUSH2 0x205A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x209C JUMPI PUSH2 0x209B PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20AA DUP5 DUP3 DUP6 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20CA JUMPI PUSH2 0x20C9 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20D8 DUP6 DUP3 DUP7 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x20E9 DUP6 DUP3 DUP7 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x20FC DUP2 PUSH2 0x2050 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2117 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x2124 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x213E DUP2 PUSH2 0x212B JUMP JUMPDEST DUP2 EQ PUSH2 0x2149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x215B DUP2 PUSH2 0x2135 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2177 JUMPI PUSH2 0x2176 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2185 DUP5 DUP3 DUP6 ADD PUSH2 0x214C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2197 DUP2 PUSH2 0x212B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21B2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x218E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E3 DUP3 PUSH2 0x21B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21F3 DUP2 PUSH2 0x21D8 JUMP JUMPDEST DUP2 EQ PUSH2 0x21FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2210 DUP2 PUSH2 0x21EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x222D JUMPI PUSH2 0x222C PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x223B DUP6 DUP3 DUP7 ADD PUSH2 0x214C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x224C DUP6 DUP3 DUP7 ADD PUSH2 0x2201 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x226C DUP2 PUSH2 0x2256 JUMP JUMPDEST DUP2 EQ PUSH2 0x2277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2289 DUP2 PUSH2 0x2263 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x22AB JUMPI PUSH2 0x22AA PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22B9 DUP9 DUP3 DUP10 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x22CA DUP9 DUP3 DUP10 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x22DB DUP9 DUP3 DUP10 ADD PUSH2 0x227A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x22EC DUP9 DUP3 DUP10 ADD PUSH2 0x214C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x22FD DUP9 DUP3 DUP10 ADD PUSH2 0x214C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2320 JUMPI PUSH2 0x231F PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x232E DUP5 DUP3 DUP6 ADD PUSH2 0x2201 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x234C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23BF PUSH1 0x2C DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x23CA DUP3 PUSH2 0x2363 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23EE DUP2 PUSH2 0x23B2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x242F DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x243A DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2473 JUMPI PUSH2 0x2472 PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2489 DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x2494 DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x24AC JUMPI PUSH2 0x24AB PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24BD DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x24C8 DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x24E0 JUMPI PUSH2 0x24DF PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2520 DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x252B DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x253B JUMPI PUSH2 0x253A PUSH2 0x24E6 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x254F DUP2 PUSH2 0x201A JUMP JUMPDEST DUP2 EQ PUSH2 0x255A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x256C DUP2 PUSH2 0x2546 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2588 JUMPI PUSH2 0x2587 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2596 DUP5 DUP3 DUP6 ADD PUSH2 0x255D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x25A8 DUP2 PUSH2 0x21D8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25C3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x259F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x25D8 DUP2 PUSH2 0x205A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25F4 JUMPI PUSH2 0x25F3 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2602 DUP5 DUP3 DUP6 ADD PUSH2 0x25C9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2667 PUSH1 0x2F DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2672 DUP3 PUSH2 0x260B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2696 DUP2 PUSH2 0x265A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26F9 PUSH1 0x2B DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2704 DUP3 PUSH2 0x269D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2728 DUP2 PUSH2 0x26EC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278B PUSH1 0x2E DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2796 DUP3 PUSH2 0x272F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x27BA DUP2 PUSH2 0x277E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27F0 PUSH2 0x27EB PUSH2 0x27E6 DUP5 PUSH2 0x27C1 JUMP JUMPDEST PUSH2 0x27CB JUMP JUMPDEST PUSH2 0x2256 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2800 DUP2 PUSH2 0x27D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x281B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27F7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2857 PUSH1 0x1F DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2862 DUP3 PUSH2 0x2821 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2886 DUP2 PUSH2 0x284A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2896 DUP2 PUSH2 0x2256 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x28B1 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x28BE PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x28CB PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x28D8 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x28E5 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x288D JUMP JUMPDEST PUSH2 0x28F2 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x218E JUMP JUMPDEST PUSH2 0x28FF PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x218E JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2967 PUSH1 0x21 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2972 DUP3 PUSH2 0x290B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2996 DUP2 PUSH2 0x295A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x29B2 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x29BF PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x29CC PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x29E9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x29F6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3E PUSH1 0x17 DUP4 PUSH2 0x29FD JUMP JUMPDEST SWAP2 POP PUSH2 0x2A49 DUP3 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A7D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A62 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A94 DUP3 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x2A9E DUP2 DUP6 PUSH2 0x29FD JUMP JUMPDEST SWAP4 POP PUSH2 0x2AAE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A5F JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF0 PUSH1 0x11 DUP4 PUSH2 0x29FD JUMP JUMPDEST SWAP2 POP PUSH2 0x2AFB DUP3 PUSH2 0x2ABA JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B11 DUP3 PUSH2 0x2A31 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B1D DUP3 DUP6 PUSH2 0x2A89 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B28 DUP3 PUSH2 0x2AE3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B34 DUP3 DUP5 PUSH2 0x2A89 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B5C DUP3 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x2B66 DUP2 DUP6 PUSH2 0x2352 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B76 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A5F JUMP JUMPDEST PUSH2 0x2B7F DUP2 PUSH2 0x2B40 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BA4 DUP2 DUP5 PUSH2 0x2B51 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C08 PUSH1 0x2A DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C13 DUP3 PUSH2 0x2BAC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C37 DUP2 PUSH2 0x2BFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C74 PUSH1 0x14 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C7F DUP3 PUSH2 0x2C3E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CA3 DUP2 PUSH2 0x2C67 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE0 PUSH1 0x10 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CEB DUP3 PUSH2 0x2CAA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D0F DUP2 PUSH2 0x2CD3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D7F DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2D92 JUMPI PUSH2 0x2D91 PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD3 PUSH1 0x20 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2DDE DUP3 PUSH2 0x2D9D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E02 DUP2 PUSH2 0x2DC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E65 PUSH1 0x26 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E70 DUP3 PUSH2 0x2E09 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E94 DUP2 PUSH2 0x2E58 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EBC DUP3 PUSH2 0x2E9B JUMP JUMPDEST PUSH2 0x2EC6 DUP2 DUP6 PUSH2 0x2EA6 JUMP JUMPDEST SWAP4 POP PUSH2 0x2ED6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A5F JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EEE DUP3 DUP5 PUSH2 0x2EB1 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F2F PUSH1 0x1D DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F3A DUP3 PUSH2 0x2EF9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F5E DUP2 PUSH2 0x2F22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0x4A XOR PUSH29 0x1CBB912930FD118421DCDE0B31E2DF92FE88D3DF2B437547FD63F30564 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"2023:5359:23:-:0;;;3421:324;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3543:8;3513:39;;;;;;;;;;3594:9;3563:41;;;;;;;;;;3657:8;3615:51;;;;;;;;;;3716:8;3710:2;:14;;;;:::i;:::-;3700:5;3692;:13;;;;:::i;:::-;3691:34;;;;:::i;:::-;3676:49;;;;;;3421:324;;;;2023:5359;;88:117:30;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:143::-;602:5;633:6;627:13;618:22;;649:33;676:5;649:33;:::i;:::-;545:143;;;;:::o;694:126::-;731:7;771:42;764:5;760:54;749:65;;694:126;;;:::o;826:96::-;863:7;892:24;910:5;892:24;:::i;:::-;881:35;;826:96;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:820::-;1302:6;1310;1318;1326;1375:3;1363:9;1354:7;1350:23;1346:33;1343:120;;;1382:79;;:::i;:::-;1343:120;1502:1;1527:64;1583:7;1574:6;1563:9;1559:22;1527:64;:::i;:::-;1517:74;;1473:128;1640:2;1666:64;1722:7;1713:6;1702:9;1698:22;1666:64;:::i;:::-;1656:74;;1611:129;1779:2;1805:64;1861:7;1852:6;1841:9;1837:22;1805:64;:::i;:::-;1795:74;;1750:129;1918:2;1944:64;2000:7;1991:6;1980:9;1976:22;1944:64;:::i;:::-;1934:74;;1889:129;1205:820;;;;;;;:::o;2031:180::-;2079:77;2076:1;2069:88;2176:4;2173:1;2166:15;2200:4;2197:1;2190:15;2217:102;2259:8;2306:5;2303:1;2299:13;2278:34;;2217:102;;;:::o;2325:848::-;2386:5;2393:4;2417:6;2408:15;;2441:5;2432:14;;2455:712;2476:1;2466:8;2463:15;2455:712;;;2571:4;2566:3;2562:14;2556:4;2553:24;2550:50;;;2580:18;;:::i;:::-;2550:50;2630:1;2620:8;2616:16;2613:451;;;3045:4;3038:5;3034:16;3025:25;;2613:451;3095:4;3089;3085:15;3077:23;;3125:32;3148:8;3125:32;:::i;:::-;3113:44;;2455:712;;;2325:848;;;;;;;:::o;3179:1073::-;3233:5;3424:8;3414:40;;3445:1;3436:10;;3447:5;;3414:40;3473:4;3463:36;;3490:1;3481:10;;3492:5;;3463:36;3559:4;3607:1;3602:27;;;;3643:1;3638:191;;;;3552:277;;3602:27;3620:1;3611:10;;3622:5;;;3638:191;3683:3;3673:8;3670:17;3667:43;;;3690:18;;:::i;:::-;3667:43;3739:8;3736:1;3732:16;3723:25;;3774:3;3767:5;3764:14;3761:40;;;3781:18;;:::i;:::-;3761:40;3814:5;;;3552:277;;3938:2;3928:8;3925:16;3919:3;3913:4;3910:13;3906:36;3888:2;3878:8;3875:16;3870:2;3864:4;3861:12;3857:35;3841:111;3838:246;;;3994:8;3988:4;3984:19;3975:28;;4029:3;4022:5;4019:14;4016:40;;;4036:18;;:::i;:::-;4016:40;4069:5;;3838:246;4109:42;4147:3;4137:8;4131:4;4128:1;4109:42;:::i;:::-;4094:57;;;;4183:4;4178:3;4174:14;4167:5;4164:25;4161:51;;;4192:18;;:::i;:::-;4161:51;4241:4;4234:5;4230:16;4221:25;;3179:1073;;;;;;:::o;4258:285::-;4318:5;4342:23;4360:4;4342:23;:::i;:::-;4334:31;;4386:27;4404:8;4386:27;:::i;:::-;4374:39;;4432:104;4469:66;4459:8;4453:4;4432:104;:::i;:::-;4423:113;;4258:285;;;;:::o;4549:348::-;4589:7;4612:20;4630:1;4612:20;:::i;:::-;4607:25;;4646:20;4664:1;4646:20;:::i;:::-;4641:25;;4834:1;4766:66;4762:74;4759:1;4756:81;4751:1;4744:9;4737:17;4733:105;4730:131;;;4841:18;;:::i;:::-;4730:131;4889:1;4886;4882:9;4871:20;;4549:348;;;;:::o;4903:180::-;4951:77;4948:1;4941:88;5048:4;5045:1;5038:15;5072:4;5069:1;5062:15;5089:185;5129:1;5146:20;5164:1;5146:20;:::i;:::-;5141:25;;5180:20;5198:1;5180:20;:::i;:::-;5175:25;;5219:1;5209:35;;5224:18;;:::i;:::-;5209:35;5266:1;5263;5259:9;5254:14;;5089:185;;;;:::o;2023:5359:23:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":3651,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":5751,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_4097":{"entryPoint":2546,"id":4097,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":5662,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":6766,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":5832,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":6874,"id":740,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_2002":{"entryPoint":6494,"id":2002,"parameterSlots":2,"returnSlots":0},"@_checkRole_107":{"entryPoint":4397,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":6361,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":4417,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_2314":{"entryPoint":4721,"id":2314,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_774":{"entryPoint":5327,"id":774,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_766":{"entryPoint":4642,"id":766,"parameterSlots":0,"returnSlots":0},"@_pause_685":{"entryPoint":6093,"id":685,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_658":{"entryPoint":6963,"id":658,"parameterSlots":0,"returnSlots":0},"@_requirePaused_669":{"entryPoint":6693,"id":669,"parameterSlots":0,"returnSlots":0},"@_revert_2286":{"entryPoint":8000,"id":2286,"parameterSlots":2,"returnSlots":0},"@_revokeRole_329":{"entryPoint":5337,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":6001,"id":266,"parameterSlots":2,"returnSlots":0},"@_unpause_701":{"entryPoint":5563,"id":701,"parameterSlots":0,"returnSlots":0},"@buyGENZToken_4455":{"entryPoint":1421,"id":4455,"parameterSlots":5,"returnSlots":1},"@calculatePriceGENZ_4517":{"entryPoint":1139,"id":4517,"parameterSlots":2,"returnSlots":2},"@functionCallWithValue_2157":{"entryPoint":7678,"id":2157,"parameterSlots":4,"returnSlots":1},"@functionCall_2093":{"entryPoint":7654,"id":2093,"parameterSlots":3,"returnSlots":1},"@getAdminRole_4132":{"entryPoint":5921,"id":4132,"parameterSlots":0,"returnSlots":1},"@getCurrentTokenPrice_4596":{"entryPoint":4245,"id":4596,"parameterSlots":0,"returnSlots":1},"@getGENZTokenCount_4605":{"entryPoint":2836,"id":4605,"parameterSlots":0,"returnSlots":1},"@getPauserRole_4140":{"entryPoint":5961,"id":4140,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":1356,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":1388,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":3544,"id":94,"parameterSlots":2,"returnSlots":1},"@initialize_4292":{"entryPoint":3689,"id":4292,"parameterSlots":1,"returnSlots":0},"@isAdmin_4111":{"entryPoint":3658,"id":4111,"parameterSlots":0,"returnSlots":1},"@isContract_2021":{"entryPoint":6326,"id":2021,"parameterSlots":1,"returnSlots":1},"@pause_4333":{"entryPoint":2846,"id":4333,"parameterSlots":0,"returnSlots":0},"@paused_646":{"entryPoint":2523,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":2311,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":4105,"id":201,"parameterSlots":2,"returnSlots":0},"@safePermit_1964":{"entryPoint":4729,"id":1964,"parameterSlots":8,"returnSlots":0},"@safeTransferFrom_1780":{"entryPoint":5190,"id":1780,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1754":{"entryPoint":6192,"id":1754,"parameterSlots":3,"returnSlots":0},"@supportsInterface_3127":{"entryPoint":4291,"id":3127,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":922,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_2557":{"entryPoint":7082,"id":2557,"parameterSlots":2,"returnSlots":1},"@toHexString_2577":{"entryPoint":7037,"id":2577,"parameterSlots":1,"returnSlots":1},"@unpause_4342":{"entryPoint":2442,"id":4342,"parameterSlots":0,"returnSlots":0},"@updateBaseSalePrice_4310":{"entryPoint":4138,"id":4310,"parameterSlots":1,"returnSlots":0},"@updateMinimumWithdrawalPeriod_4324":{"entryPoint":1044,"id":4324,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_2242":{"entryPoint":7883,"id":2242,"parameterSlots":4,"returnSlots":1},"@withdrawStakedToken_4579":{"entryPoint":2927,"id":4579,"parameterSlots":0,"returnSlots":0},"abi_decode_t_address":{"entryPoint":8705,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":9565,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":8524,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":8152,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":8305,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":9673,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":8826,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8970,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":9586,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":8545,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":8726,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8173,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":8326,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":9694,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":8371,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":8847,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9631,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":8230,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":8590,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11953,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":10231,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11089,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10889,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":11718,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":11367,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":11864,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":11475,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":10110,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":9138,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":12066,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack":{"entryPoint":10586,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":9964,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10801,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":11259,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":10314,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10979,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":9818,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":8435,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":10381,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12002,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11014,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9646,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":10653,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":10396,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":10708,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":8245,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":8605,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":10246,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11146,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11753,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11402,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11899,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11510,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10145,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9173,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12101,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10621,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9999,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11294,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10349,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9853,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9015,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":8450,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11931,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":10836,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11942,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9042,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10749,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9394,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":9493,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9252,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9342,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":8664,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":8218,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":8491,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":8085,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":10177,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":8632,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":8272,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":8790,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":10197,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":10847,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":11636,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":10187,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":9205,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":9446,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11589,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":11542,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8080,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":11072,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":11677,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":11326,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":11785,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":11434,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":10031,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":9059,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":12025,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d":{"entryPoint":10507,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":9885,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":10760,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":11180,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":10273,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":10938,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":9739,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8682,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":9542,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":8501,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8129,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8282,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":8803,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:29917:30","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:30","statements":[{"nodeType":"YulAssignment","src":"57:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:30"},"nodeType":"YulFunctionCall","src":"67:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:30"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:30","type":""}],"src":"7:75:30"},{"body":{"nodeType":"YulBlock","src":"177:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:30"},"nodeType":"YulFunctionCall","src":"187:12:30"},"nodeType":"YulExpressionStatement","src":"187:12:30"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:30"},{"body":{"nodeType":"YulBlock","src":"300:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:30"},"nodeType":"YulFunctionCall","src":"310:12:30"},"nodeType":"YulExpressionStatement","src":"310:12:30"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:30"},{"body":{"nodeType":"YulBlock","src":"378:105:30","statements":[{"nodeType":"YulAssignment","src":"388:89:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:30"},"nodeType":"YulFunctionCall","src":"399:78:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:30"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:30","type":""}],"src":"334:149:30"},{"body":{"nodeType":"YulBlock","src":"531:78:30","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:30"},"nodeType":"YulFunctionCall","src":"589:12:30"},"nodeType":"YulExpressionStatement","src":"589:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:30"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:30"},"nodeType":"YulFunctionCall","src":"561:23:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:30"},"nodeType":"YulFunctionCall","src":"551:34:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:30"},"nodeType":"YulFunctionCall","src":"544:42:30"},"nodeType":"YulIf","src":"541:62:30"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:30","type":""}],"src":"489:120:30"},{"body":{"nodeType":"YulBlock","src":"666:86:30","statements":[{"nodeType":"YulAssignment","src":"676:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:30"},"nodeType":"YulFunctionCall","src":"685:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:30"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:30"},"nodeType":"YulFunctionCall","src":"714:32:30"},"nodeType":"YulExpressionStatement","src":"714:32:30"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:30","type":""}],"src":"615:137:30"},{"body":{"nodeType":"YulBlock","src":"823:262:30","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:30"},"nodeType":"YulFunctionCall","src":"871:79:30"},"nodeType":"YulExpressionStatement","src":"871:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:30"},"nodeType":"YulFunctionCall","src":"840:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:30"},"nodeType":"YulFunctionCall","src":"836:32:30"},"nodeType":"YulIf","src":"833:119:30"},{"nodeType":"YulBlock","src":"962:116:30","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:30"},"nodeType":"YulFunctionCall","src":"1036:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:30"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:30"},"nodeType":"YulFunctionCall","src":"1016:52:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:30","type":""}],"src":"758:327:30"},{"body":{"nodeType":"YulBlock","src":"1133:48:30","statements":[{"nodeType":"YulAssignment","src":"1143:32:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:30"},"nodeType":"YulFunctionCall","src":"1161:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:30"},"nodeType":"YulFunctionCall","src":"1154:21:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:30"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:30","type":""}],"src":"1091:90:30"},{"body":{"nodeType":"YulBlock","src":"1246:50:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:30"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:30"},"nodeType":"YulFunctionCall","src":"1268:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:30"},"nodeType":"YulFunctionCall","src":"1256:34:30"},"nodeType":"YulExpressionStatement","src":"1256:34:30"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:30","type":""}],"src":"1187:109:30"},{"body":{"nodeType":"YulBlock","src":"1394:118:30","statements":[{"nodeType":"YulAssignment","src":"1404:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:30"},"nodeType":"YulFunctionCall","src":"1412:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:30"},"nodeType":"YulFunctionCall","src":"1487:17:30"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:30"},"nodeType":"YulFunctionCall","src":"1440:65:30"},"nodeType":"YulExpressionStatement","src":"1440:65:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:30","type":""}],"src":"1302:210:30"},{"body":{"nodeType":"YulBlock","src":"1563:32:30","statements":[{"nodeType":"YulAssignment","src":"1573:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:30"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:30","type":""}],"src":"1518:77:30"},{"body":{"nodeType":"YulBlock","src":"1644:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:30"},"nodeType":"YulFunctionCall","src":"1703:12:30"},"nodeType":"YulExpressionStatement","src":"1703:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1674:17:30"},"nodeType":"YulFunctionCall","src":"1674:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:30"},"nodeType":"YulFunctionCall","src":"1664:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:30"},"nodeType":"YulFunctionCall","src":"1657:43:30"},"nodeType":"YulIf","src":"1654:63:30"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:30","type":""}],"src":"1601:122:30"},{"body":{"nodeType":"YulBlock","src":"1781:87:30","statements":[{"nodeType":"YulAssignment","src":"1791:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:30"},"nodeType":"YulFunctionCall","src":"1800:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:30"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1829:26:30"},"nodeType":"YulFunctionCall","src":"1829:33:30"},"nodeType":"YulExpressionStatement","src":"1829:33:30"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:30","type":""}],"src":"1729:139:30"},{"body":{"nodeType":"YulBlock","src":"1940:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:30"},"nodeType":"YulFunctionCall","src":"1988:79:30"},"nodeType":"YulExpressionStatement","src":"1988:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:30"},"nodeType":"YulFunctionCall","src":"1957:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:30"},"nodeType":"YulFunctionCall","src":"1953:32:30"},"nodeType":"YulIf","src":"1950:119:30"},{"nodeType":"YulBlock","src":"2079:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:30"},"nodeType":"YulFunctionCall","src":"2154:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2133:20:30"},"nodeType":"YulFunctionCall","src":"2133:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:30"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:30","type":""}],"src":"1874:329:30"},{"body":{"nodeType":"YulBlock","src":"2292:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"2338:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2340:77:30"},"nodeType":"YulFunctionCall","src":"2340:79:30"},"nodeType":"YulExpressionStatement","src":"2340:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2313:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2322:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2309:3:30"},"nodeType":"YulFunctionCall","src":"2309:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2334:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2305:3:30"},"nodeType":"YulFunctionCall","src":"2305:32:30"},"nodeType":"YulIf","src":"2302:119:30"},{"nodeType":"YulBlock","src":"2431:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2446:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2460:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2450:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2475:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2510:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2521:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2506:3:30"},"nodeType":"YulFunctionCall","src":"2506:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2530:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2485:20:30"},"nodeType":"YulFunctionCall","src":"2485:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2475:6:30"}]}]},{"nodeType":"YulBlock","src":"2558:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2573:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2587:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2577:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2603:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2638:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2649:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:30"},"nodeType":"YulFunctionCall","src":"2634:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2658:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2613:20:30"},"nodeType":"YulFunctionCall","src":"2613:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2603:6:30"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2254:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2265:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2277:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2285:6:30","type":""}],"src":"2209:474:30"},{"body":{"nodeType":"YulBlock","src":"2754:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2771:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2794:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2776:17:30"},"nodeType":"YulFunctionCall","src":"2776:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2764:6:30"},"nodeType":"YulFunctionCall","src":"2764:37:30"},"nodeType":"YulExpressionStatement","src":"2764:37:30"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2742:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2749:3:30","type":""}],"src":"2689:118:30"},{"body":{"nodeType":"YulBlock","src":"2939:206:30","statements":[{"nodeType":"YulAssignment","src":"2949:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2961:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2972:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2957:3:30"},"nodeType":"YulFunctionCall","src":"2957:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2949:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3029:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3042:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3053:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3038:3:30"},"nodeType":"YulFunctionCall","src":"3038:17:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2985:43:30"},"nodeType":"YulFunctionCall","src":"2985:71:30"},"nodeType":"YulExpressionStatement","src":"2985:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3110:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3123:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3134:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3119:3:30"},"nodeType":"YulFunctionCall","src":"3119:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3066:43:30"},"nodeType":"YulFunctionCall","src":"3066:72:30"},"nodeType":"YulExpressionStatement","src":"3066:72:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2903:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2915:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2923:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2934:4:30","type":""}],"src":"2813:332:30"},{"body":{"nodeType":"YulBlock","src":"3196:32:30","statements":[{"nodeType":"YulAssignment","src":"3206:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"3217:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3206:7:30"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3178:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3188:7:30","type":""}],"src":"3151:77:30"},{"body":{"nodeType":"YulBlock","src":"3277:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"3334:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3343:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3346:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3336:6:30"},"nodeType":"YulFunctionCall","src":"3336:12:30"},"nodeType":"YulExpressionStatement","src":"3336:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3300:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3325:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3307:17:30"},"nodeType":"YulFunctionCall","src":"3307:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3297:2:30"},"nodeType":"YulFunctionCall","src":"3297:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3290:6:30"},"nodeType":"YulFunctionCall","src":"3290:43:30"},"nodeType":"YulIf","src":"3287:63:30"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3270:5:30","type":""}],"src":"3234:122:30"},{"body":{"nodeType":"YulBlock","src":"3414:87:30","statements":[{"nodeType":"YulAssignment","src":"3424:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3446:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3433:12:30"},"nodeType":"YulFunctionCall","src":"3433:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3424:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3489:5:30"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"3462:26:30"},"nodeType":"YulFunctionCall","src":"3462:33:30"},"nodeType":"YulExpressionStatement","src":"3462:33:30"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3392:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3400:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3408:5:30","type":""}],"src":"3362:139:30"},{"body":{"nodeType":"YulBlock","src":"3573:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"3619:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3621:77:30"},"nodeType":"YulFunctionCall","src":"3621:79:30"},"nodeType":"YulExpressionStatement","src":"3621:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3594:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3603:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3590:3:30"},"nodeType":"YulFunctionCall","src":"3590:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3615:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3586:3:30"},"nodeType":"YulFunctionCall","src":"3586:32:30"},"nodeType":"YulIf","src":"3583:119:30"},{"nodeType":"YulBlock","src":"3712:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3727:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3741:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3731:6:30","type":""}]},{"nodeType":"YulAssignment","src":"3756:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3791:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"3802:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3787:3:30"},"nodeType":"YulFunctionCall","src":"3787:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3811:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3766:20:30"},"nodeType":"YulFunctionCall","src":"3766:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3756:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3543:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3554:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3566:6:30","type":""}],"src":"3507:329:30"},{"body":{"nodeType":"YulBlock","src":"3907:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3924:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3947:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3929:17:30"},"nodeType":"YulFunctionCall","src":"3929:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3917:6:30"},"nodeType":"YulFunctionCall","src":"3917:37:30"},"nodeType":"YulExpressionStatement","src":"3917:37:30"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3895:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3902:3:30","type":""}],"src":"3842:118:30"},{"body":{"nodeType":"YulBlock","src":"4064:124:30","statements":[{"nodeType":"YulAssignment","src":"4074:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4086:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4097:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4082:3:30"},"nodeType":"YulFunctionCall","src":"4082:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4074:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4154:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4167:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4178:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4163:3:30"},"nodeType":"YulFunctionCall","src":"4163:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"4110:43:30"},"nodeType":"YulFunctionCall","src":"4110:71:30"},"nodeType":"YulExpressionStatement","src":"4110:71:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4036:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4048:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4059:4:30","type":""}],"src":"3966:222:30"},{"body":{"nodeType":"YulBlock","src":"4239:81:30","statements":[{"nodeType":"YulAssignment","src":"4249:65:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4264:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"4271:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4260:3:30"},"nodeType":"YulFunctionCall","src":"4260:54:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4249:7:30"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4231:7:30","type":""}],"src":"4194:126:30"},{"body":{"nodeType":"YulBlock","src":"4371:51:30","statements":[{"nodeType":"YulAssignment","src":"4381:35:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4410:5:30"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4392:17:30"},"nodeType":"YulFunctionCall","src":"4392:24:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4381:7:30"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4353:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4363:7:30","type":""}],"src":"4326:96:30"},{"body":{"nodeType":"YulBlock","src":"4471:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"4528:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4537:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4540:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4530:6:30"},"nodeType":"YulFunctionCall","src":"4530:12:30"},"nodeType":"YulExpressionStatement","src":"4530:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4494:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4519:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4501:17:30"},"nodeType":"YulFunctionCall","src":"4501:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4491:2:30"},"nodeType":"YulFunctionCall","src":"4491:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4484:6:30"},"nodeType":"YulFunctionCall","src":"4484:43:30"},"nodeType":"YulIf","src":"4481:63:30"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4464:5:30","type":""}],"src":"4428:122:30"},{"body":{"nodeType":"YulBlock","src":"4608:87:30","statements":[{"nodeType":"YulAssignment","src":"4618:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4640:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4627:12:30"},"nodeType":"YulFunctionCall","src":"4627:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4618:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4683:5:30"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4656:26:30"},"nodeType":"YulFunctionCall","src":"4656:33:30"},"nodeType":"YulExpressionStatement","src":"4656:33:30"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4586:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"4594:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4602:5:30","type":""}],"src":"4556:139:30"},{"body":{"nodeType":"YulBlock","src":"4784:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"4830:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4832:77:30"},"nodeType":"YulFunctionCall","src":"4832:79:30"},"nodeType":"YulExpressionStatement","src":"4832:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4805:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4814:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4801:3:30"},"nodeType":"YulFunctionCall","src":"4801:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4826:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4797:3:30"},"nodeType":"YulFunctionCall","src":"4797:32:30"},"nodeType":"YulIf","src":"4794:119:30"},{"nodeType":"YulBlock","src":"4923:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4938:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4952:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4942:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4967:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5002:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5013:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4998:3:30"},"nodeType":"YulFunctionCall","src":"4998:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5022:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4977:20:30"},"nodeType":"YulFunctionCall","src":"4977:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4967:6:30"}]}]},{"nodeType":"YulBlock","src":"5050:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5065:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5079:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5069:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5095:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5130:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5141:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5126:3:30"},"nodeType":"YulFunctionCall","src":"5126:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5150:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5105:20:30"},"nodeType":"YulFunctionCall","src":"5105:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5095:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4746:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4757:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4769:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4777:6:30","type":""}],"src":"4701:474:30"},{"body":{"nodeType":"YulBlock","src":"5224:43:30","statements":[{"nodeType":"YulAssignment","src":"5234:27:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5249:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5256:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5245:3:30"},"nodeType":"YulFunctionCall","src":"5245:16:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5234:7:30"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5206:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5216:7:30","type":""}],"src":"5181:86:30"},{"body":{"nodeType":"YulBlock","src":"5314:77:30","statements":[{"body":{"nodeType":"YulBlock","src":"5369:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5378:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5381:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5371:6:30"},"nodeType":"YulFunctionCall","src":"5371:12:30"},"nodeType":"YulExpressionStatement","src":"5371:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5337:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5360:5:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"5344:15:30"},"nodeType":"YulFunctionCall","src":"5344:22:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5334:2:30"},"nodeType":"YulFunctionCall","src":"5334:33:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5327:6:30"},"nodeType":"YulFunctionCall","src":"5327:41:30"},"nodeType":"YulIf","src":"5324:61:30"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5307:5:30","type":""}],"src":"5273:118:30"},{"body":{"nodeType":"YulBlock","src":"5447:85:30","statements":[{"nodeType":"YulAssignment","src":"5457:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5479:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5466:12:30"},"nodeType":"YulFunctionCall","src":"5466:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5457:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5520:5:30"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"5495:24:30"},"nodeType":"YulFunctionCall","src":"5495:31:30"},"nodeType":"YulExpressionStatement","src":"5495:31:30"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5425:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"5433:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5441:5:30","type":""}],"src":"5397:135:30"},{"body":{"nodeType":"YulBlock","src":"5670:775:30","statements":[{"body":{"nodeType":"YulBlock","src":"5717:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5719:77:30"},"nodeType":"YulFunctionCall","src":"5719:79:30"},"nodeType":"YulExpressionStatement","src":"5719:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5691:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5700:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5687:3:30"},"nodeType":"YulFunctionCall","src":"5687:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5712:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5683:3:30"},"nodeType":"YulFunctionCall","src":"5683:33:30"},"nodeType":"YulIf","src":"5680:120:30"},{"nodeType":"YulBlock","src":"5810:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5825:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5839:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5829:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5854:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5889:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5900:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5885:3:30"},"nodeType":"YulFunctionCall","src":"5885:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5909:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5864:20:30"},"nodeType":"YulFunctionCall","src":"5864:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5854:6:30"}]}]},{"nodeType":"YulBlock","src":"5937:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5952:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5966:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5956:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5982:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6017:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6028:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6013:3:30"},"nodeType":"YulFunctionCall","src":"6013:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6037:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5992:20:30"},"nodeType":"YulFunctionCall","src":"5992:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5982:6:30"}]}]},{"nodeType":"YulBlock","src":"6065:116:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6080:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6094:2:30","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6084:6:30","type":""}]},{"nodeType":"YulAssignment","src":"6110:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6143:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6154:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6139:3:30"},"nodeType":"YulFunctionCall","src":"6139:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6163:7:30"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"6120:18:30"},"nodeType":"YulFunctionCall","src":"6120:51:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6110:6:30"}]}]},{"nodeType":"YulBlock","src":"6191:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6206:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6220:2:30","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6210:6:30","type":""}]},{"nodeType":"YulAssignment","src":"6236:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6271:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6282:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6267:3:30"},"nodeType":"YulFunctionCall","src":"6267:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6291:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6246:20:30"},"nodeType":"YulFunctionCall","src":"6246:53:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6236:6:30"}]}]},{"nodeType":"YulBlock","src":"6319:119:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6334:17:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6348:3:30","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6338:6:30","type":""}]},{"nodeType":"YulAssignment","src":"6365:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6400:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6411:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6396:3:30"},"nodeType":"YulFunctionCall","src":"6396:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6420:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6375:20:30"},"nodeType":"YulFunctionCall","src":"6375:53:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6365:6:30"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5608:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5619:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5631:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5639:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5647:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5655:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5663:6:30","type":""}],"src":"5538:907:30"},{"body":{"nodeType":"YulBlock","src":"6517:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"6563:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6565:77:30"},"nodeType":"YulFunctionCall","src":"6565:79:30"},"nodeType":"YulExpressionStatement","src":"6565:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6538:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6547:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6534:3:30"},"nodeType":"YulFunctionCall","src":"6534:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6559:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6530:3:30"},"nodeType":"YulFunctionCall","src":"6530:32:30"},"nodeType":"YulIf","src":"6527:119:30"},{"nodeType":"YulBlock","src":"6656:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6671:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6685:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6675:6:30","type":""}]},{"nodeType":"YulAssignment","src":"6700:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6735:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6746:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:30"},"nodeType":"YulFunctionCall","src":"6731:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6755:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6710:20:30"},"nodeType":"YulFunctionCall","src":"6710:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6700:6:30"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6487:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6498:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6510:6:30","type":""}],"src":"6451:329:30"},{"body":{"nodeType":"YulBlock","src":"6884:124:30","statements":[{"nodeType":"YulAssignment","src":"6894:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6906:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6917:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6902:3:30"},"nodeType":"YulFunctionCall","src":"6902:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6894:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6974:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6987:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6998:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6983:3:30"},"nodeType":"YulFunctionCall","src":"6983:17:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6930:43:30"},"nodeType":"YulFunctionCall","src":"6930:71:30"},"nodeType":"YulExpressionStatement","src":"6930:71:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6856:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6868:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6879:4:30","type":""}],"src":"6786:222:30"},{"body":{"nodeType":"YulBlock","src":"7110:73:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7127:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"7132:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7120:6:30"},"nodeType":"YulFunctionCall","src":"7120:19:30"},"nodeType":"YulExpressionStatement","src":"7120:19:30"},{"nodeType":"YulAssignment","src":"7148:29:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7167:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"7172:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7163:3:30"},"nodeType":"YulFunctionCall","src":"7163:14:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7148:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7082:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"7087:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7098:11:30","type":""}],"src":"7014:169:30"},{"body":{"nodeType":"YulBlock","src":"7295:125:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7317:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7325:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7313:3:30"},"nodeType":"YulFunctionCall","src":"7313:14:30"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"7329:34:30","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7306:6:30"},"nodeType":"YulFunctionCall","src":"7306:58:30"},"nodeType":"YulExpressionStatement","src":"7306:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7385:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"7393:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7381:3:30"},"nodeType":"YulFunctionCall","src":"7381:15:30"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"7398:14:30","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7374:6:30"},"nodeType":"YulFunctionCall","src":"7374:39:30"},"nodeType":"YulExpressionStatement","src":"7374:39:30"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7287:6:30","type":""}],"src":"7189:231:30"},{"body":{"nodeType":"YulBlock","src":"7572:220:30","statements":[{"nodeType":"YulAssignment","src":"7582:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7648:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"7653:2:30","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7589:58:30"},"nodeType":"YulFunctionCall","src":"7589:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7582:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7754:3:30"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"7665:88:30"},"nodeType":"YulFunctionCall","src":"7665:93:30"},"nodeType":"YulExpressionStatement","src":"7665:93:30"},{"nodeType":"YulAssignment","src":"7767:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7778:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"7783:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7774:3:30"},"nodeType":"YulFunctionCall","src":"7774:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7767:3:30"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7560:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7568:3:30","type":""}],"src":"7426:366:30"},{"body":{"nodeType":"YulBlock","src":"7969:248:30","statements":[{"nodeType":"YulAssignment","src":"7979:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7991:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8002:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7987:3:30"},"nodeType":"YulFunctionCall","src":"7987:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7979:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8026:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8037:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8022:3:30"},"nodeType":"YulFunctionCall","src":"8022:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8045:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"8051:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8041:3:30"},"nodeType":"YulFunctionCall","src":"8041:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8015:6:30"},"nodeType":"YulFunctionCall","src":"8015:47:30"},"nodeType":"YulExpressionStatement","src":"8015:47:30"},{"nodeType":"YulAssignment","src":"8071:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8205:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8079:124:30"},"nodeType":"YulFunctionCall","src":"8079:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8071:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7949:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7964:4:30","type":""}],"src":"7798:419:30"},{"body":{"nodeType":"YulBlock","src":"8251:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8268:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8271:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8261:6:30"},"nodeType":"YulFunctionCall","src":"8261:88:30"},"nodeType":"YulExpressionStatement","src":"8261:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8365:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8368:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8358:6:30"},"nodeType":"YulFunctionCall","src":"8358:15:30"},"nodeType":"YulExpressionStatement","src":"8358:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8389:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8392:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8382:6:30"},"nodeType":"YulFunctionCall","src":"8382:15:30"},"nodeType":"YulExpressionStatement","src":"8382:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"8223:180:30"},{"body":{"nodeType":"YulBlock","src":"8457:300:30","statements":[{"nodeType":"YulAssignment","src":"8467:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8490:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8472:17:30"},"nodeType":"YulFunctionCall","src":"8472:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8467:1:30"}]},{"nodeType":"YulAssignment","src":"8501:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8524:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8506:17:30"},"nodeType":"YulFunctionCall","src":"8506:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8501:1:30"}]},{"body":{"nodeType":"YulBlock","src":"8699:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8701:16:30"},"nodeType":"YulFunctionCall","src":"8701:18:30"},"nodeType":"YulExpressionStatement","src":"8701:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8611:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8604:6:30"},"nodeType":"YulFunctionCall","src":"8604:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8597:6:30"},"nodeType":"YulFunctionCall","src":"8597:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8619:1:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8626:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"8694:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8622:3:30"},"nodeType":"YulFunctionCall","src":"8622:74:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8616:2:30"},"nodeType":"YulFunctionCall","src":"8616:81:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8593:3:30"},"nodeType":"YulFunctionCall","src":"8593:105:30"},"nodeType":"YulIf","src":"8590:131:30"},{"nodeType":"YulAssignment","src":"8731:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8746:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"8749:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8742:3:30"},"nodeType":"YulFunctionCall","src":"8742:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"8731:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8440:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"8443:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"8449:7:30","type":""}],"src":"8409:348:30"},{"body":{"nodeType":"YulBlock","src":"8808:149:30","statements":[{"nodeType":"YulAssignment","src":"8818:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8841:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8823:17:30"},"nodeType":"YulFunctionCall","src":"8823:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8818:1:30"}]},{"nodeType":"YulAssignment","src":"8852:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8875:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8857:17:30"},"nodeType":"YulFunctionCall","src":"8857:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8852:1:30"}]},{"nodeType":"YulAssignment","src":"8886:17:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8898:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"8901:1:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8894:3:30"},"nodeType":"YulFunctionCall","src":"8894:9:30"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"8886:4:30"}]},{"body":{"nodeType":"YulBlock","src":"8928:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8930:16:30"},"nodeType":"YulFunctionCall","src":"8930:18:30"},"nodeType":"YulExpressionStatement","src":"8930:18:30"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"8919:4:30"},{"name":"x","nodeType":"YulIdentifier","src":"8925:1:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8916:2:30"},"nodeType":"YulFunctionCall","src":"8916:11:30"},"nodeType":"YulIf","src":"8913:37:30"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8794:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"8797:1:30","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"8803:4:30","type":""}],"src":"8763:194:30"},{"body":{"nodeType":"YulBlock","src":"9007:147:30","statements":[{"nodeType":"YulAssignment","src":"9017:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9040:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9022:17:30"},"nodeType":"YulFunctionCall","src":"9022:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9017:1:30"}]},{"nodeType":"YulAssignment","src":"9051:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9074:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9056:17:30"},"nodeType":"YulFunctionCall","src":"9056:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9051:1:30"}]},{"nodeType":"YulAssignment","src":"9085:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9096:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"9099:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9092:3:30"},"nodeType":"YulFunctionCall","src":"9092:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9085:3:30"}]},{"body":{"nodeType":"YulBlock","src":"9125:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9127:16:30"},"nodeType":"YulFunctionCall","src":"9127:18:30"},"nodeType":"YulExpressionStatement","src":"9127:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9117:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"9120:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9114:2:30"},"nodeType":"YulFunctionCall","src":"9114:10:30"},"nodeType":"YulIf","src":"9111:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8994:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"8997:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9003:3:30","type":""}],"src":"8963:191:30"},{"body":{"nodeType":"YulBlock","src":"9188:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9205:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9208:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9198:6:30"},"nodeType":"YulFunctionCall","src":"9198:88:30"},"nodeType":"YulExpressionStatement","src":"9198:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9302:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9305:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9295:6:30"},"nodeType":"YulFunctionCall","src":"9295:15:30"},"nodeType":"YulExpressionStatement","src":"9295:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9326:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9329:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9319:6:30"},"nodeType":"YulFunctionCall","src":"9319:15:30"},"nodeType":"YulExpressionStatement","src":"9319:15:30"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9160:180:30"},{"body":{"nodeType":"YulBlock","src":"9388:143:30","statements":[{"nodeType":"YulAssignment","src":"9398:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9421:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9403:17:30"},"nodeType":"YulFunctionCall","src":"9403:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9398:1:30"}]},{"nodeType":"YulAssignment","src":"9432:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9455:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9437:17:30"},"nodeType":"YulFunctionCall","src":"9437:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9432:1:30"}]},{"body":{"nodeType":"YulBlock","src":"9479:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"9481:16:30"},"nodeType":"YulFunctionCall","src":"9481:18:30"},"nodeType":"YulExpressionStatement","src":"9481:18:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9476:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9469:6:30"},"nodeType":"YulFunctionCall","src":"9469:9:30"},"nodeType":"YulIf","src":"9466:35:30"},{"nodeType":"YulAssignment","src":"9511:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9520:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"9523:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9516:3:30"},"nodeType":"YulFunctionCall","src":"9516:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"9511:1:30"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9377:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"9380:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"9386:1:30","type":""}],"src":"9346:185:30"},{"body":{"nodeType":"YulBlock","src":"9577:76:30","statements":[{"body":{"nodeType":"YulBlock","src":"9631:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9640:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9643:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9633:6:30"},"nodeType":"YulFunctionCall","src":"9633:12:30"},"nodeType":"YulExpressionStatement","src":"9633:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9600:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9622:5:30"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9607:14:30"},"nodeType":"YulFunctionCall","src":"9607:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9597:2:30"},"nodeType":"YulFunctionCall","src":"9597:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9590:6:30"},"nodeType":"YulFunctionCall","src":"9590:40:30"},"nodeType":"YulIf","src":"9587:60:30"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9570:5:30","type":""}],"src":"9537:116:30"},{"body":{"nodeType":"YulBlock","src":"9719:77:30","statements":[{"nodeType":"YulAssignment","src":"9729:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9744:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9738:5:30"},"nodeType":"YulFunctionCall","src":"9738:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9729:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9784:5:30"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"9760:23:30"},"nodeType":"YulFunctionCall","src":"9760:30:30"},"nodeType":"YulExpressionStatement","src":"9760:30:30"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9697:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"9705:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9713:5:30","type":""}],"src":"9659:137:30"},{"body":{"nodeType":"YulBlock","src":"9876:271:30","statements":[{"body":{"nodeType":"YulBlock","src":"9922:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9924:77:30"},"nodeType":"YulFunctionCall","src":"9924:79:30"},"nodeType":"YulExpressionStatement","src":"9924:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9897:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9906:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9893:3:30"},"nodeType":"YulFunctionCall","src":"9893:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"9918:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9889:3:30"},"nodeType":"YulFunctionCall","src":"9889:32:30"},"nodeType":"YulIf","src":"9886:119:30"},{"nodeType":"YulBlock","src":"10015:125:30","statements":[{"nodeType":"YulVariableDeclaration","src":"10030:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10044:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10034:6:30","type":""}]},{"nodeType":"YulAssignment","src":"10059:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10102:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"10113:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10098:3:30"},"nodeType":"YulFunctionCall","src":"10098:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10122:7:30"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"10069:28:30"},"nodeType":"YulFunctionCall","src":"10069:61:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10059:6:30"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9846:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9857:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9869:6:30","type":""}],"src":"9802:345:30"},{"body":{"nodeType":"YulBlock","src":"10218:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10235:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10258:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"10240:17:30"},"nodeType":"YulFunctionCall","src":"10240:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10228:6:30"},"nodeType":"YulFunctionCall","src":"10228:37:30"},"nodeType":"YulExpressionStatement","src":"10228:37:30"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10206:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10213:3:30","type":""}],"src":"10153:118:30"},{"body":{"nodeType":"YulBlock","src":"10375:124:30","statements":[{"nodeType":"YulAssignment","src":"10385:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10397:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10408:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10393:3:30"},"nodeType":"YulFunctionCall","src":"10393:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10385:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10465:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10478:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10489:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10474:3:30"},"nodeType":"YulFunctionCall","src":"10474:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10421:43:30"},"nodeType":"YulFunctionCall","src":"10421:71:30"},"nodeType":"YulExpressionStatement","src":"10421:71:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10347:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10359:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10370:4:30","type":""}],"src":"10277:222:30"},{"body":{"nodeType":"YulBlock","src":"10568:80:30","statements":[{"nodeType":"YulAssignment","src":"10578:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10593:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10587:5:30"},"nodeType":"YulFunctionCall","src":"10587:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10578:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10636:5:30"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"10609:26:30"},"nodeType":"YulFunctionCall","src":"10609:33:30"},"nodeType":"YulExpressionStatement","src":"10609:33:30"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10546:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"10554:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10562:5:30","type":""}],"src":"10505:143:30"},{"body":{"nodeType":"YulBlock","src":"10731:274:30","statements":[{"body":{"nodeType":"YulBlock","src":"10777:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10779:77:30"},"nodeType":"YulFunctionCall","src":"10779:79:30"},"nodeType":"YulExpressionStatement","src":"10779:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10752:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10761:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10748:3:30"},"nodeType":"YulFunctionCall","src":"10748:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"10773:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10744:3:30"},"nodeType":"YulFunctionCall","src":"10744:32:30"},"nodeType":"YulIf","src":"10741:119:30"},{"nodeType":"YulBlock","src":"10870:128:30","statements":[{"nodeType":"YulVariableDeclaration","src":"10885:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"10899:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10889:6:30","type":""}]},{"nodeType":"YulAssignment","src":"10914:74:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10960:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"10971:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10956:3:30"},"nodeType":"YulFunctionCall","src":"10956:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10980:7:30"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"10924:31:30"},"nodeType":"YulFunctionCall","src":"10924:64:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10914:6:30"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10701:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10712:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10724:6:30","type":""}],"src":"10654:351:30"},{"body":{"nodeType":"YulBlock","src":"11117:128:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11139:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11147:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11135:3:30"},"nodeType":"YulFunctionCall","src":"11135:14:30"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"11151:34:30","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11128:6:30"},"nodeType":"YulFunctionCall","src":"11128:58:30"},"nodeType":"YulExpressionStatement","src":"11128:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11207:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11215:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11203:3:30"},"nodeType":"YulFunctionCall","src":"11203:15:30"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"11220:17:30","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11196:6:30"},"nodeType":"YulFunctionCall","src":"11196:42:30"},"nodeType":"YulExpressionStatement","src":"11196:42:30"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11109:6:30","type":""}],"src":"11011:234:30"},{"body":{"nodeType":"YulBlock","src":"11397:220:30","statements":[{"nodeType":"YulAssignment","src":"11407:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11473:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11478:2:30","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11414:58:30"},"nodeType":"YulFunctionCall","src":"11414:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11407:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11579:3:30"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"11490:88:30"},"nodeType":"YulFunctionCall","src":"11490:93:30"},"nodeType":"YulExpressionStatement","src":"11490:93:30"},{"nodeType":"YulAssignment","src":"11592:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11603:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11608:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11599:3:30"},"nodeType":"YulFunctionCall","src":"11599:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11592:3:30"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11385:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11393:3:30","type":""}],"src":"11251:366:30"},{"body":{"nodeType":"YulBlock","src":"11794:248:30","statements":[{"nodeType":"YulAssignment","src":"11804:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11816:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11827:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11812:3:30"},"nodeType":"YulFunctionCall","src":"11812:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11804:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11851:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11862:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11847:3:30"},"nodeType":"YulFunctionCall","src":"11847:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11870:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"11876:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11866:3:30"},"nodeType":"YulFunctionCall","src":"11866:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11840:6:30"},"nodeType":"YulFunctionCall","src":"11840:47:30"},"nodeType":"YulExpressionStatement","src":"11840:47:30"},{"nodeType":"YulAssignment","src":"11896:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12030:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11904:124:30"},"nodeType":"YulFunctionCall","src":"11904:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11896:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11774:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11789:4:30","type":""}],"src":"11623:419:30"},{"body":{"nodeType":"YulBlock","src":"12154:124:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12176:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12184:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12172:3:30"},"nodeType":"YulFunctionCall","src":"12172:14:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"12188:34:30","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12165:6:30"},"nodeType":"YulFunctionCall","src":"12165:58:30"},"nodeType":"YulExpressionStatement","src":"12165:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12244:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12252:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12240:3:30"},"nodeType":"YulFunctionCall","src":"12240:15:30"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"12257:13:30","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12233:6:30"},"nodeType":"YulFunctionCall","src":"12233:38:30"},"nodeType":"YulExpressionStatement","src":"12233:38:30"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12146:6:30","type":""}],"src":"12048:230:30"},{"body":{"nodeType":"YulBlock","src":"12430:220:30","statements":[{"nodeType":"YulAssignment","src":"12440:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12506:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"12511:2:30","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12447:58:30"},"nodeType":"YulFunctionCall","src":"12447:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12440:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12612:3:30"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"12523:88:30"},"nodeType":"YulFunctionCall","src":"12523:93:30"},"nodeType":"YulExpressionStatement","src":"12523:93:30"},{"nodeType":"YulAssignment","src":"12625:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12636:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"12641:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12632:3:30"},"nodeType":"YulFunctionCall","src":"12632:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12625:3:30"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12418:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12426:3:30","type":""}],"src":"12284:366:30"},{"body":{"nodeType":"YulBlock","src":"12827:248:30","statements":[{"nodeType":"YulAssignment","src":"12837:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12849:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12860:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12845:3:30"},"nodeType":"YulFunctionCall","src":"12845:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12837:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12884:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12895:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12880:3:30"},"nodeType":"YulFunctionCall","src":"12880:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12903:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"12909:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12899:3:30"},"nodeType":"YulFunctionCall","src":"12899:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12873:6:30"},"nodeType":"YulFunctionCall","src":"12873:47:30"},"nodeType":"YulExpressionStatement","src":"12873:47:30"},{"nodeType":"YulAssignment","src":"12929:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13063:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12937:124:30"},"nodeType":"YulFunctionCall","src":"12937:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12929:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12807:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12822:4:30","type":""}],"src":"12656:419:30"},{"body":{"nodeType":"YulBlock","src":"13187:127:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13209:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13217:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13205:3:30"},"nodeType":"YulFunctionCall","src":"13205:14:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"13221:34:30","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13198:6:30"},"nodeType":"YulFunctionCall","src":"13198:58:30"},"nodeType":"YulExpressionStatement","src":"13198:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13277:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13285:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13273:3:30"},"nodeType":"YulFunctionCall","src":"13273:15:30"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"13290:16:30","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13266:6:30"},"nodeType":"YulFunctionCall","src":"13266:41:30"},"nodeType":"YulExpressionStatement","src":"13266:41:30"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13179:6:30","type":""}],"src":"13081:233:30"},{"body":{"nodeType":"YulBlock","src":"13466:220:30","statements":[{"nodeType":"YulAssignment","src":"13476:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13542:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"13547:2:30","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13483:58:30"},"nodeType":"YulFunctionCall","src":"13483:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13476:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13648:3:30"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"13559:88:30"},"nodeType":"YulFunctionCall","src":"13559:93:30"},"nodeType":"YulExpressionStatement","src":"13559:93:30"},{"nodeType":"YulAssignment","src":"13661:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13672:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"13677:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13668:3:30"},"nodeType":"YulFunctionCall","src":"13668:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13661:3:30"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13454:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13462:3:30","type":""}],"src":"13320:366:30"},{"body":{"nodeType":"YulBlock","src":"13863:248:30","statements":[{"nodeType":"YulAssignment","src":"13873:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13885:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13896:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13881:3:30"},"nodeType":"YulFunctionCall","src":"13881:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13873:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13920:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13931:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13916:3:30"},"nodeType":"YulFunctionCall","src":"13916:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13939:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"13945:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13935:3:30"},"nodeType":"YulFunctionCall","src":"13935:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13909:6:30"},"nodeType":"YulFunctionCall","src":"13909:47:30"},"nodeType":"YulExpressionStatement","src":"13909:47:30"},{"nodeType":"YulAssignment","src":"13965:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14099:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13973:124:30"},"nodeType":"YulFunctionCall","src":"13973:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13965:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13843:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13858:4:30","type":""}],"src":"13692:419:30"},{"body":{"nodeType":"YulBlock","src":"14170:32:30","statements":[{"nodeType":"YulAssignment","src":"14180:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"14191:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"14180:7:30"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14152:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"14162:7:30","type":""}],"src":"14117:85:30"},{"body":{"nodeType":"YulBlock","src":"14240:28:30","statements":[{"nodeType":"YulAssignment","src":"14250:12:30","value":{"name":"value","nodeType":"YulIdentifier","src":"14257:5:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14250:3:30"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14226:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"14236:3:30","type":""}],"src":"14208:60:30"},{"body":{"nodeType":"YulBlock","src":"14340:88:30","statements":[{"nodeType":"YulAssignment","src":"14350:72:30","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14414:5:30"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"14388:25:30"},"nodeType":"YulFunctionCall","src":"14388:32:30"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"14379:8:30"},"nodeType":"YulFunctionCall","src":"14379:42:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"14363:15:30"},"nodeType":"YulFunctionCall","src":"14363:59:30"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"14350:9:30"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14320:5:30","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"14330:9:30","type":""}],"src":"14274:154:30"},{"body":{"nodeType":"YulBlock","src":"14505:72:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14522:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14564:5:30"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"14527:36:30"},"nodeType":"YulFunctionCall","src":"14527:43:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14515:6:30"},"nodeType":"YulFunctionCall","src":"14515:56:30"},"nodeType":"YulExpressionStatement","src":"14515:56:30"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14493:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14500:3:30","type":""}],"src":"14434:143:30"},{"body":{"nodeType":"YulBlock","src":"14687:130:30","statements":[{"nodeType":"YulAssignment","src":"14697:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14709:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14720:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14705:3:30"},"nodeType":"YulFunctionCall","src":"14705:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14697:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14783:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14796:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14807:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14792:3:30"},"nodeType":"YulFunctionCall","src":"14792:17:30"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"14733:49:30"},"nodeType":"YulFunctionCall","src":"14733:77:30"},"nodeType":"YulExpressionStatement","src":"14733:77:30"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14659:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14671:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14682:4:30","type":""}],"src":"14583:234:30"},{"body":{"nodeType":"YulBlock","src":"14929:75:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14951:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"14959:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14947:3:30"},"nodeType":"YulFunctionCall","src":"14947:14:30"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"14963:33:30","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14940:6:30"},"nodeType":"YulFunctionCall","src":"14940:57:30"},"nodeType":"YulExpressionStatement","src":"14940:57:30"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14921:6:30","type":""}],"src":"14823:181:30"},{"body":{"nodeType":"YulBlock","src":"15156:220:30","statements":[{"nodeType":"YulAssignment","src":"15166:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15232:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"15237:2:30","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15173:58:30"},"nodeType":"YulFunctionCall","src":"15173:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15166:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15338:3:30"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"15249:88:30"},"nodeType":"YulFunctionCall","src":"15249:93:30"},"nodeType":"YulExpressionStatement","src":"15249:93:30"},{"nodeType":"YulAssignment","src":"15351:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15362:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"15367:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15358:3:30"},"nodeType":"YulFunctionCall","src":"15358:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15351:3:30"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15144:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15152:3:30","type":""}],"src":"15010:366:30"},{"body":{"nodeType":"YulBlock","src":"15553:248:30","statements":[{"nodeType":"YulAssignment","src":"15563:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15575:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15586:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15571:3:30"},"nodeType":"YulFunctionCall","src":"15571:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15563:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15610:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15621:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15606:3:30"},"nodeType":"YulFunctionCall","src":"15606:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15629:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"15635:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15625:3:30"},"nodeType":"YulFunctionCall","src":"15625:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15599:6:30"},"nodeType":"YulFunctionCall","src":"15599:47:30"},"nodeType":"YulExpressionStatement","src":"15599:47:30"},{"nodeType":"YulAssignment","src":"15655:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15789:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15663:124:30"},"nodeType":"YulFunctionCall","src":"15663:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15655:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15533:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15548:4:30","type":""}],"src":"15382:419:30"},{"body":{"nodeType":"YulBlock","src":"15868:51:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15885:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15906:5:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"15890:15:30"},"nodeType":"YulFunctionCall","src":"15890:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15878:6:30"},"nodeType":"YulFunctionCall","src":"15878:35:30"},"nodeType":"YulExpressionStatement","src":"15878:35:30"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15856:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15863:3:30","type":""}],"src":"15807:112:30"},{"body":{"nodeType":"YulBlock","src":"16187:616:30","statements":[{"nodeType":"YulAssignment","src":"16197:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16209:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16220:3:30","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16205:3:30"},"nodeType":"YulFunctionCall","src":"16205:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16197:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16278:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16291:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16302:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16287:3:30"},"nodeType":"YulFunctionCall","src":"16287:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16234:43:30"},"nodeType":"YulFunctionCall","src":"16234:71:30"},"nodeType":"YulExpressionStatement","src":"16234:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16359:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16372:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16383:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16368:3:30"},"nodeType":"YulFunctionCall","src":"16368:18:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16315:43:30"},"nodeType":"YulFunctionCall","src":"16315:72:30"},"nodeType":"YulExpressionStatement","src":"16315:72:30"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16441:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16454:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16465:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16450:3:30"},"nodeType":"YulFunctionCall","src":"16450:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16397:43:30"},"nodeType":"YulFunctionCall","src":"16397:72:30"},"nodeType":"YulExpressionStatement","src":"16397:72:30"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16523:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16536:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16547:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16532:3:30"},"nodeType":"YulFunctionCall","src":"16532:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16479:43:30"},"nodeType":"YulFunctionCall","src":"16479:72:30"},"nodeType":"YulExpressionStatement","src":"16479:72:30"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"16601:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16614:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16625:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16610:3:30"},"nodeType":"YulFunctionCall","src":"16610:19:30"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"16561:39:30"},"nodeType":"YulFunctionCall","src":"16561:69:30"},"nodeType":"YulExpressionStatement","src":"16561:69:30"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"16684:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16697:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16708:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16693:3:30"},"nodeType":"YulFunctionCall","src":"16693:19:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"16640:43:30"},"nodeType":"YulFunctionCall","src":"16640:73:30"},"nodeType":"YulExpressionStatement","src":"16640:73:30"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"16767:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16780:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16791:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16776:3:30"},"nodeType":"YulFunctionCall","src":"16776:19:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"16723:43:30"},"nodeType":"YulFunctionCall","src":"16723:73:30"},"nodeType":"YulExpressionStatement","src":"16723:73:30"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16111:9:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"16123:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"16131:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"16139:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16147:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16155:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16163:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16171:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16182:4:30","type":""}],"src":"15925:878:30"},{"body":{"nodeType":"YulBlock","src":"16915:114:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16937:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"16945:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16933:3:30"},"nodeType":"YulFunctionCall","src":"16933:14:30"},{"hexValue":"5361666545524332303a207065726d697420646964206e6f7420737563636565","kind":"string","nodeType":"YulLiteral","src":"16949:34:30","type":"","value":"SafeERC20: permit did not succee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16926:6:30"},"nodeType":"YulFunctionCall","src":"16926:58:30"},"nodeType":"YulExpressionStatement","src":"16926:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17005:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"17013:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17001:3:30"},"nodeType":"YulFunctionCall","src":"17001:15:30"},{"hexValue":"64","kind":"string","nodeType":"YulLiteral","src":"17018:3:30","type":"","value":"d"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16994:6:30"},"nodeType":"YulFunctionCall","src":"16994:28:30"},"nodeType":"YulExpressionStatement","src":"16994:28:30"}]},"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16907:6:30","type":""}],"src":"16809:220:30"},{"body":{"nodeType":"YulBlock","src":"17181:220:30","statements":[{"nodeType":"YulAssignment","src":"17191:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17257:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"17262:2:30","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17198:58:30"},"nodeType":"YulFunctionCall","src":"17198:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17191:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17363:3:30"}],"functionName":{"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulIdentifier","src":"17274:88:30"},"nodeType":"YulFunctionCall","src":"17274:93:30"},"nodeType":"YulExpressionStatement","src":"17274:93:30"},{"nodeType":"YulAssignment","src":"17376:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17387:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"17392:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17383:3:30"},"nodeType":"YulFunctionCall","src":"17383:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17376:3:30"}]}]},"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17169:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17177:3:30","type":""}],"src":"17035:366:30"},{"body":{"nodeType":"YulBlock","src":"17578:248:30","statements":[{"nodeType":"YulAssignment","src":"17588:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17600:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17611:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17596:3:30"},"nodeType":"YulFunctionCall","src":"17596:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17588:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17635:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17646:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17631:3:30"},"nodeType":"YulFunctionCall","src":"17631:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17654:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"17660:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17650:3:30"},"nodeType":"YulFunctionCall","src":"17650:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17624:6:30"},"nodeType":"YulFunctionCall","src":"17624:47:30"},"nodeType":"YulExpressionStatement","src":"17624:47:30"},{"nodeType":"YulAssignment","src":"17680:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17814:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17688:124:30"},"nodeType":"YulFunctionCall","src":"17688:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17680:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17558:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17573:4:30","type":""}],"src":"17407:419:30"},{"body":{"nodeType":"YulBlock","src":"17986:288:30","statements":[{"nodeType":"YulAssignment","src":"17996:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18008:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18019:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18004:3:30"},"nodeType":"YulFunctionCall","src":"18004:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17996:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18076:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18089:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18100:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18085:3:30"},"nodeType":"YulFunctionCall","src":"18085:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18032:43:30"},"nodeType":"YulFunctionCall","src":"18032:71:30"},"nodeType":"YulExpressionStatement","src":"18032:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18157:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18170:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18181:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18166:3:30"},"nodeType":"YulFunctionCall","src":"18166:18:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18113:43:30"},"nodeType":"YulFunctionCall","src":"18113:72:30"},"nodeType":"YulExpressionStatement","src":"18113:72:30"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18239:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18252:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18263:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18248:3:30"},"nodeType":"YulFunctionCall","src":"18248:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18195:43:30"},"nodeType":"YulFunctionCall","src":"18195:72:30"},"nodeType":"YulExpressionStatement","src":"18195:72:30"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17942:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17954:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17962:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17970:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17981:4:30","type":""}],"src":"17832:442:30"},{"body":{"nodeType":"YulBlock","src":"18406:206:30","statements":[{"nodeType":"YulAssignment","src":"18416:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18428:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18439:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18424:3:30"},"nodeType":"YulFunctionCall","src":"18424:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18416:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18496:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18509:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18520:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18505:3:30"},"nodeType":"YulFunctionCall","src":"18505:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18452:43:30"},"nodeType":"YulFunctionCall","src":"18452:71:30"},"nodeType":"YulExpressionStatement","src":"18452:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18577:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18590:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18601:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18586:3:30"},"nodeType":"YulFunctionCall","src":"18586:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18533:43:30"},"nodeType":"YulFunctionCall","src":"18533:72:30"},"nodeType":"YulExpressionStatement","src":"18533:72:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18370:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18382:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18390:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18401:4:30","type":""}],"src":"18280:332:30"},{"body":{"nodeType":"YulBlock","src":"18732:34:30","statements":[{"nodeType":"YulAssignment","src":"18742:18:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"18757:3:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"18742:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18704:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"18709:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"18720:11:30","type":""}],"src":"18618:148:30"},{"body":{"nodeType":"YulBlock","src":"18878:67:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18900:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"18908:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18896:3:30"},"nodeType":"YulFunctionCall","src":"18896:14:30"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"18912:25:30","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18889:6:30"},"nodeType":"YulFunctionCall","src":"18889:49:30"},"nodeType":"YulExpressionStatement","src":"18889:49:30"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18870:6:30","type":""}],"src":"18772:173:30"},{"body":{"nodeType":"YulBlock","src":"19115:238:30","statements":[{"nodeType":"YulAssignment","src":"19125:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19209:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"19214:2:30","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19132:76:30"},"nodeType":"YulFunctionCall","src":"19132:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19125:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19315:3:30"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"19226:88:30"},"nodeType":"YulFunctionCall","src":"19226:93:30"},"nodeType":"YulExpressionStatement","src":"19226:93:30"},{"nodeType":"YulAssignment","src":"19328:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19339:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"19344:2:30","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19335:3:30"},"nodeType":"YulFunctionCall","src":"19335:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19328:3:30"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19103:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19111:3:30","type":""}],"src":"18951:402:30"},{"body":{"nodeType":"YulBlock","src":"19418:40:30","statements":[{"nodeType":"YulAssignment","src":"19429:22:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19445:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19439:5:30"},"nodeType":"YulFunctionCall","src":"19439:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19429:6:30"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19401:5:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"19411:6:30","type":""}],"src":"19359:99:30"},{"body":{"nodeType":"YulBlock","src":"19526:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"19536:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"19545:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19540:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"19605:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19630:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"19635:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19626:3:30"},"nodeType":"YulFunctionCall","src":"19626:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19649:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"19654:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19645:3:30"},"nodeType":"YulFunctionCall","src":"19645:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19639:5:30"},"nodeType":"YulFunctionCall","src":"19639:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19619:6:30"},"nodeType":"YulFunctionCall","src":"19619:39:30"},"nodeType":"YulExpressionStatement","src":"19619:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19566:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"19569:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19563:2:30"},"nodeType":"YulFunctionCall","src":"19563:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19577:19:30","statements":[{"nodeType":"YulAssignment","src":"19579:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19588:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"19591:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19584:3:30"},"nodeType":"YulFunctionCall","src":"19584:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19579:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"19559:3:30","statements":[]},"src":"19555:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19688:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"19693:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19684:3:30"},"nodeType":"YulFunctionCall","src":"19684:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"19702:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19677:6:30"},"nodeType":"YulFunctionCall","src":"19677:27:30"},"nodeType":"YulExpressionStatement","src":"19677:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"19508:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"19513:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"19518:6:30","type":""}],"src":"19464:246:30"},{"body":{"nodeType":"YulBlock","src":"19826:280:30","statements":[{"nodeType":"YulVariableDeclaration","src":"19836:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19883:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"19850:32:30"},"nodeType":"YulFunctionCall","src":"19850:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"19840:6:30","type":""}]},{"nodeType":"YulAssignment","src":"19898:96:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19982:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"19987:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19905:76:30"},"nodeType":"YulFunctionCall","src":"19905:89:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19898:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20042:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"20049:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20038:3:30"},"nodeType":"YulFunctionCall","src":"20038:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"20056:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"20061:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"20003:34:30"},"nodeType":"YulFunctionCall","src":"20003:65:30"},"nodeType":"YulExpressionStatement","src":"20003:65:30"},{"nodeType":"YulAssignment","src":"20077:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20088:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"20093:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20084:3:30"},"nodeType":"YulFunctionCall","src":"20084:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20077:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19807:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19814:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19822:3:30","type":""}],"src":"19716:390:30"},{"body":{"nodeType":"YulBlock","src":"20218:61:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20240:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"20248:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20236:3:30"},"nodeType":"YulFunctionCall","src":"20236:14:30"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"20252:19:30","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20229:6:30"},"nodeType":"YulFunctionCall","src":"20229:43:30"},"nodeType":"YulExpressionStatement","src":"20229:43:30"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20210:6:30","type":""}],"src":"20112:167:30"},{"body":{"nodeType":"YulBlock","src":"20449:238:30","statements":[{"nodeType":"YulAssignment","src":"20459:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20543:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20548:2:30","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"20466:76:30"},"nodeType":"YulFunctionCall","src":"20466:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20459:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20649:3:30"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"20560:88:30"},"nodeType":"YulFunctionCall","src":"20560:93:30"},"nodeType":"YulExpressionStatement","src":"20560:93:30"},{"nodeType":"YulAssignment","src":"20662:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20673:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20678:2:30","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20669:3:30"},"nodeType":"YulFunctionCall","src":"20669:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20662:3:30"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20437:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20445:3:30","type":""}],"src":"20285:402:30"},{"body":{"nodeType":"YulBlock","src":"21079:581:30","statements":[{"nodeType":"YulAssignment","src":"21090:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21241:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21097:142:30"},"nodeType":"YulFunctionCall","src":"21097:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21090:3:30"}]},{"nodeType":"YulAssignment","src":"21255:102:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21344:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"21353:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21262:81:30"},"nodeType":"YulFunctionCall","src":"21262:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21255:3:30"}]},{"nodeType":"YulAssignment","src":"21367:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21518:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21374:142:30"},"nodeType":"YulFunctionCall","src":"21374:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21367:3:30"}]},{"nodeType":"YulAssignment","src":"21532:102:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21621:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"21630:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21539:81:30"},"nodeType":"YulFunctionCall","src":"21539:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21532:3:30"}]},{"nodeType":"YulAssignment","src":"21644:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"21651:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21644:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21050:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21056:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21064:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21075:3:30","type":""}],"src":"20693:967:30"},{"body":{"nodeType":"YulBlock","src":"21714:54:30","statements":[{"nodeType":"YulAssignment","src":"21724:38:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21742:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"21749:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21738:3:30"},"nodeType":"YulFunctionCall","src":"21738:14:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21758:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21754:3:30"},"nodeType":"YulFunctionCall","src":"21754:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21734:3:30"},"nodeType":"YulFunctionCall","src":"21734:28:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"21724:6:30"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21697:5:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"21707:6:30","type":""}],"src":"21666:102:30"},{"body":{"nodeType":"YulBlock","src":"21866:285:30","statements":[{"nodeType":"YulVariableDeclaration","src":"21876:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21923:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"21890:32:30"},"nodeType":"YulFunctionCall","src":"21890:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"21880:6:30","type":""}]},{"nodeType":"YulAssignment","src":"21938:78:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22004:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"22009:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21945:58:30"},"nodeType":"YulFunctionCall","src":"21945:71:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21938:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22064:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"22071:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22060:3:30"},"nodeType":"YulFunctionCall","src":"22060:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"22078:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"22083:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22025:34:30"},"nodeType":"YulFunctionCall","src":"22025:65:30"},"nodeType":"YulExpressionStatement","src":"22025:65:30"},{"nodeType":"YulAssignment","src":"22099:46:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22110:3:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22137:6:30"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22115:21:30"},"nodeType":"YulFunctionCall","src":"22115:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22106:3:30"},"nodeType":"YulFunctionCall","src":"22106:39:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22099:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21847:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21854:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21862:3:30","type":""}],"src":"21774:377:30"},{"body":{"nodeType":"YulBlock","src":"22275:195:30","statements":[{"nodeType":"YulAssignment","src":"22285:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22297:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22308:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22293:3:30"},"nodeType":"YulFunctionCall","src":"22293:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22285:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22332:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22343:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22328:3:30"},"nodeType":"YulFunctionCall","src":"22328:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22351:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"22357:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22347:3:30"},"nodeType":"YulFunctionCall","src":"22347:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22321:6:30"},"nodeType":"YulFunctionCall","src":"22321:47:30"},"nodeType":"YulExpressionStatement","src":"22321:47:30"},{"nodeType":"YulAssignment","src":"22377:86:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22449:6:30"},{"name":"tail","nodeType":"YulIdentifier","src":"22458:4:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22385:63:30"},"nodeType":"YulFunctionCall","src":"22385:78:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22377:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22247:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22259:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22270:4:30","type":""}],"src":"22157:313:30"},{"body":{"nodeType":"YulBlock","src":"22582:123:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22604:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"22612:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22600:3:30"},"nodeType":"YulFunctionCall","src":"22600:14:30"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"22616:34:30","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22593:6:30"},"nodeType":"YulFunctionCall","src":"22593:58:30"},"nodeType":"YulExpressionStatement","src":"22593:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22672:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"22680:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22668:3:30"},"nodeType":"YulFunctionCall","src":"22668:15:30"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"22685:12:30","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22661:6:30"},"nodeType":"YulFunctionCall","src":"22661:37:30"},"nodeType":"YulExpressionStatement","src":"22661:37:30"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22574:6:30","type":""}],"src":"22476:229:30"},{"body":{"nodeType":"YulBlock","src":"22857:220:30","statements":[{"nodeType":"YulAssignment","src":"22867:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22933:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"22938:2:30","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22874:58:30"},"nodeType":"YulFunctionCall","src":"22874:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22867:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23039:3:30"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"22950:88:30"},"nodeType":"YulFunctionCall","src":"22950:93:30"},"nodeType":"YulExpressionStatement","src":"22950:93:30"},{"nodeType":"YulAssignment","src":"23052:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23063:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23068:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23059:3:30"},"nodeType":"YulFunctionCall","src":"23059:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23052:3:30"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22845:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22853:3:30","type":""}],"src":"22711:366:30"},{"body":{"nodeType":"YulBlock","src":"23254:248:30","statements":[{"nodeType":"YulAssignment","src":"23264:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23276:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23287:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23272:3:30"},"nodeType":"YulFunctionCall","src":"23272:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23264:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23311:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23322:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23307:3:30"},"nodeType":"YulFunctionCall","src":"23307:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23330:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"23336:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23326:3:30"},"nodeType":"YulFunctionCall","src":"23326:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23300:6:30"},"nodeType":"YulFunctionCall","src":"23300:47:30"},"nodeType":"YulExpressionStatement","src":"23300:47:30"},{"nodeType":"YulAssignment","src":"23356:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23490:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23364:124:30"},"nodeType":"YulFunctionCall","src":"23364:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23356:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23234:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23249:4:30","type":""}],"src":"23083:419:30"},{"body":{"nodeType":"YulBlock","src":"23614:64:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23636:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"23644:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23632:3:30"},"nodeType":"YulFunctionCall","src":"23632:14:30"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"23648:22:30","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23625:6:30"},"nodeType":"YulFunctionCall","src":"23625:46:30"},"nodeType":"YulExpressionStatement","src":"23625:46:30"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23606:6:30","type":""}],"src":"23508:170:30"},{"body":{"nodeType":"YulBlock","src":"23830:220:30","statements":[{"nodeType":"YulAssignment","src":"23840:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23906:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23911:2:30","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23847:58:30"},"nodeType":"YulFunctionCall","src":"23847:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23840:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24012:3:30"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"23923:88:30"},"nodeType":"YulFunctionCall","src":"23923:93:30"},"nodeType":"YulExpressionStatement","src":"23923:93:30"},{"nodeType":"YulAssignment","src":"24025:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24036:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"24041:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24032:3:30"},"nodeType":"YulFunctionCall","src":"24032:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24025:3:30"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23818:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23826:3:30","type":""}],"src":"23684:366:30"},{"body":{"nodeType":"YulBlock","src":"24227:248:30","statements":[{"nodeType":"YulAssignment","src":"24237:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24249:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24260:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24245:3:30"},"nodeType":"YulFunctionCall","src":"24245:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24237:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24284:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24295:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24280:3:30"},"nodeType":"YulFunctionCall","src":"24280:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24303:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"24309:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24299:3:30"},"nodeType":"YulFunctionCall","src":"24299:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24273:6:30"},"nodeType":"YulFunctionCall","src":"24273:47:30"},"nodeType":"YulExpressionStatement","src":"24273:47:30"},{"nodeType":"YulAssignment","src":"24329:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24463:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24337:124:30"},"nodeType":"YulFunctionCall","src":"24337:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24329:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24207:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24222:4:30","type":""}],"src":"24056:419:30"},{"body":{"nodeType":"YulBlock","src":"24587:60:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24609:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"24617:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24605:3:30"},"nodeType":"YulFunctionCall","src":"24605:14:30"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"24621:18:30","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24598:6:30"},"nodeType":"YulFunctionCall","src":"24598:42:30"},"nodeType":"YulExpressionStatement","src":"24598:42:30"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24579:6:30","type":""}],"src":"24481:166:30"},{"body":{"nodeType":"YulBlock","src":"24799:220:30","statements":[{"nodeType":"YulAssignment","src":"24809:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24875:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"24880:2:30","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24816:58:30"},"nodeType":"YulFunctionCall","src":"24816:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24809:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24981:3:30"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"24892:88:30"},"nodeType":"YulFunctionCall","src":"24892:93:30"},"nodeType":"YulExpressionStatement","src":"24892:93:30"},{"nodeType":"YulAssignment","src":"24994:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25005:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25010:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25001:3:30"},"nodeType":"YulFunctionCall","src":"25001:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24994:3:30"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24787:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24795:3:30","type":""}],"src":"24653:366:30"},{"body":{"nodeType":"YulBlock","src":"25196:248:30","statements":[{"nodeType":"YulAssignment","src":"25206:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25218:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25229:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25214:3:30"},"nodeType":"YulFunctionCall","src":"25214:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25206:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25253:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25264:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25249:3:30"},"nodeType":"YulFunctionCall","src":"25249:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25272:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"25278:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25268:3:30"},"nodeType":"YulFunctionCall","src":"25268:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25242:6:30"},"nodeType":"YulFunctionCall","src":"25242:47:30"},"nodeType":"YulExpressionStatement","src":"25242:47:30"},{"nodeType":"YulAssignment","src":"25298:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25432:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25306:124:30"},"nodeType":"YulFunctionCall","src":"25306:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25298:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25176:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25191:4:30","type":""}],"src":"25025:419:30"},{"body":{"nodeType":"YulBlock","src":"25478:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25495:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25498:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25488:6:30"},"nodeType":"YulFunctionCall","src":"25488:88:30"},"nodeType":"YulExpressionStatement","src":"25488:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25592:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25595:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25585:6:30"},"nodeType":"YulFunctionCall","src":"25585:15:30"},"nodeType":"YulExpressionStatement","src":"25585:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25616:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25619:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25609:6:30"},"nodeType":"YulFunctionCall","src":"25609:15:30"},"nodeType":"YulExpressionStatement","src":"25609:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"25450:180:30"},{"body":{"nodeType":"YulBlock","src":"25664:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25681:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25684:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25674:6:30"},"nodeType":"YulFunctionCall","src":"25674:88:30"},"nodeType":"YulExpressionStatement","src":"25674:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25778:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25781:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25771:6:30"},"nodeType":"YulFunctionCall","src":"25771:15:30"},"nodeType":"YulExpressionStatement","src":"25771:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25802:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25805:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25795:6:30"},"nodeType":"YulFunctionCall","src":"25795:15:30"},"nodeType":"YulExpressionStatement","src":"25795:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"25636:180:30"},{"body":{"nodeType":"YulBlock","src":"25865:128:30","statements":[{"nodeType":"YulAssignment","src":"25875:33:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25902:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25884:17:30"},"nodeType":"YulFunctionCall","src":"25884:24:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25875:5:30"}]},{"body":{"nodeType":"YulBlock","src":"25936:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25938:16:30"},"nodeType":"YulFunctionCall","src":"25938:18:30"},"nodeType":"YulExpressionStatement","src":"25938:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25923:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"25930:4:30","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25920:2:30"},"nodeType":"YulFunctionCall","src":"25920:15:30"},"nodeType":"YulIf","src":"25917:41:30"},{"nodeType":"YulAssignment","src":"25967:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25978:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"25985:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25974:3:30"},"nodeType":"YulFunctionCall","src":"25974:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25967:3:30"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25851:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25861:3:30","type":""}],"src":"25822:171:30"},{"body":{"nodeType":"YulBlock","src":"26105:76:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26127:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"26135:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26123:3:30"},"nodeType":"YulFunctionCall","src":"26123:14:30"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"26139:34:30","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26116:6:30"},"nodeType":"YulFunctionCall","src":"26116:58:30"},"nodeType":"YulExpressionStatement","src":"26116:58:30"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26097:6:30","type":""}],"src":"25999:182:30"},{"body":{"nodeType":"YulBlock","src":"26333:220:30","statements":[{"nodeType":"YulAssignment","src":"26343:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26409:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"26414:2:30","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26350:58:30"},"nodeType":"YulFunctionCall","src":"26350:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26343:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26515:3:30"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"26426:88:30"},"nodeType":"YulFunctionCall","src":"26426:93:30"},"nodeType":"YulExpressionStatement","src":"26426:93:30"},{"nodeType":"YulAssignment","src":"26528:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26539:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"26544:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26535:3:30"},"nodeType":"YulFunctionCall","src":"26535:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26528:3:30"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26321:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26329:3:30","type":""}],"src":"26187:366:30"},{"body":{"nodeType":"YulBlock","src":"26730:248:30","statements":[{"nodeType":"YulAssignment","src":"26740:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26752:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26763:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26748:3:30"},"nodeType":"YulFunctionCall","src":"26748:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26740:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26787:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26798:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26783:3:30"},"nodeType":"YulFunctionCall","src":"26783:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26806:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"26812:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26802:3:30"},"nodeType":"YulFunctionCall","src":"26802:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26776:6:30"},"nodeType":"YulFunctionCall","src":"26776:47:30"},"nodeType":"YulExpressionStatement","src":"26776:47:30"},{"nodeType":"YulAssignment","src":"26832:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26966:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26840:124:30"},"nodeType":"YulFunctionCall","src":"26840:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26832:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26710:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26725:4:30","type":""}],"src":"26559:419:30"},{"body":{"nodeType":"YulBlock","src":"27090:119:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27112:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"27120:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27108:3:30"},"nodeType":"YulFunctionCall","src":"27108:14:30"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"27124:34:30","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27101:6:30"},"nodeType":"YulFunctionCall","src":"27101:58:30"},"nodeType":"YulExpressionStatement","src":"27101:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27180:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"27188:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27176:3:30"},"nodeType":"YulFunctionCall","src":"27176:15:30"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"27193:8:30","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27169:6:30"},"nodeType":"YulFunctionCall","src":"27169:33:30"},"nodeType":"YulExpressionStatement","src":"27169:33:30"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27082:6:30","type":""}],"src":"26984:225:30"},{"body":{"nodeType":"YulBlock","src":"27361:220:30","statements":[{"nodeType":"YulAssignment","src":"27371:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27437:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"27442:2:30","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27378:58:30"},"nodeType":"YulFunctionCall","src":"27378:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27371:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27543:3:30"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"27454:88:30"},"nodeType":"YulFunctionCall","src":"27454:93:30"},"nodeType":"YulExpressionStatement","src":"27454:93:30"},{"nodeType":"YulAssignment","src":"27556:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27567:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"27572:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27563:3:30"},"nodeType":"YulFunctionCall","src":"27563:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27556:3:30"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27349:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27357:3:30","type":""}],"src":"27215:366:30"},{"body":{"nodeType":"YulBlock","src":"27758:248:30","statements":[{"nodeType":"YulAssignment","src":"27768:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27780:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27791:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27776:3:30"},"nodeType":"YulFunctionCall","src":"27776:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27768:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27815:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"27826:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27811:3:30"},"nodeType":"YulFunctionCall","src":"27811:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27834:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"27840:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27830:3:30"},"nodeType":"YulFunctionCall","src":"27830:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27804:6:30"},"nodeType":"YulFunctionCall","src":"27804:47:30"},"nodeType":"YulExpressionStatement","src":"27804:47:30"},{"nodeType":"YulAssignment","src":"27860:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27994:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27868:124:30"},"nodeType":"YulFunctionCall","src":"27868:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27860:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27738:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27753:4:30","type":""}],"src":"27587:419:30"},{"body":{"nodeType":"YulBlock","src":"28070:40:30","statements":[{"nodeType":"YulAssignment","src":"28081:22:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28097:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28091:5:30"},"nodeType":"YulFunctionCall","src":"28091:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28081:6:30"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28053:5:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28063:6:30","type":""}],"src":"28012:98:30"},{"body":{"nodeType":"YulBlock","src":"28229:34:30","statements":[{"nodeType":"YulAssignment","src":"28239:18:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"28254:3:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"28239:11:30"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28201:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"28206:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"28217:11:30","type":""}],"src":"28116:147:30"},{"body":{"nodeType":"YulBlock","src":"28377:278:30","statements":[{"nodeType":"YulVariableDeclaration","src":"28387:52:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28433:5:30"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"28401:31:30"},"nodeType":"YulFunctionCall","src":"28401:38:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"28391:6:30","type":""}]},{"nodeType":"YulAssignment","src":"28448:95:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28531:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"28536:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28455:75:30"},"nodeType":"YulFunctionCall","src":"28455:88:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28448:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28591:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"28598:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28587:3:30"},"nodeType":"YulFunctionCall","src":"28587:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"28605:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"28610:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"28552:34:30"},"nodeType":"YulFunctionCall","src":"28552:65:30"},"nodeType":"YulExpressionStatement","src":"28552:65:30"},{"nodeType":"YulAssignment","src":"28626:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28637:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"28642:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28633:3:30"},"nodeType":"YulFunctionCall","src":"28633:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28626:3:30"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28358:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28365:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28373:3:30","type":""}],"src":"28269:386:30"},{"body":{"nodeType":"YulBlock","src":"28795:137:30","statements":[{"nodeType":"YulAssignment","src":"28806:100:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28893:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"28902:3:30"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28813:79:30"},"nodeType":"YulFunctionCall","src":"28813:93:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28806:3:30"}]},{"nodeType":"YulAssignment","src":"28916:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"28923:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28916:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28774:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28780:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28791:3:30","type":""}],"src":"28661:271:30"},{"body":{"nodeType":"YulBlock","src":"29044:73:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29066:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"29074:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29062:3:30"},"nodeType":"YulFunctionCall","src":"29062:14:30"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"29078:31:30","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29055:6:30"},"nodeType":"YulFunctionCall","src":"29055:55:30"},"nodeType":"YulExpressionStatement","src":"29055:55:30"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29036:6:30","type":""}],"src":"28938:179:30"},{"body":{"nodeType":"YulBlock","src":"29269:220:30","statements":[{"nodeType":"YulAssignment","src":"29279:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29345:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"29350:2:30","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29286:58:30"},"nodeType":"YulFunctionCall","src":"29286:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29279:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29451:3:30"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"29362:88:30"},"nodeType":"YulFunctionCall","src":"29362:93:30"},"nodeType":"YulExpressionStatement","src":"29362:93:30"},{"nodeType":"YulAssignment","src":"29464:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29475:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"29480:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29471:3:30"},"nodeType":"YulFunctionCall","src":"29471:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29464:3:30"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29257:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29265:3:30","type":""}],"src":"29123:366:30"},{"body":{"nodeType":"YulBlock","src":"29666:248:30","statements":[{"nodeType":"YulAssignment","src":"29676:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29688:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29699:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29684:3:30"},"nodeType":"YulFunctionCall","src":"29684:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29676:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29723:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29734:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29719:3:30"},"nodeType":"YulFunctionCall","src":"29719:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29742:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"29748:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29738:3:30"},"nodeType":"YulFunctionCall","src":"29738:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29712:6:30"},"nodeType":"YulFunctionCall","src":"29712:47:30"},"nodeType":"YulExpressionStatement","src":"29712:47:30"},{"nodeType":"YulAssignment","src":"29768:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29902:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29776:124:30"},"nodeType":"YulFunctionCall","src":"29776:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29768:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29646:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29661:4:30","type":""}],"src":"29495:419:30"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value6,  add(headStart, 192))\n\n    }\n\n    function store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: permit did not succee\")\n\n        mstore(add(memPtr, 32), \"d\")\n\n    }\n\n    function abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4166":[{"length":32,"start":1149}],"4181":[{"length":32,"start":1743},{"length":32,"start":2219}],"4184":[{"length":32,"start":3473}],"4190":[{"length":32,"start":2131}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061012c5760003560e01c806374a7dce5116100ad578063b6db75a011610071578063b6db75a01461030a578063c4d66de814610328578063d547741f14610344578063eaef399914610360578063f751758b1461037c5761012c565b806374a7dce51461028a5780638456cb59146102a8578063869eac93146102b257806391d14854146102bc578063a217fddf146102ec5761012c565b806334d131bf116100f457806334d131bf146101fa57806336568abe1461022a5780633f4ba83a146102465780635c975abb146102505780636e810b1a1461026e5761012c565b806301ffc9a714610131578063051e6cb11461016157806306fb46ba1461017d578063248a9ca3146101ae5780632f2ff15d146101de575b600080fd5b61014b60048036038101906101469190611fed565b61039a565b6040516101589190612035565b60405180910390f35b61017b60048036038101906101769190612086565b610414565b005b610197600480360381019061019291906120b3565b610473565b6040516101a5929190612102565b60405180910390f35b6101c860048036038101906101c39190612161565b61054c565b6040516101d5919061219d565b60405180910390f35b6101f860048036038101906101f39190612216565b61056c565b005b610214600480360381019061020f919061228f565b61058d565b6040516102219190612035565b60405180910390f35b610244600480360381019061023f9190612216565b610907565b005b61024e61098a565b005b6102586109db565b6040516102659190612035565b60405180910390f35b6102886004803603810190610283919061230a565b6109f2565b005b610292610b14565b60405161029f9190612337565b60405180910390f35b6102b0610b1e565b005b6102ba610b6f565b005b6102d660048036038101906102d19190612216565b610dd8565b6040516102e39190612035565b60405180910390f35b6102f4610e43565b604051610301919061219d565b60405180910390f35b610312610e4a565b60405161031f9190612035565b60405180910390f35b610342600480360381019061033d919061230a565b610e69565b005b61035e60048036038101906103599190612216565b611009565b005b61037a60048036038101906103759190612086565b61102a565b005b610384611095565b6040516103919190612337565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040d575061040c826110c3565b5b9050919050565b61041c610e4a565b61045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906123d5565b60405180910390fd5b620151808161046a9190612424565b60ff8190555050565b600080600060fd547f00000000000000000000000000000000000000000000000000000000000000006104a69190612424565b90506000670de0b6b3a7640000856104be919061247e565b866104c991906124b2565b90506000670de0b6b3a7640000600283856104e49190612424565b6104ee9190612515565b6104f89190612515565b905060008160fe5461050a91906124b2565b90506000670de0b6b3a76400008989610523919061247e565b8361052e9190612424565b6105389190612515565b905081819650965050505050509250929050565b600060976000838152602001908152602001600020600101549050919050565b6105758261054c565b61057e8161112d565b6105888383611141565b505050565b6000610597611222565b600115156105a36109db565b15151415801561064957506001151561010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b187bd266040518163ffffffff1660e01b8152600401602060405180830381865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106449190612572565b151514155b61065257600080fd5b670de0b6b3a7640000861015610694576040517f8facb45e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61708060ff60008282546106a891906124b2565b9250508190555060006106ca60fc548860fc546106c591906124b2565b610473565b9150507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231610711611271565b6040518263ffffffff1660e01b815260040161072d91906125ae565b602060405180830381865afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906125de565b8111156107a7576040517f2b2cce3f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061010160006107b6611271565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508781600101600082825461080691906124b2565b9250508190555060018160000160006101000a81548160ff02191690831515021790555060ff544261083891906124b2565b816002018190555061089c61084b611271565b30848a8a8a8a7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661127990979695949392919063ffffffff16565b6108f06108a7611271565b30847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611446909392919063ffffffff16565b6001925050506108fe6114cf565b95945050505050565b61090f611271565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461097c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109739061267d565b60405180910390fd5b61098682826114d9565b5050565b610992610e4a565b6109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c8906123d5565b60405180910390fd5b6109d96115bb565b565b6000603360009054906101000a900460ff16905090565b600060019054906101000a900460ff16610a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a389061270f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aa7576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aaf61161e565b610ab7611677565b610abf6116c8565b610ad0610aca611721565b82611141565b610ae1610adb611749565b82611141565b610af9610aec611749565b610af4611721565b611771565b610b11610b04611721565b610b0c611721565b611771565b50565b600060fc54905090565b610b26610e4a565b610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c906123d5565b60405180910390fd5b610b6d6117cd565b565b6101016000610b7c611271565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610bfd576040517f23d1e2cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426101016000610c0b611271565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541115610c81576040517f23d1e2cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101016000610c90611271565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060006101016000610cdf611271565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060006101016000610d42611271565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610dd5610d8e611271565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166118309092919063ffffffff16565b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6000610e64610e57611721565b610e5f611271565b610dd8565b905090565b60008060019054906101000a900460ff16159050808015610e9a5750600160008054906101000a900460ff1660ff16105b80610ec75750610ea9306118b6565b158015610ec65750600160008054906101000a900460ff1660ff16145b5b610f06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efd906127a1565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610f43576001600060016101000a81548160ff0219169083151502179055505b600160fd81905550670de0b6b3a764000060fe819055508161010060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610fac610fa7611271565b6109f2565b80156110055760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ffc9190612806565b60405180910390a15b5050565b6110128261054c565b61101b8161112d565b61102583836114d9565b505050565b611032610e4a565b611071576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611068906123d5565b60405180910390fd5b8060fd81905550670de0b6b3a76400008161108c9190612424565b60fe8190555050565b6000806110b960fc54670de0b6b3a764000060fc546110b491906124b2565b610473565b5090508091505090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61113e81611139611271565b6118d9565b50565b61114b8282610dd8565b61121e5760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506111c3611271565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600260c95403611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e9061286d565b60405180910390fd5b600260c981905550565b600033905090565b60008873ffffffffffffffffffffffffffffffffffffffff16637ecebe00896040518263ffffffff1660e01b81526004016112b491906125ae565b602060405180830381865afa1580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f591906125de565b90508873ffffffffffffffffffffffffffffffffffffffff1663d505accf898989898989896040518863ffffffff1660e01b815260040161133c979695949392919061289c565b600060405180830381600087803b15801561135657600080fd5b505af115801561136a573d6000803e3d6000fd5b5050505060008973ffffffffffffffffffffffffffffffffffffffff16637ecebe008a6040518263ffffffff1660e01b81526004016113a991906125ae565b602060405180830381865afa1580156113c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ea91906125de565b90506001826113f991906124b2565b811461143a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114319061297d565b60405180910390fd5b50505050505050505050565b6114c9846323b872dd60e01b8585856040516024016114679392919061299d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061195e565b50505050565b600160c981905550565b6114e38282610dd8565b156115b75760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061155c611271565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6115c3611a25565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611607611271565b60405161161491906125ae565b60405180910390a1565b600060019054906101000a900460ff1661166d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116649061270f565b60405180910390fd5b611675611a6e565b565b600060019054906101000a900460ff166116c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bd9061270f565b60405180910390fd5b565b600060019054906101000a900460ff16611717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170e9061270f565b60405180910390fd5b61171f611ada565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b600061177c8361054c565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6117d5611b33565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611819611271565b60405161182691906125ae565b60405180910390a1565b6118b18363a9059cbb60e01b848460405160240161184f9291906129d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061195e565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6118e38282610dd8565b61195a576118f081611b7d565b6118fe8360001c6020611baa565b60405160200161190f929190612b06565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119519190612b8a565b60405180910390fd5b5050565b60006119c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611de69092919063ffffffff16565b9050600081511115611a2057808060200190518101906119e09190612572565b611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1690612c1e565b60405180910390fd5b5b505050565b611a2d6109db565b611a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6390612c8a565b60405180910390fd5b565b600060019054906101000a900460ff16611abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab49061270f565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b209061270f565b60405180910390fd5b600160c981905550565b611b3b6109db565b15611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290612cf6565b60405180910390fd5b565b6060611ba38273ffffffffffffffffffffffffffffffffffffffff16601460ff16611baa565b9050919050565b606060006002836002611bbd9190612424565b611bc791906124b2565b67ffffffffffffffff811115611be057611bdf612d16565b5b6040519080825280601f01601f191660200182016040528015611c125781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c4a57611c49612d45565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611cae57611cad612d45565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611cee9190612424565b611cf891906124b2565b90505b6001811115611d98577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611d3a57611d39612d45565b5b1a60f81b828281518110611d5157611d50612d45565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611d9190612d74565b9050611cfb565b5060008414611ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd390612de9565b60405180910390fd5b8091505092915050565b6060611df58484600085611dfe565b90509392505050565b606082471015611e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3a90612e7b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611e6c9190612ee2565b60006040518083038185875af1925050503d8060008114611ea9576040519150601f19603f3d011682016040523d82523d6000602084013e611eae565b606091505b5091509150611ebf87838387611ecb565b92505050949350505050565b60608315611f2d576000835103611f2557611ee5856118b6565b611f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1b90612f45565b60405180910390fd5b5b829050611f38565b611f378383611f40565b5b949350505050565b600082511115611f535781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f879190612b8a565b60405180910390fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611fca81611f95565b8114611fd557600080fd5b50565b600081359050611fe781611fc1565b92915050565b60006020828403121561200357612002611f90565b5b600061201184828501611fd8565b91505092915050565b60008115159050919050565b61202f8161201a565b82525050565b600060208201905061204a6000830184612026565b92915050565b6000819050919050565b61206381612050565b811461206e57600080fd5b50565b6000813590506120808161205a565b92915050565b60006020828403121561209c5761209b611f90565b5b60006120aa84828501612071565b91505092915050565b600080604083850312156120ca576120c9611f90565b5b60006120d885828601612071565b92505060206120e985828601612071565b9150509250929050565b6120fc81612050565b82525050565b600060408201905061211760008301856120f3565b61212460208301846120f3565b9392505050565b6000819050919050565b61213e8161212b565b811461214957600080fd5b50565b60008135905061215b81612135565b92915050565b60006020828403121561217757612176611f90565b5b60006121858482850161214c565b91505092915050565b6121978161212b565b82525050565b60006020820190506121b2600083018461218e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121e3826121b8565b9050919050565b6121f3816121d8565b81146121fe57600080fd5b50565b600081359050612210816121ea565b92915050565b6000806040838503121561222d5761222c611f90565b5b600061223b8582860161214c565b925050602061224c85828601612201565b9150509250929050565b600060ff82169050919050565b61226c81612256565b811461227757600080fd5b50565b60008135905061228981612263565b92915050565b600080600080600060a086880312156122ab576122aa611f90565b5b60006122b988828901612071565b95505060206122ca88828901612071565b94505060406122db8882890161227a565b93505060606122ec8882890161214c565b92505060806122fd8882890161214c565b9150509295509295909350565b6000602082840312156123205761231f611f90565b5b600061232e84828501612201565b91505092915050565b600060208201905061234c60008301846120f3565b92915050565b600082825260208201905092915050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b60006123bf602c83612352565b91506123ca82612363565b604082019050919050565b600060208201905081810360008301526123ee816123b2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061242f82612050565b915061243a83612050565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612473576124726123f5565b5b828202905092915050565b600061248982612050565b915061249483612050565b92508282039050818111156124ac576124ab6123f5565b5b92915050565b60006124bd82612050565b91506124c883612050565b92508282019050808211156124e0576124df6123f5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061252082612050565b915061252b83612050565b92508261253b5761253a6124e6565b5b828204905092915050565b61254f8161201a565b811461255a57600080fd5b50565b60008151905061256c81612546565b92915050565b60006020828403121561258857612587611f90565b5b60006125968482850161255d565b91505092915050565b6125a8816121d8565b82525050565b60006020820190506125c3600083018461259f565b92915050565b6000815190506125d88161205a565b92915050565b6000602082840312156125f4576125f3611f90565b5b6000612602848285016125c9565b91505092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612667602f83612352565b91506126728261260b565b604082019050919050565b600060208201905081810360008301526126968161265a565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006126f9602b83612352565b91506127048261269d565b604082019050919050565b60006020820190508181036000830152612728816126ec565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061278b602e83612352565b91506127968261272f565b604082019050919050565b600060208201905081810360008301526127ba8161277e565b9050919050565b6000819050919050565b6000819050919050565b60006127f06127eb6127e6846127c1565b6127cb565b612256565b9050919050565b612800816127d5565b82525050565b600060208201905061281b60008301846127f7565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612857601f83612352565b915061286282612821565b602082019050919050565b600060208201905081810360008301526128868161284a565b9050919050565b61289681612256565b82525050565b600060e0820190506128b1600083018a61259f565b6128be602083018961259f565b6128cb60408301886120f3565b6128d860608301876120f3565b6128e5608083018661288d565b6128f260a083018561218e565b6128ff60c083018461218e565b98975050505050505050565b7f5361666545524332303a207065726d697420646964206e6f742073756363656560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612967602183612352565b91506129728261290b565b604082019050919050565b600060208201905081810360008301526129968161295a565b9050919050565b60006060820190506129b2600083018661259f565b6129bf602083018561259f565b6129cc60408301846120f3565b949350505050565b60006040820190506129e9600083018561259f565b6129f660208301846120f3565b9392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612a3e6017836129fd565b9150612a4982612a08565b601782019050919050565b600081519050919050565b60005b83811015612a7d578082015181840152602081019050612a62565b60008484015250505050565b6000612a9482612a54565b612a9e81856129fd565b9350612aae818560208601612a5f565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612af06011836129fd565b9150612afb82612aba565b601182019050919050565b6000612b1182612a31565b9150612b1d8285612a89565b9150612b2882612ae3565b9150612b348284612a89565b91508190509392505050565b6000601f19601f8301169050919050565b6000612b5c82612a54565b612b668185612352565b9350612b76818560208601612a5f565b612b7f81612b40565b840191505092915050565b60006020820190508181036000830152612ba48184612b51565b905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612c08602a83612352565b9150612c1382612bac565b604082019050919050565b60006020820190508181036000830152612c3781612bfb565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612c74601483612352565b9150612c7f82612c3e565b602082019050919050565b60006020820190508181036000830152612ca381612c67565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612ce0601083612352565b9150612ceb82612caa565b602082019050919050565b60006020820190508181036000830152612d0f81612cd3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612d7f82612050565b915060008203612d9257612d916123f5565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612dd3602083612352565b9150612dde82612d9d565b602082019050919050565b60006020820190508181036000830152612e0281612dc6565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612e65602683612352565b9150612e7082612e09565b604082019050919050565b60006020820190508181036000830152612e9481612e58565b9050919050565b600081519050919050565b600081905092915050565b6000612ebc82612e9b565b612ec68185612ea6565b9350612ed6818560208601612a5f565b80840191505092915050565b6000612eee8284612eb1565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612f2f601d83612352565b9150612f3a82612ef9565b602082019050919050565b60006020820190508181036000830152612f5e81612f22565b905091905056fea2646970667358221220354a187c1cbb912930fd118421dcde0b31e2df92fe88d3df2b437547fd63f30564736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x74A7DCE5 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xB6DB75A0 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x344 JUMPI DUP1 PUSH4 0xEAEF3999 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0xF751758B EQ PUSH2 0x37C JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x74A7DCE5 EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x869EAC93 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2EC JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x34D131BF GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x34D131BF EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x26E JUMPI PUSH2 0x12C JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x51E6CB1 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x6FB46BA EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x146 SWAP2 SWAP1 PUSH2 0x1FED JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x158 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x176 SWAP2 SWAP1 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x197 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x192 SWAP2 SWAP1 PUSH2 0x20B3 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A5 SWAP3 SWAP2 SWAP1 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x2161 JUMP JUMPDEST PUSH2 0x54C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x56C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x228F JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x221 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x244 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23F SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x907 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24E PUSH2 0x98A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0x9DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x230A JUMP JUMPDEST PUSH2 0x9F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x292 PUSH2 0xB14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B0 PUSH2 0xB1E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BA PUSH2 0xB6F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D1 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0xDD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F4 PUSH2 0xE43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x219D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x312 PUSH2 0xE4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31F SWAP2 SWAP1 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x342 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33D SWAP2 SWAP1 PUSH2 0x230A JUMP JUMPDEST PUSH2 0xE69 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x35E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x2216 JUMP JUMPDEST PUSH2 0x1009 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x37A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x102A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH2 0x1095 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2337 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x40D JUMPI POP PUSH2 0x40C DUP3 PUSH2 0x10C3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x41C PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x45B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x15180 DUP2 PUSH2 0x46A SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH1 0xFF DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xFD SLOAD PUSH32 0x0 PUSH2 0x4A6 SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x4BE SWAP2 SWAP1 PUSH2 0x247E JUMP JUMPDEST DUP7 PUSH2 0x4C9 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH1 0x2 DUP4 DUP6 PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST PUSH2 0x4F8 SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xFE SLOAD PUSH2 0x50A SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP10 DUP10 PUSH2 0x523 SWAP2 SWAP1 PUSH2 0x247E JUMP JUMPDEST DUP4 PUSH2 0x52E SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x538 SWAP2 SWAP1 PUSH2 0x2515 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x575 DUP3 PUSH2 0x54C JUMP JUMPDEST PUSH2 0x57E DUP2 PUSH2 0x112D JUMP JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0x1141 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x597 PUSH2 0x1222 JUMP JUMPDEST PUSH1 0x1 ISZERO ISZERO PUSH2 0x5A3 PUSH2 0x9DB JUMP JUMPDEST ISZERO ISZERO EQ ISZERO DUP1 ISZERO PUSH2 0x649 JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB187BD26 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x644 SWAP2 SWAP1 PUSH2 0x2572 JUMP JUMPDEST ISZERO ISZERO EQ ISZERO JUMPDEST PUSH2 0x652 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP7 LT ISZERO PUSH2 0x694 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8FACB45E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7080 PUSH1 0xFF PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6A8 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x6CA PUSH1 0xFC SLOAD DUP9 PUSH1 0xFC SLOAD PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST SWAP2 POP POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x711 PUSH2 0x1271 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x72D SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76E SWAP2 SWAP1 PUSH2 0x25DE JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B2CCE3F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0x7B6 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP8 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x806 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFF SLOAD TIMESTAMP PUSH2 0x838 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x89C PUSH2 0x84B PUSH2 0x1271 JUMP JUMPDEST ADDRESS DUP5 DUP11 DUP11 DUP11 DUP11 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1279 SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x8F0 PUSH2 0x8A7 PUSH2 0x1271 JUMP JUMPDEST ADDRESS DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1446 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x8FE PUSH2 0x14CF JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x90F PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x97C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x973 SWAP1 PUSH2 0x267D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x986 DUP3 DUP3 PUSH2 0x14D9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x992 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x9D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9C8 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9D9 PUSH2 0x15BB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA41 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA38 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAAF PUSH2 0x161E JUMP JUMPDEST PUSH2 0xAB7 PUSH2 0x1677 JUMP JUMPDEST PUSH2 0xABF PUSH2 0x16C8 JUMP JUMPDEST PUSH2 0xAD0 PUSH2 0xACA PUSH2 0x1721 JUMP JUMPDEST DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH2 0xAE1 PUSH2 0xADB PUSH2 0x1749 JUMP JUMPDEST DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH2 0xAF9 PUSH2 0xAEC PUSH2 0x1749 JUMP JUMPDEST PUSH2 0xAF4 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xB11 PUSH2 0xB04 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0xB0C PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1771 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB26 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0xB65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5C SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB6D PUSH2 0x17CD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x101 PUSH1 0x0 PUSH2 0xB7C PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH2 0x101 PUSH1 0x0 PUSH2 0xC0B PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT ISZERO PUSH2 0xC81 JUMPI PUSH1 0x40 MLOAD PUSH32 0x23D1E2CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xC90 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xCDF PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 PUSH2 0xD42 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xDD5 PUSH2 0xD8E PUSH2 0x1271 JUMP JUMPDEST DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1830 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE64 PUSH2 0xE57 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0xE5F PUSH2 0x1271 JUMP JUMPDEST PUSH2 0xDD8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xE9A JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xEC7 JUMPI POP PUSH2 0xEA9 ADDRESS PUSH2 0x18B6 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xEC6 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xF06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFD SWAP1 PUSH2 0x27A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xF43 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 PUSH1 0xFE DUP2 SWAP1 SSTORE POP DUP2 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xFAC PUSH2 0xFA7 PUSH2 0x1271 JUMP JUMPDEST PUSH2 0x9F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1005 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xFFC SWAP2 SWAP1 PUSH2 0x2806 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1012 DUP3 PUSH2 0x54C JUMP JUMPDEST PUSH2 0x101B DUP2 PUSH2 0x112D JUMP JUMPDEST PUSH2 0x1025 DUP4 DUP4 PUSH2 0x14D9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1032 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x1071 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1068 SWAP1 PUSH2 0x23D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x108C SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH1 0xFE DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10B9 PUSH1 0xFC SLOAD PUSH8 0xDE0B6B3A7640000 PUSH1 0xFC SLOAD PUSH2 0x10B4 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x113E DUP2 PUSH2 0x1139 PUSH2 0x1271 JUMP JUMPDEST PUSH2 0x18D9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x114B DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x121E JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x11C3 PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1267 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x125E SWAP1 PUSH2 0x286D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12B4 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x25DE JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x133C SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x289C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x136A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A9 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13EA SWAP2 SWAP1 PUSH2 0x25DE JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x13F9 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST DUP2 EQ PUSH2 0x143A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1431 SWAP1 PUSH2 0x297D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x14C9 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1467 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x299D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x195E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x14E3 DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST ISZERO PUSH2 0x15B7 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x155C PUSH2 0x1271 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x15C3 PUSH2 0x1A25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1607 PUSH2 0x1271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1614 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x166D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1664 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1675 PUSH2 0x1A6E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x16C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16BD SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1717 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x170E SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x171F PUSH2 0x1ADA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x177C DUP4 PUSH2 0x54C JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x17D5 PUSH2 0x1B33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1819 PUSH2 0x1271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1826 SWAP2 SWAP1 PUSH2 0x25AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x18B1 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x184F SWAP3 SWAP2 SWAP1 PUSH2 0x29D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x195E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E3 DUP3 DUP3 PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x195A JUMPI PUSH2 0x18F0 DUP2 PUSH2 0x1B7D JUMP JUMPDEST PUSH2 0x18FE DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x1BAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x190F SWAP3 SWAP2 SWAP1 PUSH2 0x2B06 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1951 SWAP2 SWAP1 PUSH2 0x2B8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19C0 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DE6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1A20 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x19E0 SWAP2 SWAP1 PUSH2 0x2572 JUMP JUMPDEST PUSH2 0x1A1F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A16 SWAP1 PUSH2 0x2C1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1A2D PUSH2 0x9DB JUMP JUMPDEST PUSH2 0x1A6C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A63 SWAP1 PUSH2 0x2C8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1ABD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AB4 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B20 SWAP1 PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1B3B PUSH2 0x9DB JUMP JUMPDEST ISZERO PUSH2 0x1B7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B72 SWAP1 PUSH2 0x2CF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BA3 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x1BAA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x1BBD SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x1BC7 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BE0 JUMPI PUSH2 0x1BDF PUSH2 0x2D16 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C12 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1C4A JUMPI PUSH2 0x1C49 PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1CAE JUMPI PUSH2 0x1CAD PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x1CEE SWAP2 SWAP1 PUSH2 0x2424 JUMP JUMPDEST PUSH2 0x1CF8 SWAP2 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1D98 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x1D3A JUMPI PUSH2 0x1D39 PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D51 JUMPI PUSH2 0x1D50 PUSH2 0x2D45 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x1D91 SWAP1 PUSH2 0x2D74 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CFB JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x1DDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD3 SWAP1 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DF5 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DFE JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E43 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3A SWAP1 PUSH2 0x2E7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E6C SWAP2 SWAP1 PUSH2 0x2EE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1EA9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EAE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EBF DUP8 DUP4 DUP4 DUP8 PUSH2 0x1ECB JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1F2D JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1F25 JUMPI PUSH2 0x1EE5 DUP6 PUSH2 0x18B6 JUMP JUMPDEST PUSH2 0x1F24 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F1B SWAP1 PUSH2 0x2F45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1F38 JUMP JUMPDEST PUSH2 0x1F37 DUP4 DUP4 PUSH2 0x1F40 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1F53 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F87 SWAP2 SWAP1 PUSH2 0x2B8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FCA DUP2 PUSH2 0x1F95 JUMP JUMPDEST DUP2 EQ PUSH2 0x1FD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FE7 DUP2 PUSH2 0x1FC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2003 JUMPI PUSH2 0x2002 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2011 DUP5 DUP3 DUP6 ADD PUSH2 0x1FD8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x202F DUP2 PUSH2 0x201A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x204A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2026 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2063 DUP2 PUSH2 0x2050 JUMP JUMPDEST DUP2 EQ PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2080 DUP2 PUSH2 0x205A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x209C JUMPI PUSH2 0x209B PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20AA DUP5 DUP3 DUP6 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20CA JUMPI PUSH2 0x20C9 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20D8 DUP6 DUP3 DUP7 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x20E9 DUP6 DUP3 DUP7 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x20FC DUP2 PUSH2 0x2050 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2117 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x2124 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x213E DUP2 PUSH2 0x212B JUMP JUMPDEST DUP2 EQ PUSH2 0x2149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x215B DUP2 PUSH2 0x2135 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2177 JUMPI PUSH2 0x2176 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2185 DUP5 DUP3 DUP6 ADD PUSH2 0x214C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2197 DUP2 PUSH2 0x212B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21B2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x218E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E3 DUP3 PUSH2 0x21B8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21F3 DUP2 PUSH2 0x21D8 JUMP JUMPDEST DUP2 EQ PUSH2 0x21FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2210 DUP2 PUSH2 0x21EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x222D JUMPI PUSH2 0x222C PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x223B DUP6 DUP3 DUP7 ADD PUSH2 0x214C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x224C DUP6 DUP3 DUP7 ADD PUSH2 0x2201 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x226C DUP2 PUSH2 0x2256 JUMP JUMPDEST DUP2 EQ PUSH2 0x2277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2289 DUP2 PUSH2 0x2263 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x22AB JUMPI PUSH2 0x22AA PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22B9 DUP9 DUP3 DUP10 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x22CA DUP9 DUP3 DUP10 ADD PUSH2 0x2071 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x22DB DUP9 DUP3 DUP10 ADD PUSH2 0x227A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x22EC DUP9 DUP3 DUP10 ADD PUSH2 0x214C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x22FD DUP9 DUP3 DUP10 ADD PUSH2 0x214C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2320 JUMPI PUSH2 0x231F PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x232E DUP5 DUP3 DUP6 ADD PUSH2 0x2201 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x234C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23BF PUSH1 0x2C DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x23CA DUP3 PUSH2 0x2363 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23EE DUP2 PUSH2 0x23B2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x242F DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x243A DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2473 JUMPI PUSH2 0x2472 PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2489 DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x2494 DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x24AC JUMPI PUSH2 0x24AB PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24BD DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x24C8 DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x24E0 JUMPI PUSH2 0x24DF PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2520 DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH2 0x252B DUP4 PUSH2 0x2050 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x253B JUMPI PUSH2 0x253A PUSH2 0x24E6 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x254F DUP2 PUSH2 0x201A JUMP JUMPDEST DUP2 EQ PUSH2 0x255A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x256C DUP2 PUSH2 0x2546 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2588 JUMPI PUSH2 0x2587 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2596 DUP5 DUP3 DUP6 ADD PUSH2 0x255D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x25A8 DUP2 PUSH2 0x21D8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25C3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x259F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x25D8 DUP2 PUSH2 0x205A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25F4 JUMPI PUSH2 0x25F3 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2602 DUP5 DUP3 DUP6 ADD PUSH2 0x25C9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2667 PUSH1 0x2F DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2672 DUP3 PUSH2 0x260B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2696 DUP2 PUSH2 0x265A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26F9 PUSH1 0x2B DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2704 DUP3 PUSH2 0x269D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2728 DUP2 PUSH2 0x26EC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x278B PUSH1 0x2E DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2796 DUP3 PUSH2 0x272F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x27BA DUP2 PUSH2 0x277E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27F0 PUSH2 0x27EB PUSH2 0x27E6 DUP5 PUSH2 0x27C1 JUMP JUMPDEST PUSH2 0x27CB JUMP JUMPDEST PUSH2 0x2256 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2800 DUP2 PUSH2 0x27D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x281B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27F7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2857 PUSH1 0x1F DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2862 DUP3 PUSH2 0x2821 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2886 DUP2 PUSH2 0x284A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2896 DUP2 PUSH2 0x2256 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x28B1 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x28BE PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x28CB PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x28D8 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x20F3 JUMP JUMPDEST PUSH2 0x28E5 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x288D JUMP JUMPDEST PUSH2 0x28F2 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x218E JUMP JUMPDEST PUSH2 0x28FF PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x218E JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2967 PUSH1 0x21 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2972 DUP3 PUSH2 0x290B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2996 DUP2 PUSH2 0x295A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x29B2 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x29BF PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x29CC PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x29E9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x259F JUMP JUMPDEST PUSH2 0x29F6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20F3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3E PUSH1 0x17 DUP4 PUSH2 0x29FD JUMP JUMPDEST SWAP2 POP PUSH2 0x2A49 DUP3 PUSH2 0x2A08 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A7D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A62 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A94 DUP3 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x2A9E DUP2 DUP6 PUSH2 0x29FD JUMP JUMPDEST SWAP4 POP PUSH2 0x2AAE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A5F JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF0 PUSH1 0x11 DUP4 PUSH2 0x29FD JUMP JUMPDEST SWAP2 POP PUSH2 0x2AFB DUP3 PUSH2 0x2ABA JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B11 DUP3 PUSH2 0x2A31 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B1D DUP3 DUP6 PUSH2 0x2A89 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B28 DUP3 PUSH2 0x2AE3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B34 DUP3 DUP5 PUSH2 0x2A89 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B5C DUP3 PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x2B66 DUP2 DUP6 PUSH2 0x2352 JUMP JUMPDEST SWAP4 POP PUSH2 0x2B76 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A5F JUMP JUMPDEST PUSH2 0x2B7F DUP2 PUSH2 0x2B40 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BA4 DUP2 DUP5 PUSH2 0x2B51 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C08 PUSH1 0x2A DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C13 DUP3 PUSH2 0x2BAC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C37 DUP2 PUSH2 0x2BFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C74 PUSH1 0x14 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C7F DUP3 PUSH2 0x2C3E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CA3 DUP2 PUSH2 0x2C67 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE0 PUSH1 0x10 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CEB DUP3 PUSH2 0x2CAA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D0F DUP2 PUSH2 0x2CD3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D7F DUP3 PUSH2 0x2050 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2D92 JUMPI PUSH2 0x2D91 PUSH2 0x23F5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DD3 PUSH1 0x20 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2DDE DUP3 PUSH2 0x2D9D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E02 DUP2 PUSH2 0x2DC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E65 PUSH1 0x26 DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E70 DUP3 PUSH2 0x2E09 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E94 DUP2 PUSH2 0x2E58 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EBC DUP3 PUSH2 0x2E9B JUMP JUMPDEST PUSH2 0x2EC6 DUP2 DUP6 PUSH2 0x2EA6 JUMP JUMPDEST SWAP4 POP PUSH2 0x2ED6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2A5F JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EEE DUP3 DUP5 PUSH2 0x2EB1 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F2F PUSH1 0x1D DUP4 PUSH2 0x2352 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F3A DUP3 PUSH2 0x2EF9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F5E DUP2 PUSH2 0x2F22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD 0x4A XOR PUSH29 0x1CBB912930FD118421DCDE0B31E2DF92FE88D3DF2B437547FD63F30564 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"2023:5359:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4352:139:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5801:580;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4716:1079:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6242:214:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4564:65:23;;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:21;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7285:95:23;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4497:61;;;:::i;:::-;;6432:563;;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:21;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3894:287:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4187:159:23;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7001:232;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4352:139:23:-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4478:6:23::1;4464:11;:20;;;;:::i;:::-;4441;:43;;;;4352:139:::0;:::o;5801:580::-;5922:7;5931;5950:23;5991:14;;5976:12;:29;;;;:::i;:::-;5950:55;;6015:23;6079:4;6062:14;:21;;;;:::i;:::-;6042:16;:42;;;;:::i;:::-;6015:70;;6095:19;6161:4;6156:1;6137:15;6119;:33;;;;:::i;:::-;6118:39;;;;:::i;:::-;6117:48;;;;:::i;:::-;6095:70;;6175:22;6220:11;6200:17;;:31;;;;:::i;:::-;6175:56;;6241:22;6321:4;6302:16;6285:14;:33;;;;:::i;:::-;6267:14;:52;;;;:::i;:::-;6266:59;;;;:::i;:::-;6241:84;;6343:14;6359;6335:39;;;;;;;;;5801:580;;;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;4716:1079:23:-;4888:4;2505:21:5;:19;:21::i;:::-;3193:4:23::1;3181:16;;:8;:6;:8::i;:::-;:16;;;;3180:77;;;;;3252:4;3216:40;;:21;;;;;;;;;;;:30;;;:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:40;;;;3180:77;3159:99;;;::::0;::::1;;4916:4:::2;4908:5;:12;4904:79;;;4943:29;;;;;;;;;;;;;;4904:79;2560:7;4992:20;;:52;;;;;;;:::i;:::-;;;;;;;;5085:22;5111:69;5143:13;;5174:5;5158:13;;:21;;;;:::i;:::-;5111:18;:69::i;:::-;5054:126;;;5211:9;:19;;;5231:12;:10;:12::i;:::-;5211:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5194:14;:50;5190:127;;;5267:39;;;;;;;;;;;;;;5190:127;5326:45;5374:18;:32;5393:12;:10;:12::i;:::-;5374:32;;;;;;;;;;;;;;;5326:80;;5447:5;5416:20;:27;;;:36;;;;;;;:::i;:::-;;;;;;;;5495:4;5462:20;:30;;;:37;;;;;;;;;;;;;;;;;;5566:20;;5548:15;:38;;;;:::i;:::-;5509:20;:36;;:77;;;;5596:90;5623:12;:10;:12::i;:::-;5645:4;5652:14;5668:8;5678:1;5681;5684;5596:15;:26;;;;:90;;;;;;;;;;:::i;:::-;5696:71;5723:12;:10;:12::i;:::-;5745:4;5752:14;5696:9;:26;;;;:71;;;;;;:::i;:::-;5784:4;5777:11;;;;2547:20:5::0;:18;:20::i;:::-;4716:1079:23;;;;;;;:::o;6242:214:0:-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;4564:65:23:-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4612:10:23::1;:8;:10::i;:::-;4564:65::o:0;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:21:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:21::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;7285:95:23:-;7334:7;7360:13;;7353:20;;7285:95;:::o;4497:61::-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4543:8:23::1;:6;:8::i;:::-;4497:61::o:0;6432:563::-;6487:18;:32;6506:12;:10;:12::i;:::-;6487:32;;;;;;;;;;;;;;;:42;;;;;;;;;;;;6482:114;;6552:33;;;;;;;;;;;;;;6482:114;6660:15;6609:18;:32;6628:12;:10;:12::i;:::-;6609:32;;;;;;;;;;;;;;;:48;;;:66;6605:138;;;6699:33;;;;;;;;;;;;;;6605:138;6752:20;6775:18;:32;6794:12;:10;:12::i;:::-;6775:32;;;;;;;;;;;;;;;:39;;;6752:62;;6869:5;6824:18;:32;6843:12;:10;:12::i;:::-;6824:32;;;;;;;;;;;;;;;:42;;;:50;;;;;;;;;;;;;;;;;;6926:1;6884:18;:32;6903:12;:10;:12::i;:::-;6884:32;;;;;;;;;;;;;;;:39;;:43;;;;6937:51;6961:12;:10;:12::i;:::-;6975;6937:10;:23;;;;:51;;;;;:::i;:::-;6472:523;6432:563::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;1289:117:21:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;3894:287:23:-;3268:19:3;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;4007:1:23::1;3990:14;:18;;;;4038:4;4018:17;:24;;;;4098:21;4052;;:68;;;;;;;;;;;;;;;;;;4130:44;4161:12;:10;:12::i;:::-;4130:30;:44::i;:::-;3640:14:3::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;3894:287:23;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;4187:159:23:-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4282:10:23::1;4265:14;:27;;;;4335:4;4322:10;:17;;;;:::i;:::-;4302;:37;;;;4187:159:::0;:::o;7001:232::-;7053:7;7073:22;7127:68;7159:13;;7190:4;7174:13;;:20;;;;:::i;:::-;7127:18;:68::i;:::-;7072:123;;;7212:14;7205:21;;;7001:232;:::o;1060:166:18:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;2580:287:5:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;850:96:13:-;903:7;929:10;922:17;;850:96;:::o;3002:483:11:-;3238:19;3260:5;:12;;;3273:5;3260:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3238:41;;3289:5;:12;;;3302:5;3309:7;3318:5;3325:8;3335:1;3338;3341;3289:54;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3353:18;3374:5;:12;;;3387:5;3374:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3353:40;;3439:1;3425:11;:15;;;;:::i;:::-;3411:10;:29;3403:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;3228:257;;3002:483;;;;;;;;:::o;1040:252::-;1189:96;1209:5;1239:27;;;1268:4;1274:2;1278:5;1216:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1189:19;:96::i;:::-;1040:252;;;;:::o;2873:209:5:-;1787:1;3053:7;:22;;;;2873:209::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;2676:117:4:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;1063:97::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:22:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;2429:115:4:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;818:216:11:-;941:86;961:5;991:23;;;1016:2;1020:5;968:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:19;:86::i;:::-;818:216;;;:::o;1186:320:12:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;3868:717:11:-;4298:23;4324:69;4352:4;4324:69;;;;;;;;;;;;;;;;;4332:5;4324:27;;;;:69;;;;;:::i;:::-;4298:95;;4427:1;4407:10;:17;:21;4403:176;;;4502:10;4491:30;;;;;;;;;;;;:::i;:::-;4483:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;4403:176;3949:636;3868:717;;:::o;2188:106:4:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1166:95::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2010:106:4:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;2146:149:15:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;3884:223:12:-;4017:12;4048:52;4070:6;4078:4;4084:1;4087:12;4048:21;:52::i;:::-;4041:59;;3884:223;;;;;:::o;4971:446::-;5136:12;5193:5;5168:21;:30;;5160:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5252:12;5266:23;5293:6;:11;;5312:5;5319:4;5293:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5251:73;;;;5341:69;5368:6;5376:7;5385:10;5397:12;5341:26;:69::i;:::-;5334:76;;;;4971:446;;;;;;:::o;6589:628::-;6769:12;6797:7;6793:418;;;6845:1;6824:10;:17;:22;6820:286;;7039:18;7050:6;7039:10;:18::i;:::-;7031:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;6820:286;7126:10;7119:17;;;;6793:418;7167:33;7175:10;7187:12;7167:7;:33::i;:::-;6589:628;;;;;;;:::o;7739:540::-;7918:1;7898:10;:17;:21;7894:379;;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:30;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:474::-;2277:6;2285;2334:2;2322:9;2313:7;2309:23;2305:32;2302:119;;;2340:79;;:::i;:::-;2302:119;2460:1;2485:53;2530:7;2521:6;2510:9;2506:22;2485:53;:::i;:::-;2475:63;;2431:117;2587:2;2613:53;2658:7;2649:6;2638:9;2634:22;2613:53;:::i;:::-;2603:63;;2558:118;2209:474;;;;;:::o;2689:118::-;2776:24;2794:5;2776:24;:::i;:::-;2771:3;2764:37;2689:118;;:::o;2813:332::-;2934:4;2972:2;2961:9;2957:18;2949:26;;2985:71;3053:1;3042:9;3038:17;3029:6;2985:71;:::i;:::-;3066:72;3134:2;3123:9;3119:18;3110:6;3066:72;:::i;:::-;2813:332;;;;;:::o;3151:77::-;3188:7;3217:5;3206:16;;3151:77;;;:::o;3234:122::-;3307:24;3325:5;3307:24;:::i;:::-;3300:5;3297:35;3287:63;;3346:1;3343;3336:12;3287:63;3234:122;:::o;3362:139::-;3408:5;3446:6;3433:20;3424:29;;3462:33;3489:5;3462:33;:::i;:::-;3362:139;;;;:::o;3507:329::-;3566:6;3615:2;3603:9;3594:7;3590:23;3586:32;3583:119;;;3621:79;;:::i;:::-;3583:119;3741:1;3766:53;3811:7;3802:6;3791:9;3787:22;3766:53;:::i;:::-;3756:63;;3712:117;3507:329;;;;:::o;3842:118::-;3929:24;3947:5;3929:24;:::i;:::-;3924:3;3917:37;3842:118;;:::o;3966:222::-;4059:4;4097:2;4086:9;4082:18;4074:26;;4110:71;4178:1;4167:9;4163:17;4154:6;4110:71;:::i;:::-;3966:222;;;;:::o;4194:126::-;4231:7;4271:42;4264:5;4260:54;4249:65;;4194:126;;;:::o;4326:96::-;4363:7;4392:24;4410:5;4392:24;:::i;:::-;4381:35;;4326:96;;;:::o;4428:122::-;4501:24;4519:5;4501:24;:::i;:::-;4494:5;4491:35;4481:63;;4540:1;4537;4530:12;4481:63;4428:122;:::o;4556:139::-;4602:5;4640:6;4627:20;4618:29;;4656:33;4683:5;4656:33;:::i;:::-;4556:139;;;;:::o;4701:474::-;4769:6;4777;4826:2;4814:9;4805:7;4801:23;4797:32;4794:119;;;4832:79;;:::i;:::-;4794:119;4952:1;4977:53;5022:7;5013:6;5002:9;4998:22;4977:53;:::i;:::-;4967:63;;4923:117;5079:2;5105:53;5150:7;5141:6;5130:9;5126:22;5105:53;:::i;:::-;5095:63;;5050:118;4701:474;;;;;:::o;5181:86::-;5216:7;5256:4;5249:5;5245:16;5234:27;;5181:86;;;:::o;5273:118::-;5344:22;5360:5;5344:22;:::i;:::-;5337:5;5334:33;5324:61;;5381:1;5378;5371:12;5324:61;5273:118;:::o;5397:135::-;5441:5;5479:6;5466:20;5457:29;;5495:31;5520:5;5495:31;:::i;:::-;5397:135;;;;:::o;5538:907::-;5631:6;5639;5647;5655;5663;5712:3;5700:9;5691:7;5687:23;5683:33;5680:120;;;5719:79;;:::i;:::-;5680:120;5839:1;5864:53;5909:7;5900:6;5889:9;5885:22;5864:53;:::i;:::-;5854:63;;5810:117;5966:2;5992:53;6037:7;6028:6;6017:9;6013:22;5992:53;:::i;:::-;5982:63;;5937:118;6094:2;6120:51;6163:7;6154:6;6143:9;6139:22;6120:51;:::i;:::-;6110:61;;6065:116;6220:2;6246:53;6291:7;6282:6;6271:9;6267:22;6246:53;:::i;:::-;6236:63;;6191:118;6348:3;6375:53;6420:7;6411:6;6400:9;6396:22;6375:53;:::i;:::-;6365:63;;6319:119;5538:907;;;;;;;;:::o;6451:329::-;6510:6;6559:2;6547:9;6538:7;6534:23;6530:32;6527:119;;;6565:79;;:::i;:::-;6527:119;6685:1;6710:53;6755:7;6746:6;6735:9;6731:22;6710:53;:::i;:::-;6700:63;;6656:117;6451:329;;;;:::o;6786:222::-;6879:4;6917:2;6906:9;6902:18;6894:26;;6930:71;6998:1;6987:9;6983:17;6974:6;6930:71;:::i;:::-;6786:222;;;;:::o;7014:169::-;7098:11;7132:6;7127:3;7120:19;7172:4;7167:3;7163:14;7148:29;;7014:169;;;;:::o;7189:231::-;7329:34;7325:1;7317:6;7313:14;7306:58;7398:14;7393:2;7385:6;7381:15;7374:39;7189:231;:::o;7426:366::-;7568:3;7589:67;7653:2;7648:3;7589:67;:::i;:::-;7582:74;;7665:93;7754:3;7665:93;:::i;:::-;7783:2;7778:3;7774:12;7767:19;;7426:366;;;:::o;7798:419::-;7964:4;8002:2;7991:9;7987:18;7979:26;;8051:9;8045:4;8041:20;8037:1;8026:9;8022:17;8015:47;8079:131;8205:4;8079:131;:::i;:::-;8071:139;;7798:419;;;:::o;8223:180::-;8271:77;8268:1;8261:88;8368:4;8365:1;8358:15;8392:4;8389:1;8382:15;8409:348;8449:7;8472:20;8490:1;8472:20;:::i;:::-;8467:25;;8506:20;8524:1;8506:20;:::i;:::-;8501:25;;8694:1;8626:66;8622:74;8619:1;8616:81;8611:1;8604:9;8597:17;8593:105;8590:131;;;8701:18;;:::i;:::-;8590:131;8749:1;8746;8742:9;8731:20;;8409:348;;;;:::o;8763:194::-;8803:4;8823:20;8841:1;8823:20;:::i;:::-;8818:25;;8857:20;8875:1;8857:20;:::i;:::-;8852:25;;8901:1;8898;8894:9;8886:17;;8925:1;8919:4;8916:11;8913:37;;;8930:18;;:::i;:::-;8913:37;8763:194;;;;:::o;8963:191::-;9003:3;9022:20;9040:1;9022:20;:::i;:::-;9017:25;;9056:20;9074:1;9056:20;:::i;:::-;9051:25;;9099:1;9096;9092:9;9085:16;;9120:3;9117:1;9114:10;9111:36;;;9127:18;;:::i;:::-;9111:36;8963:191;;;;:::o;9160:180::-;9208:77;9205:1;9198:88;9305:4;9302:1;9295:15;9329:4;9326:1;9319:15;9346:185;9386:1;9403:20;9421:1;9403:20;:::i;:::-;9398:25;;9437:20;9455:1;9437:20;:::i;:::-;9432:25;;9476:1;9466:35;;9481:18;;:::i;:::-;9466:35;9523:1;9520;9516:9;9511:14;;9346:185;;;;:::o;9537:116::-;9607:21;9622:5;9607:21;:::i;:::-;9600:5;9597:32;9587:60;;9643:1;9640;9633:12;9587:60;9537:116;:::o;9659:137::-;9713:5;9744:6;9738:13;9729:22;;9760:30;9784:5;9760:30;:::i;:::-;9659:137;;;;:::o;9802:345::-;9869:6;9918:2;9906:9;9897:7;9893:23;9889:32;9886:119;;;9924:79;;:::i;:::-;9886:119;10044:1;10069:61;10122:7;10113:6;10102:9;10098:22;10069:61;:::i;:::-;10059:71;;10015:125;9802:345;;;;:::o;10153:118::-;10240:24;10258:5;10240:24;:::i;:::-;10235:3;10228:37;10153:118;;:::o;10277:222::-;10370:4;10408:2;10397:9;10393:18;10385:26;;10421:71;10489:1;10478:9;10474:17;10465:6;10421:71;:::i;:::-;10277:222;;;;:::o;10505:143::-;10562:5;10593:6;10587:13;10578:22;;10609:33;10636:5;10609:33;:::i;:::-;10505:143;;;;:::o;10654:351::-;10724:6;10773:2;10761:9;10752:7;10748:23;10744:32;10741:119;;;10779:79;;:::i;:::-;10741:119;10899:1;10924:64;10980:7;10971:6;10960:9;10956:22;10924:64;:::i;:::-;10914:74;;10870:128;10654:351;;;;:::o;11011:234::-;11151:34;11147:1;11139:6;11135:14;11128:58;11220:17;11215:2;11207:6;11203:15;11196:42;11011:234;:::o;11251:366::-;11393:3;11414:67;11478:2;11473:3;11414:67;:::i;:::-;11407:74;;11490:93;11579:3;11490:93;:::i;:::-;11608:2;11603:3;11599:12;11592:19;;11251:366;;;:::o;11623:419::-;11789:4;11827:2;11816:9;11812:18;11804:26;;11876:9;11870:4;11866:20;11862:1;11851:9;11847:17;11840:47;11904:131;12030:4;11904:131;:::i;:::-;11896:139;;11623:419;;;:::o;12048:230::-;12188:34;12184:1;12176:6;12172:14;12165:58;12257:13;12252:2;12244:6;12240:15;12233:38;12048:230;:::o;12284:366::-;12426:3;12447:67;12511:2;12506:3;12447:67;:::i;:::-;12440:74;;12523:93;12612:3;12523:93;:::i;:::-;12641:2;12636:3;12632:12;12625:19;;12284:366;;;:::o;12656:419::-;12822:4;12860:2;12849:9;12845:18;12837:26;;12909:9;12903:4;12899:20;12895:1;12884:9;12880:17;12873:47;12937:131;13063:4;12937:131;:::i;:::-;12929:139;;12656:419;;;:::o;13081:233::-;13221:34;13217:1;13209:6;13205:14;13198:58;13290:16;13285:2;13277:6;13273:15;13266:41;13081:233;:::o;13320:366::-;13462:3;13483:67;13547:2;13542:3;13483:67;:::i;:::-;13476:74;;13559:93;13648:3;13559:93;:::i;:::-;13677:2;13672:3;13668:12;13661:19;;13320:366;;;:::o;13692:419::-;13858:4;13896:2;13885:9;13881:18;13873:26;;13945:9;13939:4;13935:20;13931:1;13920:9;13916:17;13909:47;13973:131;14099:4;13973:131;:::i;:::-;13965:139;;13692:419;;;:::o;14117:85::-;14162:7;14191:5;14180:16;;14117:85;;;:::o;14208:60::-;14236:3;14257:5;14250:12;;14208:60;;;:::o;14274:154::-;14330:9;14363:59;14379:42;14388:32;14414:5;14388:32;:::i;:::-;14379:42;:::i;:::-;14363:59;:::i;:::-;14350:72;;14274:154;;;:::o;14434:143::-;14527:43;14564:5;14527:43;:::i;:::-;14522:3;14515:56;14434:143;;:::o;14583:234::-;14682:4;14720:2;14709:9;14705:18;14697:26;;14733:77;14807:1;14796:9;14792:17;14783:6;14733:77;:::i;:::-;14583:234;;;;:::o;14823:181::-;14963:33;14959:1;14951:6;14947:14;14940:57;14823:181;:::o;15010:366::-;15152:3;15173:67;15237:2;15232:3;15173:67;:::i;:::-;15166:74;;15249:93;15338:3;15249:93;:::i;:::-;15367:2;15362:3;15358:12;15351:19;;15010:366;;;:::o;15382:419::-;15548:4;15586:2;15575:9;15571:18;15563:26;;15635:9;15629:4;15625:20;15621:1;15610:9;15606:17;15599:47;15663:131;15789:4;15663:131;:::i;:::-;15655:139;;15382:419;;;:::o;15807:112::-;15890:22;15906:5;15890:22;:::i;:::-;15885:3;15878:35;15807:112;;:::o;15925:878::-;16182:4;16220:3;16209:9;16205:19;16197:27;;16234:71;16302:1;16291:9;16287:17;16278:6;16234:71;:::i;:::-;16315:72;16383:2;16372:9;16368:18;16359:6;16315:72;:::i;:::-;16397;16465:2;16454:9;16450:18;16441:6;16397:72;:::i;:::-;16479;16547:2;16536:9;16532:18;16523:6;16479:72;:::i;:::-;16561:69;16625:3;16614:9;16610:19;16601:6;16561:69;:::i;:::-;16640:73;16708:3;16697:9;16693:19;16684:6;16640:73;:::i;:::-;16723;16791:3;16780:9;16776:19;16767:6;16723:73;:::i;:::-;15925:878;;;;;;;;;;:::o;16809:220::-;16949:34;16945:1;16937:6;16933:14;16926:58;17018:3;17013:2;17005:6;17001:15;16994:28;16809:220;:::o;17035:366::-;17177:3;17198:67;17262:2;17257:3;17198:67;:::i;:::-;17191:74;;17274:93;17363:3;17274:93;:::i;:::-;17392:2;17387:3;17383:12;17376:19;;17035:366;;;:::o;17407:419::-;17573:4;17611:2;17600:9;17596:18;17588:26;;17660:9;17654:4;17650:20;17646:1;17635:9;17631:17;17624:47;17688:131;17814:4;17688:131;:::i;:::-;17680:139;;17407:419;;;:::o;17832:442::-;17981:4;18019:2;18008:9;18004:18;17996:26;;18032:71;18100:1;18089:9;18085:17;18076:6;18032:71;:::i;:::-;18113:72;18181:2;18170:9;18166:18;18157:6;18113:72;:::i;:::-;18195;18263:2;18252:9;18248:18;18239:6;18195:72;:::i;:::-;17832:442;;;;;;:::o;18280:332::-;18401:4;18439:2;18428:9;18424:18;18416:26;;18452:71;18520:1;18509:9;18505:17;18496:6;18452:71;:::i;:::-;18533:72;18601:2;18590:9;18586:18;18577:6;18533:72;:::i;:::-;18280:332;;;;;:::o;18618:148::-;18720:11;18757:3;18742:18;;18618:148;;;;:::o;18772:173::-;18912:25;18908:1;18900:6;18896:14;18889:49;18772:173;:::o;18951:402::-;19111:3;19132:85;19214:2;19209:3;19132:85;:::i;:::-;19125:92;;19226:93;19315:3;19226:93;:::i;:::-;19344:2;19339:3;19335:12;19328:19;;18951:402;;;:::o;19359:99::-;19411:6;19445:5;19439:12;19429:22;;19359:99;;;:::o;19464:246::-;19545:1;19555:113;19569:6;19566:1;19563:13;19555:113;;;19654:1;19649:3;19645:11;19639:18;19635:1;19630:3;19626:11;19619:39;19591:2;19588:1;19584:10;19579:15;;19555:113;;;19702:1;19693:6;19688:3;19684:16;19677:27;19526:184;19464:246;;;:::o;19716:390::-;19822:3;19850:39;19883:5;19850:39;:::i;:::-;19905:89;19987:6;19982:3;19905:89;:::i;:::-;19898:96;;20003:65;20061:6;20056:3;20049:4;20042:5;20038:16;20003:65;:::i;:::-;20093:6;20088:3;20084:16;20077:23;;19826:280;19716:390;;;;:::o;20112:167::-;20252:19;20248:1;20240:6;20236:14;20229:43;20112:167;:::o;20285:402::-;20445:3;20466:85;20548:2;20543:3;20466:85;:::i;:::-;20459:92;;20560:93;20649:3;20560:93;:::i;:::-;20678:2;20673:3;20669:12;20662:19;;20285:402;;;:::o;20693:967::-;21075:3;21097:148;21241:3;21097:148;:::i;:::-;21090:155;;21262:95;21353:3;21344:6;21262:95;:::i;:::-;21255:102;;21374:148;21518:3;21374:148;:::i;:::-;21367:155;;21539:95;21630:3;21621:6;21539:95;:::i;:::-;21532:102;;21651:3;21644:10;;20693:967;;;;;:::o;21666:102::-;21707:6;21758:2;21754:7;21749:2;21742:5;21738:14;21734:28;21724:38;;21666:102;;;:::o;21774:377::-;21862:3;21890:39;21923:5;21890:39;:::i;:::-;21945:71;22009:6;22004:3;21945:71;:::i;:::-;21938:78;;22025:65;22083:6;22078:3;22071:4;22064:5;22060:16;22025:65;:::i;:::-;22115:29;22137:6;22115:29;:::i;:::-;22110:3;22106:39;22099:46;;21866:285;21774:377;;;;:::o;22157:313::-;22270:4;22308:2;22297:9;22293:18;22285:26;;22357:9;22351:4;22347:20;22343:1;22332:9;22328:17;22321:47;22385:78;22458:4;22449:6;22385:78;:::i;:::-;22377:86;;22157:313;;;;:::o;22476:229::-;22616:34;22612:1;22604:6;22600:14;22593:58;22685:12;22680:2;22672:6;22668:15;22661:37;22476:229;:::o;22711:366::-;22853:3;22874:67;22938:2;22933:3;22874:67;:::i;:::-;22867:74;;22950:93;23039:3;22950:93;:::i;:::-;23068:2;23063:3;23059:12;23052:19;;22711:366;;;:::o;23083:419::-;23249:4;23287:2;23276:9;23272:18;23264:26;;23336:9;23330:4;23326:20;23322:1;23311:9;23307:17;23300:47;23364:131;23490:4;23364:131;:::i;:::-;23356:139;;23083:419;;;:::o;23508:170::-;23648:22;23644:1;23636:6;23632:14;23625:46;23508:170;:::o;23684:366::-;23826:3;23847:67;23911:2;23906:3;23847:67;:::i;:::-;23840:74;;23923:93;24012:3;23923:93;:::i;:::-;24041:2;24036:3;24032:12;24025:19;;23684:366;;;:::o;24056:419::-;24222:4;24260:2;24249:9;24245:18;24237:26;;24309:9;24303:4;24299:20;24295:1;24284:9;24280:17;24273:47;24337:131;24463:4;24337:131;:::i;:::-;24329:139;;24056:419;;;:::o;24481:166::-;24621:18;24617:1;24609:6;24605:14;24598:42;24481:166;:::o;24653:366::-;24795:3;24816:67;24880:2;24875:3;24816:67;:::i;:::-;24809:74;;24892:93;24981:3;24892:93;:::i;:::-;25010:2;25005:3;25001:12;24994:19;;24653:366;;;:::o;25025:419::-;25191:4;25229:2;25218:9;25214:18;25206:26;;25278:9;25272:4;25268:20;25264:1;25253:9;25249:17;25242:47;25306:131;25432:4;25306:131;:::i;:::-;25298:139;;25025:419;;;:::o;25450:180::-;25498:77;25495:1;25488:88;25595:4;25592:1;25585:15;25619:4;25616:1;25609:15;25636:180;25684:77;25681:1;25674:88;25781:4;25778:1;25771:15;25805:4;25802:1;25795:15;25822:171;25861:3;25884:24;25902:5;25884:24;:::i;:::-;25875:33;;25930:4;25923:5;25920:15;25917:41;;25938:18;;:::i;:::-;25917:41;25985:1;25978:5;25974:13;25967:20;;25822:171;;;:::o;25999:182::-;26139:34;26135:1;26127:6;26123:14;26116:58;25999:182;:::o;26187:366::-;26329:3;26350:67;26414:2;26409:3;26350:67;:::i;:::-;26343:74;;26426:93;26515:3;26426:93;:::i;:::-;26544:2;26539:3;26535:12;26528:19;;26187:366;;;:::o;26559:419::-;26725:4;26763:2;26752:9;26748:18;26740:26;;26812:9;26806:4;26802:20;26798:1;26787:9;26783:17;26776:47;26840:131;26966:4;26840:131;:::i;:::-;26832:139;;26559:419;;;:::o;26984:225::-;27124:34;27120:1;27112:6;27108:14;27101:58;27193:8;27188:2;27180:6;27176:15;27169:33;26984:225;:::o;27215:366::-;27357:3;27378:67;27442:2;27437:3;27378:67;:::i;:::-;27371:74;;27454:93;27543:3;27454:93;:::i;:::-;27572:2;27567:3;27563:12;27556:19;;27215:366;;;:::o;27587:419::-;27753:4;27791:2;27780:9;27776:18;27768:26;;27840:9;27834:4;27830:20;27826:1;27815:9;27811:17;27804:47;27868:131;27994:4;27868:131;:::i;:::-;27860:139;;27587:419;;;:::o;28012:98::-;28063:6;28097:5;28091:12;28081:22;;28012:98;;;:::o;28116:147::-;28217:11;28254:3;28239:18;;28116:147;;;;:::o;28269:386::-;28373:3;28401:38;28433:5;28401:38;:::i;:::-;28455:88;28536:6;28531:3;28455:88;:::i;:::-;28448:95;;28552:65;28610:6;28605:3;28598:4;28591:5;28587:16;28552:65;:::i;:::-;28642:6;28637:3;28633:16;28626:23;;28377:278;28269:386;;;;:::o;28661:271::-;28791:3;28813:93;28902:3;28893:6;28813:93;:::i;:::-;28806:100;;28923:3;28916:10;;28661:271;;;;:::o;28938:179::-;29078:31;29074:1;29066:6;29062:14;29055:55;28938:179;:::o;29123:366::-;29265:3;29286:67;29350:2;29345:3;29286:67;:::i;:::-;29279:74;;29362:93;29451:3;29362:93;:::i;:::-;29480:2;29475:3;29471:12;29464:19;;29123:366;;;:::o;29495:419::-;29661:4;29699:2;29688:9;29684:18;29676:26;;29748:9;29742:4;29738:20;29734:1;29723:9;29719:17;29712:47;29776:131;29902:4;29776:131;:::i;:::-;29768:139;;29495:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2437400","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"446","__BaseUpgradeablePausable_init(address)":"infinite","buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)":"infinite","calculatePriceGENZ(uint256,uint256)":"infinite","getCurrentTokenPrice()":"infinite","getGENZTokenCount()":"2460","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3229","initialize(address)":"infinite","isAdmin()":"2792","pause()":"infinite","paused()":"2568","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"751","unpause()":"infinite","updateBaseSalePrice(uint256)":"infinite","updateMinimumWithdrawalPeriod(uint256)":"infinite","withdrawStakedToken()":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)":"34d131bf","calculatePriceGENZ(uint256,uint256)":"06fb46ba","getCurrentTokenPrice()":"f751758b","getGENZTokenCount()":"74a7dce5","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","isAdmin()":"b6db75a0","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a","updateBaseSalePrice(uint256)":"eaef3999","updateMinimumWithdrawalPeriod(uint256)":"051e6cb1","withdrawStakedToken()":"869eac93"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenDAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenGENZ\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyGENZ__TransactionFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__GENZBurnFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__GENZMintFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__InsufficientBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowSZTBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__PausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__TransactionFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ZeroAddressTransactionError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyGENZToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"issuedTokensGENZ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredTokens\",\"type\":\"uint256\"}],\"name\":\"calculatePriceGENZ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGENZTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pauseOperationAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"updateBaseSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueInDays\",\"type\":\"uint256\"}],\"name\":\"updateMinimumWithdrawalPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{\"buyGENZToken(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"value\":\": amount of SZT tokens user wishes to purchase\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow-constructor\":\"\",\"details\":\"initializing _tokenDAI\",\"params\":{\"tokenDAI\":\": address of the DAI token\"}},\"getGENZTokenCount()\":{\"details\":\"returns the token in circulation\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"details\":\"one time function to initialize the contract\",\"params\":{\"pauseOperationAddress\":\": address of the Global Pause Operation contract\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"BuySellGENZ__PausedError()\":[{\"notice\":\"Custom Error Codes\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/buySell/BuyGENZ.sol\":\"BuyGENZ\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/buySell/BuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Buy GENZ Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n/*\\n\\n10M GENZ tokens will be minted in supply, fixed capped.\\nInitial round tokens will be raised at $10M valuation for a sale of /\\n/ 200k token to raise 200k.\\nToken sale will be made live on multiple EVM chains including Ethereum, Polygon, Avalanche,\\nArbitrum and Optimism.\\nToken sale for now will not be made on BNB chain.\\n40k tokens will be offered for sale on each of the EVM chain to raise 40k on each of the chain.\\n\\nGENZ Token Utilities:\\n    1. Similar to traditional markets, earn dividend just by holding GENZ token every second.\\n    2. Similar to traditional markets, there is no need to stake GENZ tokens to ripe the dividend rewards.\\n    3. It will derive its value from the project's operation and profit generation.\\n    4. It will be used to reward the bug bounty hunters.\\n    5. It will also be awarded during the claim governance, so as users participating in the /\\n       / claim settlement process will earn free GENZ tokens as participation rewards.\\n    6. At the same time, GSZT tokens will be awarded to participants to close insured user's  /\\n       / pay-as-you-go insurance streams after the insurance period gets over.\\n\\n100M GENZ token supply will be as:\\n    - 20M on each of the following chain: Ethereum, Polygon, Avalanche, Arbitrum and Optimism.\\n    - In the later stages, when we'll integrate more chains, then GENZ tokens will be burned /\\n      accordingly to ensure capped 100M GENZ token supply. \\n\\n*/\\n\\n// Importing interfaces\\nimport \\\"./../../interfaces/IBuyGENZ.sol\\\";\\nimport \\\"./../../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./../../interfaces/IGlobalPauseOperation.sol\\\";\\n\\n/// Importing required libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n// Importing contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\ncontract BuyGENZ is IBuyGENZ, BaseUpgradeablePausable {\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\\n\\n    /// _tokenCounter: GENZ ERC20 tokens in circulation\\n    /// _currVersion: \\n    uint256 private _saleCap;\\n    uint256 private immutable _commonRatio;\\n    uint256 private _tokenCounter;\\n    uint256 private _baseSalePrice;\\n    uint256 private _basePriceWithDec;\\n    uint256 private _minWithdrawalPeriod;\\n    uint256 private constant WITHDRAWAL_PERIOD_MULTIPLIER = 8 hours;\\n\\n    /// _tokenDAI: DAI ERC20 token\\n    /// _tokenUSDC: USDC ERC20 token\\n    /// _globalPauseOperation: Global Pause Operations Contract\\n    IERC20Upgradeable private immutable _tokenDAI;\\n    IERC20Upgradeable private immutable _tokenGENZ;\\n    IGlobalPauseOperation private _globalPauseOperation;\\n    IERC20PermitUpgradeable private immutable _tokenPermitDAI;\\n\\n    struct StakeInformation {\\n        bool hasStaked;\\n        uint256 amount;\\n        uint256 minWithdrawTime;\\n    }\\n\\n    mapping(address => StakeInformation) private stakingInformation;\\n    \\n    modifier ifNotPaused() {\\n        require(\\n            (paused() != true) && \\n            (_globalPauseOperation.isPaused() != true));\\n        _;\\n    }\\n\\n    /// @dev initializing _tokenDAI\\n    /// @param tokenDAI: address of the DAI token\\n    /// @custom:oz-upgrades-unsafe-allow-constructor\\n    constructor(uint256 value, uint256 decimals, address tokenDAI, address tokenGENZ) {\\n        _tokenDAI = IERC20Upgradeable(tokenDAI); \\n        _tokenGENZ = IERC20Upgradeable(tokenGENZ); \\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAI);\\n        _commonRatio = (value * 10e17) / (10 ** decimals); // Immutable\\n    }\\n\\n    /// @dev one time function to initialize the contract\\n    /// @param pauseOperationAddress: address of the Global Pause Operation contract\\n    function initialize(\\n        address pauseOperationAddress\\n    ) external initializer {\\n        _baseSalePrice = 1;\\n        _basePriceWithDec = 1e18;\\n        _globalPauseOperation = IGlobalPauseOperation(pauseOperationAddress);\\n        __BaseUpgradeablePausable_init(_msgSender());\\n    }\\n\\n    function updateBaseSalePrice(uint256 tokenPrice) external onlyAdmin {\\n        _baseSalePrice = tokenPrice;\\n        _basePriceWithDec = tokenPrice * 1e18;\\n    }\\n\\n    function updateMinimumWithdrawalPeriod(uint256 valueInDays) external onlyAdmin {\\n        _minWithdrawalPeriod = valueInDays * 1 days;\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @dev \\n    /// @param value: amount of SZT tokens user wishes to purchase\\n    function buyGENZToken(\\n        uint256 value,\\n        uint deadline, \\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant ifNotPaused returns(bool) {\\n        if (value < 1e18) {\\n            revert BuySellGENZ__LowAmountError();\\n        }\\n        _minWithdrawalPeriod += WITHDRAWAL_PERIOD_MULTIPLIER;\\n        (/* uint256 amountPerToken */, uint256 amountToBePaid) = calculatePriceGENZ(\\n            _tokenCounter, _tokenCounter + value);\\n        if (amountToBePaid > _tokenDAI.balanceOf(_msgSender())) {\\n            revert BuySellGENZ__InsufficientBalanceError();\\n        }\\n        StakeInformation storage userStakeInformation = stakingInformation[_msgSender()];\\n        userStakeInformation.amount += value;\\n        userStakeInformation.hasStaked = true;\\n        userStakeInformation.minWithdrawTime = block.timestamp + _minWithdrawalPeriod;\\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), amountToBePaid, deadline, v, r, s);\\n        _tokenDAI.safeTransferFrom(_msgSender(), address(this), amountToBePaid);\\n        return true;\\n    }\\n\\n    function calculatePriceGENZ(\\n        uint256 issuedTokensGENZ, \\n        uint256 requiredTokens\\n    ) public view returns(uint256, uint256) {\\n        uint256 commonRatioGENZ = _commonRatio * _baseSalePrice;\\n        uint256 tokenDifference = (issuedTokensGENZ + (requiredTokens - 1e18));\\n        uint256 averageDiff = ((commonRatioGENZ * tokenDifference) / 2) / 1e18;\\n        uint256 amountPerToken = _basePriceWithDec + averageDiff;\\n        uint256 amountToBePaid = (amountPerToken * (requiredTokens - issuedTokensGENZ))/1e18;\\n        return (amountPerToken, amountToBePaid);\\n    }\\n\\n    error BuyGENZ__TransactionFailedError();\\n    function withdrawStakedToken() external {\\n        if (!stakingInformation[_msgSender()].hasStaked) {\\n            revert BuyGENZ__TransactionFailedError();\\n        }\\n        if (stakingInformation[_msgSender()].minWithdrawTime > block.timestamp ) {\\n            revert BuyGENZ__TransactionFailedError();\\n        }\\n        uint256 amountStaked = stakingInformation[_msgSender()].amount;\\n        stakingInformation[_msgSender()].hasStaked = false;\\n        stakingInformation[_msgSender()].amount = 0;\\n        _tokenGENZ.safeTransfer(_msgSender(), amountStaked);\\n    }\\n\\n    function getCurrentTokenPrice() public view returns(uint256) {\\n        (uint256 amountPerToken, /*uint256 amountToBePaid*/) = calculatePriceGENZ(\\n            _tokenCounter, _tokenCounter + 1e18);\\n        return amountPerToken;\\n    }\\n\\n    /// @dev returns the token in circulation\\n    function getGENZTokenCount() public view returns(uint256) {\\n        return _tokenCounter;\\n    }\\n}\",\"keccak256\":\"0x3f71520e104a54fad4c0238f9307096d01768182a2536d6cac676465258d599c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IBuyGENZ {\\n    \\n    /// Custom Error Codes\\n    error BuySellGENZ__PausedError();\\n    error BuySellGENZ__LowAmountError();\\n    error BuySellGENZ__LowSZTBalanceError();\\n    error BuySellGENZ__GENZBurnFailedError();\\n    error BuySellGENZ__GENZMintFailedError();\\n    error BuySellGENZ__ImmutableChangesError();\\n    error BuySellGENZ__TransactionFailedError();\\n    error BuySellGENZ__InsufficientBalanceError();\\n    error BuySellGENZ__ZeroAddressTransactionError();\\n\\n}\",\"keccak256\":\"0x74d79d87e23c822d6044d2489608ddbeb5ccc83b4db663c7bb509f46803da0ee\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"},\"contracts/interfaces/IGlobalPauseOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGlobalPauseOperation {\\n\\n    error GlobalPauseOps__ZeroAddressInputError();\\n\\n    error GlobalPauseOperation__ImmutableChangesError();\\n\\n    event PausedOperation(address account);\\n\\n    event UnpausedOperation(address account);\\n\\n    function pauseOperation() external returns(bool);\\n\\n    function unpauseOperation() external returns(bool);\\n    \\n    function isPaused() external view returns(bool);\\n}\",\"keccak256\":\"0x79586f955f8b52af0e350004f608462d4af71c872ea75ce1b633239c5d00fc29\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3132,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":4164,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_saleCap","offset":0,"slot":"251","type":"t_uint256"},{"astId":4168,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_tokenCounter","offset":0,"slot":"252","type":"t_uint256"},{"astId":4170,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_baseSalePrice","offset":0,"slot":"253","type":"t_uint256"},{"astId":4172,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_basePriceWithDec","offset":0,"slot":"254","type":"t_uint256"},{"astId":4174,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_minWithdrawalPeriod","offset":0,"slot":"255","type":"t_uint256"},{"astId":4187,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"_globalPauseOperation","offset":0,"slot":"256","type":"t_contract(IGlobalPauseOperation)5538"},{"astId":4202,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"stakingInformation","offset":0,"slot":"257","type":"t_mapping(t_address,t_struct(StakeInformation)4197_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IGlobalPauseOperation)5538":{"encoding":"inplace","label":"contract IGlobalPauseOperation","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_struct(StakeInformation)4197_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct BuyGENZ.StakeInformation)","numberOfBytes":"32","value":"t_struct(StakeInformation)4197_storage"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(StakeInformation)4197_storage":{"encoding":"inplace","label":"struct BuyGENZ.StakeInformation","members":[{"astId":4192,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"hasStaked","offset":0,"slot":"0","type":"t_bool"},{"astId":4194,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"amount","offset":0,"slot":"1","type":"t_uint256"},{"astId":4196,"contract":"contracts/core/buySell/BuyGENZ.sol:BuyGENZ","label":"minWithdrawTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"BuySellGENZ__PausedError()":[{"notice":"Custom Error Codes"}]},"kind":"user","methods":{},"notice":"Report any bug or issues at:","version":1}}},"contracts/core/staking/GENZStaking.sol":{"GENZStaking":{"abi":[{"inputs":[{"internalType":"address","name":"tokenAddressGENZ","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"GENZStaking__NotAMinimumStakeAmountError","type":"error"},{"inputs":[],"name":"GENZStaking__TransactionFailedError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"StakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UnstakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UpdatedMinStakingAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"UpdatedWithdrawTimer","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"activateWithdrawalTimer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"calculateRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakerClaimedRewardInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUserStakedGENZBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getVersionID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInDays","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"setWithdrawTime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"stakeGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalTokensStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"updateMinimumStakeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"withdrawGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4709":{"entryPoint":null,"id":4709,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":212,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":235,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":166,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":134,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":129,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":186,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1199:30","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:30","statements":[{"nodeType":"YulAssignment","src":"57:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:30"},"nodeType":"YulFunctionCall","src":"67:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:30"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:30","type":""}],"src":"7:75:30"},{"body":{"nodeType":"YulBlock","src":"177:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:30"},"nodeType":"YulFunctionCall","src":"187:12:30"},"nodeType":"YulExpressionStatement","src":"187:12:30"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:30"},{"body":{"nodeType":"YulBlock","src":"300:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:30"},"nodeType":"YulFunctionCall","src":"310:12:30"},"nodeType":"YulExpressionStatement","src":"310:12:30"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:30"},{"body":{"nodeType":"YulBlock","src":"379:81:30","statements":[{"nodeType":"YulAssignment","src":"389:65:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:30"},"nodeType":"YulFunctionCall","src":"400:54:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:30"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:30","type":""}],"src":"334:126:30"},{"body":{"nodeType":"YulBlock","src":"511:51:30","statements":[{"nodeType":"YulAssignment","src":"521:35:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:30"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:30"},"nodeType":"YulFunctionCall","src":"532:24:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:30"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:30","type":""}],"src":"466:96:30"},{"body":{"nodeType":"YulBlock","src":"611:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:30"},"nodeType":"YulFunctionCall","src":"670:12:30"},"nodeType":"YulExpressionStatement","src":"670:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:30"},"nodeType":"YulFunctionCall","src":"641:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:30"},"nodeType":"YulFunctionCall","src":"631:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:30"},"nodeType":"YulFunctionCall","src":"624:43:30"},"nodeType":"YulIf","src":"621:63:30"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:30","type":""}],"src":"568:122:30"},{"body":{"nodeType":"YulBlock","src":"759:80:30","statements":[{"nodeType":"YulAssignment","src":"769:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:30"},"nodeType":"YulFunctionCall","src":"778:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:30"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:30"},"nodeType":"YulFunctionCall","src":"800:33:30"},"nodeType":"YulExpressionStatement","src":"800:33:30"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:30","type":""}],"src":"696:143:30"},{"body":{"nodeType":"YulBlock","src":"922:274:30","statements":[{"body":{"nodeType":"YulBlock","src":"968:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"970:77:30"},"nodeType":"YulFunctionCall","src":"970:79:30"},"nodeType":"YulExpressionStatement","src":"970:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"943:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"952:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"939:3:30"},"nodeType":"YulFunctionCall","src":"939:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"964:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"935:3:30"},"nodeType":"YulFunctionCall","src":"935:32:30"},"nodeType":"YulIf","src":"932:119:30"},{"nodeType":"YulBlock","src":"1061:128:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1076:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1090:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1080:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1105:74:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1151:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1162:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1147:3:30"},"nodeType":"YulFunctionCall","src":"1147:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1171:7:30"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1115:31:30"},"nodeType":"YulFunctionCall","src":"1115:64:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1105:6:30"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"892:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"903:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"915:6:30","type":""}],"src":"845:351:30"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b5060405162003340380380620033408339818101604052810190620000379190620000eb565b670de0b6b3a764000060fc819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200011d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b38262000086565b9050919050565b620000c581620000a6565b8114620000d157600080fd5b50565b600081519050620000e581620000ba565b92915050565b60006020828403121562000104576200010362000081565b5b60006200011484828501620000d4565b91505092915050565b60805161320062000140600039600081816107ba01526111a301526132006000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636e810b1a116100c3578063b0e31b2d1161007c578063b0e31b2d14610378578063b6db75a014610396578063d547741f146103b4578063d6fb97a5146103d0578063ed0cdb1a14610400578063fe4b84df1461041e5761014d565b80636e810b1a146102ca57806377539417146102e657806377c379a4146103025780638456cb591461032057806391d148541461032a578063a217fddf1461035a5761014d565b80633e50de30116101155780633e50de301461021a5780633f4ba83a1461023857806353b3ad7f1461024257806358418587146102605780635c975abb1461027c5780636c64f0b41461029a5761014d565b806301ffc9a714610152578063060e5c6e14610182578063248a9ca3146101b25780632f2ff15d146101e257806336568abe146101fe575b600080fd5b61016c6004803603810190610167919061246c565b61043a565b60405161017991906124b4565b60405180910390f35b61019c60048036038101906101979190612505565b6104b4565b6040516101a991906124b4565b60405180910390f35b6101cc60048036038101906101c79190612568565b610865565b6040516101d991906125a4565b60405180910390f35b6101fc60048036038101906101f7919061261d565b610885565b005b6102186004803603810190610213919061261d565b6108a6565b005b610222610929565b60405161022f919061266c565b60405180910390f35b610240610ad5565b005b61024a610b26565b604051610257919061266c565b60405180910390f35b61027a60048036038101906102759190612505565b610b78565b005b610284610c02565b60405161029191906124b4565b60405180910390f35b6102b460048036038101906102af9190612505565b610c19565b6040516102c191906124b4565b60405180910390f35b6102e460048036038101906102df9190612687565b610d65565b005b61030060048036038101906102fb9190612505565b610e87565b005b61030a610f05565b604051610317919061266c565b60405180910390f35b610328610f0f565b005b610344600480360381019061033f919061261d565b610f60565b60405161035191906124b4565b60405180910390f35b610362610fcb565b60405161036f91906125a4565b60405180910390f35b610380610fd2565b60405161038d919061266c565b60405180910390f35b61039e610fd8565b6040516103ab91906124b4565b60405180910390f35b6103ce60048036038101906103c9919061261d565b610ff7565b005b6103ea60048036038101906103e59190612505565b611018565b6040516103f791906124b4565b60405180910390f35b61040861124f565b604051610415919061266c565b60405180910390f35b61043860048036038101906104339190612505565b6112fa565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ad57506104ac82611454565b5b9050919050565b60006104be6114be565b600061010060006104cd61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600101541080610563575060ff600061052261150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015442105b806105b6575060ff600061057561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015483115b156105ed576040517f71a61d9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fb600081546105fc906126e3565b919050819055508260fe6000828254610615919061272b565b9250508190555082816001016000828254610630919061272b565b9250508190555082610102600061064561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060fb548152602001908152602001600020600101819055508260ff60006106a661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361074c57600060ff60006106f761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505b8260ff600061075961150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107a5919061272b565b925050819055506107fe6107b761150d565b847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166115159092919063ffffffff16565b61080661150d565b73ffffffffffffffffffffffffffffffffffffffff167f33acb29a4ba6d440da1a7ba75e505a000b362f21a991b589437f8f04dd98fd6b8460405161084b919061266c565b60405180910390a2600191505061086061159b565b919050565b600060976000838152602001908152602001600020600101549050919050565b61088e82610865565b610897816115a5565b6108a183836115b9565b505050565b6108ae61150d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461091b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610912906127e2565b60405180910390fd5b610925828261169a565b5050565b60008060009050600061093a61177c565b905060008160008151811061095257610951612802565b5b6020026020010151905060008060008390505b60fb548111610ac9576000610102600061097d61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050818684815181106109fd576109fc612802565b5b602002602001015103610a4e57600081600001511115610a2e57806000015187610a279190612831565b9650610a41565b806020015187610a3e919061272b565b96505b82610a4b906126e3565b92505b600061010160008481526020019081526020016000209050600081600001548260010154610a7c919061272b565b9050816003015482600201548a83610a949190612865565b610a9e9190612865565b610aa891906128ee565b86610ab39190612831565b955083610abf906126e3565b9350505050610965565b50819550505050505090565b610add610fd8565b610b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1390612991565b60405180910390fd5b610b24611a37565b565b60006101006000610b3561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154905090565b610b80610fd8565b610bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb690612991565b60405180910390fd5b603c81610bcc9190612865565b60fd81905550807fc43e5db88f387521adfb9f79c0c9efd47004dc3a041358383ecccb1a1509dbf660405160405180910390a250565b6000603360009054906101000a900460ff16905090565b600060ff6000610c2761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580610cc657508160ff6000610c8661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154105b15610d5b57600060ff6000610cd961150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff0219169083151502179055508281600101819055504260fd54610d499190612831565b81600201819055506001915050610d60565b600090505b919050565b600060019054906101000a900460ff16610db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dab90612a23565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e1a576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e22611a9a565b610e2a611af3565b610e32611b44565b610e43610e3d611b9d565b826115b9565b610e54610e4e611bc5565b826115b9565b610e6c610e5f611bc5565b610e67611b9d565b611bed565b610e84610e77611b9d565b610e7f611b9d565b611bed565b50565b610e8f610fd8565b610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590612991565b60405180910390fd5b8060fc81905550807f4e84e59515fa6d59eedd951d065c81f1962f0e5132f2e9120b47d64c7b33a17760405160405180910390a250565b600060fb54905090565b610f17610fd8565b610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d90612991565b60405180910390fd5b610f5e611c49565b565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60fe5481565b6000610ff2610fe5611b9d565b610fed61150d565b610f60565b905090565b61100082610865565b611009816115a5565b611013838361169a565b505050565b60006110226114be565b60fc5482101561105e576040517fad40140300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fb6000815461106d906126e3565b919050819055506000610100600061108361150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff166110fe5760018160000160006101000a81548160ff02191690831515021790555060fb5481600201819055505b828160010160008282546111129190612831565b9250508190555082610102600061112761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060fb548152602001908152602001600020600001819055508260fe600082825461118d9190612831565b925050819055506111e861119f61150d565b30857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611cac909392919063ffffffff16565b6111f061150d565b73ffffffffffffffffffffffffffffffffffffffff167ff1e64f5ab94083442836ae6ef7e94101f7fcc786c3e761b00d5f4e10c6c2019684604051611235919061266c565b60405180910390a2600191505061124a61159b565b919050565b600080610100600061125f61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154116112a95760006112f5565b61010060006112b661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101545b905090565b60008060019054906101000a900460ff1615905080801561132b5750600160008054906101000a900460ff1660ff16105b80611358575061133a30611d35565b1580156113575750600160008054906101000a900460ff1660ff16145b5b611397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138e90612ab5565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156113d4576001600060016101000a81548160ff0219169083151502179055505b603c826113e19190612865565b60fd819055506113f76113f261150d565b610d65565b80156114505760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516114479190612b27565b60405180910390a15b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600260c95403611503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fa90612b8e565b60405180910390fd5b600260c981905550565b600033905090565b6115968363a9059cbb60e01b8484604051602401611534929190612bbd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d58565b505050565b600160c981905550565b6115b6816115b161150d565b611e1f565b50565b6115c38282610f60565b6116965760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061163b61150d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6116a48282610f60565b156117785760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061171d61150d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6060600080610100600061178e61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905060006117d8610f05565b905060008290505b8181116118da57600061010260006117f661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411156118585783611855906126e3565b93505b6000610102600061186761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411156118c957836118c6906126e3565b93505b806118d3906126e3565b90506117e0565b5060008367ffffffffffffffff8111156118f7576118f6612be6565b5b6040519080825280602002602001820160405280156119255781602001602082028036833780820191505090505b5090506000808490505b838111611a2b576000610102600061194561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000816000015111156119df57818484815181106119d2576119d1612802565b5b6020026020010181815250505b600081602001511115611a0d5781848481518110611a00576119ff612802565b5b6020026020010181815250505b82611a17906126e3565b925081611a23906126e3565b91505061192f565b50819550505050505090565b611a3f611ea4565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611a8361150d565b604051611a909190612c15565b60405180910390a1565b600060019054906101000a900460ff16611ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae090612a23565b60405180910390fd5b611af1611eed565b565b600060019054906101000a900460ff16611b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3990612a23565b60405180910390fd5b565b600060019054906101000a900460ff16611b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8a90612a23565b60405180910390fd5b611b9b611f59565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b6000611bf883610865565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b611c51611fb2565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c9561150d565b604051611ca29190612c15565b60405180910390a1565b611d2f846323b872dd60e01b858585604051602401611ccd93929190612c30565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d58565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611dba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ffc9092919063ffffffff16565b9050600081511115611e1a5780806020019051810190611dda9190612c93565b611e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1090612d32565b60405180910390fd5b5b505050565b611e298282610f60565b611ea057611e3681612014565b611e448360001c6020612041565b604051602001611e55929190612e5b565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e979190612edf565b60405180910390fd5b5050565b611eac610c02565b611eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee290612f4d565b60405180910390fd5b565b600060019054906101000a900460ff16611f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3390612a23565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9f90612a23565b60405180910390fd5b600160c981905550565b611fba610c02565b15611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff190612fb9565b60405180910390fd5b565b606061200b848460008561227d565b90509392505050565b606061203a8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612041565b9050919050565b6060600060028360026120549190612865565b61205e9190612831565b67ffffffffffffffff81111561207757612076612be6565b5b6040519080825280601f01601f1916602001820160405280156120a95781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120e1576120e0612802565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061214557612144612802565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026121859190612865565b61218f9190612831565b90505b600181111561222f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106121d1576121d0612802565b5b1a60f81b8282815181106121e8576121e7612802565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061222890612fd9565b9050612192565b5060008414612273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226a9061304e565b60405180910390fd5b8091505092915050565b6060824710156122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b9906130e0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122eb9190613147565b60006040518083038185875af1925050503d8060008114612328576040519150601f19603f3d011682016040523d82523d6000602084013e61232d565b606091505b509150915061233e8783838761234a565b92505050949350505050565b606083156123ac5760008351036123a45761236485611d35565b6123a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239a906131aa565b60405180910390fd5b5b8290506123b7565b6123b683836123bf565b5b949350505050565b6000825111156123d25781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124069190612edf565b60405180910390fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61244981612414565b811461245457600080fd5b50565b60008135905061246681612440565b92915050565b6000602082840312156124825761248161240f565b5b600061249084828501612457565b91505092915050565b60008115159050919050565b6124ae81612499565b82525050565b60006020820190506124c960008301846124a5565b92915050565b6000819050919050565b6124e2816124cf565b81146124ed57600080fd5b50565b6000813590506124ff816124d9565b92915050565b60006020828403121561251b5761251a61240f565b5b6000612529848285016124f0565b91505092915050565b6000819050919050565b61254581612532565b811461255057600080fd5b50565b6000813590506125628161253c565b92915050565b60006020828403121561257e5761257d61240f565b5b600061258c84828501612553565b91505092915050565b61259e81612532565b82525050565b60006020820190506125b96000830184612595565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125ea826125bf565b9050919050565b6125fa816125df565b811461260557600080fd5b50565b600081359050612617816125f1565b92915050565b600080604083850312156126345761263361240f565b5b600061264285828601612553565b925050602061265385828601612608565b9150509250929050565b612666816124cf565b82525050565b6000602082019050612681600083018461265d565b92915050565b60006020828403121561269d5761269c61240f565b5b60006126ab84828501612608565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ee826124cf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036127205761271f6126b4565b5b600182019050919050565b6000612736826124cf565b9150612741836124cf565b9250828203905081811115612759576127586126b4565b5b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006127cc602f8361275f565b91506127d782612770565b604082019050919050565b600060208201905081810360008301526127fb816127bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061283c826124cf565b9150612847836124cf565b925082820190508082111561285f5761285e6126b4565b5b92915050565b6000612870826124cf565b915061287b836124cf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128b4576128b36126b4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006128f9826124cf565b9150612904836124cf565b925082612914576129136128bf565b5b828204905092915050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b600061297b602c8361275f565b91506129868261291f565b604082019050919050565b600060208201905081810360008301526129aa8161296e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612a0d602b8361275f565b9150612a18826129b1565b604082019050919050565b60006020820190508181036000830152612a3c81612a00565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612a9f602e8361275f565b9150612aaa82612a43565b604082019050919050565b60006020820190508181036000830152612ace81612a92565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612b11612b0c612b0784612ad5565b612aec565b612adf565b9050919050565b612b2181612af6565b82525050565b6000602082019050612b3c6000830184612b18565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612b78601f8361275f565b9150612b8382612b42565b602082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b612bb7816125df565b82525050565b6000604082019050612bd26000830185612bae565b612bdf602083018461265d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082019050612c2a6000830184612bae565b92915050565b6000606082019050612c456000830186612bae565b612c526020830185612bae565b612c5f604083018461265d565b949350505050565b612c7081612499565b8114612c7b57600080fd5b50565b600081519050612c8d81612c67565b92915050565b600060208284031215612ca957612ca861240f565b5b6000612cb784828501612c7e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612d1c602a8361275f565b9150612d2782612cc0565b604082019050919050565b60006020820190508181036000830152612d4b81612d0f565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612d93601783612d52565b9150612d9e82612d5d565b601782019050919050565b600081519050919050565b60005b83811015612dd2578082015181840152602081019050612db7565b60008484015250505050565b6000612de982612da9565b612df38185612d52565b9350612e03818560208601612db4565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612e45601183612d52565b9150612e5082612e0f565b601182019050919050565b6000612e6682612d86565b9150612e728285612dde565b9150612e7d82612e38565b9150612e898284612dde565b91508190509392505050565b6000601f19601f8301169050919050565b6000612eb182612da9565b612ebb818561275f565b9350612ecb818560208601612db4565b612ed481612e95565b840191505092915050565b60006020820190508181036000830152612ef98184612ea6565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612f3760148361275f565b9150612f4282612f01565b602082019050919050565b60006020820190508181036000830152612f6681612f2a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612fa360108361275f565b9150612fae82612f6d565b602082019050919050565b60006020820190508181036000830152612fd281612f96565b9050919050565b6000612fe4826124cf565b915060008203612ff757612ff66126b4565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061303860208361275f565b915061304382613002565b602082019050919050565b600060208201905081810360008301526130678161302b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006130ca60268361275f565b91506130d58261306e565b604082019050919050565b600060208201905081810360008301526130f9816130bd565b9050919050565b600081519050919050565b600081905092915050565b600061312182613100565b61312b818561310b565b935061313b818560208601612db4565b80840191505092915050565b60006131538284613116565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613194601d8361275f565b915061319f8261315e565b602082019050919050565b600060208201905081810360008301526131c381613187565b905091905056fea26469706673582212209244fb75e03e2c2584984e44d948817fbb848b355f96dc21b7b494e461edaae264736f6c63430008100033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3340 CODESIZE SUB DUP1 PUSH3 0x3340 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0xEB JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH1 0xFC DUP2 SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP PUSH3 0x11D JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB3 DUP3 PUSH3 0x86 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xC5 DUP2 PUSH3 0xA6 JUMP JUMPDEST DUP2 EQ PUSH3 0xD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0xE5 DUP2 PUSH3 0xBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x104 JUMPI PUSH3 0x103 PUSH3 0x81 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x114 DUP5 DUP3 DUP6 ADD PUSH3 0xD4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x3200 PUSH3 0x140 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x7BA ADD MSTORE PUSH2 0x11A3 ADD MSTORE PUSH2 0x3200 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xB0E31B2D GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB0E31B2D EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0xD6FB97A5 EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0xED0CDB1A EQ PUSH2 0x400 JUMPI DUP1 PUSH4 0xFE4B84DF EQ PUSH2 0x41E JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x77539417 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x77C379A4 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x35A JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x3E50DE30 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x3E50DE30 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x53B3AD7F EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x58418587 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x6C64F0B4 EQ PUSH2 0x29A JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x60E5C6E EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1FE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x2568 JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D9 SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0x8A6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x222 PUSH2 0x929 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x240 PUSH2 0xAD5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24A PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x284 PUSH2 0xC02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x2687 JUMP JUMPDEST PUSH2 0xD65 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30A PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x328 PUSH2 0xF0F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x344 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33F SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0xF60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x362 PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x380 PUSH2 0xFD2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39E PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0xFF7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E5 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x408 PUSH2 0x124F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x415 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x438 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0x12FA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4AD JUMPI POP PUSH2 0x4AC DUP3 PUSH2 0x1454 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BE PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x4CD PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x1 ADD SLOAD LT DUP1 PUSH2 0x563 JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x522 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT JUMPDEST DUP1 PUSH2 0x5B6 JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x575 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 GT JUMPDEST ISZERO PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x71A61D9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x5FC SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x615 SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x630 SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x645 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x6A6 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SUB PUSH2 0x74C JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0x6F7 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x759 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7A5 SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x7FE PUSH2 0x7B7 PUSH2 0x150D JUMP JUMPDEST DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1515 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x806 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x33ACB29A4BA6D440DA1A7BA75E505A000B362F21A991B589437F8F04DD98FD6B DUP5 PUSH1 0x40 MLOAD PUSH2 0x84B SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x860 PUSH2 0x159B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x88E DUP3 PUSH2 0x865 JUMP JUMPDEST PUSH2 0x897 DUP2 PUSH2 0x15A5 JUMP JUMPDEST PUSH2 0x8A1 DUP4 DUP4 PUSH2 0x15B9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x8AE PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x91B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x912 SWAP1 PUSH2 0x27E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x925 DUP3 DUP3 PUSH2 0x169A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0x93A PUSH2 0x177C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x952 JUMPI PUSH2 0x951 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 SWAP1 POP JUMPDEST PUSH1 0xFB SLOAD DUP2 GT PUSH2 0xAC9 JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x97D PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9FD JUMPI PUSH2 0x9FC PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB PUSH2 0xA4E JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xA2E JUMPI DUP1 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0xA27 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP7 POP PUSH2 0xA41 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0xA3E SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP7 POP JUMPDEST DUP3 PUSH2 0xA4B SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x3 ADD SLOAD DUP3 PUSH1 0x2 ADD SLOAD DUP11 DUP4 PUSH2 0xA94 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0xA9E SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x28EE JUMP JUMPDEST DUP7 PUSH2 0xAB3 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP6 POP DUP4 PUSH2 0xABF SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x965 JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xADD PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xB1C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB13 SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB24 PUSH2 0x1A37 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0xB35 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB80 PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xBBF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB6 SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xBCC SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0xC43E5DB88F387521ADFB9F79C0C9EFD47004DC3A041358383ECCCB1A1509DBF6 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC27 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0xCC6 JUMPI POP DUP2 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC86 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD LT JUMPDEST ISZERO PUSH2 0xD5B JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xCD9 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP PUSH1 0xFD SLOAD PUSH2 0xD49 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP PUSH2 0xD60 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDAB SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE22 PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0xE2A PUSH2 0x1AF3 JUMP JUMPDEST PUSH2 0xE32 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xE43 PUSH2 0xE3D PUSH2 0x1B9D JUMP JUMPDEST DUP3 PUSH2 0x15B9 JUMP JUMPDEST PUSH2 0xE54 PUSH2 0xE4E PUSH2 0x1BC5 JUMP JUMPDEST DUP3 PUSH2 0x15B9 JUMP JUMPDEST PUSH2 0xE6C PUSH2 0xE5F PUSH2 0x1BC5 JUMP JUMPDEST PUSH2 0xE67 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0x1BED JUMP JUMPDEST PUSH2 0xE84 PUSH2 0xE77 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0xE7F PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0x1BED JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xE8F PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC5 SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFC DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0x4E84E59515FA6D59EEDD951D065C81F1962F0E5132F2E9120B47D64C7B33A177 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF17 PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xF56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4D SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF5E PUSH2 0x1C49 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0xFE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF2 PUSH2 0xFE5 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0xFED PUSH2 0x150D JUMP JUMPDEST PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1000 DUP3 PUSH2 0x865 JUMP JUMPDEST PUSH2 0x1009 DUP2 PUSH2 0x15A5 JUMP JUMPDEST PUSH2 0x1013 DUP4 DUP4 PUSH2 0x169A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1022 PUSH2 0x14BE JUMP JUMPDEST PUSH1 0xFC SLOAD DUP3 LT ISZERO PUSH2 0x105E JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD40140300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x106D SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x1083 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x10FE JUMPI PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFB SLOAD DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1112 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1127 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x118D SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x11E8 PUSH2 0x119F PUSH2 0x150D JUMP JUMPDEST ADDRESS DUP6 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1CAC SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x11F0 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF1E64F5AB94083442836AE6EF7E94101F7FCC786C3E761B00D5F4E10C6C20196 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1235 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x124A PUSH2 0x159B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x125F PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT PUSH2 0x12A9 JUMPI PUSH1 0x0 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x0 PUSH2 0x12B6 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x132B JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x1358 JUMPI POP PUSH2 0x133A ADDRESS PUSH2 0x1D35 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1357 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x1397 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138E SWAP1 PUSH2 0x2AB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x13D4 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3C DUP3 PUSH2 0x13E1 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH2 0x13F7 PUSH2 0x13F2 PUSH2 0x150D JUMP JUMPDEST PUSH2 0xD65 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1450 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1447 SWAP2 SWAP1 PUSH2 0x2B27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1503 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14FA SWAP1 PUSH2 0x2B8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1596 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1534 SWAP3 SWAP2 SWAP1 PUSH2 0x2BBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D58 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x15B6 DUP2 PUSH2 0x15B1 PUSH2 0x150D JUMP JUMPDEST PUSH2 0x1E1F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x15C3 DUP3 DUP3 PUSH2 0xF60 JUMP JUMPDEST PUSH2 0x1696 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x163B PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16A4 DUP3 DUP3 PUSH2 0xF60 JUMP JUMPDEST ISZERO PUSH2 0x1778 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x171D PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x178E PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x17D8 PUSH2 0xF05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SWAP1 POP JUMPDEST DUP2 DUP2 GT PUSH2 0x18DA JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x17F6 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x1858 JUMPI DUP4 PUSH2 0x1855 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1867 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x18C9 JUMPI DUP4 PUSH2 0x18C6 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP4 POP JUMPDEST DUP1 PUSH2 0x18D3 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP1 POP PUSH2 0x17E0 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18F7 JUMPI PUSH2 0x18F6 PUSH2 0x2BE6 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1925 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP4 DUP2 GT PUSH2 0x1A2B JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1945 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0x19DF JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x19D2 JUMPI PUSH2 0x19D1 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x1A0D JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1A00 JUMPI PUSH2 0x19FF PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP3 PUSH2 0x1A17 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP3 POP DUP2 PUSH2 0x1A23 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x192F JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x1A3F PUSH2 0x1EA4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1A83 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A90 SWAP2 SWAP1 PUSH2 0x2C15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1AE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AE0 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1AF1 PUSH2 0x1EED JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B39 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B93 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B8A SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B9B PUSH2 0x1F59 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BF8 DUP4 PUSH2 0x865 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x1C51 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1C95 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CA2 SWAP2 SWAP1 PUSH2 0x2C15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1D2F DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CCD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C30 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D58 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DBA DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1FFC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1E1A JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1DDA SWAP2 SWAP1 PUSH2 0x2C93 JUMP JUMPDEST PUSH2 0x1E19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E10 SWAP1 PUSH2 0x2D32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1E29 DUP3 DUP3 PUSH2 0xF60 JUMP JUMPDEST PUSH2 0x1EA0 JUMPI PUSH2 0x1E36 DUP2 PUSH2 0x2014 JUMP JUMPDEST PUSH2 0x1E44 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2041 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1E55 SWAP3 SWAP2 SWAP1 PUSH2 0x2E5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E97 SWAP2 SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1EAC PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x1EEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EE2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F33 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F9F SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1FBA PUSH2 0xC02 JUMP JUMPDEST ISZERO PUSH2 0x1FFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FF1 SWAP1 PUSH2 0x2FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x200B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x227D JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x203A DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2041 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2054 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0x205E SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2077 JUMPI PUSH2 0x2076 PUSH2 0x2BE6 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20A9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x20E1 JUMPI PUSH2 0x20E0 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2145 JUMPI PUSH2 0x2144 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x2185 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0x218F SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x222F JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x21D1 JUMPI PUSH2 0x21D0 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x21E8 JUMPI PUSH2 0x21E7 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2228 SWAP1 PUSH2 0x2FD9 JUMP JUMPDEST SWAP1 POP PUSH2 0x2192 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x2273 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x226A SWAP1 PUSH2 0x304E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x22C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22B9 SWAP1 PUSH2 0x30E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x22EB SWAP2 SWAP1 PUSH2 0x3147 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2328 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x232D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x233E DUP8 DUP4 DUP4 DUP8 PUSH2 0x234A JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x23AC JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x23A4 JUMPI PUSH2 0x2364 DUP6 PUSH2 0x1D35 JUMP JUMPDEST PUSH2 0x23A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x239A SWAP1 PUSH2 0x31AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x23B7 JUMP JUMPDEST PUSH2 0x23B6 DUP4 DUP4 PUSH2 0x23BF JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x23D2 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2406 SWAP2 SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2449 DUP2 PUSH2 0x2414 JUMP JUMPDEST DUP2 EQ PUSH2 0x2454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2466 DUP2 PUSH2 0x2440 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2482 JUMPI PUSH2 0x2481 PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2490 DUP5 DUP3 DUP6 ADD PUSH2 0x2457 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24AE DUP2 PUSH2 0x2499 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x24C9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24A5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24E2 DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP2 EQ PUSH2 0x24ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24FF DUP2 PUSH2 0x24D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251B JUMPI PUSH2 0x251A PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2529 DUP5 DUP3 DUP6 ADD PUSH2 0x24F0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2545 DUP2 PUSH2 0x2532 JUMP JUMPDEST DUP2 EQ PUSH2 0x2550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2562 DUP2 PUSH2 0x253C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257E JUMPI PUSH2 0x257D PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x258C DUP5 DUP3 DUP6 ADD PUSH2 0x2553 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x259E DUP2 PUSH2 0x2532 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2595 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25EA DUP3 PUSH2 0x25BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25FA DUP2 PUSH2 0x25DF JUMP JUMPDEST DUP2 EQ PUSH2 0x2605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2617 DUP2 PUSH2 0x25F1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2634 JUMPI PUSH2 0x2633 PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2642 DUP6 DUP3 DUP7 ADD PUSH2 0x2553 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2653 DUP6 DUP3 DUP7 ADD PUSH2 0x2608 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2666 DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2681 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x265D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x269D JUMPI PUSH2 0x269C PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26AB DUP5 DUP3 DUP6 ADD PUSH2 0x2608 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26EE DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2720 JUMPI PUSH2 0x271F PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2736 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2741 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2759 JUMPI PUSH2 0x2758 PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27CC PUSH1 0x2F DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x27D7 DUP3 PUSH2 0x2770 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x27FB DUP2 PUSH2 0x27BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x283C DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2847 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x285F JUMPI PUSH2 0x285E PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2870 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x287B DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x28B4 JUMPI PUSH2 0x28B3 PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28F9 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2904 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2914 JUMPI PUSH2 0x2913 PUSH2 0x28BF JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x297B PUSH1 0x2C DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2986 DUP3 PUSH2 0x291F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29AA DUP2 PUSH2 0x296E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A0D PUSH1 0x2B DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2A18 DUP3 PUSH2 0x29B1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A3C DUP2 PUSH2 0x2A00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9F PUSH1 0x2E DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2AAA DUP3 PUSH2 0x2A43 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2ACE DUP2 PUSH2 0x2A92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B11 PUSH2 0x2B0C PUSH2 0x2B07 DUP5 PUSH2 0x2AD5 JUMP JUMPDEST PUSH2 0x2AEC JUMP JUMPDEST PUSH2 0x2ADF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B21 DUP2 PUSH2 0x2AF6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B3C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2B18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B78 PUSH1 0x1F DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2B83 DUP3 PUSH2 0x2B42 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BA7 DUP2 PUSH2 0x2B6B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BB7 DUP2 PUSH2 0x25DF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2BD2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x2BDF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x265D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2C2A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BAE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2C45 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x2C52 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x2C5F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x265D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C70 DUP2 PUSH2 0x2499 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2C8D DUP2 PUSH2 0x2C67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CA9 JUMPI PUSH2 0x2CA8 PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CB7 DUP5 DUP3 DUP6 ADD PUSH2 0x2C7E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1C PUSH1 0x2A DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2D27 DUP3 PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D4B DUP2 PUSH2 0x2D0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D93 PUSH1 0x17 DUP4 PUSH2 0x2D52 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D9E DUP3 PUSH2 0x2D5D JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DD2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2DB7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE9 DUP3 PUSH2 0x2DA9 JUMP JUMPDEST PUSH2 0x2DF3 DUP2 DUP6 PUSH2 0x2D52 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E03 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E45 PUSH1 0x11 DUP4 PUSH2 0x2D52 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E50 DUP3 PUSH2 0x2E0F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E66 DUP3 PUSH2 0x2D86 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E72 DUP3 DUP6 PUSH2 0x2DDE JUMP JUMPDEST SWAP2 POP PUSH2 0x2E7D DUP3 PUSH2 0x2E38 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E89 DUP3 DUP5 PUSH2 0x2DDE JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB1 DUP3 PUSH2 0x2DA9 JUMP JUMPDEST PUSH2 0x2EBB DUP2 DUP6 PUSH2 0x275F JUMP JUMPDEST SWAP4 POP PUSH2 0x2ECB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0x2ED4 DUP2 PUSH2 0x2E95 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EF9 DUP2 DUP5 PUSH2 0x2EA6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F37 PUSH1 0x14 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2F42 DUP3 PUSH2 0x2F01 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F66 DUP2 PUSH2 0x2F2A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FA3 PUSH1 0x10 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2FAE DUP3 PUSH2 0x2F6D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FD2 DUP2 PUSH2 0x2F96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FE4 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2FF7 JUMPI PUSH2 0x2FF6 PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3038 PUSH1 0x20 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x3043 DUP3 PUSH2 0x3002 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3067 DUP2 PUSH2 0x302B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30CA PUSH1 0x26 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x30D5 DUP3 PUSH2 0x306E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30F9 DUP2 PUSH2 0x30BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3121 DUP3 PUSH2 0x3100 JUMP JUMPDEST PUSH2 0x312B DUP2 DUP6 PUSH2 0x310B JUMP JUMPDEST SWAP4 POP PUSH2 0x313B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3153 DUP3 DUP5 PUSH2 0x3116 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3194 PUSH1 0x1D DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x319F DUP3 PUSH2 0x315E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31C3 DUP2 PUSH2 0x3187 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 DIFFICULTY 0xFB PUSH22 0xE03E2C2584984E44D948817FBB848B355F96DC21B7B4 SWAP5 0xE4 PUSH2 0xEDAA 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"765:7199:24:-:0;;;2126:148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2205:4;2188:14;:21;;;;2250:16;2219:48;;;;;;;;;;2126:148;765:7199;;88:117:30;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;765:7199:24:-;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":4043,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":6899,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_4097":{"entryPoint":3429,"id":4097,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":6810,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":7917,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":6980,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":8025,"id":740,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_2002":{"entryPoint":7512,"id":2002,"parameterSlots":2,"returnSlots":0},"@_checkRole_107":{"entryPoint":5541,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":7711,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":5561,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_2314":{"entryPoint":5389,"id":2314,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_774":{"entryPoint":5531,"id":774,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_766":{"entryPoint":5310,"id":766,"parameterSlots":0,"returnSlots":0},"@_pause_685":{"entryPoint":7241,"id":685,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_658":{"entryPoint":8114,"id":658,"parameterSlots":0,"returnSlots":0},"@_requirePaused_669":{"entryPoint":7844,"id":669,"parameterSlots":0,"returnSlots":0},"@_revert_2286":{"entryPoint":9151,"id":2286,"parameterSlots":2,"returnSlots":0},"@_revokeRole_329":{"entryPoint":5786,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":7149,"id":266,"parameterSlots":2,"returnSlots":0},"@_unpause_701":{"entryPoint":6711,"id":701,"parameterSlots":0,"returnSlots":0},"@activateWithdrawalTimer_4929":{"entryPoint":3097,"id":4929,"parameterSlots":1,"returnSlots":1},"@calculateRewards_5292":{"entryPoint":2345,"id":5292,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_2157":{"entryPoint":8829,"id":2157,"parameterSlots":4,"returnSlots":1},"@functionCall_2093":{"entryPoint":8188,"id":2093,"parameterSlots":3,"returnSlots":1},"@getActiveVersionID_5179":{"entryPoint":6012,"id":5179,"parameterSlots":0,"returnSlots":1},"@getAdminRole_4132":{"entryPoint":7069,"id":4132,"parameterSlots":0,"returnSlots":1},"@getPauserRole_4140":{"entryPoint":7109,"id":4140,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":2149,"id":161,"parameterSlots":1,"returnSlots":1},"@getStakerClaimedRewardInfo_5327":{"entryPoint":2854,"id":5327,"parameterSlots":0,"returnSlots":1},"@getUserStakedGENZBalance_5315":{"entryPoint":4687,"id":5315,"parameterSlots":0,"returnSlots":1},"@getVersionID_5049":{"entryPoint":3845,"id":5049,"parameterSlots":0,"returnSlots":1},"@grantRole_181":{"entryPoint":2181,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":3936,"id":94,"parameterSlots":2,"returnSlots":1},"@initialize_4728":{"entryPoint":4858,"id":4728,"parameterSlots":1,"returnSlots":0},"@isAdmin_4111":{"entryPoint":4056,"id":4111,"parameterSlots":0,"returnSlots":1},"@isContract_2021":{"entryPoint":7477,"id":2021,"parameterSlots":1,"returnSlots":1},"@pause_4737":{"entryPoint":3855,"id":4737,"parameterSlots":0,"returnSlots":0},"@paused_646":{"entryPoint":3074,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":2214,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":4087,"id":201,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_1780":{"entryPoint":7340,"id":1780,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1754":{"entryPoint":5397,"id":1754,"parameterSlots":3,"returnSlots":0},"@setWithdrawTime_4781":{"entryPoint":2936,"id":4781,"parameterSlots":1,"returnSlots":0},"@stakeGENZ_4868":{"entryPoint":4120,"id":4868,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3127":{"entryPoint":5204,"id":3127,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1082,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_2557":{"entryPoint":8257,"id":2557,"parameterSlots":2,"returnSlots":1},"@toHexString_2577":{"entryPoint":8212,"id":2577,"parameterSlots":1,"returnSlots":1},"@totalTokensStaked_4631":{"entryPoint":4050,"id":4631,"parameterSlots":0,"returnSlots":0},"@unpause_4746":{"entryPoint":2773,"id":4746,"parameterSlots":0,"returnSlots":0},"@updateMinimumStakeAmount_4762":{"entryPoint":3719,"id":4762,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_2242":{"entryPoint":9034,"id":2242,"parameterSlots":4,"returnSlots":1},"@withdrawGENZ_5041":{"entryPoint":1204,"id":5041,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9736,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":11390,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9555,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":9303,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9456,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":11411,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9576,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9757,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":9324,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9477,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":11182,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":9381,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":9621,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12566,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":11032,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11742,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":12331,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":12074,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":12477,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":12182,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":10898,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":10606,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":12679,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":10752,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11654,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":11535,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":11115,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11832,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":10175,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":9821,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12615,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11867,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":11285,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":11312,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":11197,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":9396,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":9636,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":11047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11999,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12109,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12512,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12217,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10933,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10641,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12714,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10787,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11570,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11150,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10210,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9836,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":12544,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":11689,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12555,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":10079,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11602,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":10289,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":10478,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":10341,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":10027,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":9695,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9369,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9522,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":9236,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":10965,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9663,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9423,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":10975,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":10998,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":11700,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":12249,"id":null,"parameterSlots":1,"returnSlots":1},"identity":{"entryPoint":10988,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":9955,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":9908,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":10431,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10242,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":11238,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9231,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":11925,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":12290,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":12033,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":12398,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":12141,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":10819,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":10527,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":12638,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":10673,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":11613,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":11456,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":11074,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":11791,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":10096,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9713,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":11367,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9532,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":9280,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9433,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:25629:30","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:30","statements":[{"nodeType":"YulAssignment","src":"57:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:30"},"nodeType":"YulFunctionCall","src":"67:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:30"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:30","type":""}],"src":"7:75:30"},{"body":{"nodeType":"YulBlock","src":"177:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:30"},"nodeType":"YulFunctionCall","src":"187:12:30"},"nodeType":"YulExpressionStatement","src":"187:12:30"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:30"},{"body":{"nodeType":"YulBlock","src":"300:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:30"},"nodeType":"YulFunctionCall","src":"310:12:30"},"nodeType":"YulExpressionStatement","src":"310:12:30"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:30"},{"body":{"nodeType":"YulBlock","src":"378:105:30","statements":[{"nodeType":"YulAssignment","src":"388:89:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:30"},"nodeType":"YulFunctionCall","src":"399:78:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:30"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:30","type":""}],"src":"334:149:30"},{"body":{"nodeType":"YulBlock","src":"531:78:30","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:30"},"nodeType":"YulFunctionCall","src":"589:12:30"},"nodeType":"YulExpressionStatement","src":"589:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:30"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:30"},"nodeType":"YulFunctionCall","src":"561:23:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:30"},"nodeType":"YulFunctionCall","src":"551:34:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:30"},"nodeType":"YulFunctionCall","src":"544:42:30"},"nodeType":"YulIf","src":"541:62:30"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:30","type":""}],"src":"489:120:30"},{"body":{"nodeType":"YulBlock","src":"666:86:30","statements":[{"nodeType":"YulAssignment","src":"676:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:30"},"nodeType":"YulFunctionCall","src":"685:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:30"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:30"},"nodeType":"YulFunctionCall","src":"714:32:30"},"nodeType":"YulExpressionStatement","src":"714:32:30"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:30","type":""}],"src":"615:137:30"},{"body":{"nodeType":"YulBlock","src":"823:262:30","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:30"},"nodeType":"YulFunctionCall","src":"871:79:30"},"nodeType":"YulExpressionStatement","src":"871:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:30"},"nodeType":"YulFunctionCall","src":"840:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:30"},"nodeType":"YulFunctionCall","src":"836:32:30"},"nodeType":"YulIf","src":"833:119:30"},{"nodeType":"YulBlock","src":"962:116:30","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:30"},"nodeType":"YulFunctionCall","src":"1036:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:30"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:30"},"nodeType":"YulFunctionCall","src":"1016:52:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:30","type":""}],"src":"758:327:30"},{"body":{"nodeType":"YulBlock","src":"1133:48:30","statements":[{"nodeType":"YulAssignment","src":"1143:32:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:30"},"nodeType":"YulFunctionCall","src":"1161:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:30"},"nodeType":"YulFunctionCall","src":"1154:21:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:30"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:30","type":""}],"src":"1091:90:30"},{"body":{"nodeType":"YulBlock","src":"1246:50:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:30"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:30"},"nodeType":"YulFunctionCall","src":"1268:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:30"},"nodeType":"YulFunctionCall","src":"1256:34:30"},"nodeType":"YulExpressionStatement","src":"1256:34:30"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:30","type":""}],"src":"1187:109:30"},{"body":{"nodeType":"YulBlock","src":"1394:118:30","statements":[{"nodeType":"YulAssignment","src":"1404:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:30"},"nodeType":"YulFunctionCall","src":"1412:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:30"},"nodeType":"YulFunctionCall","src":"1487:17:30"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:30"},"nodeType":"YulFunctionCall","src":"1440:65:30"},"nodeType":"YulExpressionStatement","src":"1440:65:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:30","type":""}],"src":"1302:210:30"},{"body":{"nodeType":"YulBlock","src":"1563:32:30","statements":[{"nodeType":"YulAssignment","src":"1573:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:30"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:30","type":""}],"src":"1518:77:30"},{"body":{"nodeType":"YulBlock","src":"1644:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:30"},"nodeType":"YulFunctionCall","src":"1703:12:30"},"nodeType":"YulExpressionStatement","src":"1703:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1674:17:30"},"nodeType":"YulFunctionCall","src":"1674:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:30"},"nodeType":"YulFunctionCall","src":"1664:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:30"},"nodeType":"YulFunctionCall","src":"1657:43:30"},"nodeType":"YulIf","src":"1654:63:30"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:30","type":""}],"src":"1601:122:30"},{"body":{"nodeType":"YulBlock","src":"1781:87:30","statements":[{"nodeType":"YulAssignment","src":"1791:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:30"},"nodeType":"YulFunctionCall","src":"1800:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:30"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1829:26:30"},"nodeType":"YulFunctionCall","src":"1829:33:30"},"nodeType":"YulExpressionStatement","src":"1829:33:30"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:30","type":""}],"src":"1729:139:30"},{"body":{"nodeType":"YulBlock","src":"1940:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:30"},"nodeType":"YulFunctionCall","src":"1988:79:30"},"nodeType":"YulExpressionStatement","src":"1988:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:30"},"nodeType":"YulFunctionCall","src":"1957:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:30"},"nodeType":"YulFunctionCall","src":"1953:32:30"},"nodeType":"YulIf","src":"1950:119:30"},{"nodeType":"YulBlock","src":"2079:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:30"},"nodeType":"YulFunctionCall","src":"2154:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2133:20:30"},"nodeType":"YulFunctionCall","src":"2133:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:30"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:30","type":""}],"src":"1874:329:30"},{"body":{"nodeType":"YulBlock","src":"2254:32:30","statements":[{"nodeType":"YulAssignment","src":"2264:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"2275:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2264:7:30"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2236:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2246:7:30","type":""}],"src":"2209:77:30"},{"body":{"nodeType":"YulBlock","src":"2335:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"2392:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2401:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2404:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2394:6:30"},"nodeType":"YulFunctionCall","src":"2394:12:30"},"nodeType":"YulExpressionStatement","src":"2394:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2358:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2383:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2365:17:30"},"nodeType":"YulFunctionCall","src":"2365:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2355:2:30"},"nodeType":"YulFunctionCall","src":"2355:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2348:6:30"},"nodeType":"YulFunctionCall","src":"2348:43:30"},"nodeType":"YulIf","src":"2345:63:30"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2328:5:30","type":""}],"src":"2292:122:30"},{"body":{"nodeType":"YulBlock","src":"2472:87:30","statements":[{"nodeType":"YulAssignment","src":"2482:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2504:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2491:12:30"},"nodeType":"YulFunctionCall","src":"2491:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2482:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2547:5:30"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"2520:26:30"},"nodeType":"YulFunctionCall","src":"2520:33:30"},"nodeType":"YulExpressionStatement","src":"2520:33:30"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2450:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"2458:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2466:5:30","type":""}],"src":"2420:139:30"},{"body":{"nodeType":"YulBlock","src":"2631:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"2677:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2679:77:30"},"nodeType":"YulFunctionCall","src":"2679:79:30"},"nodeType":"YulExpressionStatement","src":"2679:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2652:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2661:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2648:3:30"},"nodeType":"YulFunctionCall","src":"2648:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"2673:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2644:3:30"},"nodeType":"YulFunctionCall","src":"2644:32:30"},"nodeType":"YulIf","src":"2641:119:30"},{"nodeType":"YulBlock","src":"2770:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2785:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"2799:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2789:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2814:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2849:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"2860:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2845:3:30"},"nodeType":"YulFunctionCall","src":"2845:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2869:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2824:20:30"},"nodeType":"YulFunctionCall","src":"2824:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2814:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2601:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2612:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2624:6:30","type":""}],"src":"2565:329:30"},{"body":{"nodeType":"YulBlock","src":"2965:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2982:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3005:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2987:17:30"},"nodeType":"YulFunctionCall","src":"2987:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2975:6:30"},"nodeType":"YulFunctionCall","src":"2975:37:30"},"nodeType":"YulExpressionStatement","src":"2975:37:30"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2953:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2960:3:30","type":""}],"src":"2900:118:30"},{"body":{"nodeType":"YulBlock","src":"3122:124:30","statements":[{"nodeType":"YulAssignment","src":"3132:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3144:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3155:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3140:3:30"},"nodeType":"YulFunctionCall","src":"3140:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3132:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3212:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3225:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"3236:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3221:3:30"},"nodeType":"YulFunctionCall","src":"3221:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"3168:43:30"},"nodeType":"YulFunctionCall","src":"3168:71:30"},"nodeType":"YulExpressionStatement","src":"3168:71:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3094:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3106:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3117:4:30","type":""}],"src":"3024:222:30"},{"body":{"nodeType":"YulBlock","src":"3297:81:30","statements":[{"nodeType":"YulAssignment","src":"3307:65:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3322:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"3329:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3318:3:30"},"nodeType":"YulFunctionCall","src":"3318:54:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3307:7:30"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3279:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3289:7:30","type":""}],"src":"3252:126:30"},{"body":{"nodeType":"YulBlock","src":"3429:51:30","statements":[{"nodeType":"YulAssignment","src":"3439:35:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3468:5:30"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3450:17:30"},"nodeType":"YulFunctionCall","src":"3450:24:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3439:7:30"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3411:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3421:7:30","type":""}],"src":"3384:96:30"},{"body":{"nodeType":"YulBlock","src":"3529:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"3586:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3595:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3598:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3588:6:30"},"nodeType":"YulFunctionCall","src":"3588:12:30"},"nodeType":"YulExpressionStatement","src":"3588:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3552:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3577:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3559:17:30"},"nodeType":"YulFunctionCall","src":"3559:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3549:2:30"},"nodeType":"YulFunctionCall","src":"3549:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3542:6:30"},"nodeType":"YulFunctionCall","src":"3542:43:30"},"nodeType":"YulIf","src":"3539:63:30"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3522:5:30","type":""}],"src":"3486:122:30"},{"body":{"nodeType":"YulBlock","src":"3666:87:30","statements":[{"nodeType":"YulAssignment","src":"3676:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3698:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:30"},"nodeType":"YulFunctionCall","src":"3685:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3676:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3741:5:30"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3714:26:30"},"nodeType":"YulFunctionCall","src":"3714:33:30"},"nodeType":"YulExpressionStatement","src":"3714:33:30"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3644:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3652:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3660:5:30","type":""}],"src":"3614:139:30"},{"body":{"nodeType":"YulBlock","src":"3842:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"3888:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3890:77:30"},"nodeType":"YulFunctionCall","src":"3890:79:30"},"nodeType":"YulExpressionStatement","src":"3890:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3863:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3872:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3859:3:30"},"nodeType":"YulFunctionCall","src":"3859:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3884:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3855:3:30"},"nodeType":"YulFunctionCall","src":"3855:32:30"},"nodeType":"YulIf","src":"3852:119:30"},{"nodeType":"YulBlock","src":"3981:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3996:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4010:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4000:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4025:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4060:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4071:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4056:3:30"},"nodeType":"YulFunctionCall","src":"4056:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4080:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4035:20:30"},"nodeType":"YulFunctionCall","src":"4035:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4025:6:30"}]}]},{"nodeType":"YulBlock","src":"4108:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4123:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4137:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4127:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4153:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4188:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4199:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4184:3:30"},"nodeType":"YulFunctionCall","src":"4184:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4208:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4163:20:30"},"nodeType":"YulFunctionCall","src":"4163:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4153:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3804:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3815:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3827:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3835:6:30","type":""}],"src":"3759:474:30"},{"body":{"nodeType":"YulBlock","src":"4304:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4321:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4344:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4326:17:30"},"nodeType":"YulFunctionCall","src":"4326:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4314:6:30"},"nodeType":"YulFunctionCall","src":"4314:37:30"},"nodeType":"YulExpressionStatement","src":"4314:37:30"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4292:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4299:3:30","type":""}],"src":"4239:118:30"},{"body":{"nodeType":"YulBlock","src":"4461:124:30","statements":[{"nodeType":"YulAssignment","src":"4471:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4483:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4494:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4479:3:30"},"nodeType":"YulFunctionCall","src":"4479:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4471:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4551:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4564:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4575:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4560:3:30"},"nodeType":"YulFunctionCall","src":"4560:17:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4507:43:30"},"nodeType":"YulFunctionCall","src":"4507:71:30"},"nodeType":"YulExpressionStatement","src":"4507:71:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4433:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4445:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4456:4:30","type":""}],"src":"4363:222:30"},{"body":{"nodeType":"YulBlock","src":"4657:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"4703:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4705:77:30"},"nodeType":"YulFunctionCall","src":"4705:79:30"},"nodeType":"YulExpressionStatement","src":"4705:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4678:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4687:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4674:3:30"},"nodeType":"YulFunctionCall","src":"4674:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4699:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4670:3:30"},"nodeType":"YulFunctionCall","src":"4670:32:30"},"nodeType":"YulIf","src":"4667:119:30"},{"nodeType":"YulBlock","src":"4796:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4811:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4825:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4815:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4840:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4875:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4886:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4871:3:30"},"nodeType":"YulFunctionCall","src":"4871:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4895:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4850:20:30"},"nodeType":"YulFunctionCall","src":"4850:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4840:6:30"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4627:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4638:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4650:6:30","type":""}],"src":"4591:329:30"},{"body":{"nodeType":"YulBlock","src":"4954:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4971:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4974:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4964:6:30"},"nodeType":"YulFunctionCall","src":"4964:88:30"},"nodeType":"YulExpressionStatement","src":"4964:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5068:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5071:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5061:6:30"},"nodeType":"YulFunctionCall","src":"5061:15:30"},"nodeType":"YulExpressionStatement","src":"5061:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5092:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5095:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5085:6:30"},"nodeType":"YulFunctionCall","src":"5085:15:30"},"nodeType":"YulExpressionStatement","src":"5085:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4926:180:30"},{"body":{"nodeType":"YulBlock","src":"5155:190:30","statements":[{"nodeType":"YulAssignment","src":"5165:33:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5192:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5174:17:30"},"nodeType":"YulFunctionCall","src":"5174:24:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5165:5:30"}]},{"body":{"nodeType":"YulBlock","src":"5288:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5290:16:30"},"nodeType":"YulFunctionCall","src":"5290:18:30"},"nodeType":"YulExpressionStatement","src":"5290:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5213:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5220:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5210:2:30"},"nodeType":"YulFunctionCall","src":"5210:77:30"},"nodeType":"YulIf","src":"5207:103:30"},{"nodeType":"YulAssignment","src":"5319:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5330:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"5337:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5326:3:30"},"nodeType":"YulFunctionCall","src":"5326:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5319:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5141:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5151:3:30","type":""}],"src":"5112:233:30"},{"body":{"nodeType":"YulBlock","src":"5396:149:30","statements":[{"nodeType":"YulAssignment","src":"5406:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5429:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5411:17:30"},"nodeType":"YulFunctionCall","src":"5411:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"5406:1:30"}]},{"nodeType":"YulAssignment","src":"5440:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5463:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5445:17:30"},"nodeType":"YulFunctionCall","src":"5445:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"5440:1:30"}]},{"nodeType":"YulAssignment","src":"5474:17:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5486:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"5489:1:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5482:3:30"},"nodeType":"YulFunctionCall","src":"5482:9:30"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5474:4:30"}]},{"body":{"nodeType":"YulBlock","src":"5516:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5518:16:30"},"nodeType":"YulFunctionCall","src":"5518:18:30"},"nodeType":"YulExpressionStatement","src":"5518:18:30"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5507:4:30"},{"name":"x","nodeType":"YulIdentifier","src":"5513:1:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5504:2:30"},"nodeType":"YulFunctionCall","src":"5504:11:30"},"nodeType":"YulIf","src":"5501:37:30"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5382:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"5385:1:30","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5391:4:30","type":""}],"src":"5351:194:30"},{"body":{"nodeType":"YulBlock","src":"5647:73:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5664:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"5669:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5657:6:30"},"nodeType":"YulFunctionCall","src":"5657:19:30"},"nodeType":"YulExpressionStatement","src":"5657:19:30"},{"nodeType":"YulAssignment","src":"5685:29:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5704:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"5709:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5700:3:30"},"nodeType":"YulFunctionCall","src":"5700:14:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5685:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5619:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"5624:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5635:11:30","type":""}],"src":"5551:169:30"},{"body":{"nodeType":"YulBlock","src":"5832:128:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5854:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5862:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5850:3:30"},"nodeType":"YulFunctionCall","src":"5850:14:30"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"5866:34:30","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5843:6:30"},"nodeType":"YulFunctionCall","src":"5843:58:30"},"nodeType":"YulExpressionStatement","src":"5843:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5922:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"5930:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5918:3:30"},"nodeType":"YulFunctionCall","src":"5918:15:30"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"5935:17:30","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5911:6:30"},"nodeType":"YulFunctionCall","src":"5911:42:30"},"nodeType":"YulExpressionStatement","src":"5911:42:30"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5824:6:30","type":""}],"src":"5726:234:30"},{"body":{"nodeType":"YulBlock","src":"6112:220:30","statements":[{"nodeType":"YulAssignment","src":"6122:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6188:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6193:2:30","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6129:58:30"},"nodeType":"YulFunctionCall","src":"6129:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6122:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6294:3:30"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"6205:88:30"},"nodeType":"YulFunctionCall","src":"6205:93:30"},"nodeType":"YulExpressionStatement","src":"6205:93:30"},{"nodeType":"YulAssignment","src":"6307:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6318:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"6323:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6314:3:30"},"nodeType":"YulFunctionCall","src":"6314:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6307:3:30"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6100:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6108:3:30","type":""}],"src":"5966:366:30"},{"body":{"nodeType":"YulBlock","src":"6509:248:30","statements":[{"nodeType":"YulAssignment","src":"6519:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6531:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6542:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6527:3:30"},"nodeType":"YulFunctionCall","src":"6527:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6519:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6566:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6577:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6562:3:30"},"nodeType":"YulFunctionCall","src":"6562:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6585:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6591:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6581:3:30"},"nodeType":"YulFunctionCall","src":"6581:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6555:6:30"},"nodeType":"YulFunctionCall","src":"6555:47:30"},"nodeType":"YulExpressionStatement","src":"6555:47:30"},{"nodeType":"YulAssignment","src":"6611:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6745:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6619:124:30"},"nodeType":"YulFunctionCall","src":"6619:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6611:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6489:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6504:4:30","type":""}],"src":"6338:419:30"},{"body":{"nodeType":"YulBlock","src":"6791:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6808:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6811:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6801:6:30"},"nodeType":"YulFunctionCall","src":"6801:88:30"},"nodeType":"YulExpressionStatement","src":"6801:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6905:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6908:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6898:6:30"},"nodeType":"YulFunctionCall","src":"6898:15:30"},"nodeType":"YulExpressionStatement","src":"6898:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6929:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6932:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6922:6:30"},"nodeType":"YulFunctionCall","src":"6922:15:30"},"nodeType":"YulExpressionStatement","src":"6922:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6763:180:30"},{"body":{"nodeType":"YulBlock","src":"6993:147:30","statements":[{"nodeType":"YulAssignment","src":"7003:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7026:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7008:17:30"},"nodeType":"YulFunctionCall","src":"7008:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"7003:1:30"}]},{"nodeType":"YulAssignment","src":"7037:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7060:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7042:17:30"},"nodeType":"YulFunctionCall","src":"7042:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7037:1:30"}]},{"nodeType":"YulAssignment","src":"7071:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7082:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"7085:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7078:3:30"},"nodeType":"YulFunctionCall","src":"7078:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"7071:3:30"}]},{"body":{"nodeType":"YulBlock","src":"7111:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7113:16:30"},"nodeType":"YulFunctionCall","src":"7113:18:30"},"nodeType":"YulExpressionStatement","src":"7113:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7103:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"7106:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7100:2:30"},"nodeType":"YulFunctionCall","src":"7100:10:30"},"nodeType":"YulIf","src":"7097:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6980:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"6983:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6989:3:30","type":""}],"src":"6949:191:30"},{"body":{"nodeType":"YulBlock","src":"7194:300:30","statements":[{"nodeType":"YulAssignment","src":"7204:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7227:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7209:17:30"},"nodeType":"YulFunctionCall","src":"7209:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"7204:1:30"}]},{"nodeType":"YulAssignment","src":"7238:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7261:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7243:17:30"},"nodeType":"YulFunctionCall","src":"7243:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7238:1:30"}]},{"body":{"nodeType":"YulBlock","src":"7436:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7438:16:30"},"nodeType":"YulFunctionCall","src":"7438:18:30"},"nodeType":"YulExpressionStatement","src":"7438:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7348:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7341:6:30"},"nodeType":"YulFunctionCall","src":"7341:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7334:6:30"},"nodeType":"YulFunctionCall","src":"7334:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7356:1:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7363:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"7431:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7359:3:30"},"nodeType":"YulFunctionCall","src":"7359:74:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7353:2:30"},"nodeType":"YulFunctionCall","src":"7353:81:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7330:3:30"},"nodeType":"YulFunctionCall","src":"7330:105:30"},"nodeType":"YulIf","src":"7327:131:30"},{"nodeType":"YulAssignment","src":"7468:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7483:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"7486:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7479:3:30"},"nodeType":"YulFunctionCall","src":"7479:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"7468:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7177:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"7180:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"7186:7:30","type":""}],"src":"7146:348:30"},{"body":{"nodeType":"YulBlock","src":"7528:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7545:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7548:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7538:6:30"},"nodeType":"YulFunctionCall","src":"7538:88:30"},"nodeType":"YulExpressionStatement","src":"7538:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7642:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7645:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7635:6:30"},"nodeType":"YulFunctionCall","src":"7635:15:30"},"nodeType":"YulExpressionStatement","src":"7635:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7666:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7669:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7659:6:30"},"nodeType":"YulFunctionCall","src":"7659:15:30"},"nodeType":"YulExpressionStatement","src":"7659:15:30"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"7500:180:30"},{"body":{"nodeType":"YulBlock","src":"7728:143:30","statements":[{"nodeType":"YulAssignment","src":"7738:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7761:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7743:17:30"},"nodeType":"YulFunctionCall","src":"7743:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"7738:1:30"}]},{"nodeType":"YulAssignment","src":"7772:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7795:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7777:17:30"},"nodeType":"YulFunctionCall","src":"7777:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"7772:1:30"}]},{"body":{"nodeType":"YulBlock","src":"7819:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"7821:16:30"},"nodeType":"YulFunctionCall","src":"7821:18:30"},"nodeType":"YulExpressionStatement","src":"7821:18:30"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"7816:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7809:6:30"},"nodeType":"YulFunctionCall","src":"7809:9:30"},"nodeType":"YulIf","src":"7806:35:30"},{"nodeType":"YulAssignment","src":"7851:14:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7860:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"7863:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7856:3:30"},"nodeType":"YulFunctionCall","src":"7856:9:30"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7851:1:30"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7717:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"7720:1:30","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"7726:1:30","type":""}],"src":"7686:185:30"},{"body":{"nodeType":"YulBlock","src":"7983:125:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8005:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8013:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8001:3:30"},"nodeType":"YulFunctionCall","src":"8001:14:30"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"8017:34:30","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7994:6:30"},"nodeType":"YulFunctionCall","src":"7994:58:30"},"nodeType":"YulExpressionStatement","src":"7994:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8073:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"8081:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8069:3:30"},"nodeType":"YulFunctionCall","src":"8069:15:30"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"8086:14:30","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8062:6:30"},"nodeType":"YulFunctionCall","src":"8062:39:30"},"nodeType":"YulExpressionStatement","src":"8062:39:30"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7975:6:30","type":""}],"src":"7877:231:30"},{"body":{"nodeType":"YulBlock","src":"8260:220:30","statements":[{"nodeType":"YulAssignment","src":"8270:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8336:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8341:2:30","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8277:58:30"},"nodeType":"YulFunctionCall","src":"8277:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8270:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8442:3:30"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"8353:88:30"},"nodeType":"YulFunctionCall","src":"8353:93:30"},"nodeType":"YulExpressionStatement","src":"8353:93:30"},{"nodeType":"YulAssignment","src":"8455:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8466:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"8471:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8462:3:30"},"nodeType":"YulFunctionCall","src":"8462:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8455:3:30"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8248:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8256:3:30","type":""}],"src":"8114:366:30"},{"body":{"nodeType":"YulBlock","src":"8657:248:30","statements":[{"nodeType":"YulAssignment","src":"8667:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8679:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8690:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8675:3:30"},"nodeType":"YulFunctionCall","src":"8675:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8667:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8714:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"8725:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8710:3:30"},"nodeType":"YulFunctionCall","src":"8710:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8733:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"8739:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8729:3:30"},"nodeType":"YulFunctionCall","src":"8729:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8703:6:30"},"nodeType":"YulFunctionCall","src":"8703:47:30"},"nodeType":"YulExpressionStatement","src":"8703:47:30"},{"nodeType":"YulAssignment","src":"8759:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8893:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8767:124:30"},"nodeType":"YulFunctionCall","src":"8767:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8759:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8637:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8652:4:30","type":""}],"src":"8486:419:30"},{"body":{"nodeType":"YulBlock","src":"9017:124:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9039:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9047:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9035:3:30"},"nodeType":"YulFunctionCall","src":"9035:14:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"9051:34:30","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9028:6:30"},"nodeType":"YulFunctionCall","src":"9028:58:30"},"nodeType":"YulExpressionStatement","src":"9028:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9107:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9115:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9103:3:30"},"nodeType":"YulFunctionCall","src":"9103:15:30"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"9120:13:30","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9096:6:30"},"nodeType":"YulFunctionCall","src":"9096:38:30"},"nodeType":"YulExpressionStatement","src":"9096:38:30"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9009:6:30","type":""}],"src":"8911:230:30"},{"body":{"nodeType":"YulBlock","src":"9293:220:30","statements":[{"nodeType":"YulAssignment","src":"9303:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9369:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"9374:2:30","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9310:58:30"},"nodeType":"YulFunctionCall","src":"9310:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9303:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9475:3:30"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"9386:88:30"},"nodeType":"YulFunctionCall","src":"9386:93:30"},"nodeType":"YulExpressionStatement","src":"9386:93:30"},{"nodeType":"YulAssignment","src":"9488:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9499:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"9504:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:30"},"nodeType":"YulFunctionCall","src":"9495:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9488:3:30"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9281:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9289:3:30","type":""}],"src":"9147:366:30"},{"body":{"nodeType":"YulBlock","src":"9690:248:30","statements":[{"nodeType":"YulAssignment","src":"9700:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9712:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9723:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9708:3:30"},"nodeType":"YulFunctionCall","src":"9708:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9700:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9747:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"9758:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9743:3:30"},"nodeType":"YulFunctionCall","src":"9743:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9766:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9772:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9762:3:30"},"nodeType":"YulFunctionCall","src":"9762:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9736:6:30"},"nodeType":"YulFunctionCall","src":"9736:47:30"},"nodeType":"YulExpressionStatement","src":"9736:47:30"},{"nodeType":"YulAssignment","src":"9792:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9926:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9800:124:30"},"nodeType":"YulFunctionCall","src":"9800:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9792:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9670:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9685:4:30","type":""}],"src":"9519:419:30"},{"body":{"nodeType":"YulBlock","src":"10050:127:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10072:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10080:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10068:3:30"},"nodeType":"YulFunctionCall","src":"10068:14:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"10084:34:30","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10061:6:30"},"nodeType":"YulFunctionCall","src":"10061:58:30"},"nodeType":"YulExpressionStatement","src":"10061:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10140:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10148:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10136:3:30"},"nodeType":"YulFunctionCall","src":"10136:15:30"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"10153:16:30","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10129:6:30"},"nodeType":"YulFunctionCall","src":"10129:41:30"},"nodeType":"YulExpressionStatement","src":"10129:41:30"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10042:6:30","type":""}],"src":"9944:233:30"},{"body":{"nodeType":"YulBlock","src":"10329:220:30","statements":[{"nodeType":"YulAssignment","src":"10339:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10405:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"10410:2:30","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10346:58:30"},"nodeType":"YulFunctionCall","src":"10346:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10339:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10511:3:30"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"10422:88:30"},"nodeType":"YulFunctionCall","src":"10422:93:30"},"nodeType":"YulExpressionStatement","src":"10422:93:30"},{"nodeType":"YulAssignment","src":"10524:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10535:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"10540:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10531:3:30"},"nodeType":"YulFunctionCall","src":"10531:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10524:3:30"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10317:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10325:3:30","type":""}],"src":"10183:366:30"},{"body":{"nodeType":"YulBlock","src":"10726:248:30","statements":[{"nodeType":"YulAssignment","src":"10736:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10748:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10759:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10744:3:30"},"nodeType":"YulFunctionCall","src":"10744:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10736:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10783:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10794:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10779:3:30"},"nodeType":"YulFunctionCall","src":"10779:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10802:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10808:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10798:3:30"},"nodeType":"YulFunctionCall","src":"10798:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10772:6:30"},"nodeType":"YulFunctionCall","src":"10772:47:30"},"nodeType":"YulExpressionStatement","src":"10772:47:30"},{"nodeType":"YulAssignment","src":"10828:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10962:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10836:124:30"},"nodeType":"YulFunctionCall","src":"10836:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10828:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10706:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10721:4:30","type":""}],"src":"10555:419:30"},{"body":{"nodeType":"YulBlock","src":"11033:32:30","statements":[{"nodeType":"YulAssignment","src":"11043:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"11054:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11043:7:30"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11015:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11025:7:30","type":""}],"src":"10980:85:30"},{"body":{"nodeType":"YulBlock","src":"11114:43:30","statements":[{"nodeType":"YulAssignment","src":"11124:27:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11139:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11146:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11135:3:30"},"nodeType":"YulFunctionCall","src":"11135:16:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11124:7:30"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11096:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11106:7:30","type":""}],"src":"11071:86:30"},{"body":{"nodeType":"YulBlock","src":"11195:28:30","statements":[{"nodeType":"YulAssignment","src":"11205:12:30","value":{"name":"value","nodeType":"YulIdentifier","src":"11212:5:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11205:3:30"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11181:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11191:3:30","type":""}],"src":"11163:60:30"},{"body":{"nodeType":"YulBlock","src":"11295:88:30","statements":[{"nodeType":"YulAssignment","src":"11305:72:30","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11369:5:30"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"11343:25:30"},"nodeType":"YulFunctionCall","src":"11343:32:30"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"11334:8:30"},"nodeType":"YulFunctionCall","src":"11334:42:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"11318:15:30"},"nodeType":"YulFunctionCall","src":"11318:59:30"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11305:9:30"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11275:5:30","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11285:9:30","type":""}],"src":"11229:154:30"},{"body":{"nodeType":"YulBlock","src":"11460:72:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11477:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11519:5:30"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"11482:36:30"},"nodeType":"YulFunctionCall","src":"11482:43:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11470:6:30"},"nodeType":"YulFunctionCall","src":"11470:56:30"},"nodeType":"YulExpressionStatement","src":"11470:56:30"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11448:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11455:3:30","type":""}],"src":"11389:143:30"},{"body":{"nodeType":"YulBlock","src":"11642:130:30","statements":[{"nodeType":"YulAssignment","src":"11652:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11664:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11675:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11660:3:30"},"nodeType":"YulFunctionCall","src":"11660:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11652:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11738:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11751:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"11762:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11747:3:30"},"nodeType":"YulFunctionCall","src":"11747:17:30"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"11688:49:30"},"nodeType":"YulFunctionCall","src":"11688:77:30"},"nodeType":"YulExpressionStatement","src":"11688:77:30"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11614:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11626:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11637:4:30","type":""}],"src":"11538:234:30"},{"body":{"nodeType":"YulBlock","src":"11884:75:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11906:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11914:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11902:3:30"},"nodeType":"YulFunctionCall","src":"11902:14:30"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"11918:33:30","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11895:6:30"},"nodeType":"YulFunctionCall","src":"11895:57:30"},"nodeType":"YulExpressionStatement","src":"11895:57:30"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11876:6:30","type":""}],"src":"11778:181:30"},{"body":{"nodeType":"YulBlock","src":"12111:220:30","statements":[{"nodeType":"YulAssignment","src":"12121:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12187:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"12192:2:30","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12128:58:30"},"nodeType":"YulFunctionCall","src":"12128:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12121:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12293:3:30"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"12204:88:30"},"nodeType":"YulFunctionCall","src":"12204:93:30"},"nodeType":"YulExpressionStatement","src":"12204:93:30"},{"nodeType":"YulAssignment","src":"12306:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12317:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"12322:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12313:3:30"},"nodeType":"YulFunctionCall","src":"12313:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12306:3:30"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12099:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12107:3:30","type":""}],"src":"11965:366:30"},{"body":{"nodeType":"YulBlock","src":"12508:248:30","statements":[{"nodeType":"YulAssignment","src":"12518:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12530:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12541:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12526:3:30"},"nodeType":"YulFunctionCall","src":"12526:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12518:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12565:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12576:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12561:3:30"},"nodeType":"YulFunctionCall","src":"12561:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12584:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"12590:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12580:3:30"},"nodeType":"YulFunctionCall","src":"12580:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12554:6:30"},"nodeType":"YulFunctionCall","src":"12554:47:30"},"nodeType":"YulExpressionStatement","src":"12554:47:30"},{"nodeType":"YulAssignment","src":"12610:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12744:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12618:124:30"},"nodeType":"YulFunctionCall","src":"12618:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12610:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12488:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12503:4:30","type":""}],"src":"12337:419:30"},{"body":{"nodeType":"YulBlock","src":"12827:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12844:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12867:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"12849:17:30"},"nodeType":"YulFunctionCall","src":"12849:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12837:6:30"},"nodeType":"YulFunctionCall","src":"12837:37:30"},"nodeType":"YulExpressionStatement","src":"12837:37:30"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12815:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12822:3:30","type":""}],"src":"12762:118:30"},{"body":{"nodeType":"YulBlock","src":"13012:206:30","statements":[{"nodeType":"YulAssignment","src":"13022:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13034:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13045:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13030:3:30"},"nodeType":"YulFunctionCall","src":"13030:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13022:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13102:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13115:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13126:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13111:3:30"},"nodeType":"YulFunctionCall","src":"13111:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13058:43:30"},"nodeType":"YulFunctionCall","src":"13058:71:30"},"nodeType":"YulExpressionStatement","src":"13058:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13183:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13196:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13207:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13192:3:30"},"nodeType":"YulFunctionCall","src":"13192:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13139:43:30"},"nodeType":"YulFunctionCall","src":"13139:72:30"},"nodeType":"YulExpressionStatement","src":"13139:72:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12976:9:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12988:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12996:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13007:4:30","type":""}],"src":"12886:332:30"},{"body":{"nodeType":"YulBlock","src":"13252:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13269:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13272:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13262:6:30"},"nodeType":"YulFunctionCall","src":"13262:88:30"},"nodeType":"YulExpressionStatement","src":"13262:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13366:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13369:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13359:6:30"},"nodeType":"YulFunctionCall","src":"13359:15:30"},"nodeType":"YulExpressionStatement","src":"13359:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13390:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13393:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13383:6:30"},"nodeType":"YulFunctionCall","src":"13383:15:30"},"nodeType":"YulExpressionStatement","src":"13383:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"13224:180:30"},{"body":{"nodeType":"YulBlock","src":"13508:124:30","statements":[{"nodeType":"YulAssignment","src":"13518:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13530:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13541:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13526:3:30"},"nodeType":"YulFunctionCall","src":"13526:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13518:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13598:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13611:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13622:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13607:3:30"},"nodeType":"YulFunctionCall","src":"13607:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13554:43:30"},"nodeType":"YulFunctionCall","src":"13554:71:30"},"nodeType":"YulExpressionStatement","src":"13554:71:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13480:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13492:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13503:4:30","type":""}],"src":"13410:222:30"},{"body":{"nodeType":"YulBlock","src":"13792:288:30","statements":[{"nodeType":"YulAssignment","src":"13802:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13814:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13825:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13810:3:30"},"nodeType":"YulFunctionCall","src":"13810:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13802:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13882:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13895:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13906:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:30"},"nodeType":"YulFunctionCall","src":"13891:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13838:43:30"},"nodeType":"YulFunctionCall","src":"13838:71:30"},"nodeType":"YulExpressionStatement","src":"13838:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13963:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13976:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13987:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13972:3:30"},"nodeType":"YulFunctionCall","src":"13972:18:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13919:43:30"},"nodeType":"YulFunctionCall","src":"13919:72:30"},"nodeType":"YulExpressionStatement","src":"13919:72:30"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14045:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14058:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14069:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14054:3:30"},"nodeType":"YulFunctionCall","src":"14054:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"14001:43:30"},"nodeType":"YulFunctionCall","src":"14001:72:30"},"nodeType":"YulExpressionStatement","src":"14001:72:30"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13748:9:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13760:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13768:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13776:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13787:4:30","type":""}],"src":"13638:442:30"},{"body":{"nodeType":"YulBlock","src":"14126:76:30","statements":[{"body":{"nodeType":"YulBlock","src":"14180:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14189:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14192:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14182:6:30"},"nodeType":"YulFunctionCall","src":"14182:12:30"},"nodeType":"YulExpressionStatement","src":"14182:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14149:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14171:5:30"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"14156:14:30"},"nodeType":"YulFunctionCall","src":"14156:21:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14146:2:30"},"nodeType":"YulFunctionCall","src":"14146:32:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14139:6:30"},"nodeType":"YulFunctionCall","src":"14139:40:30"},"nodeType":"YulIf","src":"14136:60:30"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14119:5:30","type":""}],"src":"14086:116:30"},{"body":{"nodeType":"YulBlock","src":"14268:77:30","statements":[{"nodeType":"YulAssignment","src":"14278:22:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14293:6:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14287:5:30"},"nodeType":"YulFunctionCall","src":"14287:13:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14278:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14333:5:30"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"14309:23:30"},"nodeType":"YulFunctionCall","src":"14309:30:30"},"nodeType":"YulExpressionStatement","src":"14309:30:30"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14246:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"14254:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"14262:5:30","type":""}],"src":"14208:137:30"},{"body":{"nodeType":"YulBlock","src":"14425:271:30","statements":[{"body":{"nodeType":"YulBlock","src":"14471:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14473:77:30"},"nodeType":"YulFunctionCall","src":"14473:79:30"},"nodeType":"YulExpressionStatement","src":"14473:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14446:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"14455:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14442:3:30"},"nodeType":"YulFunctionCall","src":"14442:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"14467:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14438:3:30"},"nodeType":"YulFunctionCall","src":"14438:32:30"},"nodeType":"YulIf","src":"14435:119:30"},{"nodeType":"YulBlock","src":"14564:125:30","statements":[{"nodeType":"YulVariableDeclaration","src":"14579:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"14593:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14583:6:30","type":""}]},{"nodeType":"YulAssignment","src":"14608:71:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14651:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"14662:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14647:3:30"},"nodeType":"YulFunctionCall","src":"14647:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14671:7:30"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"14618:28:30"},"nodeType":"YulFunctionCall","src":"14618:61:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14608:6:30"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14395:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14406:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14418:6:30","type":""}],"src":"14351:345:30"},{"body":{"nodeType":"YulBlock","src":"14808:123:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14830:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"14838:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14826:3:30"},"nodeType":"YulFunctionCall","src":"14826:14:30"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"14842:34:30","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14819:6:30"},"nodeType":"YulFunctionCall","src":"14819:58:30"},"nodeType":"YulExpressionStatement","src":"14819:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14898:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"14906:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14894:3:30"},"nodeType":"YulFunctionCall","src":"14894:15:30"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"14911:12:30","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14887:6:30"},"nodeType":"YulFunctionCall","src":"14887:37:30"},"nodeType":"YulExpressionStatement","src":"14887:37:30"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14800:6:30","type":""}],"src":"14702:229:30"},{"body":{"nodeType":"YulBlock","src":"15083:220:30","statements":[{"nodeType":"YulAssignment","src":"15093:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15159:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"15164:2:30","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15100:58:30"},"nodeType":"YulFunctionCall","src":"15100:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15093:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15265:3:30"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"15176:88:30"},"nodeType":"YulFunctionCall","src":"15176:93:30"},"nodeType":"YulExpressionStatement","src":"15176:93:30"},{"nodeType":"YulAssignment","src":"15278:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15289:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"15294:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15285:3:30"},"nodeType":"YulFunctionCall","src":"15285:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15278:3:30"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15071:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15079:3:30","type":""}],"src":"14937:366:30"},{"body":{"nodeType":"YulBlock","src":"15480:248:30","statements":[{"nodeType":"YulAssignment","src":"15490:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15502:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15513:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15498:3:30"},"nodeType":"YulFunctionCall","src":"15498:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15490:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15537:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15548:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15533:3:30"},"nodeType":"YulFunctionCall","src":"15533:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15556:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"15562:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15552:3:30"},"nodeType":"YulFunctionCall","src":"15552:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15526:6:30"},"nodeType":"YulFunctionCall","src":"15526:47:30"},"nodeType":"YulExpressionStatement","src":"15526:47:30"},{"nodeType":"YulAssignment","src":"15582:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15716:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15590:124:30"},"nodeType":"YulFunctionCall","src":"15590:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15582:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15460:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15475:4:30","type":""}],"src":"15309:419:30"},{"body":{"nodeType":"YulBlock","src":"15848:34:30","statements":[{"nodeType":"YulAssignment","src":"15858:18:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"15873:3:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"15858:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15820:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"15825:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15836:11:30","type":""}],"src":"15734:148:30"},{"body":{"nodeType":"YulBlock","src":"15994:67:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16016:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"16024:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16012:3:30"},"nodeType":"YulFunctionCall","src":"16012:14:30"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"16028:25:30","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16005:6:30"},"nodeType":"YulFunctionCall","src":"16005:49:30"},"nodeType":"YulExpressionStatement","src":"16005:49:30"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15986:6:30","type":""}],"src":"15888:173:30"},{"body":{"nodeType":"YulBlock","src":"16231:238:30","statements":[{"nodeType":"YulAssignment","src":"16241:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16325:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"16330:2:30","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16248:76:30"},"nodeType":"YulFunctionCall","src":"16248:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16241:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16431:3:30"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"16342:88:30"},"nodeType":"YulFunctionCall","src":"16342:93:30"},"nodeType":"YulExpressionStatement","src":"16342:93:30"},{"nodeType":"YulAssignment","src":"16444:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16455:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"16460:2:30","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16451:3:30"},"nodeType":"YulFunctionCall","src":"16451:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16444:3:30"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16219:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16227:3:30","type":""}],"src":"16067:402:30"},{"body":{"nodeType":"YulBlock","src":"16534:40:30","statements":[{"nodeType":"YulAssignment","src":"16545:22:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16561:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16555:5:30"},"nodeType":"YulFunctionCall","src":"16555:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16545:6:30"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16517:5:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16527:6:30","type":""}],"src":"16475:99:30"},{"body":{"nodeType":"YulBlock","src":"16642:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"16652:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"16661:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16656:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"16721:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16746:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"16751:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16742:3:30"},"nodeType":"YulFunctionCall","src":"16742:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16765:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"16770:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16761:3:30"},"nodeType":"YulFunctionCall","src":"16761:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16755:5:30"},"nodeType":"YulFunctionCall","src":"16755:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16735:6:30"},"nodeType":"YulFunctionCall","src":"16735:39:30"},"nodeType":"YulExpressionStatement","src":"16735:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16682:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"16685:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16679:2:30"},"nodeType":"YulFunctionCall","src":"16679:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16693:19:30","statements":[{"nodeType":"YulAssignment","src":"16695:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16704:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"16707:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16700:3:30"},"nodeType":"YulFunctionCall","src":"16700:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16695:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"16675:3:30","statements":[]},"src":"16671:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16804:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"16809:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16800:3:30"},"nodeType":"YulFunctionCall","src":"16800:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"16818:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16793:6:30"},"nodeType":"YulFunctionCall","src":"16793:27:30"},"nodeType":"YulExpressionStatement","src":"16793:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"16624:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"16629:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"16634:6:30","type":""}],"src":"16580:246:30"},{"body":{"nodeType":"YulBlock","src":"16942:280:30","statements":[{"nodeType":"YulVariableDeclaration","src":"16952:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16999:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16966:32:30"},"nodeType":"YulFunctionCall","src":"16966:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16956:6:30","type":""}]},{"nodeType":"YulAssignment","src":"17014:96:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17098:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"17103:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17021:76:30"},"nodeType":"YulFunctionCall","src":"17021:89:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17014:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17158:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"17165:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17154:3:30"},"nodeType":"YulFunctionCall","src":"17154:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"17172:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"17177:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17119:34:30"},"nodeType":"YulFunctionCall","src":"17119:65:30"},"nodeType":"YulExpressionStatement","src":"17119:65:30"},{"nodeType":"YulAssignment","src":"17193:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17204:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"17209:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17200:3:30"},"nodeType":"YulFunctionCall","src":"17200:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17193:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16923:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16930:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16938:3:30","type":""}],"src":"16832:390:30"},{"body":{"nodeType":"YulBlock","src":"17334:61:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17356:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"17364:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17352:3:30"},"nodeType":"YulFunctionCall","src":"17352:14:30"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"17368:19:30","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17345:6:30"},"nodeType":"YulFunctionCall","src":"17345:43:30"},"nodeType":"YulExpressionStatement","src":"17345:43:30"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17326:6:30","type":""}],"src":"17228:167:30"},{"body":{"nodeType":"YulBlock","src":"17565:238:30","statements":[{"nodeType":"YulAssignment","src":"17575:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17659:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"17664:2:30","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17582:76:30"},"nodeType":"YulFunctionCall","src":"17582:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17575:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17765:3:30"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"17676:88:30"},"nodeType":"YulFunctionCall","src":"17676:93:30"},"nodeType":"YulExpressionStatement","src":"17676:93:30"},{"nodeType":"YulAssignment","src":"17778:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17789:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"17794:2:30","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17785:3:30"},"nodeType":"YulFunctionCall","src":"17785:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17778:3:30"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17553:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17561:3:30","type":""}],"src":"17401:402:30"},{"body":{"nodeType":"YulBlock","src":"18195:581:30","statements":[{"nodeType":"YulAssignment","src":"18206:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18357:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"18213:142:30"},"nodeType":"YulFunctionCall","src":"18213:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18206:3:30"}]},{"nodeType":"YulAssignment","src":"18371:102:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18460:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"18469:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"18378:81:30"},"nodeType":"YulFunctionCall","src":"18378:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18371:3:30"}]},{"nodeType":"YulAssignment","src":"18483:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18634:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"18490:142:30"},"nodeType":"YulFunctionCall","src":"18490:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18483:3:30"}]},{"nodeType":"YulAssignment","src":"18648:102:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18737:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"18746:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"18655:81:30"},"nodeType":"YulFunctionCall","src":"18655:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18648:3:30"}]},{"nodeType":"YulAssignment","src":"18760:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"18767:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18760:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18166:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18172:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18180:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18191:3:30","type":""}],"src":"17809:967:30"},{"body":{"nodeType":"YulBlock","src":"18830:54:30","statements":[{"nodeType":"YulAssignment","src":"18840:38:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18858:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"18865:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18854:3:30"},"nodeType":"YulFunctionCall","src":"18854:14:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18874:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18870:3:30"},"nodeType":"YulFunctionCall","src":"18870:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18850:3:30"},"nodeType":"YulFunctionCall","src":"18850:28:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"18840:6:30"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18813:5:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"18823:6:30","type":""}],"src":"18782:102:30"},{"body":{"nodeType":"YulBlock","src":"18982:285:30","statements":[{"nodeType":"YulVariableDeclaration","src":"18992:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19039:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"19006:32:30"},"nodeType":"YulFunctionCall","src":"19006:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18996:6:30","type":""}]},{"nodeType":"YulAssignment","src":"19054:78:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19120:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"19125:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19061:58:30"},"nodeType":"YulFunctionCall","src":"19061:71:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19054:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19180:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"19187:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19176:3:30"},"nodeType":"YulFunctionCall","src":"19176:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"19194:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"19199:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"19141:34:30"},"nodeType":"YulFunctionCall","src":"19141:65:30"},"nodeType":"YulExpressionStatement","src":"19141:65:30"},{"nodeType":"YulAssignment","src":"19215:46:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19226:3:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19253:6:30"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"19231:21:30"},"nodeType":"YulFunctionCall","src":"19231:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19222:3:30"},"nodeType":"YulFunctionCall","src":"19222:39:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19215:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18963:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18970:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18978:3:30","type":""}],"src":"18890:377:30"},{"body":{"nodeType":"YulBlock","src":"19391:195:30","statements":[{"nodeType":"YulAssignment","src":"19401:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19413:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19424:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19409:3:30"},"nodeType":"YulFunctionCall","src":"19409:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19401:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19448:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19459:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19444:3:30"},"nodeType":"YulFunctionCall","src":"19444:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19467:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"19473:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19463:3:30"},"nodeType":"YulFunctionCall","src":"19463:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19437:6:30"},"nodeType":"YulFunctionCall","src":"19437:47:30"},"nodeType":"YulExpressionStatement","src":"19437:47:30"},{"nodeType":"YulAssignment","src":"19493:86:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19565:6:30"},{"name":"tail","nodeType":"YulIdentifier","src":"19574:4:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19501:63:30"},"nodeType":"YulFunctionCall","src":"19501:78:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19493:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19363:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19375:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19386:4:30","type":""}],"src":"19273:313:30"},{"body":{"nodeType":"YulBlock","src":"19698:64:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19720:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"19728:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19716:3:30"},"nodeType":"YulFunctionCall","src":"19716:14:30"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"19732:22:30","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19709:6:30"},"nodeType":"YulFunctionCall","src":"19709:46:30"},"nodeType":"YulExpressionStatement","src":"19709:46:30"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19690:6:30","type":""}],"src":"19592:170:30"},{"body":{"nodeType":"YulBlock","src":"19914:220:30","statements":[{"nodeType":"YulAssignment","src":"19924:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19990:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"19995:2:30","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19931:58:30"},"nodeType":"YulFunctionCall","src":"19931:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19924:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20096:3:30"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"20007:88:30"},"nodeType":"YulFunctionCall","src":"20007:93:30"},"nodeType":"YulExpressionStatement","src":"20007:93:30"},{"nodeType":"YulAssignment","src":"20109:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20120:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20125:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20116:3:30"},"nodeType":"YulFunctionCall","src":"20116:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20109:3:30"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19902:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19910:3:30","type":""}],"src":"19768:366:30"},{"body":{"nodeType":"YulBlock","src":"20311:248:30","statements":[{"nodeType":"YulAssignment","src":"20321:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20333:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20344:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20329:3:30"},"nodeType":"YulFunctionCall","src":"20329:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20321:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20368:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20379:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20364:3:30"},"nodeType":"YulFunctionCall","src":"20364:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20387:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"20393:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20383:3:30"},"nodeType":"YulFunctionCall","src":"20383:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20357:6:30"},"nodeType":"YulFunctionCall","src":"20357:47:30"},"nodeType":"YulExpressionStatement","src":"20357:47:30"},{"nodeType":"YulAssignment","src":"20413:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20547:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20421:124:30"},"nodeType":"YulFunctionCall","src":"20421:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20413:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20291:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20306:4:30","type":""}],"src":"20140:419:30"},{"body":{"nodeType":"YulBlock","src":"20671:60:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20693:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"20701:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20689:3:30"},"nodeType":"YulFunctionCall","src":"20689:14:30"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"20705:18:30","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20682:6:30"},"nodeType":"YulFunctionCall","src":"20682:42:30"},"nodeType":"YulExpressionStatement","src":"20682:42:30"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20663:6:30","type":""}],"src":"20565:166:30"},{"body":{"nodeType":"YulBlock","src":"20883:220:30","statements":[{"nodeType":"YulAssignment","src":"20893:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20959:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20964:2:30","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20900:58:30"},"nodeType":"YulFunctionCall","src":"20900:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20893:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21065:3:30"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"20976:88:30"},"nodeType":"YulFunctionCall","src":"20976:93:30"},"nodeType":"YulExpressionStatement","src":"20976:93:30"},{"nodeType":"YulAssignment","src":"21078:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21089:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"21094:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21085:3:30"},"nodeType":"YulFunctionCall","src":"21085:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21078:3:30"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20871:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20879:3:30","type":""}],"src":"20737:366:30"},{"body":{"nodeType":"YulBlock","src":"21280:248:30","statements":[{"nodeType":"YulAssignment","src":"21290:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21302:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21313:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21298:3:30"},"nodeType":"YulFunctionCall","src":"21298:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21290:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21337:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21348:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21333:3:30"},"nodeType":"YulFunctionCall","src":"21333:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21356:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"21362:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21352:3:30"},"nodeType":"YulFunctionCall","src":"21352:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21326:6:30"},"nodeType":"YulFunctionCall","src":"21326:47:30"},"nodeType":"YulExpressionStatement","src":"21326:47:30"},{"nodeType":"YulAssignment","src":"21382:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21516:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21390:124:30"},"nodeType":"YulFunctionCall","src":"21390:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21382:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21260:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21275:4:30","type":""}],"src":"21109:419:30"},{"body":{"nodeType":"YulBlock","src":"21577:128:30","statements":[{"nodeType":"YulAssignment","src":"21587:33:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21614:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21596:17:30"},"nodeType":"YulFunctionCall","src":"21596:24:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"21587:5:30"}]},{"body":{"nodeType":"YulBlock","src":"21648:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21650:16:30"},"nodeType":"YulFunctionCall","src":"21650:18:30"},"nodeType":"YulExpressionStatement","src":"21650:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21635:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"21642:4:30","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21632:2:30"},"nodeType":"YulFunctionCall","src":"21632:15:30"},"nodeType":"YulIf","src":"21629:41:30"},{"nodeType":"YulAssignment","src":"21679:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21690:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"21697:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21686:3:30"},"nodeType":"YulFunctionCall","src":"21686:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"21679:3:30"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21563:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"21573:3:30","type":""}],"src":"21534:171:30"},{"body":{"nodeType":"YulBlock","src":"21817:76:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21839:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"21847:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21835:3:30"},"nodeType":"YulFunctionCall","src":"21835:14:30"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"21851:34:30","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21828:6:30"},"nodeType":"YulFunctionCall","src":"21828:58:30"},"nodeType":"YulExpressionStatement","src":"21828:58:30"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21809:6:30","type":""}],"src":"21711:182:30"},{"body":{"nodeType":"YulBlock","src":"22045:220:30","statements":[{"nodeType":"YulAssignment","src":"22055:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22121:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"22126:2:30","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22062:58:30"},"nodeType":"YulFunctionCall","src":"22062:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22055:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22227:3:30"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"22138:88:30"},"nodeType":"YulFunctionCall","src":"22138:93:30"},"nodeType":"YulExpressionStatement","src":"22138:93:30"},{"nodeType":"YulAssignment","src":"22240:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22251:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"22256:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22247:3:30"},"nodeType":"YulFunctionCall","src":"22247:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22240:3:30"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22033:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22041:3:30","type":""}],"src":"21899:366:30"},{"body":{"nodeType":"YulBlock","src":"22442:248:30","statements":[{"nodeType":"YulAssignment","src":"22452:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22464:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22475:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22460:3:30"},"nodeType":"YulFunctionCall","src":"22460:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22452:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22499:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22510:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22495:3:30"},"nodeType":"YulFunctionCall","src":"22495:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22518:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"22524:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22514:3:30"},"nodeType":"YulFunctionCall","src":"22514:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22488:6:30"},"nodeType":"YulFunctionCall","src":"22488:47:30"},"nodeType":"YulExpressionStatement","src":"22488:47:30"},{"nodeType":"YulAssignment","src":"22544:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22678:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22552:124:30"},"nodeType":"YulFunctionCall","src":"22552:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22544:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22422:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22437:4:30","type":""}],"src":"22271:419:30"},{"body":{"nodeType":"YulBlock","src":"22802:119:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22824:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"22832:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22820:3:30"},"nodeType":"YulFunctionCall","src":"22820:14:30"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"22836:34:30","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22813:6:30"},"nodeType":"YulFunctionCall","src":"22813:58:30"},"nodeType":"YulExpressionStatement","src":"22813:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22892:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"22900:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22888:3:30"},"nodeType":"YulFunctionCall","src":"22888:15:30"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"22905:8:30","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22881:6:30"},"nodeType":"YulFunctionCall","src":"22881:33:30"},"nodeType":"YulExpressionStatement","src":"22881:33:30"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22794:6:30","type":""}],"src":"22696:225:30"},{"body":{"nodeType":"YulBlock","src":"23073:220:30","statements":[{"nodeType":"YulAssignment","src":"23083:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23149:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23154:2:30","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23090:58:30"},"nodeType":"YulFunctionCall","src":"23090:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23083:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23255:3:30"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"23166:88:30"},"nodeType":"YulFunctionCall","src":"23166:93:30"},"nodeType":"YulExpressionStatement","src":"23166:93:30"},{"nodeType":"YulAssignment","src":"23268:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23279:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23284:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23275:3:30"},"nodeType":"YulFunctionCall","src":"23275:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23268:3:30"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23061:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23069:3:30","type":""}],"src":"22927:366:30"},{"body":{"nodeType":"YulBlock","src":"23470:248:30","statements":[{"nodeType":"YulAssignment","src":"23480:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23492:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23503:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23488:3:30"},"nodeType":"YulFunctionCall","src":"23488:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23480:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23527:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23538:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23523:3:30"},"nodeType":"YulFunctionCall","src":"23523:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23546:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"23552:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23542:3:30"},"nodeType":"YulFunctionCall","src":"23542:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23516:6:30"},"nodeType":"YulFunctionCall","src":"23516:47:30"},"nodeType":"YulExpressionStatement","src":"23516:47:30"},{"nodeType":"YulAssignment","src":"23572:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23706:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23580:124:30"},"nodeType":"YulFunctionCall","src":"23580:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23572:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23450:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23465:4:30","type":""}],"src":"23299:419:30"},{"body":{"nodeType":"YulBlock","src":"23782:40:30","statements":[{"nodeType":"YulAssignment","src":"23793:22:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23809:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23803:5:30"},"nodeType":"YulFunctionCall","src":"23803:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23793:6:30"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23765:5:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"23775:6:30","type":""}],"src":"23724:98:30"},{"body":{"nodeType":"YulBlock","src":"23941:34:30","statements":[{"nodeType":"YulAssignment","src":"23951:18:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"23966:3:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"23951:11:30"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23913:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"23918:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"23929:11:30","type":""}],"src":"23828:147:30"},{"body":{"nodeType":"YulBlock","src":"24089:278:30","statements":[{"nodeType":"YulVariableDeclaration","src":"24099:52:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24145:5:30"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"24113:31:30"},"nodeType":"YulFunctionCall","src":"24113:38:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24103:6:30","type":""}]},{"nodeType":"YulAssignment","src":"24160:95:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24243:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"24248:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24167:75:30"},"nodeType":"YulFunctionCall","src":"24167:88:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24160:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24303:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"24310:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24299:3:30"},"nodeType":"YulFunctionCall","src":"24299:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"24317:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"24322:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24264:34:30"},"nodeType":"YulFunctionCall","src":"24264:65:30"},"nodeType":"YulExpressionStatement","src":"24264:65:30"},{"nodeType":"YulAssignment","src":"24338:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24349:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"24354:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24345:3:30"},"nodeType":"YulFunctionCall","src":"24345:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24338:3:30"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24070:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24077:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24085:3:30","type":""}],"src":"23981:386:30"},{"body":{"nodeType":"YulBlock","src":"24507:137:30","statements":[{"nodeType":"YulAssignment","src":"24518:100:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24605:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"24614:3:30"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24525:79:30"},"nodeType":"YulFunctionCall","src":"24525:93:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24518:3:30"}]},{"nodeType":"YulAssignment","src":"24628:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"24635:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24628:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24486:3:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24492:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24503:3:30","type":""}],"src":"24373:271:30"},{"body":{"nodeType":"YulBlock","src":"24756:73:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24778:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"24786:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24774:3:30"},"nodeType":"YulFunctionCall","src":"24774:14:30"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"24790:31:30","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24767:6:30"},"nodeType":"YulFunctionCall","src":"24767:55:30"},"nodeType":"YulExpressionStatement","src":"24767:55:30"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24748:6:30","type":""}],"src":"24650:179:30"},{"body":{"nodeType":"YulBlock","src":"24981:220:30","statements":[{"nodeType":"YulAssignment","src":"24991:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25057:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25062:2:30","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24998:58:30"},"nodeType":"YulFunctionCall","src":"24998:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24991:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25163:3:30"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"25074:88:30"},"nodeType":"YulFunctionCall","src":"25074:93:30"},"nodeType":"YulExpressionStatement","src":"25074:93:30"},{"nodeType":"YulAssignment","src":"25176:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25187:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25192:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25183:3:30"},"nodeType":"YulFunctionCall","src":"25183:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25176:3:30"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24969:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24977:3:30","type":""}],"src":"24835:366:30"},{"body":{"nodeType":"YulBlock","src":"25378:248:30","statements":[{"nodeType":"YulAssignment","src":"25388:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25400:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25411:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25396:3:30"},"nodeType":"YulFunctionCall","src":"25396:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25388:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25435:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25446:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25431:3:30"},"nodeType":"YulFunctionCall","src":"25431:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25454:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"25460:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25450:3:30"},"nodeType":"YulFunctionCall","src":"25450:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25424:6:30"},"nodeType":"YulFunctionCall","src":"25424:47:30"},"nodeType":"YulExpressionStatement","src":"25424:47:30"},{"nodeType":"YulAssignment","src":"25480:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25614:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25488:124:30"},"nodeType":"YulFunctionCall","src":"25488:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25480:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25358:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25373:4:30","type":""}],"src":"25207:419:30"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4634":[{"length":32,"start":1978},{"length":32,"start":4515}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061014d5760003560e01c80636e810b1a116100c3578063b0e31b2d1161007c578063b0e31b2d14610378578063b6db75a014610396578063d547741f146103b4578063d6fb97a5146103d0578063ed0cdb1a14610400578063fe4b84df1461041e5761014d565b80636e810b1a146102ca57806377539417146102e657806377c379a4146103025780638456cb591461032057806391d148541461032a578063a217fddf1461035a5761014d565b80633e50de30116101155780633e50de301461021a5780633f4ba83a1461023857806353b3ad7f1461024257806358418587146102605780635c975abb1461027c5780636c64f0b41461029a5761014d565b806301ffc9a714610152578063060e5c6e14610182578063248a9ca3146101b25780632f2ff15d146101e257806336568abe146101fe575b600080fd5b61016c6004803603810190610167919061246c565b61043a565b60405161017991906124b4565b60405180910390f35b61019c60048036038101906101979190612505565b6104b4565b6040516101a991906124b4565b60405180910390f35b6101cc60048036038101906101c79190612568565b610865565b6040516101d991906125a4565b60405180910390f35b6101fc60048036038101906101f7919061261d565b610885565b005b6102186004803603810190610213919061261d565b6108a6565b005b610222610929565b60405161022f919061266c565b60405180910390f35b610240610ad5565b005b61024a610b26565b604051610257919061266c565b60405180910390f35b61027a60048036038101906102759190612505565b610b78565b005b610284610c02565b60405161029191906124b4565b60405180910390f35b6102b460048036038101906102af9190612505565b610c19565b6040516102c191906124b4565b60405180910390f35b6102e460048036038101906102df9190612687565b610d65565b005b61030060048036038101906102fb9190612505565b610e87565b005b61030a610f05565b604051610317919061266c565b60405180910390f35b610328610f0f565b005b610344600480360381019061033f919061261d565b610f60565b60405161035191906124b4565b60405180910390f35b610362610fcb565b60405161036f91906125a4565b60405180910390f35b610380610fd2565b60405161038d919061266c565b60405180910390f35b61039e610fd8565b6040516103ab91906124b4565b60405180910390f35b6103ce60048036038101906103c9919061261d565b610ff7565b005b6103ea60048036038101906103e59190612505565b611018565b6040516103f791906124b4565b60405180910390f35b61040861124f565b604051610415919061266c565b60405180910390f35b61043860048036038101906104339190612505565b6112fa565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104ad57506104ac82611454565b5b9050919050565b60006104be6114be565b600061010060006104cd61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600101541080610563575060ff600061052261150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015442105b806105b6575060ff600061057561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015483115b156105ed576040517f71a61d9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fb600081546105fc906126e3565b919050819055508260fe6000828254610615919061272b565b9250508190555082816001016000828254610630919061272b565b9250508190555082610102600061064561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060fb548152602001908152602001600020600101819055508260ff60006106a661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361074c57600060ff60006106f761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055505b8260ff600061075961150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107a5919061272b565b925050819055506107fe6107b761150d565b847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166115159092919063ffffffff16565b61080661150d565b73ffffffffffffffffffffffffffffffffffffffff167f33acb29a4ba6d440da1a7ba75e505a000b362f21a991b589437f8f04dd98fd6b8460405161084b919061266c565b60405180910390a2600191505061086061159b565b919050565b600060976000838152602001908152602001600020600101549050919050565b61088e82610865565b610897816115a5565b6108a183836115b9565b505050565b6108ae61150d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461091b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610912906127e2565b60405180910390fd5b610925828261169a565b5050565b60008060009050600061093a61177c565b905060008160008151811061095257610951612802565b5b6020026020010151905060008060008390505b60fb548111610ac9576000610102600061097d61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050818684815181106109fd576109fc612802565b5b602002602001015103610a4e57600081600001511115610a2e57806000015187610a279190612831565b9650610a41565b806020015187610a3e919061272b565b96505b82610a4b906126e3565b92505b600061010160008481526020019081526020016000209050600081600001548260010154610a7c919061272b565b9050816003015482600201548a83610a949190612865565b610a9e9190612865565b610aa891906128ee565b86610ab39190612831565b955083610abf906126e3565b9350505050610965565b50819550505050505090565b610add610fd8565b610b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1390612991565b60405180910390fd5b610b24611a37565b565b60006101006000610b3561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154905090565b610b80610fd8565b610bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb690612991565b60405180910390fd5b603c81610bcc9190612865565b60fd81905550807fc43e5db88f387521adfb9f79c0c9efd47004dc3a041358383ecccb1a1509dbf660405160405180910390a250565b6000603360009054906101000a900460ff16905090565b600060ff6000610c2761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161580610cc657508160ff6000610c8661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154105b15610d5b57600060ff6000610cd961150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff0219169083151502179055508281600101819055504260fd54610d499190612831565b81600201819055506001915050610d60565b600090505b919050565b600060019054906101000a900460ff16610db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dab90612a23565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e1a576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e22611a9a565b610e2a611af3565b610e32611b44565b610e43610e3d611b9d565b826115b9565b610e54610e4e611bc5565b826115b9565b610e6c610e5f611bc5565b610e67611b9d565b611bed565b610e84610e77611b9d565b610e7f611b9d565b611bed565b50565b610e8f610fd8565b610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590612991565b60405180910390fd5b8060fc81905550807f4e84e59515fa6d59eedd951d065c81f1962f0e5132f2e9120b47d64c7b33a17760405160405180910390a250565b600060fb54905090565b610f17610fd8565b610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d90612991565b60405180910390fd5b610f5e611c49565b565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60fe5481565b6000610ff2610fe5611b9d565b610fed61150d565b610f60565b905090565b61100082610865565b611009816115a5565b611013838361169a565b505050565b60006110226114be565b60fc5482101561105e576040517fad40140300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fb6000815461106d906126e3565b919050819055506000610100600061108361150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff166110fe5760018160000160006101000a81548160ff02191690831515021790555060fb5481600201819055505b828160010160008282546111129190612831565b9250508190555082610102600061112761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060fb548152602001908152602001600020600001819055508260fe600082825461118d9190612831565b925050819055506111e861119f61150d565b30857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611cac909392919063ffffffff16565b6111f061150d565b73ffffffffffffffffffffffffffffffffffffffff167ff1e64f5ab94083442836ae6ef7e94101f7fcc786c3e761b00d5f4e10c6c2019684604051611235919061266c565b60405180910390a2600191505061124a61159b565b919050565b600080610100600061125f61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154116112a95760006112f5565b61010060006112b661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101545b905090565b60008060019054906101000a900460ff1615905080801561132b5750600160008054906101000a900460ff1660ff16105b80611358575061133a30611d35565b1580156113575750600160008054906101000a900460ff1660ff16145b5b611397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138e90612ab5565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156113d4576001600060016101000a81548160ff0219169083151502179055505b603c826113e19190612865565b60fd819055506113f76113f261150d565b610d65565b80156114505760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516114479190612b27565b60405180910390a15b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600260c95403611503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fa90612b8e565b60405180910390fd5b600260c981905550565b600033905090565b6115968363a9059cbb60e01b8484604051602401611534929190612bbd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d58565b505050565b600160c981905550565b6115b6816115b161150d565b611e1f565b50565b6115c38282610f60565b6116965760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061163b61150d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6116a48282610f60565b156117785760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061171d61150d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6060600080610100600061178e61150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905060006117d8610f05565b905060008290505b8181116118da57600061010260006117f661150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411156118585783611855906126e3565b93505b6000610102600061186761150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411156118c957836118c6906126e3565b93505b806118d3906126e3565b90506117e0565b5060008367ffffffffffffffff8111156118f7576118f6612be6565b5b6040519080825280602002602001820160405280156119255781602001602082028036833780820191505090505b5090506000808490505b838111611a2b576000610102600061194561150d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000816000015111156119df57818484815181106119d2576119d1612802565b5b6020026020010181815250505b600081602001511115611a0d5781848481518110611a00576119ff612802565b5b6020026020010181815250505b82611a17906126e3565b925081611a23906126e3565b91505061192f565b50819550505050505090565b611a3f611ea4565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611a8361150d565b604051611a909190612c15565b60405180910390a1565b600060019054906101000a900460ff16611ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae090612a23565b60405180910390fd5b611af1611eed565b565b600060019054906101000a900460ff16611b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3990612a23565b60405180910390fd5b565b600060019054906101000a900460ff16611b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8a90612a23565b60405180910390fd5b611b9b611f59565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b6000611bf883610865565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b611c51611fb2565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c9561150d565b604051611ca29190612c15565b60405180910390a1565b611d2f846323b872dd60e01b858585604051602401611ccd93929190612c30565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d58565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611dba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ffc9092919063ffffffff16565b9050600081511115611e1a5780806020019051810190611dda9190612c93565b611e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1090612d32565b60405180910390fd5b5b505050565b611e298282610f60565b611ea057611e3681612014565b611e448360001c6020612041565b604051602001611e55929190612e5b565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e979190612edf565b60405180910390fd5b5050565b611eac610c02565b611eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee290612f4d565b60405180910390fd5b565b600060019054906101000a900460ff16611f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3390612a23565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9f90612a23565b60405180910390fd5b600160c981905550565b611fba610c02565b15611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff190612fb9565b60405180910390fd5b565b606061200b848460008561227d565b90509392505050565b606061203a8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612041565b9050919050565b6060600060028360026120549190612865565b61205e9190612831565b67ffffffffffffffff81111561207757612076612be6565b5b6040519080825280601f01601f1916602001820160405280156120a95781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120e1576120e0612802565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061214557612144612802565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026121859190612865565b61218f9190612831565b90505b600181111561222f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106121d1576121d0612802565b5b1a60f81b8282815181106121e8576121e7612802565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061222890612fd9565b9050612192565b5060008414612273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226a9061304e565b60405180910390fd5b8091505092915050565b6060824710156122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b9906130e0565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122eb9190613147565b60006040518083038185875af1925050503d8060008114612328576040519150601f19603f3d011682016040523d82523d6000602084013e61232d565b606091505b509150915061233e8783838761234a565b92505050949350505050565b606083156123ac5760008351036123a45761236485611d35565b6123a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239a906131aa565b60405180910390fd5b5b8290506123b7565b6123b683836123bf565b5b949350505050565b6000825111156123d25781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124069190612edf565b60405180910390fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61244981612414565b811461245457600080fd5b50565b60008135905061246681612440565b92915050565b6000602082840312156124825761248161240f565b5b600061249084828501612457565b91505092915050565b60008115159050919050565b6124ae81612499565b82525050565b60006020820190506124c960008301846124a5565b92915050565b6000819050919050565b6124e2816124cf565b81146124ed57600080fd5b50565b6000813590506124ff816124d9565b92915050565b60006020828403121561251b5761251a61240f565b5b6000612529848285016124f0565b91505092915050565b6000819050919050565b61254581612532565b811461255057600080fd5b50565b6000813590506125628161253c565b92915050565b60006020828403121561257e5761257d61240f565b5b600061258c84828501612553565b91505092915050565b61259e81612532565b82525050565b60006020820190506125b96000830184612595565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125ea826125bf565b9050919050565b6125fa816125df565b811461260557600080fd5b50565b600081359050612617816125f1565b92915050565b600080604083850312156126345761263361240f565b5b600061264285828601612553565b925050602061265385828601612608565b9150509250929050565b612666816124cf565b82525050565b6000602082019050612681600083018461265d565b92915050565b60006020828403121561269d5761269c61240f565b5b60006126ab84828501612608565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ee826124cf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036127205761271f6126b4565b5b600182019050919050565b6000612736826124cf565b9150612741836124cf565b9250828203905081811115612759576127586126b4565b5b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006127cc602f8361275f565b91506127d782612770565b604082019050919050565b600060208201905081810360008301526127fb816127bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061283c826124cf565b9150612847836124cf565b925082820190508082111561285f5761285e6126b4565b5b92915050565b6000612870826124cf565b915061287b836124cf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128b4576128b36126b4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006128f9826124cf565b9150612904836124cf565b925082612914576129136128bf565b5b828204905092915050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b600061297b602c8361275f565b91506129868261291f565b604082019050919050565b600060208201905081810360008301526129aa8161296e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612a0d602b8361275f565b9150612a18826129b1565b604082019050919050565b60006020820190508181036000830152612a3c81612a00565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612a9f602e8361275f565b9150612aaa82612a43565b604082019050919050565b60006020820190508181036000830152612ace81612a92565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612b11612b0c612b0784612ad5565b612aec565b612adf565b9050919050565b612b2181612af6565b82525050565b6000602082019050612b3c6000830184612b18565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612b78601f8361275f565b9150612b8382612b42565b602082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b612bb7816125df565b82525050565b6000604082019050612bd26000830185612bae565b612bdf602083018461265d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082019050612c2a6000830184612bae565b92915050565b6000606082019050612c456000830186612bae565b612c526020830185612bae565b612c5f604083018461265d565b949350505050565b612c7081612499565b8114612c7b57600080fd5b50565b600081519050612c8d81612c67565b92915050565b600060208284031215612ca957612ca861240f565b5b6000612cb784828501612c7e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612d1c602a8361275f565b9150612d2782612cc0565b604082019050919050565b60006020820190508181036000830152612d4b81612d0f565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612d93601783612d52565b9150612d9e82612d5d565b601782019050919050565b600081519050919050565b60005b83811015612dd2578082015181840152602081019050612db7565b60008484015250505050565b6000612de982612da9565b612df38185612d52565b9350612e03818560208601612db4565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000612e45601183612d52565b9150612e5082612e0f565b601182019050919050565b6000612e6682612d86565b9150612e728285612dde565b9150612e7d82612e38565b9150612e898284612dde565b91508190509392505050565b6000601f19601f8301169050919050565b6000612eb182612da9565b612ebb818561275f565b9350612ecb818560208601612db4565b612ed481612e95565b840191505092915050565b60006020820190508181036000830152612ef98184612ea6565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612f3760148361275f565b9150612f4282612f01565b602082019050919050565b60006020820190508181036000830152612f6681612f2a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612fa360108361275f565b9150612fae82612f6d565b602082019050919050565b60006020820190508181036000830152612fd281612f96565b9050919050565b6000612fe4826124cf565b915060008203612ff757612ff66126b4565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061303860208361275f565b915061304382613002565b602082019050919050565b600060208201905081810360008301526130678161302b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006130ca60268361275f565b91506130d58261306e565b604082019050919050565b600060208201905081810360008301526130f9816130bd565b9050919050565b600081519050919050565b600081905092915050565b600061312182613100565b61312b818561310b565b935061313b818560208601612db4565b80840191505092915050565b60006131538284613116565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613194601d8361275f565b915061319f8261315e565b602082019050919050565b600060208201905081810360008301526131c381613187565b905091905056fea26469706673582212209244fb75e03e2c2584984e44d948817fbb848b355f96dc21b7b494e461edaae264736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xB0E31B2D GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB0E31B2D EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0xD6FB97A5 EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0xED0CDB1A EQ PUSH2 0x400 JUMPI DUP1 PUSH4 0xFE4B84DF EQ PUSH2 0x41E JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x77539417 EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x77C379A4 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x35A JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x3E50DE30 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x3E50DE30 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x53B3AD7F EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x58418587 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x6C64F0B4 EQ PUSH2 0x29A JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x60E5C6E EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1FE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x2568 JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D9 SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0x885 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0x8A6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x222 PUSH2 0x929 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x240 PUSH2 0xAD5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x24A PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x284 PUSH2 0xC02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AF SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DF SWAP2 SWAP1 PUSH2 0x2687 JUMP JUMPDEST PUSH2 0xD65 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x300 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30A PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x328 PUSH2 0xF0F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x344 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x33F SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0xF60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x351 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x362 PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x25A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x380 PUSH2 0xFD2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39E PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x261D JUMP JUMPDEST PUSH2 0xFF7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E5 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0x1018 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F7 SWAP2 SWAP1 PUSH2 0x24B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x408 PUSH2 0x124F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x415 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x438 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x2505 JUMP JUMPDEST PUSH2 0x12FA JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4AD JUMPI POP PUSH2 0x4AC DUP3 PUSH2 0x1454 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BE PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x4CD PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x1 ADD SLOAD LT DUP1 PUSH2 0x563 JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x522 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD TIMESTAMP LT JUMPDEST DUP1 PUSH2 0x5B6 JUMPI POP PUSH1 0xFF PUSH1 0x0 PUSH2 0x575 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 GT JUMPDEST ISZERO PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x71A61D9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x5FC SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x615 SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x630 SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x645 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x6A6 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SUB PUSH2 0x74C JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0x6F7 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP3 PUSH1 0xFF PUSH1 0x0 PUSH2 0x759 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7A5 SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x7FE PUSH2 0x7B7 PUSH2 0x150D JUMP JUMPDEST DUP5 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1515 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x806 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x33ACB29A4BA6D440DA1A7BA75E505A000B362F21A991B589437F8F04DD98FD6B DUP5 PUSH1 0x40 MLOAD PUSH2 0x84B SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x860 PUSH2 0x159B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x88E DUP3 PUSH2 0x865 JUMP JUMPDEST PUSH2 0x897 DUP2 PUSH2 0x15A5 JUMP JUMPDEST PUSH2 0x8A1 DUP4 DUP4 PUSH2 0x15B9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x8AE PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x91B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x912 SWAP1 PUSH2 0x27E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x925 DUP3 DUP3 PUSH2 0x169A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0x93A PUSH2 0x177C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x952 JUMPI PUSH2 0x951 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 SWAP1 POP JUMPDEST PUSH1 0xFB SLOAD DUP2 GT PUSH2 0xAC9 JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x97D PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9FD JUMPI PUSH2 0x9FC PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB PUSH2 0xA4E JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0xA2E JUMPI DUP1 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0xA27 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP7 POP PUSH2 0xA41 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD DUP8 PUSH2 0xA3E SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP7 POP JUMPDEST DUP3 PUSH2 0xA4B SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x272B JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x3 ADD SLOAD DUP3 PUSH1 0x2 ADD SLOAD DUP11 DUP4 PUSH2 0xA94 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0xA9E SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x28EE JUMP JUMPDEST DUP7 PUSH2 0xAB3 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP6 POP DUP4 PUSH2 0xABF SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x965 JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0xADD PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xB1C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB13 SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB24 PUSH2 0x1A37 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0xB35 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB80 PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xBBF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBB6 SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3C DUP2 PUSH2 0xBCC SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0xC43E5DB88F387521ADFB9F79C0C9EFD47004DC3A041358383ECCCB1A1509DBF6 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC27 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0xCC6 JUMPI POP DUP2 PUSH1 0xFF PUSH1 0x0 PUSH2 0xC86 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD LT JUMPDEST ISZERO PUSH2 0xD5B JUMPI PUSH1 0x0 PUSH1 0xFF PUSH1 0x0 PUSH2 0xCD9 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP PUSH1 0xFD SLOAD PUSH2 0xD49 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP PUSH2 0xD60 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDAB SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE1A JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE22 PUSH2 0x1A9A JUMP JUMPDEST PUSH2 0xE2A PUSH2 0x1AF3 JUMP JUMPDEST PUSH2 0xE32 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xE43 PUSH2 0xE3D PUSH2 0x1B9D JUMP JUMPDEST DUP3 PUSH2 0x15B9 JUMP JUMPDEST PUSH2 0xE54 PUSH2 0xE4E PUSH2 0x1BC5 JUMP JUMPDEST DUP3 PUSH2 0x15B9 JUMP JUMPDEST PUSH2 0xE6C PUSH2 0xE5F PUSH2 0x1BC5 JUMP JUMPDEST PUSH2 0xE67 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0x1BED JUMP JUMPDEST PUSH2 0xE84 PUSH2 0xE77 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0xE7F PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0x1BED JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xE8F PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC5 SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFC DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0x4E84E59515FA6D59EEDD951D065C81F1962F0E5132F2E9120B47D64C7B33A177 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF17 PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0xF56 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4D SWAP1 PUSH2 0x2991 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF5E PUSH2 0x1C49 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0xFE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF2 PUSH2 0xFE5 PUSH2 0x1B9D JUMP JUMPDEST PUSH2 0xFED PUSH2 0x150D JUMP JUMPDEST PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1000 DUP3 PUSH2 0x865 JUMP JUMPDEST PUSH2 0x1009 DUP2 PUSH2 0x15A5 JUMP JUMPDEST PUSH2 0x1013 DUP4 DUP4 PUSH2 0x169A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1022 PUSH2 0x14BE JUMP JUMPDEST PUSH1 0xFC SLOAD DUP3 LT ISZERO PUSH2 0x105E JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD40140300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0x106D SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x100 PUSH1 0x0 PUSH2 0x1083 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x10FE JUMPI PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xFB SLOAD DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1112 SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1127 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xFE PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x118D SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x11E8 PUSH2 0x119F PUSH2 0x150D JUMP JUMPDEST ADDRESS DUP6 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1CAC SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x11F0 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF1E64F5AB94083442836AE6EF7E94101F7FCC786C3E761B00D5F4E10C6C20196 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1235 SWAP2 SWAP1 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP2 POP POP PUSH2 0x124A PUSH2 0x159B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x125F PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT PUSH2 0x12A9 JUMPI PUSH1 0x0 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x100 PUSH1 0x0 PUSH2 0x12B6 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x132B JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x1358 JUMPI POP PUSH2 0x133A ADDRESS PUSH2 0x1D35 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1357 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x1397 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138E SWAP1 PUSH2 0x2AB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x13D4 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3C DUP3 PUSH2 0x13E1 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH1 0xFD DUP2 SWAP1 SSTORE POP PUSH2 0x13F7 PUSH2 0x13F2 PUSH2 0x150D JUMP JUMPDEST PUSH2 0xD65 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1450 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1447 SWAP2 SWAP1 PUSH2 0x2B27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0xC9 SLOAD SUB PUSH2 0x1503 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14FA SWAP1 PUSH2 0x2B8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1596 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1534 SWAP3 SWAP2 SWAP1 PUSH2 0x2BBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D58 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x15B6 DUP2 PUSH2 0x15B1 PUSH2 0x150D JUMP JUMPDEST PUSH2 0x1E1F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x15C3 DUP3 DUP3 PUSH2 0xF60 JUMP JUMPDEST PUSH2 0x1696 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x163B PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16A4 DUP3 DUP3 PUSH2 0xF60 JUMP JUMPDEST ISZERO PUSH2 0x1778 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x171D PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x100 PUSH1 0x0 PUSH2 0x178E PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x17D8 PUSH2 0xF05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SWAP1 POP JUMPDEST DUP2 DUP2 GT PUSH2 0x18DA JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x17F6 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x1858 JUMPI DUP4 PUSH2 0x1855 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1867 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x18C9 JUMPI DUP4 PUSH2 0x18C6 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP4 POP JUMPDEST DUP1 PUSH2 0x18D3 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP1 POP PUSH2 0x17E0 JUMP JUMPDEST POP PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18F7 JUMPI PUSH2 0x18F6 PUSH2 0x2BE6 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1925 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 DUP5 SWAP1 POP JUMPDEST DUP4 DUP2 GT PUSH2 0x1A2B JUMPI PUSH1 0x0 PUSH2 0x102 PUSH1 0x0 PUSH2 0x1945 PUSH2 0x150D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0x19DF JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x19D2 JUMPI PUSH2 0x19D1 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x1A0D JUMPI DUP2 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1A00 JUMPI PUSH2 0x19FF PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP3 PUSH2 0x1A17 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP3 POP DUP2 PUSH2 0x1A23 SWAP1 PUSH2 0x26E3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x192F JUMP JUMPDEST POP DUP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x1A3F PUSH2 0x1EA4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x1A83 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A90 SWAP2 SWAP1 PUSH2 0x2C15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1AE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AE0 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1AF1 PUSH2 0x1EED JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B39 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1B93 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B8A SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B9B PUSH2 0x1F59 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BF8 DUP4 PUSH2 0x865 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x1C51 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1C95 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CA2 SWAP2 SWAP1 PUSH2 0x2C15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1D2F DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CCD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C30 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D58 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DBA DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1FFC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1E1A JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1DDA SWAP2 SWAP1 PUSH2 0x2C93 JUMP JUMPDEST PUSH2 0x1E19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E10 SWAP1 PUSH2 0x2D32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1E29 DUP3 DUP3 PUSH2 0xF60 JUMP JUMPDEST PUSH2 0x1EA0 JUMPI PUSH2 0x1E36 DUP2 PUSH2 0x2014 JUMP JUMPDEST PUSH2 0x1E44 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2041 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1E55 SWAP3 SWAP2 SWAP1 PUSH2 0x2E5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E97 SWAP2 SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1EAC PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x1EEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EE2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F33 SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F9F SWAP1 PUSH2 0x2A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1FBA PUSH2 0xC02 JUMP JUMPDEST ISZERO PUSH2 0x1FFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FF1 SWAP1 PUSH2 0x2FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x200B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x227D JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x203A DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2041 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2054 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0x205E SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2077 JUMPI PUSH2 0x2076 PUSH2 0x2BE6 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20A9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x20E1 JUMPI PUSH2 0x20E0 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2145 JUMPI PUSH2 0x2144 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x2185 SWAP2 SWAP1 PUSH2 0x2865 JUMP JUMPDEST PUSH2 0x218F SWAP2 SWAP1 PUSH2 0x2831 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x222F JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x21D1 JUMPI PUSH2 0x21D0 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x21E8 JUMPI PUSH2 0x21E7 PUSH2 0x2802 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2228 SWAP1 PUSH2 0x2FD9 JUMP JUMPDEST SWAP1 POP PUSH2 0x2192 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x2273 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x226A SWAP1 PUSH2 0x304E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x22C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22B9 SWAP1 PUSH2 0x30E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x22EB SWAP2 SWAP1 PUSH2 0x3147 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2328 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x232D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x233E DUP8 DUP4 DUP4 DUP8 PUSH2 0x234A JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x23AC JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x23A4 JUMPI PUSH2 0x2364 DUP6 PUSH2 0x1D35 JUMP JUMPDEST PUSH2 0x23A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x239A SWAP1 PUSH2 0x31AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x23B7 JUMP JUMPDEST PUSH2 0x23B6 DUP4 DUP4 PUSH2 0x23BF JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x23D2 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2406 SWAP2 SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2449 DUP2 PUSH2 0x2414 JUMP JUMPDEST DUP2 EQ PUSH2 0x2454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2466 DUP2 PUSH2 0x2440 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2482 JUMPI PUSH2 0x2481 PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2490 DUP5 DUP3 DUP6 ADD PUSH2 0x2457 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24AE DUP2 PUSH2 0x2499 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x24C9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24A5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24E2 DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP2 EQ PUSH2 0x24ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24FF DUP2 PUSH2 0x24D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251B JUMPI PUSH2 0x251A PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2529 DUP5 DUP3 DUP6 ADD PUSH2 0x24F0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2545 DUP2 PUSH2 0x2532 JUMP JUMPDEST DUP2 EQ PUSH2 0x2550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2562 DUP2 PUSH2 0x253C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257E JUMPI PUSH2 0x257D PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x258C DUP5 DUP3 DUP6 ADD PUSH2 0x2553 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x259E DUP2 PUSH2 0x2532 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x25B9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2595 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25EA DUP3 PUSH2 0x25BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25FA DUP2 PUSH2 0x25DF JUMP JUMPDEST DUP2 EQ PUSH2 0x2605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2617 DUP2 PUSH2 0x25F1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2634 JUMPI PUSH2 0x2633 PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2642 DUP6 DUP3 DUP7 ADD PUSH2 0x2553 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2653 DUP6 DUP3 DUP7 ADD PUSH2 0x2608 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2666 DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2681 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x265D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x269D JUMPI PUSH2 0x269C PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26AB DUP5 DUP3 DUP6 ADD PUSH2 0x2608 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26EE DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2720 JUMPI PUSH2 0x271F PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2736 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2741 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2759 JUMPI PUSH2 0x2758 PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27CC PUSH1 0x2F DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x27D7 DUP3 PUSH2 0x2770 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x27FB DUP2 PUSH2 0x27BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x283C DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2847 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x285F JUMPI PUSH2 0x285E PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2870 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x287B DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x28B4 JUMPI PUSH2 0x28B3 PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28F9 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2904 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2914 JUMPI PUSH2 0x2913 PUSH2 0x28BF JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x297B PUSH1 0x2C DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2986 DUP3 PUSH2 0x291F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29AA DUP2 PUSH2 0x296E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A0D PUSH1 0x2B DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2A18 DUP3 PUSH2 0x29B1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A3C DUP2 PUSH2 0x2A00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9F PUSH1 0x2E DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2AAA DUP3 PUSH2 0x2A43 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2ACE DUP2 PUSH2 0x2A92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B11 PUSH2 0x2B0C PUSH2 0x2B07 DUP5 PUSH2 0x2AD5 JUMP JUMPDEST PUSH2 0x2AEC JUMP JUMPDEST PUSH2 0x2ADF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B21 DUP2 PUSH2 0x2AF6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2B3C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2B18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B78 PUSH1 0x1F DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2B83 DUP3 PUSH2 0x2B42 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BA7 DUP2 PUSH2 0x2B6B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BB7 DUP2 PUSH2 0x25DF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2BD2 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x2BDF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x265D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2C2A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BAE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2C45 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x2C52 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x2C5F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x265D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C70 DUP2 PUSH2 0x2499 JUMP JUMPDEST DUP2 EQ PUSH2 0x2C7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2C8D DUP2 PUSH2 0x2C67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CA9 JUMPI PUSH2 0x2CA8 PUSH2 0x240F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CB7 DUP5 DUP3 DUP6 ADD PUSH2 0x2C7E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1C PUSH1 0x2A DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2D27 DUP3 PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D4B DUP2 PUSH2 0x2D0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D93 PUSH1 0x17 DUP4 PUSH2 0x2D52 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D9E DUP3 PUSH2 0x2D5D JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DD2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2DB7 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE9 DUP3 PUSH2 0x2DA9 JUMP JUMPDEST PUSH2 0x2DF3 DUP2 DUP6 PUSH2 0x2D52 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E03 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E45 PUSH1 0x11 DUP4 PUSH2 0x2D52 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E50 DUP3 PUSH2 0x2E0F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E66 DUP3 PUSH2 0x2D86 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E72 DUP3 DUP6 PUSH2 0x2DDE JUMP JUMPDEST SWAP2 POP PUSH2 0x2E7D DUP3 PUSH2 0x2E38 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E89 DUP3 DUP5 PUSH2 0x2DDE JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB1 DUP3 PUSH2 0x2DA9 JUMP JUMPDEST PUSH2 0x2EBB DUP2 DUP6 PUSH2 0x275F JUMP JUMPDEST SWAP4 POP PUSH2 0x2ECB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB4 JUMP JUMPDEST PUSH2 0x2ED4 DUP2 PUSH2 0x2E95 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EF9 DUP2 DUP5 PUSH2 0x2EA6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F37 PUSH1 0x14 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2F42 DUP3 PUSH2 0x2F01 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F66 DUP2 PUSH2 0x2F2A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FA3 PUSH1 0x10 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x2FAE DUP3 PUSH2 0x2F6D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FD2 DUP2 PUSH2 0x2F96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FE4 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2FF7 JUMPI PUSH2 0x2FF6 PUSH2 0x26B4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3038 PUSH1 0x20 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x3043 DUP3 PUSH2 0x3002 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3067 DUP2 PUSH2 0x302B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30CA PUSH1 0x26 DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x30D5 DUP3 PUSH2 0x306E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30F9 DUP2 PUSH2 0x30BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3121 DUP3 PUSH2 0x3100 JUMP JUMPDEST PUSH2 0x312B DUP2 DUP6 PUSH2 0x310B JUMP JUMPDEST SWAP4 POP PUSH2 0x313B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2DB4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3153 DUP3 DUP5 PUSH2 0x3116 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3194 PUSH1 0x1D DUP4 PUSH2 0x275F JUMP JUMPDEST SWAP2 POP PUSH2 0x319F DUP3 PUSH2 0x315E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31C3 DUP2 PUSH2 0x3187 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 DIFFICULTY 0xFB PUSH22 0xE03E2C2584984E44D948817FBB848B355F96DC21B7B4 SWAP5 0xE4 PUSH2 0xEDAA 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"765:7199:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4359:939:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6506:1128:24;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2524:65;;;:::i;:::-;;7831:131;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2820:176;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3762:587:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:21;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2595:152:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5304:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2457:61;;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;939:41:24;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:21;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3002:717:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7640:185;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2280:171;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4359:939:24:-;4435:4;2505:21:5;:19;:21::i;:::-;4451:25:24::1;4479:9;:23;4489:12;:10;:12::i;:::-;4479:23;;;;;;;;;;;;;;;4451:51;;4554:5;4530:8;:21;;;:29;4529:111;;;;4596:13;:27;4610:12;:10;:12::i;:::-;4596:27;;;;;;;;;;;;;;;:43;;;4578:15;:61;4529:111;:180;;;;4666:13;:27;4680:12;:10;:12::i;:::-;4666:27;;;;;;;;;;;;;;;:42;;;4658:5;:50;4529:180;4512:277;;;4741:37;;;;;;;;;;;;;;4512:277;4800:12;;4798:14;;;;;:::i;:::-;;;;;;;;4843:5;4822:17;;:26;;;;;;;:::i;:::-;;;;;;;;4883:5;4858:8;:21;;;:30;;;;;;;:::i;:::-;;;;;;;;4961:5;4898:16;:30;4915:12;:10;:12::i;:::-;4898:30;;;;;;;;;;;;;;;:44;4929:12;;4898:44;;;;;;;;;;;:60;;:68;;;;5026:5;4980:13;:27;4994:12;:10;:12::i;:::-;4980:27;;;;;;;;;;;;;;;:42;;;:51:::0;4976:132:::1;;5092:5;5047:13;:27;5061:12;:10;:12::i;:::-;5047:27;;;;;;;;;;;;;;;:42;;;:50;;;;;;;;;;;;;;;;;;4976:132;5163:5;5117:13;:27;5131:12;:10;:12::i;:::-;5117:27;;;;;;;;;;;;;;;:42;;;:51;;;;;;;:::i;:::-;;;;;;;;5178:44;5202:12;:10;:12::i;:::-;5216:5;5178:10;:23;;;;:44;;;;;:::i;:::-;5250:12;:10;:12::i;:::-;5237:33;;;5264:5;5237:33;;;;;;:::i;:::-;;;;;;;;5287:4;5280:11;;;2547:20:5::0;:18;:20::i;:::-;4359:939:24;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;6506:1128:24:-;6556:7;6575:19;6597:1;6575:23;;6608:32;6643:20;:18;:20::i;:::-;6608:55;;6673:22;6698:15;6714:1;6698:18;;;;;;;;:::i;:::-;;;;;;;;6673:43;;6726:25;6765:15;6798:9;6810:14;6798:26;;6794:800;6831:12;;6826:1;:17;6794:800;;6860:41;6904:16;:30;6921:12;:10;:12::i;:::-;6904:30;;;;;;;;;;;;;;;:33;6935:1;6904:33;;;;;;;;;;;6860:77;;;;;;;;;;;;;;;;;;;;;;;;;;;6982:1;6954:15;6970:7;6954:24;;;;;;;;:::i;:::-;;;;;;;;:29;6951:333;;7041:1;7007:18;:31;;;:35;7003:240;;;7081:18;:31;;;7066:46;;;;;:::i;:::-;;;7003:240;;;7190:18;:34;;;7175:49;;;;;:::i;:::-;;;7003:240;7260:9;;;;:::i;:::-;;;6951:333;7297:35;7335:16;:19;7352:1;7335:19;;;;;;;;;;;7297:57;;7379:16;7420:11;:21;;;7398:11;:19;;;:43;;;;:::i;:::-;7379:62;;7536:11;:28;;;7503:11;:29;;;7489:11;7478:8;:22;;;;:::i;:::-;:54;;;;:::i;:::-;7477:88;;;;:::i;:::-;7455:111;;;;;:::i;:::-;;;7580:3;;;;:::i;:::-;;;6846:748;;;6794:800;;;;7610:17;7603:24;;;;;;;6506:1128;:::o;2524:65::-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2572:10:24::1;:8;:10::i;:::-;2524:65::o:0;7831:131::-;7891:7;7917:9;:23;7927:12;:10;:12::i;:::-;7917:23;;;;;;;;;;;;;;;:38;;;7910:45;;7831:131;:::o;2820:176::-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2930:9:24::1;2914:13;:25;;;;:::i;:::-;2897:14;:42;;;;2975:13;2954:35;;;;;;;;;;2820:176:::0;:::o;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;3762:587:24:-;3836:4;3872:13;:27;3886:12;:10;:12::i;:::-;3872:27;;;;;;;;;;;;;;;:42;;;;;;;;;;;;3870:45;3869:116;;;;3979:5;3934:13;:27;3948:12;:10;:12::i;:::-;3934:27;;;;;;;;;;;;;;;:42;;;:50;3869:116;3852:469;;;4010:47;4060:13;:27;4074:12;:10;:12::i;:::-;4060:27;;;;;;;;;;;;;;;4010:77;;4139:4;4101:20;:35;;;:42;;;;;;;;;;;;;;;;;;4195:5;4157:20;:35;;:43;;;;4270:15;4253:14;;:32;;;;:::i;:::-;4214:20;:36;;:71;;;;4306:4;4299:11;;;;;3852:469;4337:5;4330:12;;3762:587;;;;:::o;734:549:21:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:21::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;2595:152:24:-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2690:5:24::1;2673:14;:22;;;;2734:5;2710:30;;;;;;;;;;2595:152:::0;:::o;5304:89::-;5348:7;5374:12;;5367:19;;5304:89;:::o;2457:61::-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;2503:8:24::1;:6;:8::i;:::-;2457:61::o:0;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;939:41:24:-;;;;:::o;1289:117:21:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;3002:717:24:-;3073:4;2505:21:5;:19;:21::i;:::-;3101:14:24::1;;3093:5;:22;3089:102;;;3138:42;;;;;;;;;;;;;;3089:102;3202:12;;3200:14;;;;;:::i;:::-;;;;;;;;3224:25;3252:9;:23;3262:12;:10;:12::i;:::-;3252:23;;;;;;;;;;;;;;;3224:51;;3289:8;:18;;;;;;;;;;;;3285:129;;3344:4;3323:8;:18;;;:25;;;;;;;;;;;;;;;;;;3391:12;;3362:8;:26;;:41;;;;3285:129;3448:5;3423:8;:21;;;:30;;;;;;;:::i;:::-;;;;;;;;3523:5;3463:16;:30;3480:12;:10;:12::i;:::-;3463:30;;;;;;;;;;;;;;;:44;3494:12;;3463:44;;;;;;;;;;;:57;;:65;;;;3567:5;3546:17;;:26;;;;;;;:::i;:::-;;;;;;;;3582:63;3610:12;:10;:12::i;:::-;3632:4;3639:5;3582:10;:27;;;;:63;;;;;;:::i;:::-;3671:12;:10;:12::i;:::-;3660:31;;;3685:5;3660:31;;;;;;:::i;:::-;;;;;;;;3708:4;3701:11;;;2547:20:5::0;:18;:20::i;:::-;3002:717:24;;;:::o;7640:185::-;7707:7;7773:1;7734:9;:23;7744:12;:10;:12::i;:::-;7734:23;;;;;;;;;;;;;;;:36;;;:40;:83;;7816:1;7734:83;;;7777:9;:23;7787:12;:10;:12::i;:::-;7777:23;;;;;;;;;;;;;;;:36;;;7734:83;7726:92;;7640:185;:::o;2280:171::-;3268:19:3;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;2381:9:24::1;2368:10;:22;;;;:::i;:::-;2351:14;:39;;;;2400:44;2431:12;:10;:12::i;:::-;2400:30;:44::i;:::-;3640:14:3::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;2280:171:24;:::o;1060:166:18:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;2580:287:5:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;850:96:13:-;903:7;929:10;922:17;;850:96;:::o;818:216:11:-;941:86;961:5;991:23;;;1016:2;1020:5;968:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:19;:86::i;:::-;818:216;;;:::o;2873:209:5:-;1787:1;3053:7;:22;;;;2873:209::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;8195:234::-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;5399:1101:24:-;5451:16;5479:19;5512:24;5539:9;:23;5549:12;:10;:12::i;:::-;5539:23;;;;;;;;;;;;;;;:41;;;5512:68;;5590:19;5613:14;:12;:14::i;:::-;5590:37;;5641:9;5653:16;5641:28;;5637:314;5676:11;5671:1;:16;5637:314;;5757:1;5708:16;:30;5725:12;:10;:12::i;:::-;5708:30;;;;;;;;;;;;;;;:33;5739:1;5708:33;;;;;;;;;;;:46;;;:50;5704:102;;;5778:13;;;;:::i;:::-;;;5704:102;5875:1;5823:16;:30;5840:12;:10;:12::i;:::-;5823:30;;;;;;;;;;;;;;;:33;5854:1;5823:33;;;;;;;;;;;:49;;;:53;5819:105;;;5896:13;;;;:::i;:::-;;;5819:105;5937:3;;;;:::i;:::-;;;5637:314;;;;5960:32;6009:11;5995:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5960:61;;6031:15;6064:6;6073:16;6064:25;;6060:402;6096:11;6091:1;:16;6060:402;;6124:34;6161:16;:30;6178:12;:10;:12::i;:::-;6161:30;;;;;;;;;;;;;;;:33;6192:1;6161:33;;;;;;;;;;;6124:70;;;;;;;;;;;;;;;;;;;;;;;;;;;6238:1;6211:11;:24;;;:28;6208:94;;;6286:1;6259:15;6275:7;6259:24;;;;;;;;:::i;:::-;;;;;;;:28;;;;;6208:94;6348:1;6318:11;:27;;;:31;6315:97;;;6396:1;6369:15;6385:7;6369:24;;;;;;;;:::i;:::-;;;;;;;:28;;;;;6315:97;6425:9;;;;:::i;:::-;;;6448:3;;;;:::i;:::-;;;6110:352;6060:402;;;;6478:15;6471:22;;;;;;;5399:1101;:::o;2676:117:4:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;1063:97::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:22:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;2429:115:4:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;1040:252:11:-;1189:96;1209:5;1239:27;;;1268:4;1274:2;1278:5;1216:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1189:19;:96::i;:::-;1040:252;;;;:::o;1186:320:12:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;3868:717:11:-;4298:23;4324:69;4352:4;4324:69;;;;;;;;;;;;;;;;;4332:5;4324:27;;;;:69;;;;;:::i;:::-;4298:95;;4427:1;4407:10;:17;:21;4403:176;;;4502:10;4491:30;;;;;;;;;;;;:::i;:::-;4483:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;4403:176;3949:636;3868:717;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;2188:106:4:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1166:95::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2010:106:4:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;3884:223:12:-;4017:12;4048:52;4070:6;4078:4;4084:1;4087:12;4048:21;:52::i;:::-;4041:59;;3884:223;;;;;:::o;2146:149:15:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;4971:446:12:-;5136:12;5193:5;5168:21;:30;;5160:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5252:12;5266:23;5293:6;:11;;5312:5;5319:4;5293:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5251:73;;;;5341:69;5368:6;5376:7;5385:10;5397:12;5341:26;:69::i;:::-;5334:76;;;;4971:446;;;;;;:::o;6589:628::-;6769:12;6797:7;6793:418;;;6845:1;6824:10;:17;:22;6820:286;;7039:18;7050:6;7039:10;:18::i;:::-;7031:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;6820:286;7126:10;7119:17;;;;6793:418;7167:33;7175:10;7187:12;7167:7;:33::i;:::-;6589:628;;;;;;;:::o;7739:540::-;7918:1;7898:10;:17;:21;7894:379;;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;;;;;;;;;;:::i;:::-;;;;;;;;88:117:30;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:77::-;2246:7;2275:5;2264:16;;2209:77;;;:::o;2292:122::-;2365:24;2383:5;2365:24;:::i;:::-;2358:5;2355:35;2345:63;;2404:1;2401;2394:12;2345:63;2292:122;:::o;2420:139::-;2466:5;2504:6;2491:20;2482:29;;2520:33;2547:5;2520:33;:::i;:::-;2420:139;;;;:::o;2565:329::-;2624:6;2673:2;2661:9;2652:7;2648:23;2644:32;2641:119;;;2679:79;;:::i;:::-;2641:119;2799:1;2824:53;2869:7;2860:6;2849:9;2845:22;2824:53;:::i;:::-;2814:63;;2770:117;2565:329;;;;:::o;2900:118::-;2987:24;3005:5;2987:24;:::i;:::-;2982:3;2975:37;2900:118;;:::o;3024:222::-;3117:4;3155:2;3144:9;3140:18;3132:26;;3168:71;3236:1;3225:9;3221:17;3212:6;3168:71;:::i;:::-;3024:222;;;;:::o;3252:126::-;3289:7;3329:42;3322:5;3318:54;3307:65;;3252:126;;;:::o;3384:96::-;3421:7;3450:24;3468:5;3450:24;:::i;:::-;3439:35;;3384:96;;;:::o;3486:122::-;3559:24;3577:5;3559:24;:::i;:::-;3552:5;3549:35;3539:63;;3598:1;3595;3588:12;3539:63;3486:122;:::o;3614:139::-;3660:5;3698:6;3685:20;3676:29;;3714:33;3741:5;3714:33;:::i;:::-;3614:139;;;;:::o;3759:474::-;3827:6;3835;3884:2;3872:9;3863:7;3859:23;3855:32;3852:119;;;3890:79;;:::i;:::-;3852:119;4010:1;4035:53;4080:7;4071:6;4060:9;4056:22;4035:53;:::i;:::-;4025:63;;3981:117;4137:2;4163:53;4208:7;4199:6;4188:9;4184:22;4163:53;:::i;:::-;4153:63;;4108:118;3759:474;;;;;:::o;4239:118::-;4326:24;4344:5;4326:24;:::i;:::-;4321:3;4314:37;4239:118;;:::o;4363:222::-;4456:4;4494:2;4483:9;4479:18;4471:26;;4507:71;4575:1;4564:9;4560:17;4551:6;4507:71;:::i;:::-;4363:222;;;;:::o;4591:329::-;4650:6;4699:2;4687:9;4678:7;4674:23;4670:32;4667:119;;;4705:79;;:::i;:::-;4667:119;4825:1;4850:53;4895:7;4886:6;4875:9;4871:22;4850:53;:::i;:::-;4840:63;;4796:117;4591:329;;;;:::o;4926:180::-;4974:77;4971:1;4964:88;5071:4;5068:1;5061:15;5095:4;5092:1;5085:15;5112:233;5151:3;5174:24;5192:5;5174:24;:::i;:::-;5165:33;;5220:66;5213:5;5210:77;5207:103;;5290:18;;:::i;:::-;5207:103;5337:1;5330:5;5326:13;5319:20;;5112:233;;;:::o;5351:194::-;5391:4;5411:20;5429:1;5411:20;:::i;:::-;5406:25;;5445:20;5463:1;5445:20;:::i;:::-;5440:25;;5489:1;5486;5482:9;5474:17;;5513:1;5507:4;5504:11;5501:37;;;5518:18;;:::i;:::-;5501:37;5351:194;;;;:::o;5551:169::-;5635:11;5669:6;5664:3;5657:19;5709:4;5704:3;5700:14;5685:29;;5551:169;;;;:::o;5726:234::-;5866:34;5862:1;5854:6;5850:14;5843:58;5935:17;5930:2;5922:6;5918:15;5911:42;5726:234;:::o;5966:366::-;6108:3;6129:67;6193:2;6188:3;6129:67;:::i;:::-;6122:74;;6205:93;6294:3;6205:93;:::i;:::-;6323:2;6318:3;6314:12;6307:19;;5966:366;;;:::o;6338:419::-;6504:4;6542:2;6531:9;6527:18;6519:26;;6591:9;6585:4;6581:20;6577:1;6566:9;6562:17;6555:47;6619:131;6745:4;6619:131;:::i;:::-;6611:139;;6338:419;;;:::o;6763:180::-;6811:77;6808:1;6801:88;6908:4;6905:1;6898:15;6932:4;6929:1;6922:15;6949:191;6989:3;7008:20;7026:1;7008:20;:::i;:::-;7003:25;;7042:20;7060:1;7042:20;:::i;:::-;7037:25;;7085:1;7082;7078:9;7071:16;;7106:3;7103:1;7100:10;7097:36;;;7113:18;;:::i;:::-;7097:36;6949:191;;;;:::o;7146:348::-;7186:7;7209:20;7227:1;7209:20;:::i;:::-;7204:25;;7243:20;7261:1;7243:20;:::i;:::-;7238:25;;7431:1;7363:66;7359:74;7356:1;7353:81;7348:1;7341:9;7334:17;7330:105;7327:131;;;7438:18;;:::i;:::-;7327:131;7486:1;7483;7479:9;7468:20;;7146:348;;;;:::o;7500:180::-;7548:77;7545:1;7538:88;7645:4;7642:1;7635:15;7669:4;7666:1;7659:15;7686:185;7726:1;7743:20;7761:1;7743:20;:::i;:::-;7738:25;;7777:20;7795:1;7777:20;:::i;:::-;7772:25;;7816:1;7806:35;;7821:18;;:::i;:::-;7806:35;7863:1;7860;7856:9;7851:14;;7686:185;;;;:::o;7877:231::-;8017:34;8013:1;8005:6;8001:14;7994:58;8086:14;8081:2;8073:6;8069:15;8062:39;7877:231;:::o;8114:366::-;8256:3;8277:67;8341:2;8336:3;8277:67;:::i;:::-;8270:74;;8353:93;8442:3;8353:93;:::i;:::-;8471:2;8466:3;8462:12;8455:19;;8114:366;;;:::o;8486:419::-;8652:4;8690:2;8679:9;8675:18;8667:26;;8739:9;8733:4;8729:20;8725:1;8714:9;8710:17;8703:47;8767:131;8893:4;8767:131;:::i;:::-;8759:139;;8486:419;;;:::o;8911:230::-;9051:34;9047:1;9039:6;9035:14;9028:58;9120:13;9115:2;9107:6;9103:15;9096:38;8911:230;:::o;9147:366::-;9289:3;9310:67;9374:2;9369:3;9310:67;:::i;:::-;9303:74;;9386:93;9475:3;9386:93;:::i;:::-;9504:2;9499:3;9495:12;9488:19;;9147:366;;;:::o;9519:419::-;9685:4;9723:2;9712:9;9708:18;9700:26;;9772:9;9766:4;9762:20;9758:1;9747:9;9743:17;9736:47;9800:131;9926:4;9800:131;:::i;:::-;9792:139;;9519:419;;;:::o;9944:233::-;10084:34;10080:1;10072:6;10068:14;10061:58;10153:16;10148:2;10140:6;10136:15;10129:41;9944:233;:::o;10183:366::-;10325:3;10346:67;10410:2;10405:3;10346:67;:::i;:::-;10339:74;;10422:93;10511:3;10422:93;:::i;:::-;10540:2;10535:3;10531:12;10524:19;;10183:366;;;:::o;10555:419::-;10721:4;10759:2;10748:9;10744:18;10736:26;;10808:9;10802:4;10798:20;10794:1;10783:9;10779:17;10772:47;10836:131;10962:4;10836:131;:::i;:::-;10828:139;;10555:419;;;:::o;10980:85::-;11025:7;11054:5;11043:16;;10980:85;;;:::o;11071:86::-;11106:7;11146:4;11139:5;11135:16;11124:27;;11071:86;;;:::o;11163:60::-;11191:3;11212:5;11205:12;;11163:60;;;:::o;11229:154::-;11285:9;11318:59;11334:42;11343:32;11369:5;11343:32;:::i;:::-;11334:42;:::i;:::-;11318:59;:::i;:::-;11305:72;;11229:154;;;:::o;11389:143::-;11482:43;11519:5;11482:43;:::i;:::-;11477:3;11470:56;11389:143;;:::o;11538:234::-;11637:4;11675:2;11664:9;11660:18;11652:26;;11688:77;11762:1;11751:9;11747:17;11738:6;11688:77;:::i;:::-;11538:234;;;;:::o;11778:181::-;11918:33;11914:1;11906:6;11902:14;11895:57;11778:181;:::o;11965:366::-;12107:3;12128:67;12192:2;12187:3;12128:67;:::i;:::-;12121:74;;12204:93;12293:3;12204:93;:::i;:::-;12322:2;12317:3;12313:12;12306:19;;11965:366;;;:::o;12337:419::-;12503:4;12541:2;12530:9;12526:18;12518:26;;12590:9;12584:4;12580:20;12576:1;12565:9;12561:17;12554:47;12618:131;12744:4;12618:131;:::i;:::-;12610:139;;12337:419;;;:::o;12762:118::-;12849:24;12867:5;12849:24;:::i;:::-;12844:3;12837:37;12762:118;;:::o;12886:332::-;13007:4;13045:2;13034:9;13030:18;13022:26;;13058:71;13126:1;13115:9;13111:17;13102:6;13058:71;:::i;:::-;13139:72;13207:2;13196:9;13192:18;13183:6;13139:72;:::i;:::-;12886:332;;;;;:::o;13224:180::-;13272:77;13269:1;13262:88;13369:4;13366:1;13359:15;13393:4;13390:1;13383:15;13410:222;13503:4;13541:2;13530:9;13526:18;13518:26;;13554:71;13622:1;13611:9;13607:17;13598:6;13554:71;:::i;:::-;13410:222;;;;:::o;13638:442::-;13787:4;13825:2;13814:9;13810:18;13802:26;;13838:71;13906:1;13895:9;13891:17;13882:6;13838:71;:::i;:::-;13919:72;13987:2;13976:9;13972:18;13963:6;13919:72;:::i;:::-;14001;14069:2;14058:9;14054:18;14045:6;14001:72;:::i;:::-;13638:442;;;;;;:::o;14086:116::-;14156:21;14171:5;14156:21;:::i;:::-;14149:5;14146:32;14136:60;;14192:1;14189;14182:12;14136:60;14086:116;:::o;14208:137::-;14262:5;14293:6;14287:13;14278:22;;14309:30;14333:5;14309:30;:::i;:::-;14208:137;;;;:::o;14351:345::-;14418:6;14467:2;14455:9;14446:7;14442:23;14438:32;14435:119;;;14473:79;;:::i;:::-;14435:119;14593:1;14618:61;14671:7;14662:6;14651:9;14647:22;14618:61;:::i;:::-;14608:71;;14564:125;14351:345;;;;:::o;14702:229::-;14842:34;14838:1;14830:6;14826:14;14819:58;14911:12;14906:2;14898:6;14894:15;14887:37;14702:229;:::o;14937:366::-;15079:3;15100:67;15164:2;15159:3;15100:67;:::i;:::-;15093:74;;15176:93;15265:3;15176:93;:::i;:::-;15294:2;15289:3;15285:12;15278:19;;14937:366;;;:::o;15309:419::-;15475:4;15513:2;15502:9;15498:18;15490:26;;15562:9;15556:4;15552:20;15548:1;15537:9;15533:17;15526:47;15590:131;15716:4;15590:131;:::i;:::-;15582:139;;15309:419;;;:::o;15734:148::-;15836:11;15873:3;15858:18;;15734:148;;;;:::o;15888:173::-;16028:25;16024:1;16016:6;16012:14;16005:49;15888:173;:::o;16067:402::-;16227:3;16248:85;16330:2;16325:3;16248:85;:::i;:::-;16241:92;;16342:93;16431:3;16342:93;:::i;:::-;16460:2;16455:3;16451:12;16444:19;;16067:402;;;:::o;16475:99::-;16527:6;16561:5;16555:12;16545:22;;16475:99;;;:::o;16580:246::-;16661:1;16671:113;16685:6;16682:1;16679:13;16671:113;;;16770:1;16765:3;16761:11;16755:18;16751:1;16746:3;16742:11;16735:39;16707:2;16704:1;16700:10;16695:15;;16671:113;;;16818:1;16809:6;16804:3;16800:16;16793:27;16642:184;16580:246;;;:::o;16832:390::-;16938:3;16966:39;16999:5;16966:39;:::i;:::-;17021:89;17103:6;17098:3;17021:89;:::i;:::-;17014:96;;17119:65;17177:6;17172:3;17165:4;17158:5;17154:16;17119:65;:::i;:::-;17209:6;17204:3;17200:16;17193:23;;16942:280;16832:390;;;;:::o;17228:167::-;17368:19;17364:1;17356:6;17352:14;17345:43;17228:167;:::o;17401:402::-;17561:3;17582:85;17664:2;17659:3;17582:85;:::i;:::-;17575:92;;17676:93;17765:3;17676:93;:::i;:::-;17794:2;17789:3;17785:12;17778:19;;17401:402;;;:::o;17809:967::-;18191:3;18213:148;18357:3;18213:148;:::i;:::-;18206:155;;18378:95;18469:3;18460:6;18378:95;:::i;:::-;18371:102;;18490:148;18634:3;18490:148;:::i;:::-;18483:155;;18655:95;18746:3;18737:6;18655:95;:::i;:::-;18648:102;;18767:3;18760:10;;17809:967;;;;;:::o;18782:102::-;18823:6;18874:2;18870:7;18865:2;18858:5;18854:14;18850:28;18840:38;;18782:102;;;:::o;18890:377::-;18978:3;19006:39;19039:5;19006:39;:::i;:::-;19061:71;19125:6;19120:3;19061:71;:::i;:::-;19054:78;;19141:65;19199:6;19194:3;19187:4;19180:5;19176:16;19141:65;:::i;:::-;19231:29;19253:6;19231:29;:::i;:::-;19226:3;19222:39;19215:46;;18982:285;18890:377;;;;:::o;19273:313::-;19386:4;19424:2;19413:9;19409:18;19401:26;;19473:9;19467:4;19463:20;19459:1;19448:9;19444:17;19437:47;19501:78;19574:4;19565:6;19501:78;:::i;:::-;19493:86;;19273:313;;;;:::o;19592:170::-;19732:22;19728:1;19720:6;19716:14;19709:46;19592:170;:::o;19768:366::-;19910:3;19931:67;19995:2;19990:3;19931:67;:::i;:::-;19924:74;;20007:93;20096:3;20007:93;:::i;:::-;20125:2;20120:3;20116:12;20109:19;;19768:366;;;:::o;20140:419::-;20306:4;20344:2;20333:9;20329:18;20321:26;;20393:9;20387:4;20383:20;20379:1;20368:9;20364:17;20357:47;20421:131;20547:4;20421:131;:::i;:::-;20413:139;;20140:419;;;:::o;20565:166::-;20705:18;20701:1;20693:6;20689:14;20682:42;20565:166;:::o;20737:366::-;20879:3;20900:67;20964:2;20959:3;20900:67;:::i;:::-;20893:74;;20976:93;21065:3;20976:93;:::i;:::-;21094:2;21089:3;21085:12;21078:19;;20737:366;;;:::o;21109:419::-;21275:4;21313:2;21302:9;21298:18;21290:26;;21362:9;21356:4;21352:20;21348:1;21337:9;21333:17;21326:47;21390:131;21516:4;21390:131;:::i;:::-;21382:139;;21109:419;;;:::o;21534:171::-;21573:3;21596:24;21614:5;21596:24;:::i;:::-;21587:33;;21642:4;21635:5;21632:15;21629:41;;21650:18;;:::i;:::-;21629:41;21697:1;21690:5;21686:13;21679:20;;21534:171;;;:::o;21711:182::-;21851:34;21847:1;21839:6;21835:14;21828:58;21711:182;:::o;21899:366::-;22041:3;22062:67;22126:2;22121:3;22062:67;:::i;:::-;22055:74;;22138:93;22227:3;22138:93;:::i;:::-;22256:2;22251:3;22247:12;22240:19;;21899:366;;;:::o;22271:419::-;22437:4;22475:2;22464:9;22460:18;22452:26;;22524:9;22518:4;22514:20;22510:1;22499:9;22495:17;22488:47;22552:131;22678:4;22552:131;:::i;:::-;22544:139;;22271:419;;;:::o;22696:225::-;22836:34;22832:1;22824:6;22820:14;22813:58;22905:8;22900:2;22892:6;22888:15;22881:33;22696:225;:::o;22927:366::-;23069:3;23090:67;23154:2;23149:3;23090:67;:::i;:::-;23083:74;;23166:93;23255:3;23166:93;:::i;:::-;23284:2;23279:3;23275:12;23268:19;;22927:366;;;:::o;23299:419::-;23465:4;23503:2;23492:9;23488:18;23480:26;;23552:9;23546:4;23542:20;23538:1;23527:9;23523:17;23516:47;23580:131;23706:4;23580:131;:::i;:::-;23572:139;;23299:419;;;:::o;23724:98::-;23775:6;23809:5;23803:12;23793:22;;23724:98;;;:::o;23828:147::-;23929:11;23966:3;23951:18;;23828:147;;;;:::o;23981:386::-;24085:3;24113:38;24145:5;24113:38;:::i;:::-;24167:88;24248:6;24243:3;24167:88;:::i;:::-;24160:95;;24264:65;24322:6;24317:3;24310:4;24303:5;24299:16;24264:65;:::i;:::-;24354:6;24349:3;24345:16;24338:23;;24089:278;23981:386;;;;:::o;24373:271::-;24503:3;24525:93;24614:3;24605:6;24525:93;:::i;:::-;24518:100;;24635:3;24628:10;;24373:271;;;;:::o;24650:179::-;24790:31;24786:1;24778:6;24774:14;24767:55;24650:179;:::o;24835:366::-;24977:3;24998:67;25062:2;25057:3;24998:67;:::i;:::-;24991:74;;25074:93;25163:3;25074:93;:::i;:::-;25192:2;25187:3;25183:12;25176:19;;24835:366;;;:::o;25207:419::-;25373:4;25411:2;25400:9;25396:18;25388:26;;25460:9;25454:4;25450:20;25446:1;25435:9;25431:17;25424:47;25488:131;25614:4;25488:131;:::i;:::-;25480:139;;25207:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2560000","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"468","__BaseUpgradeablePausable_init(address)":"infinite","activateWithdrawalTimer(uint256)":"infinite","calculateRewards()":"infinite","getRoleAdmin(bytes32)":"infinite","getStakerClaimedRewardInfo()":"2634","getUserStakedGENZBalance()":"infinite","getVersionID()":"2504","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3251","initialize(uint256)":"infinite","isAdmin()":"2814","pause()":"infinite","paused()":"2590","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","setWithdrawTime(uint256)":"infinite","stakeGENZ(uint256)":"infinite","supportsInterface(bytes4)":"751","totalTokensStaked()":"2451","unpause()":"infinite","updateMinimumStakeAmount(uint256)":"26199","withdrawGENZ(uint256)":"infinite"},"internal":{"getActiveVersionID()":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","activateWithdrawalTimer(uint256)":"6c64f0b4","calculateRewards()":"3e50de30","getRoleAdmin(bytes32)":"248a9ca3","getStakerClaimedRewardInfo()":"53b3ad7f","getUserStakedGENZBalance()":"ed0cdb1a","getVersionID()":"77c379a4","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(uint256)":"fe4b84df","isAdmin()":"b6db75a0","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setWithdrawTime(uint256)":"58418587","stakeGENZ(uint256)":"d6fb97a5","supportsInterface(bytes4)":"01ffc9a7","totalTokensStaked()":"b0e31b2d","unpause()":"3f4ba83a","updateMinimumStakeAmount(uint256)":"77539417","withdrawGENZ(uint256)":"060e5c6e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddressGENZ\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GENZStaking__NotAMinimumStakeAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GENZStaking__TransactionFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnstakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinStakingAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"UpdatedWithdrawTimer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"activateWithdrawalTimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakerClaimedRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserStakedGENZBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInDays\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"stakeGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"[PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]\"},\"setWithdrawTime(uint256)\":{\"notice\":\"[PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]\"}},\"notice\":\"NOTE: Staking tokens would be used for activities like flash loans  to generate rewards for the staked users\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/staking/GENZStaking.sol\":\"GENZStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/staking/GENZStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title GENZ Staking Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n/// Importing required interfaces\\nimport \\\"./../../interfaces/IBuyGENZ.sol\\\";\\nimport \\\"./../../interfaces/IGENZStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\n\\n/// Importing required libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// Importing required contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\n\\nerror GENZStaking__TransactionFailedError();\\nerror GENZStaking__NotAMinimumStakeAmountError();\\n\\n/// NOTE: Staking tokens would be used for activities like flash loans \\n/// to generate rewards for the staked users\\ncontract GENZStaking is IGENZStaking, BaseUpgradeablePausable {\\n    uint256 private _currVersion;\\n    uint256 private _minStakeValue;\\n    uint256 private _withdrawTimer;\\n    uint256 public override totalTokensStaked;\\n    IERC20Upgradeable private immutable _tokenGENZ;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// TODO: Versionable Info data to be included in functions\\n    struct VersionableInfo {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 distributedAmount;\\n        uint256 tokenDistributed;\\n    }\\n\\n    struct UserInfo {\\n        bool hasStaked;\\n        uint256 stakedTokens;\\n        uint256 startVersionBlock; \\n        uint256 claimedRewards;\\n    }\\n\\n    struct UserBalanceInfo {\\n        uint256 stakedTokens;\\n        uint256 withdrawnTokens;\\n    }\\n\\n    struct WithdrawWaitPeriod{\\n        bool ifTimerStarted;\\n        uint256 GENZTokenCount;\\n        uint256 canWithdrawTime;\\n    }\\n\\n    mapping (address => WithdrawWaitPeriod) private checkWaitTime;\\n\\n    mapping(address => UserInfo) private usersInfo;\\n\\n    /// versionID => VersionableInfo\\n    mapping(uint256 => VersionableInfo) private versionableInfos;\\n\\n    /// userAddress => versionID => UserBalanceInfo\\n    mapping(address => mapping(uint256 => UserBalanceInfo)) private usersBalanceInfo;\\n\\n    /// [PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]\\n    constructor(\\n        address tokenAddressGENZ\\n    ) {\\n        _minStakeValue = 1e18;\\n        _tokenGENZ = IERC20Upgradeable(tokenAddressGENZ);\\n    }\\n\\n    function initialize(uint256 timeInDays) external initializer {\\n        _withdrawTimer = timeInDays * 1 minutes;\\n        __BaseUpgradeablePausable_init(_msgSender());\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    function updateMinimumStakeAmount(uint256 value) external onlyAdmin {\\n        _minStakeValue = value;\\n        emit UpdatedMinStakingAmount(value);\\n    }\\n\\n    /// [PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]\\n    function setWithdrawTime(uint256 timeInMinutes) external onlyAdmin {\\n        _withdrawTimer = timeInMinutes * 1 minutes;\\n        emit UpdatedWithdrawTimer(timeInMinutes);\\n    }\\n\\n    function stakeGENZ(uint256 value) public override nonReentrant returns(bool) {\\n        if (value < _minStakeValue) {\\n            revert GENZStaking__NotAMinimumStakeAmountError();\\n        }\\n        ++_currVersion;\\n        UserInfo storage userInfo = usersInfo[_msgSender()];\\n        if(!userInfo.hasStaked) {\\n            userInfo.hasStaked = true;\\n            userInfo.startVersionBlock = _currVersion;\\n        }\\n        userInfo.stakedTokens += value;\\n        usersBalanceInfo[_msgSender()][_currVersion].stakedTokens = value;        \\n        totalTokensStaked += value;\\n        _tokenGENZ.safeTransferFrom(_msgSender(), address(this), value);\\n        emit StakedGENZ(_msgSender(), value);\\n        return true;\\n    }\\n    \\n    // 2 hours withdrawal period\\n    function activateWithdrawalTimer(uint256 value) external override returns(bool) {\\n        if (\\n            (!(checkWaitTime[_msgSender()].ifTimerStarted)) || \\n            (checkWaitTime[_msgSender()].GENZTokenCount < value)\\n        ) {\\n            WithdrawWaitPeriod storage waitingTimeCountdown = checkWaitTime[_msgSender()];\\n            waitingTimeCountdown.ifTimerStarted = true;\\n            waitingTimeCountdown.GENZTokenCount = value;\\n            waitingTimeCountdown.canWithdrawTime = _withdrawTimer + block.timestamp;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    function withdrawGENZ(uint256 value) external override nonReentrant returns(bool) {\\n        UserInfo storage userInfo = usersInfo[_msgSender()];\\n        if (\\n            (userInfo.stakedTokens < value) || \\n            (block.timestamp < checkWaitTime[_msgSender()].canWithdrawTime) || \\n            (value > checkWaitTime[_msgSender()].GENZTokenCount)\\n        ) {\\n            revert GENZStaking__TransactionFailedError();\\n        }\\n        ++_currVersion;\\n        totalTokensStaked -= value;\\n        userInfo.stakedTokens -= value;\\n        usersBalanceInfo[_msgSender()][_currVersion].withdrawnTokens = value;\\n        if (checkWaitTime[_msgSender()].GENZTokenCount == value) {\\n            checkWaitTime[_msgSender()].ifTimerStarted = false;\\n        }\\n        checkWaitTime[_msgSender()].GENZTokenCount -= value;\\n        _tokenGENZ.safeTransfer(_msgSender(), value);\\n        emit UnstakedGENZ(_msgSender(), value);\\n        return true;\\n    }\\n\\n    function getVersionID() public view returns(uint256) {\\n        return _currVersion;\\n    }\\n\\n    function getActiveVersionID() internal view returns(uint256[] memory) {\\n        uint256 activeCount = 0;\\n        uint256 userStartVersion = usersInfo[_msgSender()].startVersionBlock;\\n        uint256 currVersion =  getVersionID();\\n        for(uint256 i = userStartVersion; i <= currVersion;) {\\n            if (usersBalanceInfo[_msgSender()][i].stakedTokens > 0) {\\n                ++activeCount;\\n            }\\n            if (usersBalanceInfo[_msgSender()][i].withdrawnTokens > 0) {\\n                ++activeCount;\\n            }\\n            ++i;\\n        }\\n        uint256[] memory activeVersionID = new uint256[](activeCount);\\n        uint256 counter = 0;\\n        for(uint i = userStartVersion; i <= currVersion;) {\\n            UserBalanceInfo memory userBalance = usersBalanceInfo[_msgSender()][i];\\n            if(userBalance.stakedTokens > 0) {\\n                activeVersionID[counter] = i;\\n            }\\n            if(userBalance.withdrawnTokens > 0) {\\n                activeVersionID[counter] = i;\\n            }\\n            ++counter;\\n            ++i;\\n        }\\n        return activeVersionID;\\n    }\\n\\n    function calculateRewards() external view returns(uint256) {\\n        uint256 userBalance = 0;\\n        uint256[] memory activeVersionID = getActiveVersionID();\\n        uint256 startVersionID = activeVersionID[0];\\n        uint256 userPremiumEarned = 0;\\n        uint256 counter = 0;\\n        for(uint256 i = startVersionID; i <= _currVersion;) {\\n            UserBalanceInfo memory userVersionBalance = usersBalanceInfo[_msgSender()][i];\\n            if(activeVersionID[counter] == i) {\\n                if (userVersionBalance.stakedTokens > 0) {\\n                    userBalance += userVersionBalance.stakedTokens;\\n                }\\n                else {\\n                    userBalance -= userVersionBalance.withdrawnTokens;\\n                }\\n                ++counter;\\n            }\\n            VersionableInfo storage versionInfo = versionableInfos[i];           \\n            uint256 duration = versionInfo.endTime - versionInfo.startTime;\\n            userPremiumEarned += ((duration * userBalance * versionInfo.distributedAmount)/ (versionInfo.tokenDistributed));\\n            ++i;\\n        }\\n        return userPremiumEarned;\\n    }\\n\\n    function getUserStakedGENZBalance() external view override returns(uint256) {\\n        return (usersInfo[_msgSender()].stakedTokens > 0 ? usersInfo[_msgSender()].stakedTokens : 0);\\n    }\\n\\n    function getStakerClaimedRewardInfo() external view returns(uint256) {\\n        return usersInfo[_msgSender()].claimedRewards;\\n    }\\n}\",\"keccak256\":\"0x3987e9b2b44d87642e272c23040e7040825dd1ff66ae1eac8434b314f6003808\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IBuyGENZ {\\n    \\n    /// Custom Error Codes\\n    error BuySellGENZ__PausedError();\\n    error BuySellGENZ__LowAmountError();\\n    error BuySellGENZ__LowSZTBalanceError();\\n    error BuySellGENZ__GENZBurnFailedError();\\n    error BuySellGENZ__GENZMintFailedError();\\n    error BuySellGENZ__ImmutableChangesError();\\n    error BuySellGENZ__TransactionFailedError();\\n    error BuySellGENZ__InsufficientBalanceError();\\n    error BuySellGENZ__ZeroAddressTransactionError();\\n\\n}\",\"keccak256\":\"0x74d79d87e23c822d6044d2489608ddbeb5ccc83b4db663c7bb509f46803da0ee\",\"license\":\"MIT\"},\"contracts/interfaces/IGENZStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\ninterface IGENZStaking {\\n\\n    event UpdatedWithdrawTimer(uint256 indexed timeInMinutes);\\n\\n    event UpdatedMinStakingAmount(uint256 indexed value);\\n\\n    event StakedGENZ(address indexed userAddress, uint256 value);\\n\\n    event UnstakedGENZ(address indexed userAddress, uint256 value);\\n\\n    function stakeGENZ(uint256 _value) external returns(bool);\\n\\n    function activateWithdrawalTimer(uint256 _value) external returns(bool);\\n\\n    function withdrawGENZ(uint256 _value) external returns(bool);\\n\\n    function totalTokensStaked() external view returns(uint256);\\n\\n    function getUserStakedGENZBalance() external view returns(uint256);\\n\\n}\",\"keccak256\":\"0x386900ee190a486d4e7197828a671c60a054f8c06f32e33ec0ffffcbb5895636\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3132,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":4624,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_currVersion","offset":0,"slot":"251","type":"t_uint256"},{"astId":4626,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_minStakeValue","offset":0,"slot":"252","type":"t_uint256"},{"astId":4628,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"_withdrawTimer","offset":0,"slot":"253","type":"t_uint256"},{"astId":4631,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"totalTokensStaked","offset":0,"slot":"254","type":"t_uint256"},{"astId":4673,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"checkWaitTime","offset":0,"slot":"255","type":"t_mapping(t_address,t_struct(WithdrawWaitPeriod)4668_storage)"},{"astId":4678,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"usersInfo","offset":0,"slot":"256","type":"t_mapping(t_address,t_struct(UserInfo)4656_storage)"},{"astId":4684,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"versionableInfos","offset":0,"slot":"257","type":"t_mapping(t_uint256,t_struct(VersionableInfo)4647_storage)"},{"astId":4692,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"usersBalanceInfo","offset":0,"slot":"258","type":"t_mapping(t_address,t_mapping(t_uint256,t_struct(UserBalanceInfo)4661_storage))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_uint256,t_struct(UserBalanceInfo)4661_storage))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => struct GENZStaking.UserBalanceInfo))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_struct(UserBalanceInfo)4661_storage)"},"t_mapping(t_address,t_struct(UserInfo)4656_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct GENZStaking.UserInfo)","numberOfBytes":"32","value":"t_struct(UserInfo)4656_storage"},"t_mapping(t_address,t_struct(WithdrawWaitPeriod)4668_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct GENZStaking.WithdrawWaitPeriod)","numberOfBytes":"32","value":"t_struct(WithdrawWaitPeriod)4668_storage"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_mapping(t_uint256,t_struct(UserBalanceInfo)4661_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GENZStaking.UserBalanceInfo)","numberOfBytes":"32","value":"t_struct(UserBalanceInfo)4661_storage"},"t_mapping(t_uint256,t_struct(VersionableInfo)4647_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct GENZStaking.VersionableInfo)","numberOfBytes":"32","value":"t_struct(VersionableInfo)4647_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(UserBalanceInfo)4661_storage":{"encoding":"inplace","label":"struct GENZStaking.UserBalanceInfo","members":[{"astId":4658,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"stakedTokens","offset":0,"slot":"0","type":"t_uint256"},{"astId":4660,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"withdrawnTokens","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_struct(UserInfo)4656_storage":{"encoding":"inplace","label":"struct GENZStaking.UserInfo","members":[{"astId":4649,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"hasStaked","offset":0,"slot":"0","type":"t_bool"},{"astId":4651,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"stakedTokens","offset":0,"slot":"1","type":"t_uint256"},{"astId":4653,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"startVersionBlock","offset":0,"slot":"2","type":"t_uint256"},{"astId":4655,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"claimedRewards","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(VersionableInfo)4647_storage":{"encoding":"inplace","label":"struct GENZStaking.VersionableInfo","members":[{"astId":4640,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"startTime","offset":0,"slot":"0","type":"t_uint256"},{"astId":4642,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"endTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":4644,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"distributedAmount","offset":0,"slot":"2","type":"t_uint256"},{"astId":4646,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"tokenDistributed","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_struct(WithdrawWaitPeriod)4668_storage":{"encoding":"inplace","label":"struct GENZStaking.WithdrawWaitPeriod","members":[{"astId":4663,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"ifTimerStarted","offset":0,"slot":"0","type":"t_bool"},{"astId":4665,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"GENZTokenCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":4667,"contract":"contracts/core/staking/GENZStaking.sol:GENZStaking","label":"canWithdrawTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"[PRODUCTION TODO: _withdrawTimer = timeInDays * 1 days;]"},"setWithdrawTime(uint256)":{"notice":"[PRODUCTION TODO: _withdrawTimer = timeInHours * 1 hours;]"}},"notice":"NOTE: Staking tokens would be used for activities like flash loans  to generate rewards for the staked users","version":1}}},"contracts/core/token/GENZERC20.sol":{"GENZ":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"GENZ__ImmutableChangesError","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"buyContract","type":"address"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50613ce7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636e810b1a116100f9578063a217fddf11610097578063b6db75a011610071578063b6db75a014610509578063d505accf14610527578063d547741f14610543578063dd62ed3e1461055f576101c4565b8063a217fddf1461048b578063a457c2d7146104a9578063a9059cbb146104d9576101c4565b80638129fc1c116100d35780638129fc1c146104295780638456cb591461043357806391d148541461043d57806395d89b411461046d576101c4565b80636e810b1a146103ad57806370a08231146103c95780637ecebe00146103f9576101c4565b80632f2ff15d1161016657806336568abe1161014057806336568abe1461033957806339509351146103555780633f4ba83a146103855780635c975abb1461038f576101c4565b80632f2ff15d146102e1578063313ce567146102fd5780633644e5151461031b576101c4565b806318160ddd116101a257806318160ddd1461024757806319ab453c1461026557806323b872dd14610281578063248a9ca3146102b1576101c4565b806301ffc9a7146101c957806306fdde03146101f9578063095ea7b314610217575b600080fd5b6101e360048036038101906101de9190612636565b61058f565b6040516101f0919061267e565b60405180910390f35b610201610609565b60405161020e9190612729565b60405180910390f35b610231600480360381019061022c91906127df565b61069b565b60405161023e919061267e565b60405180910390f35b61024f6106be565b60405161025c919061282e565b60405180910390f35b61027f600480360381019061027a9190612849565b6106c8565b005b61029b60048036038101906102969190612876565b61077c565b6040516102a8919061267e565b60405180910390f35b6102cb60048036038101906102c691906128ff565b6107ab565b6040516102d8919061293b565b60405180910390f35b6102fb60048036038101906102f69190612956565b6107cc565b005b6103056107ed565b60405161031291906129b2565b60405180910390f35b6103236107f6565b604051610330919061293b565b60405180910390f35b610353600480360381019061034e9190612956565b610805565b005b61036f600480360381019061036a91906127df565b610888565b60405161037c919061267e565b60405180910390f35b61038d6108bf565b005b610397610910565b6040516103a4919061267e565b60405180910390f35b6103c760048036038101906103c29190612849565b610927565b005b6103e360048036038101906103de9190612849565b610a49565b6040516103f0919061282e565b60405180910390f35b610413600480360381019061040e9190612849565b610a92565b604051610420919061282e565b60405180910390f35b610431610ae2565b005b61043b610cda565b005b61045760048036038101906104529190612956565b610d2b565b604051610464919061267e565b60405180910390f35b610475610d97565b6040516104829190612729565b60405180910390f35b610493610e29565b6040516104a0919061293b565b60405180910390f35b6104c360048036038101906104be91906127df565b610e30565b6040516104d0919061267e565b60405180910390f35b6104f360048036038101906104ee91906127df565b610ea7565b604051610500919061267e565b60405180910390f35b610511610eca565b60405161051e919061267e565b60405180910390f35b610541600480360381019061053c91906129f9565b610ee9565b005b61055d60048036038101906105589190612956565b61102b565b005b61057960048036038101906105749190612a9b565b61104c565b604051610586919061282e565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106025750610601826110d3565b5b9050919050565b60606036805461061890612b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461064490612b0a565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b5050505050905090565b6000806106a661113d565b90506106b3818585611145565b600191505092915050565b6000603554905090565b6106d0610eca565b61070f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070690612bad565b60405180910390fd5b600061019454111561074d576040517f19389a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101946000815461075d90612bfc565b91905081905550610779816a084595161401484a00000061130e565b50565b60008061078761113d565b9050610794858285611465565b61079f8585856114f1565b60019150509392505050565b60006101306000838152602001908152602001600020600101549050919050565b6107d5826107ab565b6107de8161176a565b6107e8838361177e565b505050565b60006012905090565b6000610800611860565b905090565b61080d61113d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190612cb6565b60405180910390fd5b61088482826118a0565b5050565b60008061089361113d565b90506108b48185856108a5858961104c565b6108af9190612cd6565b611145565b600191505092915050565b6108c7610eca565b610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90612bad565b60405180910390fd5b61090e611983565b565b600060cc60009054906101000a900460ff16905090565b600060019054906101000a900460ff16610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d90612d7c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109dc576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109e46119e6565b6109ec611a3f565b6109f4611a90565b610a056109ff611ae9565b8261177e565b610a16610a10611b11565b8261177e565b610a2e610a21611b11565b610a29611ae9565b611b39565b610a46610a39611ae9565b610a41611ae9565b611b39565b50565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610adb609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611b96565b9050919050565b60008060019054906101000a900460ff16159050808015610b135750600160008054906101000a900460ff1660ff16105b80610b405750610b2230611ba4565b158015610b3f5750600160008054906101000a900460ff1660ff16145b5b610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7690612e0e565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610bbc576001600060016101000a81548160ff0219169083151502179055505b610c306040518060400160405280600981526020017f47656e5a204c61627300000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f47454e5a00000000000000000000000000000000000000000000000000000000815250611bc7565b610c6e6040518060400160405280600481526020017f47454e5a00000000000000000000000000000000000000000000000000000000815250611c24565b610c7e610c7961113d565b610927565b8015610cd75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610cce9190612e73565b60405180910390a15b50565b610ce2610eca565b610d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1890612bad565b60405180910390fd5b610d29611cb5565b565b6000610130600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060378054610da690612b0a565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd290612b0a565b8015610e1f5780601f10610df457610100808354040283529160200191610e1f565b820191906000526020600020905b815481529060010190602001808311610e0257829003601f168201915b5050505050905090565b6000801b81565b600080610e3b61113d565b90506000610e49828661104c565b905083811015610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8590612f00565b60405180910390fd5b610e9b8286868403611145565b60019250505092915050565b600080610eb261113d565b9050610ebf8185856114f1565b600191505092915050565b6000610ee4610ed7611ae9565b610edf61113d565b610d2b565b905090565b83421115610f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2390612f6c565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610f5b8c611d18565b89604051602001610f7196959493929190612f9b565b6040516020818303038152906040528051906020012090506000610f9482611d76565b90506000610fa482878787611d90565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b90613048565b60405180910390fd5b61101f8a8a8a611145565b50505050505050505050565b611034826107ab565b61103d8161176a565b61104783836118a0565b505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab906130da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121a9061316c565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611301919061282e565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361137d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611374906131d8565b60405180910390fd5b61138960008383611dbb565b806035600082825461139b9190612cd6565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161144d919061282e565b60405180910390a361146160008383611dc0565b5050565b6000611471848461104c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146114eb57818110156114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d490613244565b60405180910390fd5b6114ea8484848403611145565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611560576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611557906132d6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c690613368565b60405180910390fd5b6115da838383611dbb565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611661576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611658906133fa565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611751919061282e565b60405180910390a3611764848484611dc0565b50505050565b61177b8161177661113d565b611dc5565b50565b6117888282610d2b565b61185c576001610130600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061180161113d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061189b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61188e611e4a565b611896611e54565b611e5e565b905090565b6118aa8282610d2b565b1561197f576000610130600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061192461113d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61198b611e98565b600060cc60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6119cf61113d565b6040516119dc919061341a565b60405180910390a1565b600060019054906101000a900460ff16611a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2c90612d7c565b60405180910390fd5b611a3d611ee1565b565b600060019054906101000a900460ff16611a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8590612d7c565b60405180910390fd5b565b600060019054906101000a900460ff16611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad690612d7c565b60405180910390fd5b611ae7611f4d565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b6000611b44836107ab565b9050816101306000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b600081600001549050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0d90612d7c565b60405180910390fd5b611c208282611fa7565b5050565b600060019054906101000a900460ff16611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a90612d7c565b60405180910390fd5b611cb2816040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525061201a565b50565b611cbd612095565b600160cc60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d0161113d565b604051611d0e919061341a565b60405180910390a1565b600080609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611d6581611b96565b9150611d70816120df565b50919050565b6000611d89611d83611860565b836120f5565b9050919050565b6000806000611da187878787612128565b91509150611dae8161220a565b8192505050949350505050565b505050565b505050565b611dcf8282610d2b565b611e4657611ddc81612370565b611dea8360001c602061239d565b604051602001611dfb929190613509565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3d9190612729565b60405180910390fd5b5050565b6000606554905090565b6000606654905090565b60008383834630604051602001611e79959493929190613543565b6040516020818303038152906040528051906020012090509392505050565b611ea0610910565b611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed6906135e2565b60405180910390fd5b565b600060019054906101000a900460ff16611f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2790612d7c565b60405180910390fd5b600060cc60006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9390612d7c565b60405180910390fd5b600161016281905550565b600060019054906101000a900460ff16611ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fed90612d7c565b60405180910390fd5b816036908161200591906137d3565b50806037908161201591906137d3565b505050565b600060019054906101000a900460ff16612069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206090612d7c565b60405180910390fd5b600082805190602001209050600082805190602001209050816065819055508060668190555050505050565b61209d610910565b156120dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d4906138f1565b60405180910390fd5b565b6001816000016000828254019250508190555050565b6000828260405160200161210a92919061397e565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612163576000600391509150612201565b60006001878787876040516000815260200160405260405161218894939291906139b5565b6020604051602081039080840390855afa1580156121aa573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121f857600060019250925050612201565b80600092509250505b94509492505050565b6000600481111561221e5761221d6139fa565b5b816004811115612231576122306139fa565b5b031561236d576001600481111561224b5761224a6139fa565b5b81600481111561225e5761225d6139fa565b5b0361229e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229590613a75565b60405180910390fd5b600260048111156122b2576122b16139fa565b5b8160048111156122c5576122c46139fa565b5b03612305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fc90613ae1565b60405180910390fd5b60036004811115612319576123186139fa565b5b81600481111561232c5761232b6139fa565b5b0361236c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236390613b73565b60405180910390fd5b5b50565b60606123968273ffffffffffffffffffffffffffffffffffffffff16601460ff1661239d565b9050919050565b6060600060028360026123b09190613b93565b6123ba9190612cd6565b67ffffffffffffffff8111156123d3576123d2613602565b5b6040519080825280601f01601f1916602001820160405280156124055781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061243d5761243c613bed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124a1576124a0613bed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026124e19190613b93565b6124eb9190612cd6565b90505b600181111561258b577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061252d5761252c613bed565b5b1a60f81b82828151811061254457612543613bed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061258490613c1c565b90506124ee565b50600084146125cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c690613c91565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612613816125de565b811461261e57600080fd5b50565b6000813590506126308161260a565b92915050565b60006020828403121561264c5761264b6125d9565b5b600061265a84828501612621565b91505092915050565b60008115159050919050565b61267881612663565b82525050565b6000602082019050612693600083018461266f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126d35780820151818401526020810190506126b8565b60008484015250505050565b6000601f19601f8301169050919050565b60006126fb82612699565b61270581856126a4565b93506127158185602086016126b5565b61271e816126df565b840191505092915050565b6000602082019050818103600083015261274381846126f0565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127768261274b565b9050919050565b6127868161276b565b811461279157600080fd5b50565b6000813590506127a38161277d565b92915050565b6000819050919050565b6127bc816127a9565b81146127c757600080fd5b50565b6000813590506127d9816127b3565b92915050565b600080604083850312156127f6576127f56125d9565b5b600061280485828601612794565b9250506020612815858286016127ca565b9150509250929050565b612828816127a9565b82525050565b6000602082019050612843600083018461281f565b92915050565b60006020828403121561285f5761285e6125d9565b5b600061286d84828501612794565b91505092915050565b60008060006060848603121561288f5761288e6125d9565b5b600061289d86828701612794565b93505060206128ae86828701612794565b92505060406128bf868287016127ca565b9150509250925092565b6000819050919050565b6128dc816128c9565b81146128e757600080fd5b50565b6000813590506128f9816128d3565b92915050565b600060208284031215612915576129146125d9565b5b6000612923848285016128ea565b91505092915050565b612935816128c9565b82525050565b6000602082019050612950600083018461292c565b92915050565b6000806040838503121561296d5761296c6125d9565b5b600061297b858286016128ea565b925050602061298c85828601612794565b9150509250929050565b600060ff82169050919050565b6129ac81612996565b82525050565b60006020820190506129c760008301846129a3565b92915050565b6129d681612996565b81146129e157600080fd5b50565b6000813590506129f3816129cd565b92915050565b600080600080600080600060e0888a031215612a1857612a176125d9565b5b6000612a268a828b01612794565b9750506020612a378a828b01612794565b9650506040612a488a828b016127ca565b9550506060612a598a828b016127ca565b9450506080612a6a8a828b016129e4565b93505060a0612a7b8a828b016128ea565b92505060c0612a8c8a828b016128ea565b91505092959891949750929550565b60008060408385031215612ab257612ab16125d9565b5b6000612ac085828601612794565b9250506020612ad185828601612794565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b2257607f821691505b602082108103612b3557612b34612adb565b5b50919050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b6000612b97602c836126a4565b9150612ba282612b3b565b604082019050919050565b60006020820190508181036000830152612bc681612b8a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c07826127a9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c3957612c38612bcd565b5b600182019050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612ca0602f836126a4565b9150612cab82612c44565b604082019050919050565b60006020820190508181036000830152612ccf81612c93565b9050919050565b6000612ce1826127a9565b9150612cec836127a9565b9250828201905080821115612d0457612d03612bcd565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612d66602b836126a4565b9150612d7182612d0a565b604082019050919050565b60006020820190508181036000830152612d9581612d59565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612df8602e836126a4565b9150612e0382612d9c565b604082019050919050565b60006020820190508181036000830152612e2781612deb565b9050919050565b6000819050919050565b6000819050919050565b6000612e5d612e58612e5384612e2e565b612e38565b612996565b9050919050565b612e6d81612e42565b82525050565b6000602082019050612e886000830184612e64565b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612eea6025836126a4565b9150612ef582612e8e565b604082019050919050565b60006020820190508181036000830152612f1981612edd565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b6000612f56601d836126a4565b9150612f6182612f20565b602082019050919050565b60006020820190508181036000830152612f8581612f49565b9050919050565b612f958161276b565b82525050565b600060c082019050612fb0600083018961292c565b612fbd6020830188612f8c565b612fca6040830187612f8c565b612fd7606083018661281f565b612fe4608083018561281f565b612ff160a083018461281f565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000613032601e836126a4565b915061303d82612ffc565b602082019050919050565b6000602082019050818103600083015261306181613025565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006130c46024836126a4565b91506130cf82613068565b604082019050919050565b600060208201905081810360008301526130f3816130b7565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006131566022836126a4565b9150613161826130fa565b604082019050919050565b6000602082019050818103600083015261318581613149565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006131c2601f836126a4565b91506131cd8261318c565b602082019050919050565b600060208201905081810360008301526131f1816131b5565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061322e601d836126a4565b9150613239826131f8565b602082019050919050565b6000602082019050818103600083015261325d81613221565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006132c06025836126a4565b91506132cb82613264565b604082019050919050565b600060208201905081810360008301526132ef816132b3565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006133526023836126a4565b915061335d826132f6565b604082019050919050565b6000602082019050818103600083015261338181613345565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006133e46026836126a4565b91506133ef82613388565b604082019050919050565b60006020820190508181036000830152613413816133d7565b9050919050565b600060208201905061342f6000830184612f8c565b92915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613476601783613435565b915061348182613440565b601782019050919050565b600061349782612699565b6134a18185613435565b93506134b18185602086016126b5565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006134f3601183613435565b91506134fe826134bd565b601182019050919050565b600061351482613469565b9150613520828561348c565b915061352b826134e6565b9150613537828461348c565b91508190509392505050565b600060a082019050613558600083018861292c565b613565602083018761292c565b613572604083018661292c565b61357f606083018561281f565b61358c6080830184612f8c565b9695505050505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006135cc6014836126a4565b91506135d782613596565b602082019050919050565b600060208201905081810360008301526135fb816135bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613656565b61369d8683613656565b95508019841693508086168417925050509392505050565b60006136d06136cb6136c6846127a9565b612e38565b6127a9565b9050919050565b6000819050919050565b6136ea836136b5565b6136fe6136f6826136d7565b848454613663565b825550505050565b600090565b613713613706565b61371e8184846136e1565b505050565b5b818110156137425761373760008261370b565b600181019050613724565b5050565b601f8211156137875761375881613631565b61376184613646565b81016020851015613770578190505b61378461377c85613646565b830182613723565b50505b505050565b600082821c905092915050565b60006137aa6000198460080261378c565b1980831691505092915050565b60006137c38383613799565b9150826002028217905092915050565b6137dc82612699565b67ffffffffffffffff8111156137f5576137f4613602565b5b6137ff8254612b0a565b61380a828285613746565b600060209050601f83116001811461383d576000841561382b578287015190505b61383585826137b7565b86555061389d565b601f19841661384b86613631565b60005b828110156138735784890151825560018201915060208501945060208101905061384e565b86831015613890578489015161388c601f891682613799565b8355505b6001600288020188555050505b505050505050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006138db6010836126a4565b91506138e6826138a5565b602082019050919050565b6000602082019050818103600083015261390a816138ce565b9050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000613947600283613435565b915061395282613911565b600282019050919050565b6000819050919050565b613978613973826128c9565b61395d565b82525050565b60006139898261393a565b91506139958285613967565b6020820191506139a58284613967565b6020820191508190509392505050565b60006080820190506139ca600083018761292c565b6139d760208301866129a3565b6139e4604083018561292c565b6139f1606083018461292c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613a5f6018836126a4565b9150613a6a82613a29565b602082019050919050565b60006020820190508181036000830152613a8e81613a52565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613acb601f836126a4565b9150613ad682613a95565b602082019050919050565b60006020820190508181036000830152613afa81613abe565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b5d6022836126a4565b9150613b6882613b01565b604082019050919050565b60006020820190508181036000830152613b8c81613b50565b9050919050565b6000613b9e826127a9565b9150613ba9836127a9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613be257613be1612bcd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613c27826127a9565b915060008203613c3a57613c39612bcd565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613c7b6020836126a4565b9150613c8682613c45565b602082019050919050565b60006020820190508181036000830152613caa81613c6e565b905091905056fea2646970667358221220278499bc91063563324f8c4b12deacfeb306fd03b7bdd13fcdca8ca351f95b6764736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CE7 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB6DB75A0 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x543 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x55F JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4D9 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x429 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x433 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x46D JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x3F9 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x36568ABE GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x38F JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x31B JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x19AB453C EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2B1 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x217 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x2636 JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x201 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22C SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24F PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25C SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0x6C8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x2876 JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x293B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F6 SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x305 PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x323 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x293B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x353 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x805 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x36F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36A SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37C SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x38D PUSH2 0x8BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x397 PUSH2 0x910 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A4 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C2 SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F0 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x413 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40E SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x420 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x431 PUSH2 0xAE2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x43B PUSH2 0xCDA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x457 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x452 SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x464 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x475 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x482 SWAP2 SWAP1 PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x493 PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x293B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BE SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0xE30 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x500 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x511 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51E SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x541 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53C SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST PUSH2 0xEE9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x55D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x558 SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x102B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x2A9B JUMP JUMPDEST PUSH2 0x104C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x602 JUMPI POP PUSH2 0x601 DUP3 PUSH2 0x10D3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x618 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x644 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x691 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x666 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x691 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x674 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6A6 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0x6B3 DUP2 DUP6 DUP6 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x6D0 PUSH2 0xECA JUMP JUMPDEST PUSH2 0x70F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x706 SWAP1 PUSH2 0x2BAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x194 SLOAD GT ISZERO PUSH2 0x74D JUMPI PUSH1 0x40 MLOAD PUSH32 0x19389A4700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x194 PUSH1 0x0 DUP2 SLOAD PUSH2 0x75D SWAP1 PUSH2 0x2BFC JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH2 0x779 DUP2 PUSH11 0x84595161401484A000000 PUSH2 0x130E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x787 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0x794 DUP6 DUP3 DUP6 PUSH2 0x1465 JUMP JUMPDEST PUSH2 0x79F DUP6 DUP6 DUP6 PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7D5 DUP3 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x7DE DUP2 PUSH2 0x176A JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 PUSH2 0x177E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x800 PUSH2 0x1860 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x80D PUSH2 0x113D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x871 SWAP1 PUSH2 0x2CB6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x884 DUP3 DUP3 PUSH2 0x18A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x893 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0x8B4 DUP2 DUP6 DUP6 PUSH2 0x8A5 DUP6 DUP10 PUSH2 0x104C JUMP JUMPDEST PUSH2 0x8AF SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8C7 PUSH2 0xECA JUMP JUMPDEST PUSH2 0x906 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8FD SWAP1 PUSH2 0x2BAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x90E PUSH2 0x1983 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x976 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96D SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9E4 PUSH2 0x19E6 JUMP JUMPDEST PUSH2 0x9EC PUSH2 0x1A3F JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x1A90 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x9FF PUSH2 0x1AE9 JUMP JUMPDEST DUP3 PUSH2 0x177E JUMP JUMPDEST PUSH2 0xA16 PUSH2 0xA10 PUSH2 0x1B11 JUMP JUMPDEST DUP3 PUSH2 0x177E JUMP JUMPDEST PUSH2 0xA2E PUSH2 0xA21 PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0xA29 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST PUSH2 0xA46 PUSH2 0xA39 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xA41 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xB13 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xB40 JUMPI POP PUSH2 0xB22 ADDRESS PUSH2 0x1BA4 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xB3F JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xB7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB76 SWAP1 PUSH2 0x2E0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xBBC JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xC30 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x47656E5A204C6162730000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x47454E5A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1BC7 JUMP JUMPDEST PUSH2 0xC6E PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x47454E5A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0xC7E PUSH2 0xC79 PUSH2 0x113D JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCD7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xCCE SWAP2 SWAP1 PUSH2 0x2E73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0xCE2 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD18 SWAP1 PUSH2 0x2BAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD29 PUSH2 0x1CB5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0xDA6 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDD2 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE1F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDF4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE1F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE02 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE3B PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE49 DUP3 DUP7 PUSH2 0x104C JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xE8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE85 SWAP1 PUSH2 0x2F00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE9B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEB2 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0xEBF DUP2 DUP6 DUP6 PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE4 PUSH2 0xED7 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xEDF PUSH2 0x113D JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xF2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF23 SWAP1 PUSH2 0x2F6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xF5B DUP13 PUSH2 0x1D18 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF71 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xF94 DUP3 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFA4 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1D90 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x100B SWAP1 PUSH2 0x3048 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x101F DUP11 DUP11 DUP11 PUSH2 0x1145 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1034 DUP3 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x103D DUP2 PUSH2 0x176A JUMP JUMPDEST PUSH2 0x1047 DUP4 DUP4 PUSH2 0x18A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11B4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11AB SWAP1 PUSH2 0x30DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1223 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x121A SWAP1 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1301 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x137D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1374 SWAP1 PUSH2 0x31D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1389 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1DBB JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x139B SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x144D SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1461 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1DC0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1471 DUP5 DUP5 PUSH2 0x104C JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x14EB JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x14DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14D4 SWAP1 PUSH2 0x3244 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14EA DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x1145 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1560 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1557 SWAP1 PUSH2 0x32D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C6 SWAP1 PUSH2 0x3368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15DA DUP4 DUP4 DUP4 PUSH2 0x1DBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1661 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1658 SWAP1 PUSH2 0x33FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1751 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1764 DUP5 DUP5 DUP5 PUSH2 0x1DC0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x177B DUP2 PUSH2 0x1776 PUSH2 0x113D JUMP JUMPDEST PUSH2 0x1DC5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1788 DUP3 DUP3 PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x185C JUMPI PUSH1 0x1 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1801 PUSH2 0x113D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x189B PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x188E PUSH2 0x1E4A JUMP JUMPDEST PUSH2 0x1896 PUSH2 0x1E54 JUMP JUMPDEST PUSH2 0x1E5E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x18AA DUP3 DUP3 PUSH2 0xD2B JUMP JUMPDEST ISZERO PUSH2 0x197F JUMPI PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1924 PUSH2 0x113D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x198B PUSH2 0x1E98 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x19CF PUSH2 0x113D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19DC SWAP2 SWAP1 PUSH2 0x341A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A2C SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A3D PUSH2 0x1EE1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A85 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1ADF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD6 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1AE7 PUSH2 0x1F4D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B44 DUP4 PUSH2 0x7AB JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x130 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C16 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C0D SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C20 DUP3 DUP3 PUSH2 0x1FA7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6A SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CB2 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x201A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1CBD PUSH2 0x2095 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1D01 PUSH2 0x113D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0E SWAP2 SWAP1 PUSH2 0x341A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1D65 DUP2 PUSH2 0x1B96 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D70 DUP2 PUSH2 0x20DF JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D89 PUSH2 0x1D83 PUSH2 0x1860 JUMP JUMPDEST DUP4 PUSH2 0x20F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1DA1 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2128 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1DAE DUP2 PUSH2 0x220A JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1DCF DUP3 DUP3 PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x1E46 JUMPI PUSH2 0x1DDC DUP2 PUSH2 0x2370 JUMP JUMPDEST PUSH2 0x1DEA DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x239D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1DFB SWAP3 SWAP2 SWAP1 PUSH2 0x3509 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3D SWAP2 SWAP1 PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x66 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1E79 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1EA0 PUSH2 0x910 JUMP JUMPDEST PUSH2 0x1EDF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED6 SWAP1 PUSH2 0x35E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F27 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F9C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F93 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x162 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FF6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FED SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x36 SWAP1 DUP2 PUSH2 0x2005 SWAP2 SWAP1 PUSH2 0x37D3 JUMP JUMPDEST POP DUP1 PUSH1 0x37 SWAP1 DUP2 PUSH2 0x2015 SWAP2 SWAP1 PUSH2 0x37D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2069 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2060 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x66 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x209D PUSH2 0x910 JUMP JUMPDEST ISZERO PUSH2 0x20DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20D4 SWAP1 PUSH2 0x38F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x210A SWAP3 SWAP2 SWAP1 PUSH2 0x397E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x2163 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2188 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39B5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x21F8 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2201 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x221E JUMPI PUSH2 0x221D PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2231 JUMPI PUSH2 0x2230 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x236D JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x224B JUMPI PUSH2 0x224A PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x225E JUMPI PUSH2 0x225D PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB PUSH2 0x229E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2295 SWAP1 PUSH2 0x3A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x22B2 JUMPI PUSH2 0x22B1 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x22C5 JUMPI PUSH2 0x22C4 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB PUSH2 0x2305 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22FC SWAP1 PUSH2 0x3AE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2319 JUMPI PUSH2 0x2318 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x232C JUMPI PUSH2 0x232B PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB PUSH2 0x236C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2363 SWAP1 PUSH2 0x3B73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2396 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x239D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x23B0 SWAP2 SWAP1 PUSH2 0x3B93 JUMP JUMPDEST PUSH2 0x23BA SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23D3 JUMPI PUSH2 0x23D2 PUSH2 0x3602 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2405 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x243D JUMPI PUSH2 0x243C PUSH2 0x3BED JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x24A1 JUMPI PUSH2 0x24A0 PUSH2 0x3BED JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x24E1 SWAP2 SWAP1 PUSH2 0x3B93 JUMP JUMPDEST PUSH2 0x24EB SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x258B JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x252D JUMPI PUSH2 0x252C PUSH2 0x3BED JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2544 JUMPI PUSH2 0x2543 PUSH2 0x3BED JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2584 SWAP1 PUSH2 0x3C1C JUMP JUMPDEST SWAP1 POP PUSH2 0x24EE JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x25CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25C6 SWAP1 PUSH2 0x3C91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2613 DUP2 PUSH2 0x25DE JUMP JUMPDEST DUP2 EQ PUSH2 0x261E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2630 DUP2 PUSH2 0x260A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x264C JUMPI PUSH2 0x264B PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x265A DUP5 DUP3 DUP6 ADD PUSH2 0x2621 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2678 DUP2 PUSH2 0x2663 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2693 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x266F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26D3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x26B8 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26FB DUP3 PUSH2 0x2699 JUMP JUMPDEST PUSH2 0x2705 DUP2 DUP6 PUSH2 0x26A4 JUMP JUMPDEST SWAP4 POP PUSH2 0x2715 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x26B5 JUMP JUMPDEST PUSH2 0x271E DUP2 PUSH2 0x26DF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2743 DUP2 DUP5 PUSH2 0x26F0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2776 DUP3 PUSH2 0x274B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2786 DUP2 PUSH2 0x276B JUMP JUMPDEST DUP2 EQ PUSH2 0x2791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27A3 DUP2 PUSH2 0x277D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27BC DUP2 PUSH2 0x27A9 JUMP JUMPDEST DUP2 EQ PUSH2 0x27C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27D9 DUP2 PUSH2 0x27B3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27F6 JUMPI PUSH2 0x27F5 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2804 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2815 DUP6 DUP3 DUP7 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2828 DUP2 PUSH2 0x27A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2843 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x281F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x285F JUMPI PUSH2 0x285E PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x286D DUP5 DUP3 DUP6 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x288F JUMPI PUSH2 0x288E PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x289D DUP7 DUP3 DUP8 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x28AE DUP7 DUP3 DUP8 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x28BF DUP7 DUP3 DUP8 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x28DC DUP2 PUSH2 0x28C9 JUMP JUMPDEST DUP2 EQ PUSH2 0x28E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x28F9 DUP2 PUSH2 0x28D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2915 JUMPI PUSH2 0x2914 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2923 DUP5 DUP3 DUP6 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2935 DUP2 PUSH2 0x28C9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2950 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x292C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x296D JUMPI PUSH2 0x296C PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x297B DUP6 DUP3 DUP7 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x298C DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29AC DUP2 PUSH2 0x2996 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29C7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x29A3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29D6 DUP2 PUSH2 0x2996 JUMP JUMPDEST DUP2 EQ PUSH2 0x29E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x29F3 DUP2 PUSH2 0x29CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2A18 JUMPI PUSH2 0x2A17 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A26 DUP11 DUP3 DUP12 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x2A37 DUP11 DUP3 DUP12 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x2A48 DUP11 DUP3 DUP12 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x2A59 DUP11 DUP3 DUP12 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2A6A DUP11 DUP3 DUP12 ADD PUSH2 0x29E4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x2A7B DUP11 DUP3 DUP12 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x2A8C DUP11 DUP3 DUP12 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AB2 JUMPI PUSH2 0x2AB1 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AC0 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2AD1 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2B22 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2B35 JUMPI PUSH2 0x2B34 PUSH2 0x2ADB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B97 PUSH1 0x2C DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BA2 DUP3 PUSH2 0x2B3B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC6 DUP2 PUSH2 0x2B8A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2C07 DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2C39 JUMPI PUSH2 0x2C38 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA0 PUSH1 0x2F DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CAB DUP3 PUSH2 0x2C44 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CCF DUP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE1 DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CEC DUP4 PUSH2 0x27A9 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2D04 JUMPI PUSH2 0x2D03 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D66 PUSH1 0x2B DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D71 DUP3 PUSH2 0x2D0A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D95 DUP2 PUSH2 0x2D59 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DF8 PUSH1 0x2E DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E03 DUP3 PUSH2 0x2D9C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E27 DUP2 PUSH2 0x2DEB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E5D PUSH2 0x2E58 PUSH2 0x2E53 DUP5 PUSH2 0x2E2E JUMP JUMPDEST PUSH2 0x2E38 JUMP JUMPDEST PUSH2 0x2996 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E6D DUP2 PUSH2 0x2E42 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2E88 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E64 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EEA PUSH1 0x25 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2EF5 DUP3 PUSH2 0x2E8E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F19 DUP2 PUSH2 0x2EDD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F56 PUSH1 0x1D DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F61 DUP3 PUSH2 0x2F20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F85 DUP2 PUSH2 0x2F49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F95 DUP2 PUSH2 0x276B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x2FB0 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x2FBD PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x2FCA PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x2FD7 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x281F JUMP JUMPDEST PUSH2 0x2FE4 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x281F JUMP JUMPDEST PUSH2 0x2FF1 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x281F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3032 PUSH1 0x1E DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x303D DUP3 PUSH2 0x2FFC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3061 DUP2 PUSH2 0x3025 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30C4 PUSH1 0x24 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x30CF DUP3 PUSH2 0x3068 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30F3 DUP2 PUSH2 0x30B7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3156 PUSH1 0x22 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3161 DUP3 PUSH2 0x30FA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3185 DUP2 PUSH2 0x3149 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31C2 PUSH1 0x1F DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x31CD DUP3 PUSH2 0x318C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31F1 DUP2 PUSH2 0x31B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x322E PUSH1 0x1D DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3239 DUP3 PUSH2 0x31F8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x325D DUP2 PUSH2 0x3221 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32C0 PUSH1 0x25 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x32CB DUP3 PUSH2 0x3264 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32EF DUP2 PUSH2 0x32B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3352 PUSH1 0x23 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x335D DUP3 PUSH2 0x32F6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3381 DUP2 PUSH2 0x3345 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E4 PUSH1 0x26 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x33EF DUP3 PUSH2 0x3388 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3413 DUP2 PUSH2 0x33D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x342F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3476 PUSH1 0x17 DUP4 PUSH2 0x3435 JUMP JUMPDEST SWAP2 POP PUSH2 0x3481 DUP3 PUSH2 0x3440 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3497 DUP3 PUSH2 0x2699 JUMP JUMPDEST PUSH2 0x34A1 DUP2 DUP6 PUSH2 0x3435 JUMP JUMPDEST SWAP4 POP PUSH2 0x34B1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x26B5 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F3 PUSH1 0x11 DUP4 PUSH2 0x3435 JUMP JUMPDEST SWAP2 POP PUSH2 0x34FE DUP3 PUSH2 0x34BD JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3514 DUP3 PUSH2 0x3469 JUMP JUMPDEST SWAP2 POP PUSH2 0x3520 DUP3 DUP6 PUSH2 0x348C JUMP JUMPDEST SWAP2 POP PUSH2 0x352B DUP3 PUSH2 0x34E6 JUMP JUMPDEST SWAP2 POP PUSH2 0x3537 DUP3 DUP5 PUSH2 0x348C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x3558 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x3565 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x3572 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x357F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x281F JUMP JUMPDEST PUSH2 0x358C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35CC PUSH1 0x14 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x35D7 DUP3 PUSH2 0x3596 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35FB DUP2 PUSH2 0x35BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3693 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3656 JUMP JUMPDEST PUSH2 0x369D DUP7 DUP4 PUSH2 0x3656 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36D0 PUSH2 0x36CB PUSH2 0x36C6 DUP5 PUSH2 0x27A9 JUMP JUMPDEST PUSH2 0x2E38 JUMP JUMPDEST PUSH2 0x27A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36EA DUP4 PUSH2 0x36B5 JUMP JUMPDEST PUSH2 0x36FE PUSH2 0x36F6 DUP3 PUSH2 0x36D7 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3663 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3713 PUSH2 0x3706 JUMP JUMPDEST PUSH2 0x371E DUP2 DUP5 DUP5 PUSH2 0x36E1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3742 JUMPI PUSH2 0x3737 PUSH1 0x0 DUP3 PUSH2 0x370B JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3724 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3787 JUMPI PUSH2 0x3758 DUP2 PUSH2 0x3631 JUMP JUMPDEST PUSH2 0x3761 DUP5 PUSH2 0x3646 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3770 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3784 PUSH2 0x377C DUP6 PUSH2 0x3646 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3723 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37AA PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x378C JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37C3 DUP4 DUP4 PUSH2 0x3799 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x37DC DUP3 PUSH2 0x2699 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x37F5 JUMPI PUSH2 0x37F4 PUSH2 0x3602 JUMP JUMPDEST JUMPDEST PUSH2 0x37FF DUP3 SLOAD PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0x380A DUP3 DUP3 DUP6 PUSH2 0x3746 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x383D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x382B JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3835 DUP6 DUP3 PUSH2 0x37B7 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x389D JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x384B DUP7 PUSH2 0x3631 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3873 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x384E JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3890 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x388C PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3799 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38DB PUSH1 0x10 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x38E6 DUP3 PUSH2 0x38A5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x390A DUP2 PUSH2 0x38CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3947 PUSH1 0x2 DUP4 PUSH2 0x3435 JUMP JUMPDEST SWAP2 POP PUSH2 0x3952 DUP3 PUSH2 0x3911 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3978 PUSH2 0x3973 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x395D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3989 DUP3 PUSH2 0x393A JUMP JUMPDEST SWAP2 POP PUSH2 0x3995 DUP3 DUP6 PUSH2 0x3967 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x39A5 DUP3 DUP5 PUSH2 0x3967 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x39CA PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x39D7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x39E4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x39F1 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x292C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A5F PUSH1 0x18 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A6A DUP3 PUSH2 0x3A29 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A8E DUP2 PUSH2 0x3A52 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ACB PUSH1 0x1F DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AD6 DUP3 PUSH2 0x3A95 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AFA DUP2 PUSH2 0x3ABE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B5D PUSH1 0x22 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B68 DUP3 PUSH2 0x3B01 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B8C DUP2 PUSH2 0x3B50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B9E DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BA9 DUP4 PUSH2 0x27A9 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3BE2 JUMPI PUSH2 0x3BE1 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3C27 DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x3C3A JUMPI PUSH2 0x3C39 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C7B PUSH1 0x20 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C86 DUP3 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CAA DUP2 PUSH2 0x3C6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 DUP5 SWAP10 0xBC SWAP2 MOD CALLDATALOAD PUSH4 0x324F8C4B SLT 0xDE 0xAC INVALID 0xB3 MOD REVERT SUB 0xB7 0xBD 0xD1 EXTCODEHASH 0xCD 0xCA DUP13 LOG3 MLOAD 0xF9 JUMPDEST PUSH8 0x64736F6C63430008 LT STOP CALLER ","sourceMap":"492:798:25:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":3625,"id":42,"parameterSlots":0,"returnSlots":0},"@DOMAIN_SEPARATOR_1651":{"entryPoint":2038,"id":1651,"parameterSlots":0,"returnSlots":1},"@_EIP712NameHash_3074":{"entryPoint":7754,"id":3074,"parameterSlots":0,"returnSlots":1},"@_EIP712VersionHash_3083":{"entryPoint":7764,"id":3083,"parameterSlots":0,"returnSlots":1},"@__AccessControl_init_21":{"entryPoint":6719,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_4097":{"entryPoint":2343,"id":4097,"parameterSlots":1,"returnSlots":0},"@__EIP712_init_unchained_3007":{"entryPoint":8218,"id":3007,"parameterSlots":2,"returnSlots":0},"@__ERC20Permit_init_1543":{"entryPoint":7204,"id":1543,"parameterSlots":1,"returnSlots":0},"@__ERC20_init_827":{"entryPoint":7111,"id":827,"parameterSlots":2,"returnSlots":0},"@__ERC20_init_unchained_845":{"entryPoint":8103,"id":845,"parameterSlots":2,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":6630,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":7905,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":6800,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":8013,"id":740,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1386":{"entryPoint":7616,"id":1386,"parameterSlots":3,"returnSlots":0},"@_approve_1321":{"entryPoint":4421,"id":1321,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_1375":{"entryPoint":7611,"id":1375,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_3049":{"entryPoint":7774,"id":3049,"parameterSlots":3,"returnSlots":1},"@_checkRole_107":{"entryPoint":5994,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":7621,"id":146,"parameterSlots":2,"returnSlots":0},"@_domainSeparatorV4_3022":{"entryPoint":6240,"id":3022,"parameterSlots":0,"returnSlots":1},"@_grantRole_298":{"entryPoint":6014,"id":298,"parameterSlots":2,"returnSlots":0},"@_hashTypedDataV4_3065":{"entryPoint":7542,"id":3065,"parameterSlots":1,"returnSlots":1},"@_mint_1204":{"entryPoint":4878,"id":1204,"parameterSlots":2,"returnSlots":0},"@_msgSender_2314":{"entryPoint":4413,"id":2314,"parameterSlots":0,"returnSlots":1},"@_pause_685":{"entryPoint":7349,"id":685,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_658":{"entryPoint":8341,"id":658,"parameterSlots":0,"returnSlots":0},"@_requirePaused_669":{"entryPoint":7832,"id":669,"parameterSlots":0,"returnSlots":0},"@_revokeRole_329":{"entryPoint":6304,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":6969,"id":266,"parameterSlots":2,"returnSlots":0},"@_spendAllowance_1364":{"entryPoint":5221,"id":1364,"parameterSlots":3,"returnSlots":0},"@_throwError_2632":{"entryPoint":8714,"id":2632,"parameterSlots":1,"returnSlots":0},"@_transfer_1147":{"entryPoint":5361,"id":1147,"parameterSlots":3,"returnSlots":0},"@_unpause_701":{"entryPoint":6531,"id":701,"parameterSlots":0,"returnSlots":0},"@_useNonce_1680":{"entryPoint":7448,"id":1680,"parameterSlots":1,"returnSlots":1},"@allowance_942":{"entryPoint":4172,"id":942,"parameterSlots":2,"returnSlots":1},"@approve_967":{"entryPoint":1691,"id":967,"parameterSlots":2,"returnSlots":1},"@balanceOf_899":{"entryPoint":2633,"id":899,"parameterSlots":1,"returnSlots":1},"@current_2347":{"entryPoint":7062,"id":2347,"parameterSlots":1,"returnSlots":1},"@decimals_875":{"entryPoint":2029,"id":875,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_1070":{"entryPoint":3632,"id":1070,"parameterSlots":2,"returnSlots":1},"@getAdminRole_4132":{"entryPoint":6889,"id":4132,"parameterSlots":0,"returnSlots":1},"@getPauserRole_4140":{"entryPoint":6929,"id":4140,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":1963,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":1996,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":3371,"id":94,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_1029":{"entryPoint":2184,"id":1029,"parameterSlots":2,"returnSlots":1},"@increment_2361":{"entryPoint":8415,"id":2361,"parameterSlots":1,"returnSlots":0},"@init_5388":{"entryPoint":1736,"id":5388,"parameterSlots":1,"returnSlots":0},"@initialize_5362":{"entryPoint":2786,"id":5362,"parameterSlots":0,"returnSlots":0},"@isAdmin_4111":{"entryPoint":3786,"id":4111,"parameterSlots":0,"returnSlots":1},"@isContract_2021":{"entryPoint":7076,"id":2021,"parameterSlots":1,"returnSlots":1},"@name_855":{"entryPoint":1545,"id":855,"parameterSlots":0,"returnSlots":1},"@nonces_1640":{"entryPoint":2706,"id":1640,"parameterSlots":1,"returnSlots":1},"@pause_5397":{"entryPoint":3290,"id":5397,"parameterSlots":0,"returnSlots":0},"@paused_646":{"entryPoint":2320,"id":646,"parameterSlots":0,"returnSlots":1},"@permit_1624":{"entryPoint":3817,"id":1624,"parameterSlots":7,"returnSlots":0},"@recover_2879":{"entryPoint":7568,"id":2879,"parameterSlots":4,"returnSlots":1},"@renounceRole_224":{"entryPoint":2053,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":4139,"id":201,"parameterSlots":2,"returnSlots":0},"@supportsInterface_3127":{"entryPoint":4307,"id":3127,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1423,"id":75,"parameterSlots":1,"returnSlots":1},"@symbol_865":{"entryPoint":3479,"id":865,"parameterSlots":0,"returnSlots":1},"@toHexString_2557":{"entryPoint":9117,"id":2557,"parameterSlots":2,"returnSlots":1},"@toHexString_2577":{"entryPoint":9072,"id":2577,"parameterSlots":1,"returnSlots":1},"@toTypedDataHash_2938":{"entryPoint":8437,"id":2938,"parameterSlots":2,"returnSlots":1},"@totalSupply_885":{"entryPoint":1726,"id":885,"parameterSlots":0,"returnSlots":1},"@transferFrom_1000":{"entryPoint":1916,"id":1000,"parameterSlots":3,"returnSlots":1},"@transfer_924":{"entryPoint":3751,"id":924,"parameterSlots":2,"returnSlots":1},"@tryRecover_2846":{"entryPoint":8488,"id":2846,"parameterSlots":4,"returnSlots":2},"@unpause_5406":{"entryPoint":2239,"id":5406,"parameterSlots":0,"returnSlots":0},"abi_decode_t_address":{"entryPoint":10132,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":10474,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":9761,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":10186,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":10724,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10907,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":10358,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":10745,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":10207,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":10495,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":10582,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":9782,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":12172,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":9839,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10540,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":14695,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":11876,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":9968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13452,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack":{"entryPoint":14930,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":15470,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":13125,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":13759,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack":{"entryPoint":15038,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":12617,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14650,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":12833,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack":{"entryPoint":12105,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":13271,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack":{"entryPoint":15184,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":14542,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":11755,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack":{"entryPoint":12325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":11146,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":12979,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":12471,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":11609,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13417,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":11997,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13542,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":11411,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":12725,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":10271,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":10659,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":14718,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":13577,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":13338,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":9854,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":10555,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":12187,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":13635,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":14773,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":11891,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10025,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14965,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15505,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13160,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13794,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15073,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12652,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12868,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12140,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13306,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15219,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14577,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11790,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12360,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11181,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13014,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12506,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11644,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12032,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11446,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12760,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":10286,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":10674,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":13873,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":9881,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9892,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13365,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11478,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":15251,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":14150,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":10091,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9827,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":10441,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":9694,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":11822,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":10059,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":10153,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":10646,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":14115,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":11842,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":14005,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":14291,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9909,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":15388,"id":null,"parameterSlots":1,"returnSlots":1},"divide_by_32_ceil":{"entryPoint":13894,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":11018,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":14263,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":11832,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":11260,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":14685,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":14233,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":11213,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":14842,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":10971,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":15341,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13826,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":14039,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9689,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9951,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":13910,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":14220,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":14091,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be":{"entryPoint":14889,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":15429,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":13046,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":13718,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77":{"entryPoint":14997,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":12538,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541":{"entryPoint":14609,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":12792,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd":{"entryPoint":12064,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":13192,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd":{"entryPoint":15105,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":14501,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":11676,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124":{"entryPoint":12284,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":11067,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":12900,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":12392,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":11530,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":13376,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":11918,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":13501,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":11332,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":12684,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":13923,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":14049,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":10109,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":10451,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":9738,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":10163,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":10701,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":14086,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:43347:30","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:30","statements":[{"nodeType":"YulAssignment","src":"57:19:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:30"},"nodeType":"YulFunctionCall","src":"67:9:30"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:30"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:30","type":""}],"src":"7:75:30"},{"body":{"nodeType":"YulBlock","src":"177:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:30"},"nodeType":"YulFunctionCall","src":"187:12:30"},"nodeType":"YulExpressionStatement","src":"187:12:30"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:30"},{"body":{"nodeType":"YulBlock","src":"300:28:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:30"},"nodeType":"YulFunctionCall","src":"310:12:30"},"nodeType":"YulExpressionStatement","src":"310:12:30"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:30"},{"body":{"nodeType":"YulBlock","src":"378:105:30","statements":[{"nodeType":"YulAssignment","src":"388:89:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:30"},"nodeType":"YulFunctionCall","src":"399:78:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:30"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:30","type":""}],"src":"334:149:30"},{"body":{"nodeType":"YulBlock","src":"531:78:30","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:30"},"nodeType":"YulFunctionCall","src":"589:12:30"},"nodeType":"YulExpressionStatement","src":"589:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:30"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:30"},"nodeType":"YulFunctionCall","src":"561:23:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:30"},"nodeType":"YulFunctionCall","src":"551:34:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:30"},"nodeType":"YulFunctionCall","src":"544:42:30"},"nodeType":"YulIf","src":"541:62:30"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:30","type":""}],"src":"489:120:30"},{"body":{"nodeType":"YulBlock","src":"666:86:30","statements":[{"nodeType":"YulAssignment","src":"676:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:30"},"nodeType":"YulFunctionCall","src":"685:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:30"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:30"},"nodeType":"YulFunctionCall","src":"714:32:30"},"nodeType":"YulExpressionStatement","src":"714:32:30"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:30","type":""}],"src":"615:137:30"},{"body":{"nodeType":"YulBlock","src":"823:262:30","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:30"},"nodeType":"YulFunctionCall","src":"871:79:30"},"nodeType":"YulExpressionStatement","src":"871:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:30"},"nodeType":"YulFunctionCall","src":"840:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:30"},"nodeType":"YulFunctionCall","src":"836:32:30"},"nodeType":"YulIf","src":"833:119:30"},{"nodeType":"YulBlock","src":"962:116:30","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:30","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:30"},"nodeType":"YulFunctionCall","src":"1036:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:30"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:30"},"nodeType":"YulFunctionCall","src":"1016:52:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:30","type":""}],"src":"758:327:30"},{"body":{"nodeType":"YulBlock","src":"1133:48:30","statements":[{"nodeType":"YulAssignment","src":"1143:32:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:30"},"nodeType":"YulFunctionCall","src":"1161:13:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:30"},"nodeType":"YulFunctionCall","src":"1154:21:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:30"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:30","type":""}],"src":"1091:90:30"},{"body":{"nodeType":"YulBlock","src":"1246:50:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:30"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:30"},"nodeType":"YulFunctionCall","src":"1268:21:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:30"},"nodeType":"YulFunctionCall","src":"1256:34:30"},"nodeType":"YulExpressionStatement","src":"1256:34:30"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:30","type":""}],"src":"1187:109:30"},{"body":{"nodeType":"YulBlock","src":"1394:118:30","statements":[{"nodeType":"YulAssignment","src":"1404:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:30"},"nodeType":"YulFunctionCall","src":"1412:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:30"},"nodeType":"YulFunctionCall","src":"1487:17:30"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:30"},"nodeType":"YulFunctionCall","src":"1440:65:30"},"nodeType":"YulExpressionStatement","src":"1440:65:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:30","type":""}],"src":"1302:210:30"},{"body":{"nodeType":"YulBlock","src":"1577:40:30","statements":[{"nodeType":"YulAssignment","src":"1588:22:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:30"},"nodeType":"YulFunctionCall","src":"1598:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:30"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:30","type":""}],"src":"1518:99:30"},{"body":{"nodeType":"YulBlock","src":"1719:73:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:30"},"nodeType":"YulFunctionCall","src":"1729:19:30"},"nodeType":"YulExpressionStatement","src":"1729:19:30"},{"nodeType":"YulAssignment","src":"1757:29:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:30"},"nodeType":"YulFunctionCall","src":"1772:14:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:30","type":""}],"src":"1623:169:30"},{"body":{"nodeType":"YulBlock","src":"1860:184:30","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:30"},"nodeType":"YulFunctionCall","src":"1960:11:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:30"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:30"},"nodeType":"YulFunctionCall","src":"1979:11:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:30"},"nodeType":"YulFunctionCall","src":"1973:18:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:30"},"nodeType":"YulFunctionCall","src":"1953:39:30"},"nodeType":"YulExpressionStatement","src":"1953:39:30"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:30"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:30"},"nodeType":"YulFunctionCall","src":"1897:13:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:30","statements":[{"nodeType":"YulAssignment","src":"1913:15:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:30"},"nodeType":"YulFunctionCall","src":"1918:10:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:30","statements":[]},"src":"1889:113:30"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:30"},"nodeType":"YulFunctionCall","src":"2018:16:30"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:30"},"nodeType":"YulFunctionCall","src":"2011:27:30"},"nodeType":"YulExpressionStatement","src":"2011:27:30"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:30","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:30","type":""}],"src":"1798:246:30"},{"body":{"nodeType":"YulBlock","src":"2098:54:30","statements":[{"nodeType":"YulAssignment","src":"2108:38:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:30"},"nodeType":"YulFunctionCall","src":"2122:14:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:30","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:30"},"nodeType":"YulFunctionCall","src":"2138:7:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:30"},"nodeType":"YulFunctionCall","src":"2118:28:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:30"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:30","type":""}],"src":"2050:102:30"},{"body":{"nodeType":"YulBlock","src":"2250:285:30","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:30"},"nodeType":"YulFunctionCall","src":"2274:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:30","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:30"},"nodeType":"YulFunctionCall","src":"2329:71:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:30"},"nodeType":"YulFunctionCall","src":"2444:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:30"},"nodeType":"YulFunctionCall","src":"2409:65:30"},"nodeType":"YulExpressionStatement","src":"2409:65:30"},{"nodeType":"YulAssignment","src":"2483:46:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:30"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:30"},"nodeType":"YulFunctionCall","src":"2499:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:30"},"nodeType":"YulFunctionCall","src":"2490:39:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:30","type":""}],"src":"2158:377:30"},{"body":{"nodeType":"YulBlock","src":"2659:195:30","statements":[{"nodeType":"YulAssignment","src":"2669:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:30"},"nodeType":"YulFunctionCall","src":"2677:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:30"},"nodeType":"YulFunctionCall","src":"2712:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:30"},"nodeType":"YulFunctionCall","src":"2731:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:30"},"nodeType":"YulFunctionCall","src":"2705:47:30"},"nodeType":"YulExpressionStatement","src":"2705:47:30"},{"nodeType":"YulAssignment","src":"2761:86:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:30"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:30"},"nodeType":"YulFunctionCall","src":"2769:78:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:30"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:30","type":""}],"src":"2541:313:30"},{"body":{"nodeType":"YulBlock","src":"2905:81:30","statements":[{"nodeType":"YulAssignment","src":"2915:65:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2930:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"2937:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2926:3:30"},"nodeType":"YulFunctionCall","src":"2926:54:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:30"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:30","type":""}],"src":"2860:126:30"},{"body":{"nodeType":"YulBlock","src":"3037:51:30","statements":[{"nodeType":"YulAssignment","src":"3047:35:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3076:5:30"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3058:17:30"},"nodeType":"YulFunctionCall","src":"3058:24:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3047:7:30"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3019:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3029:7:30","type":""}],"src":"2992:96:30"},{"body":{"nodeType":"YulBlock","src":"3137:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"3194:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3203:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3206:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3196:6:30"},"nodeType":"YulFunctionCall","src":"3196:12:30"},"nodeType":"YulExpressionStatement","src":"3196:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3160:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3185:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3167:17:30"},"nodeType":"YulFunctionCall","src":"3167:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3157:2:30"},"nodeType":"YulFunctionCall","src":"3157:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3150:6:30"},"nodeType":"YulFunctionCall","src":"3150:43:30"},"nodeType":"YulIf","src":"3147:63:30"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3130:5:30","type":""}],"src":"3094:122:30"},{"body":{"nodeType":"YulBlock","src":"3274:87:30","statements":[{"nodeType":"YulAssignment","src":"3284:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3306:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3293:12:30"},"nodeType":"YulFunctionCall","src":"3293:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3284:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3349:5:30"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3322:26:30"},"nodeType":"YulFunctionCall","src":"3322:33:30"},"nodeType":"YulExpressionStatement","src":"3322:33:30"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3252:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3260:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3268:5:30","type":""}],"src":"3222:139:30"},{"body":{"nodeType":"YulBlock","src":"3412:32:30","statements":[{"nodeType":"YulAssignment","src":"3422:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"3433:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3422:7:30"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3394:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3404:7:30","type":""}],"src":"3367:77:30"},{"body":{"nodeType":"YulBlock","src":"3493:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"3550:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3559:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3562:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3552:6:30"},"nodeType":"YulFunctionCall","src":"3552:12:30"},"nodeType":"YulExpressionStatement","src":"3552:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3516:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3541:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3523:17:30"},"nodeType":"YulFunctionCall","src":"3523:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3513:2:30"},"nodeType":"YulFunctionCall","src":"3513:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3506:6:30"},"nodeType":"YulFunctionCall","src":"3506:43:30"},"nodeType":"YulIf","src":"3503:63:30"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3486:5:30","type":""}],"src":"3450:122:30"},{"body":{"nodeType":"YulBlock","src":"3630:87:30","statements":[{"nodeType":"YulAssignment","src":"3640:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3662:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3649:12:30"},"nodeType":"YulFunctionCall","src":"3649:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3640:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3705:5:30"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3678:26:30"},"nodeType":"YulFunctionCall","src":"3678:33:30"},"nodeType":"YulExpressionStatement","src":"3678:33:30"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3608:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"3616:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3624:5:30","type":""}],"src":"3578:139:30"},{"body":{"nodeType":"YulBlock","src":"3806:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"3852:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3854:77:30"},"nodeType":"YulFunctionCall","src":"3854:79:30"},"nodeType":"YulExpressionStatement","src":"3854:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3827:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"3836:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3823:3:30"},"nodeType":"YulFunctionCall","src":"3823:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"3848:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3819:3:30"},"nodeType":"YulFunctionCall","src":"3819:32:30"},"nodeType":"YulIf","src":"3816:119:30"},{"nodeType":"YulBlock","src":"3945:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"3960:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"3974:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3964:6:30","type":""}]},{"nodeType":"YulAssignment","src":"3989:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4035:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:30"},"nodeType":"YulFunctionCall","src":"4020:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4044:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3999:20:30"},"nodeType":"YulFunctionCall","src":"3999:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3989:6:30"}]}]},{"nodeType":"YulBlock","src":"4072:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4087:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4101:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4091:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4117:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4152:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4163:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4148:3:30"},"nodeType":"YulFunctionCall","src":"4148:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4172:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4127:20:30"},"nodeType":"YulFunctionCall","src":"4127:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4117:6:30"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3768:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3779:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3791:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3799:6:30","type":""}],"src":"3723:474:30"},{"body":{"nodeType":"YulBlock","src":"4268:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4285:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4308:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4290:17:30"},"nodeType":"YulFunctionCall","src":"4290:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4278:6:30"},"nodeType":"YulFunctionCall","src":"4278:37:30"},"nodeType":"YulExpressionStatement","src":"4278:37:30"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4256:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4263:3:30","type":""}],"src":"4203:118:30"},{"body":{"nodeType":"YulBlock","src":"4425:124:30","statements":[{"nodeType":"YulAssignment","src":"4435:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4447:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4458:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4443:3:30"},"nodeType":"YulFunctionCall","src":"4443:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4435:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4515:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4528:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"4539:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4524:3:30"},"nodeType":"YulFunctionCall","src":"4524:17:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4471:43:30"},"nodeType":"YulFunctionCall","src":"4471:71:30"},"nodeType":"YulExpressionStatement","src":"4471:71:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4397:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4409:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4420:4:30","type":""}],"src":"4327:222:30"},{"body":{"nodeType":"YulBlock","src":"4621:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"4667:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4669:77:30"},"nodeType":"YulFunctionCall","src":"4669:79:30"},"nodeType":"YulExpressionStatement","src":"4669:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4642:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"4651:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4638:3:30"},"nodeType":"YulFunctionCall","src":"4638:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"4663:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4634:3:30"},"nodeType":"YulFunctionCall","src":"4634:32:30"},"nodeType":"YulIf","src":"4631:119:30"},{"nodeType":"YulBlock","src":"4760:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"4775:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"4789:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4779:6:30","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:30"},"nodeType":"YulFunctionCall","src":"4835:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4814:20:30"},"nodeType":"YulFunctionCall","src":"4814:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4804:6:30"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4591:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4602:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4614:6:30","type":""}],"src":"4555:329:30"},{"body":{"nodeType":"YulBlock","src":"4990:519:30","statements":[{"body":{"nodeType":"YulBlock","src":"5036:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5038:77:30"},"nodeType":"YulFunctionCall","src":"5038:79:30"},"nodeType":"YulExpressionStatement","src":"5038:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5011:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5007:3:30"},"nodeType":"YulFunctionCall","src":"5007:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5003:3:30"},"nodeType":"YulFunctionCall","src":"5003:32:30"},"nodeType":"YulIf","src":"5000:119:30"},{"nodeType":"YulBlock","src":"5129:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5144:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5158:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5148:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5173:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:30"},"nodeType":"YulFunctionCall","src":"5204:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5228:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5183:20:30"},"nodeType":"YulFunctionCall","src":"5183:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5173:6:30"}]}]},{"nodeType":"YulBlock","src":"5256:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5271:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5285:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5275:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5301:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5332:3:30"},"nodeType":"YulFunctionCall","src":"5332:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5356:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5311:20:30"},"nodeType":"YulFunctionCall","src":"5311:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5301:6:30"}]}]},{"nodeType":"YulBlock","src":"5384:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"5399:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"5413:2:30","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5403:6:30","type":""}]},{"nodeType":"YulAssignment","src":"5429:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5464:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5460:3:30"},"nodeType":"YulFunctionCall","src":"5460:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5484:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5439:20:30"},"nodeType":"YulFunctionCall","src":"5439:53:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5429:6:30"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4944:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4955:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4967:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4983:6:30","type":""}],"src":"4890:619:30"},{"body":{"nodeType":"YulBlock","src":"5560:32:30","statements":[{"nodeType":"YulAssignment","src":"5570:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"5581:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5570:7:30"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5542:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5552:7:30","type":""}],"src":"5515:77:30"},{"body":{"nodeType":"YulBlock","src":"5641:79:30","statements":[{"body":{"nodeType":"YulBlock","src":"5698:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5707:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5710:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5700:6:30"},"nodeType":"YulFunctionCall","src":"5700:12:30"},"nodeType":"YulExpressionStatement","src":"5700:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5664:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5689:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5671:17:30"},"nodeType":"YulFunctionCall","src":"5671:24:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5661:2:30"},"nodeType":"YulFunctionCall","src":"5661:35:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5654:6:30"},"nodeType":"YulFunctionCall","src":"5654:43:30"},"nodeType":"YulIf","src":"5651:63:30"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5634:5:30","type":""}],"src":"5598:122:30"},{"body":{"nodeType":"YulBlock","src":"5778:87:30","statements":[{"nodeType":"YulAssignment","src":"5788:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5810:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5797:12:30"},"nodeType":"YulFunctionCall","src":"5797:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5788:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5853:5:30"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"5826:26:30"},"nodeType":"YulFunctionCall","src":"5826:33:30"},"nodeType":"YulExpressionStatement","src":"5826:33:30"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5756:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"5764:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5772:5:30","type":""}],"src":"5726:139:30"},{"body":{"nodeType":"YulBlock","src":"5937:263:30","statements":[{"body":{"nodeType":"YulBlock","src":"5983:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5985:77:30"},"nodeType":"YulFunctionCall","src":"5985:79:30"},"nodeType":"YulExpressionStatement","src":"5985:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5958:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"5967:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5954:3:30"},"nodeType":"YulFunctionCall","src":"5954:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"5979:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5950:3:30"},"nodeType":"YulFunctionCall","src":"5950:32:30"},"nodeType":"YulIf","src":"5947:119:30"},{"nodeType":"YulBlock","src":"6076:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6091:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6105:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6095:6:30","type":""}]},{"nodeType":"YulAssignment","src":"6120:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6155:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6166:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6151:3:30"},"nodeType":"YulFunctionCall","src":"6151:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6175:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6130:20:30"},"nodeType":"YulFunctionCall","src":"6130:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6120:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5907:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5918:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5930:6:30","type":""}],"src":"5871:329:30"},{"body":{"nodeType":"YulBlock","src":"6271:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6288:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6311:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"6293:17:30"},"nodeType":"YulFunctionCall","src":"6293:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6281:6:30"},"nodeType":"YulFunctionCall","src":"6281:37:30"},"nodeType":"YulExpressionStatement","src":"6281:37:30"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6259:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6266:3:30","type":""}],"src":"6206:118:30"},{"body":{"nodeType":"YulBlock","src":"6428:124:30","statements":[{"nodeType":"YulAssignment","src":"6438:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6450:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6461:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6446:3:30"},"nodeType":"YulFunctionCall","src":"6446:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6438:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6518:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6531:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"6542:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6527:3:30"},"nodeType":"YulFunctionCall","src":"6527:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"6474:43:30"},"nodeType":"YulFunctionCall","src":"6474:71:30"},"nodeType":"YulExpressionStatement","src":"6474:71:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6400:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6412:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6423:4:30","type":""}],"src":"6330:222:30"},{"body":{"nodeType":"YulBlock","src":"6641:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"6687:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6689:77:30"},"nodeType":"YulFunctionCall","src":"6689:79:30"},"nodeType":"YulExpressionStatement","src":"6689:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6662:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"6671:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6658:3:30"},"nodeType":"YulFunctionCall","src":"6658:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"6683:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6654:3:30"},"nodeType":"YulFunctionCall","src":"6654:32:30"},"nodeType":"YulIf","src":"6651:119:30"},{"nodeType":"YulBlock","src":"6780:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6795:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6809:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6799:6:30","type":""}]},{"nodeType":"YulAssignment","src":"6824:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6859:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6870:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6855:3:30"},"nodeType":"YulFunctionCall","src":"6855:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6879:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6834:20:30"},"nodeType":"YulFunctionCall","src":"6834:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6824:6:30"}]}]},{"nodeType":"YulBlock","src":"6907:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"6922:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"6936:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6926:6:30","type":""}]},{"nodeType":"YulAssignment","src":"6952:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6987:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"6998:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6983:3:30"},"nodeType":"YulFunctionCall","src":"6983:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7007:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6962:20:30"},"nodeType":"YulFunctionCall","src":"6962:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6952:6:30"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6603:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6614:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6626:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6634:6:30","type":""}],"src":"6558:474:30"},{"body":{"nodeType":"YulBlock","src":"7081:43:30","statements":[{"nodeType":"YulAssignment","src":"7091:27:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7106:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"7113:4:30","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7102:3:30"},"nodeType":"YulFunctionCall","src":"7102:16:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7091:7:30"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7063:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7073:7:30","type":""}],"src":"7038:86:30"},{"body":{"nodeType":"YulBlock","src":"7191:51:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7208:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7229:5:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"7213:15:30"},"nodeType":"YulFunctionCall","src":"7213:22:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7201:6:30"},"nodeType":"YulFunctionCall","src":"7201:35:30"},"nodeType":"YulExpressionStatement","src":"7201:35:30"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7179:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7186:3:30","type":""}],"src":"7130:112:30"},{"body":{"nodeType":"YulBlock","src":"7342:120:30","statements":[{"nodeType":"YulAssignment","src":"7352:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7364:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7375:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7360:3:30"},"nodeType":"YulFunctionCall","src":"7360:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7352:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7428:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7441:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"7452:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7437:3:30"},"nodeType":"YulFunctionCall","src":"7437:17:30"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"7388:39:30"},"nodeType":"YulFunctionCall","src":"7388:67:30"},"nodeType":"YulExpressionStatement","src":"7388:67:30"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7314:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7326:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7337:4:30","type":""}],"src":"7248:214:30"},{"body":{"nodeType":"YulBlock","src":"7509:77:30","statements":[{"body":{"nodeType":"YulBlock","src":"7564:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7573:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7576:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7566:6:30"},"nodeType":"YulFunctionCall","src":"7566:12:30"},"nodeType":"YulExpressionStatement","src":"7566:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7532:5:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7555:5:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"7539:15:30"},"nodeType":"YulFunctionCall","src":"7539:22:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7529:2:30"},"nodeType":"YulFunctionCall","src":"7529:33:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7522:6:30"},"nodeType":"YulFunctionCall","src":"7522:41:30"},"nodeType":"YulIf","src":"7519:61:30"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7502:5:30","type":""}],"src":"7468:118:30"},{"body":{"nodeType":"YulBlock","src":"7642:85:30","statements":[{"nodeType":"YulAssignment","src":"7652:29:30","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7674:6:30"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7661:12:30"},"nodeType":"YulFunctionCall","src":"7661:20:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7652:5:30"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7715:5:30"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"7690:24:30"},"nodeType":"YulFunctionCall","src":"7690:31:30"},"nodeType":"YulExpressionStatement","src":"7690:31:30"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7620:6:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"7628:3:30","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7636:5:30","type":""}],"src":"7592:135:30"},{"body":{"nodeType":"YulBlock","src":"7899:1033:30","statements":[{"body":{"nodeType":"YulBlock","src":"7946:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7948:77:30"},"nodeType":"YulFunctionCall","src":"7948:79:30"},"nodeType":"YulExpressionStatement","src":"7948:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7920:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"7929:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7916:3:30"},"nodeType":"YulFunctionCall","src":"7916:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"7941:3:30","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7912:3:30"},"nodeType":"YulFunctionCall","src":"7912:33:30"},"nodeType":"YulIf","src":"7909:120:30"},{"nodeType":"YulBlock","src":"8039:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8054:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8068:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8058:6:30","type":""}]},{"nodeType":"YulAssignment","src":"8083:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8118:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8129:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8114:3:30"},"nodeType":"YulFunctionCall","src":"8114:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8138:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8093:20:30"},"nodeType":"YulFunctionCall","src":"8093:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8083:6:30"}]}]},{"nodeType":"YulBlock","src":"8166:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8181:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8195:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8185:6:30","type":""}]},{"nodeType":"YulAssignment","src":"8211:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8246:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8257:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8242:3:30"},"nodeType":"YulFunctionCall","src":"8242:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8266:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8221:20:30"},"nodeType":"YulFunctionCall","src":"8221:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8211:6:30"}]}]},{"nodeType":"YulBlock","src":"8294:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8309:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8323:2:30","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8313:6:30","type":""}]},{"nodeType":"YulAssignment","src":"8339:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8374:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8385:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8370:3:30"},"nodeType":"YulFunctionCall","src":"8370:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8394:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8349:20:30"},"nodeType":"YulFunctionCall","src":"8349:53:30"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8339:6:30"}]}]},{"nodeType":"YulBlock","src":"8422:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8437:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8451:2:30","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8441:6:30","type":""}]},{"nodeType":"YulAssignment","src":"8467:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8502:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8513:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8498:3:30"},"nodeType":"YulFunctionCall","src":"8498:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8522:7:30"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8477:20:30"},"nodeType":"YulFunctionCall","src":"8477:53:30"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8467:6:30"}]}]},{"nodeType":"YulBlock","src":"8550:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8565:17:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8579:3:30","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8569:6:30","type":""}]},{"nodeType":"YulAssignment","src":"8596:61:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8629:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8640:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8625:3:30"},"nodeType":"YulFunctionCall","src":"8625:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8649:7:30"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"8606:18:30"},"nodeType":"YulFunctionCall","src":"8606:51:30"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8596:6:30"}]}]},{"nodeType":"YulBlock","src":"8677:119:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8692:17:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8706:3:30","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8696:6:30","type":""}]},{"nodeType":"YulAssignment","src":"8723:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8758:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8769:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8754:3:30"},"nodeType":"YulFunctionCall","src":"8754:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8778:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"8733:20:30"},"nodeType":"YulFunctionCall","src":"8733:53:30"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"8723:6:30"}]}]},{"nodeType":"YulBlock","src":"8806:119:30","statements":[{"nodeType":"YulVariableDeclaration","src":"8821:17:30","value":{"kind":"number","nodeType":"YulLiteral","src":"8835:3:30","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8825:6:30","type":""}]},{"nodeType":"YulAssignment","src":"8852:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8887:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"8898:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8883:3:30"},"nodeType":"YulFunctionCall","src":"8883:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8907:7:30"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"8862:20:30"},"nodeType":"YulFunctionCall","src":"8862:53:30"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"8852:6:30"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7821:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7832:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7844:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7852:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7860:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7868:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7876:6:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7884:6:30","type":""},{"name":"value6","nodeType":"YulTypedName","src":"7892:6:30","type":""}],"src":"7733:1199:30"},{"body":{"nodeType":"YulBlock","src":"9021:391:30","statements":[{"body":{"nodeType":"YulBlock","src":"9067:83:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9069:77:30"},"nodeType":"YulFunctionCall","src":"9069:79:30"},"nodeType":"YulExpressionStatement","src":"9069:79:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9042:7:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"9051:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9038:3:30"},"nodeType":"YulFunctionCall","src":"9038:23:30"},{"kind":"number","nodeType":"YulLiteral","src":"9063:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9034:3:30"},"nodeType":"YulFunctionCall","src":"9034:32:30"},"nodeType":"YulIf","src":"9031:119:30"},{"nodeType":"YulBlock","src":"9160:117:30","statements":[{"nodeType":"YulVariableDeclaration","src":"9175:15:30","value":{"kind":"number","nodeType":"YulLiteral","src":"9189:1:30","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9179:6:30","type":""}]},{"nodeType":"YulAssignment","src":"9204:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9239:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"9250:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9235:3:30"},"nodeType":"YulFunctionCall","src":"9235:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9259:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9214:20:30"},"nodeType":"YulFunctionCall","src":"9214:53:30"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9204:6:30"}]}]},{"nodeType":"YulBlock","src":"9287:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"9302:16:30","value":{"kind":"number","nodeType":"YulLiteral","src":"9316:2:30","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9306:6:30","type":""}]},{"nodeType":"YulAssignment","src":"9332:63:30","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9367:9:30"},{"name":"offset","nodeType":"YulIdentifier","src":"9378:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9363:3:30"},"nodeType":"YulFunctionCall","src":"9363:22:30"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9387:7:30"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9342:20:30"},"nodeType":"YulFunctionCall","src":"9342:53:30"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9332:6:30"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8983:9:30","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8994:7:30","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9006:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9014:6:30","type":""}],"src":"8938:474:30"},{"body":{"nodeType":"YulBlock","src":"9446:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9463:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9466:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9456:6:30"},"nodeType":"YulFunctionCall","src":"9456:88:30"},"nodeType":"YulExpressionStatement","src":"9456:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9560:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9563:4:30","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9553:6:30"},"nodeType":"YulFunctionCall","src":"9553:15:30"},"nodeType":"YulExpressionStatement","src":"9553:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9584:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9587:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9577:6:30"},"nodeType":"YulFunctionCall","src":"9577:15:30"},"nodeType":"YulExpressionStatement","src":"9577:15:30"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"9418:180:30"},{"body":{"nodeType":"YulBlock","src":"9655:269:30","statements":[{"nodeType":"YulAssignment","src":"9665:22:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9679:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"9685:1:30","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9675:3:30"},"nodeType":"YulFunctionCall","src":"9675:12:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9665:6:30"}]},{"nodeType":"YulVariableDeclaration","src":"9696:38:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9726:4:30"},{"kind":"number","nodeType":"YulLiteral","src":"9732:1:30","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9722:3:30"},"nodeType":"YulFunctionCall","src":"9722:12:30"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"9700:18:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"9773:51:30","statements":[{"nodeType":"YulAssignment","src":"9787:27:30","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9801:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9809:4:30","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9797:3:30"},"nodeType":"YulFunctionCall","src":"9797:17:30"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9787:6:30"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9753:18:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9746:6:30"},"nodeType":"YulFunctionCall","src":"9746:26:30"},"nodeType":"YulIf","src":"9743:81:30"},{"body":{"nodeType":"YulBlock","src":"9876:42:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"9890:16:30"},"nodeType":"YulFunctionCall","src":"9890:18:30"},"nodeType":"YulExpressionStatement","src":"9890:18:30"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9840:18:30"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9863:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"9871:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9860:2:30"},"nodeType":"YulFunctionCall","src":"9860:14:30"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9837:2:30"},"nodeType":"YulFunctionCall","src":"9837:38:30"},"nodeType":"YulIf","src":"9834:84:30"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"9639:4:30","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9648:6:30","type":""}],"src":"9604:320:30"},{"body":{"nodeType":"YulBlock","src":"10036:125:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10058:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10066:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10054:3:30"},"nodeType":"YulFunctionCall","src":"10054:14:30"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"10070:34:30","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10047:6:30"},"nodeType":"YulFunctionCall","src":"10047:58:30"},"nodeType":"YulExpressionStatement","src":"10047:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10126:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"10134:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10122:3:30"},"nodeType":"YulFunctionCall","src":"10122:15:30"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"10139:14:30","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10115:6:30"},"nodeType":"YulFunctionCall","src":"10115:39:30"},"nodeType":"YulExpressionStatement","src":"10115:39:30"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10028:6:30","type":""}],"src":"9930:231:30"},{"body":{"nodeType":"YulBlock","src":"10313:220:30","statements":[{"nodeType":"YulAssignment","src":"10323:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10389:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"10394:2:30","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10330:58:30"},"nodeType":"YulFunctionCall","src":"10330:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10323:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10495:3:30"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"10406:88:30"},"nodeType":"YulFunctionCall","src":"10406:93:30"},"nodeType":"YulExpressionStatement","src":"10406:93:30"},{"nodeType":"YulAssignment","src":"10508:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10519:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"10524:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10515:3:30"},"nodeType":"YulFunctionCall","src":"10515:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10508:3:30"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10301:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10309:3:30","type":""}],"src":"10167:366:30"},{"body":{"nodeType":"YulBlock","src":"10710:248:30","statements":[{"nodeType":"YulAssignment","src":"10720:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10732:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10743:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10728:3:30"},"nodeType":"YulFunctionCall","src":"10728:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10720:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10767:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"10778:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10763:3:30"},"nodeType":"YulFunctionCall","src":"10763:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10786:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"10792:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10782:3:30"},"nodeType":"YulFunctionCall","src":"10782:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10756:6:30"},"nodeType":"YulFunctionCall","src":"10756:47:30"},"nodeType":"YulExpressionStatement","src":"10756:47:30"},{"nodeType":"YulAssignment","src":"10812:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10946:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10820:124:30"},"nodeType":"YulFunctionCall","src":"10820:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10812:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10690:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10705:4:30","type":""}],"src":"10539:419:30"},{"body":{"nodeType":"YulBlock","src":"10992:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11009:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11012:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11002:6:30"},"nodeType":"YulFunctionCall","src":"11002:88:30"},"nodeType":"YulExpressionStatement","src":"11002:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11106:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11109:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11099:6:30"},"nodeType":"YulFunctionCall","src":"11099:15:30"},"nodeType":"YulExpressionStatement","src":"11099:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11130:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11133:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11123:6:30"},"nodeType":"YulFunctionCall","src":"11123:15:30"},"nodeType":"YulExpressionStatement","src":"11123:15:30"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10964:180:30"},{"body":{"nodeType":"YulBlock","src":"11193:190:30","statements":[{"nodeType":"YulAssignment","src":"11203:33:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11230:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11212:17:30"},"nodeType":"YulFunctionCall","src":"11212:24:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11203:5:30"}]},{"body":{"nodeType":"YulBlock","src":"11326:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11328:16:30"},"nodeType":"YulFunctionCall","src":"11328:18:30"},"nodeType":"YulExpressionStatement","src":"11328:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11251:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11258:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11248:2:30"},"nodeType":"YulFunctionCall","src":"11248:77:30"},"nodeType":"YulIf","src":"11245:103:30"},{"nodeType":"YulAssignment","src":"11357:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11368:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"11375:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11364:3:30"},"nodeType":"YulFunctionCall","src":"11364:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11357:3:30"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11179:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11189:3:30","type":""}],"src":"11150:233:30"},{"body":{"nodeType":"YulBlock","src":"11495:128:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11517:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11525:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11513:3:30"},"nodeType":"YulFunctionCall","src":"11513:14:30"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"11529:34:30","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11506:6:30"},"nodeType":"YulFunctionCall","src":"11506:58:30"},"nodeType":"YulExpressionStatement","src":"11506:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11585:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"11593:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11581:3:30"},"nodeType":"YulFunctionCall","src":"11581:15:30"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"11598:17:30","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11574:6:30"},"nodeType":"YulFunctionCall","src":"11574:42:30"},"nodeType":"YulExpressionStatement","src":"11574:42:30"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11487:6:30","type":""}],"src":"11389:234:30"},{"body":{"nodeType":"YulBlock","src":"11775:220:30","statements":[{"nodeType":"YulAssignment","src":"11785:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11851:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11856:2:30","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11792:58:30"},"nodeType":"YulFunctionCall","src":"11792:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11785:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11957:3:30"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"11868:88:30"},"nodeType":"YulFunctionCall","src":"11868:93:30"},"nodeType":"YulExpressionStatement","src":"11868:93:30"},{"nodeType":"YulAssignment","src":"11970:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11981:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"11986:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11977:3:30"},"nodeType":"YulFunctionCall","src":"11977:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11970:3:30"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11763:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11771:3:30","type":""}],"src":"11629:366:30"},{"body":{"nodeType":"YulBlock","src":"12172:248:30","statements":[{"nodeType":"YulAssignment","src":"12182:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12194:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12205:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12190:3:30"},"nodeType":"YulFunctionCall","src":"12190:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12182:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12229:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"12240:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12225:3:30"},"nodeType":"YulFunctionCall","src":"12225:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12248:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"12254:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12244:3:30"},"nodeType":"YulFunctionCall","src":"12244:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12218:6:30"},"nodeType":"YulFunctionCall","src":"12218:47:30"},"nodeType":"YulExpressionStatement","src":"12218:47:30"},{"nodeType":"YulAssignment","src":"12274:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12408:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12282:124:30"},"nodeType":"YulFunctionCall","src":"12282:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12274:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12152:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12167:4:30","type":""}],"src":"12001:419:30"},{"body":{"nodeType":"YulBlock","src":"12470:147:30","statements":[{"nodeType":"YulAssignment","src":"12480:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12503:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12485:17:30"},"nodeType":"YulFunctionCall","src":"12485:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"12480:1:30"}]},{"nodeType":"YulAssignment","src":"12514:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12537:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12519:17:30"},"nodeType":"YulFunctionCall","src":"12519:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"12514:1:30"}]},{"nodeType":"YulAssignment","src":"12548:16:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12559:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"12562:1:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12555:3:30"},"nodeType":"YulFunctionCall","src":"12555:9:30"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"12548:3:30"}]},{"body":{"nodeType":"YulBlock","src":"12588:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12590:16:30"},"nodeType":"YulFunctionCall","src":"12590:18:30"},"nodeType":"YulExpressionStatement","src":"12590:18:30"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12580:1:30"},{"name":"sum","nodeType":"YulIdentifier","src":"12583:3:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12577:2:30"},"nodeType":"YulFunctionCall","src":"12577:10:30"},"nodeType":"YulIf","src":"12574:36:30"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12457:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"12460:1:30","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"12466:3:30","type":""}],"src":"12426:191:30"},{"body":{"nodeType":"YulBlock","src":"12729:124:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12751:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12759:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12747:3:30"},"nodeType":"YulFunctionCall","src":"12747:14:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"12763:34:30","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12740:6:30"},"nodeType":"YulFunctionCall","src":"12740:58:30"},"nodeType":"YulExpressionStatement","src":"12740:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12819:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"12827:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12815:3:30"},"nodeType":"YulFunctionCall","src":"12815:15:30"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"12832:13:30","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12808:6:30"},"nodeType":"YulFunctionCall","src":"12808:38:30"},"nodeType":"YulExpressionStatement","src":"12808:38:30"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12721:6:30","type":""}],"src":"12623:230:30"},{"body":{"nodeType":"YulBlock","src":"13005:220:30","statements":[{"nodeType":"YulAssignment","src":"13015:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13081:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"13086:2:30","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13022:58:30"},"nodeType":"YulFunctionCall","src":"13022:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13015:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13187:3:30"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"13098:88:30"},"nodeType":"YulFunctionCall","src":"13098:93:30"},"nodeType":"YulExpressionStatement","src":"13098:93:30"},{"nodeType":"YulAssignment","src":"13200:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13211:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"13216:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13207:3:30"},"nodeType":"YulFunctionCall","src":"13207:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13200:3:30"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12993:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13001:3:30","type":""}],"src":"12859:366:30"},{"body":{"nodeType":"YulBlock","src":"13402:248:30","statements":[{"nodeType":"YulAssignment","src":"13412:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13424:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13435:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13420:3:30"},"nodeType":"YulFunctionCall","src":"13420:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13412:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13459:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"13470:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13455:3:30"},"nodeType":"YulFunctionCall","src":"13455:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13478:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"13484:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13474:3:30"},"nodeType":"YulFunctionCall","src":"13474:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13448:6:30"},"nodeType":"YulFunctionCall","src":"13448:47:30"},"nodeType":"YulExpressionStatement","src":"13448:47:30"},{"nodeType":"YulAssignment","src":"13504:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13638:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13512:124:30"},"nodeType":"YulFunctionCall","src":"13512:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13504:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13382:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13397:4:30","type":""}],"src":"13231:419:30"},{"body":{"nodeType":"YulBlock","src":"13762:127:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13784:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13792:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13780:3:30"},"nodeType":"YulFunctionCall","src":"13780:14:30"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"13796:34:30","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13773:6:30"},"nodeType":"YulFunctionCall","src":"13773:58:30"},"nodeType":"YulExpressionStatement","src":"13773:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13852:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"13860:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13848:3:30"},"nodeType":"YulFunctionCall","src":"13848:15:30"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"13865:16:30","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13841:6:30"},"nodeType":"YulFunctionCall","src":"13841:41:30"},"nodeType":"YulExpressionStatement","src":"13841:41:30"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13754:6:30","type":""}],"src":"13656:233:30"},{"body":{"nodeType":"YulBlock","src":"14041:220:30","statements":[{"nodeType":"YulAssignment","src":"14051:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14117:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"14122:2:30","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14058:58:30"},"nodeType":"YulFunctionCall","src":"14058:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14051:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14223:3:30"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"14134:88:30"},"nodeType":"YulFunctionCall","src":"14134:93:30"},"nodeType":"YulExpressionStatement","src":"14134:93:30"},{"nodeType":"YulAssignment","src":"14236:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14247:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"14252:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14243:3:30"},"nodeType":"YulFunctionCall","src":"14243:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14236:3:30"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14029:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14037:3:30","type":""}],"src":"13895:366:30"},{"body":{"nodeType":"YulBlock","src":"14438:248:30","statements":[{"nodeType":"YulAssignment","src":"14448:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14460:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14471:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14456:3:30"},"nodeType":"YulFunctionCall","src":"14456:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14448:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14495:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"14506:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14491:3:30"},"nodeType":"YulFunctionCall","src":"14491:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14514:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"14520:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14510:3:30"},"nodeType":"YulFunctionCall","src":"14510:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14484:6:30"},"nodeType":"YulFunctionCall","src":"14484:47:30"},"nodeType":"YulExpressionStatement","src":"14484:47:30"},{"nodeType":"YulAssignment","src":"14540:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14674:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14548:124:30"},"nodeType":"YulFunctionCall","src":"14548:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14540:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14418:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14433:4:30","type":""}],"src":"14267:419:30"},{"body":{"nodeType":"YulBlock","src":"14745:32:30","statements":[{"nodeType":"YulAssignment","src":"14755:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"14766:5:30"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"14755:7:30"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14727:5:30","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"14737:7:30","type":""}],"src":"14692:85:30"},{"body":{"nodeType":"YulBlock","src":"14815:28:30","statements":[{"nodeType":"YulAssignment","src":"14825:12:30","value":{"name":"value","nodeType":"YulIdentifier","src":"14832:5:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14825:3:30"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14801:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"14811:3:30","type":""}],"src":"14783:60:30"},{"body":{"nodeType":"YulBlock","src":"14915:88:30","statements":[{"nodeType":"YulAssignment","src":"14925:72:30","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14989:5:30"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"14963:25:30"},"nodeType":"YulFunctionCall","src":"14963:32:30"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"14954:8:30"},"nodeType":"YulFunctionCall","src":"14954:42:30"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"14938:15:30"},"nodeType":"YulFunctionCall","src":"14938:59:30"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"14925:9:30"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14895:5:30","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"14905:9:30","type":""}],"src":"14849:154:30"},{"body":{"nodeType":"YulBlock","src":"15080:72:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15097:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15139:5:30"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"15102:36:30"},"nodeType":"YulFunctionCall","src":"15102:43:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15090:6:30"},"nodeType":"YulFunctionCall","src":"15090:56:30"},"nodeType":"YulExpressionStatement","src":"15090:56:30"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15068:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15075:3:30","type":""}],"src":"15009:143:30"},{"body":{"nodeType":"YulBlock","src":"15262:130:30","statements":[{"nodeType":"YulAssignment","src":"15272:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15284:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15295:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15280:3:30"},"nodeType":"YulFunctionCall","src":"15280:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15272:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15358:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15371:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"15382:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15367:3:30"},"nodeType":"YulFunctionCall","src":"15367:17:30"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"15308:49:30"},"nodeType":"YulFunctionCall","src":"15308:77:30"},"nodeType":"YulExpressionStatement","src":"15308:77:30"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15234:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15246:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15257:4:30","type":""}],"src":"15158:234:30"},{"body":{"nodeType":"YulBlock","src":"15504:118:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15526:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15534:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15522:3:30"},"nodeType":"YulFunctionCall","src":"15522:14:30"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"15538:34:30","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15515:6:30"},"nodeType":"YulFunctionCall","src":"15515:58:30"},"nodeType":"YulExpressionStatement","src":"15515:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15594:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"15602:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15590:3:30"},"nodeType":"YulFunctionCall","src":"15590:15:30"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"15607:7:30","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15583:6:30"},"nodeType":"YulFunctionCall","src":"15583:32:30"},"nodeType":"YulExpressionStatement","src":"15583:32:30"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15496:6:30","type":""}],"src":"15398:224:30"},{"body":{"nodeType":"YulBlock","src":"15774:220:30","statements":[{"nodeType":"YulAssignment","src":"15784:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15850:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"15855:2:30","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15791:58:30"},"nodeType":"YulFunctionCall","src":"15791:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15784:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15956:3:30"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"15867:88:30"},"nodeType":"YulFunctionCall","src":"15867:93:30"},"nodeType":"YulExpressionStatement","src":"15867:93:30"},{"nodeType":"YulAssignment","src":"15969:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15980:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"15985:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15976:3:30"},"nodeType":"YulFunctionCall","src":"15976:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15969:3:30"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15762:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15770:3:30","type":""}],"src":"15628:366:30"},{"body":{"nodeType":"YulBlock","src":"16171:248:30","statements":[{"nodeType":"YulAssignment","src":"16181:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16193:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16204:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16189:3:30"},"nodeType":"YulFunctionCall","src":"16189:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16181:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16228:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"16239:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16224:3:30"},"nodeType":"YulFunctionCall","src":"16224:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16247:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"16253:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16243:3:30"},"nodeType":"YulFunctionCall","src":"16243:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16217:6:30"},"nodeType":"YulFunctionCall","src":"16217:47:30"},"nodeType":"YulExpressionStatement","src":"16217:47:30"},{"nodeType":"YulAssignment","src":"16273:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16407:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16281:124:30"},"nodeType":"YulFunctionCall","src":"16281:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16273:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16151:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16166:4:30","type":""}],"src":"16000:419:30"},{"body":{"nodeType":"YulBlock","src":"16531:73:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16553:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"16561:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16549:3:30"},"nodeType":"YulFunctionCall","src":"16549:14:30"},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","kind":"string","nodeType":"YulLiteral","src":"16565:31:30","type":"","value":"ERC20Permit: expired deadline"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16542:6:30"},"nodeType":"YulFunctionCall","src":"16542:55:30"},"nodeType":"YulExpressionStatement","src":"16542:55:30"}]},"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16523:6:30","type":""}],"src":"16425:179:30"},{"body":{"nodeType":"YulBlock","src":"16756:220:30","statements":[{"nodeType":"YulAssignment","src":"16766:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16832:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"16837:2:30","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16773:58:30"},"nodeType":"YulFunctionCall","src":"16773:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16766:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16938:3:30"}],"functionName":{"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulIdentifier","src":"16849:88:30"},"nodeType":"YulFunctionCall","src":"16849:93:30"},"nodeType":"YulExpressionStatement","src":"16849:93:30"},{"nodeType":"YulAssignment","src":"16951:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16962:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"16967:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16958:3:30"},"nodeType":"YulFunctionCall","src":"16958:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16951:3:30"}]}]},"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16744:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16752:3:30","type":""}],"src":"16610:366:30"},{"body":{"nodeType":"YulBlock","src":"17153:248:30","statements":[{"nodeType":"YulAssignment","src":"17163:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17175:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17186:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17171:3:30"},"nodeType":"YulFunctionCall","src":"17171:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17163:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17210:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17221:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17206:3:30"},"nodeType":"YulFunctionCall","src":"17206:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17229:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"17235:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17225:3:30"},"nodeType":"YulFunctionCall","src":"17225:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17199:6:30"},"nodeType":"YulFunctionCall","src":"17199:47:30"},"nodeType":"YulExpressionStatement","src":"17199:47:30"},{"nodeType":"YulAssignment","src":"17255:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17389:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17263:124:30"},"nodeType":"YulFunctionCall","src":"17263:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17255:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17133:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17148:4:30","type":""}],"src":"16982:419:30"},{"body":{"nodeType":"YulBlock","src":"17472:53:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17489:3:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17512:5:30"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"17494:17:30"},"nodeType":"YulFunctionCall","src":"17494:24:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17482:6:30"},"nodeType":"YulFunctionCall","src":"17482:37:30"},"nodeType":"YulExpressionStatement","src":"17482:37:30"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17460:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17467:3:30","type":""}],"src":"17407:118:30"},{"body":{"nodeType":"YulBlock","src":"17769:537:30","statements":[{"nodeType":"YulAssignment","src":"17779:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17791:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17802:3:30","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17787:3:30"},"nodeType":"YulFunctionCall","src":"17787:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17779:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17860:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17873:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17884:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17869:3:30"},"nodeType":"YulFunctionCall","src":"17869:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"17816:43:30"},"nodeType":"YulFunctionCall","src":"17816:71:30"},"nodeType":"YulExpressionStatement","src":"17816:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17941:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17954:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"17965:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17950:3:30"},"nodeType":"YulFunctionCall","src":"17950:18:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"17897:43:30"},"nodeType":"YulFunctionCall","src":"17897:72:30"},"nodeType":"YulExpressionStatement","src":"17897:72:30"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18023:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18036:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18047:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18032:3:30"},"nodeType":"YulFunctionCall","src":"18032:18:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"17979:43:30"},"nodeType":"YulFunctionCall","src":"17979:72:30"},"nodeType":"YulExpressionStatement","src":"17979:72:30"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"18105:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18118:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18129:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18114:3:30"},"nodeType":"YulFunctionCall","src":"18114:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18061:43:30"},"nodeType":"YulFunctionCall","src":"18061:72:30"},"nodeType":"YulExpressionStatement","src":"18061:72:30"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"18187:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18200:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18211:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18196:3:30"},"nodeType":"YulFunctionCall","src":"18196:19:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18143:43:30"},"nodeType":"YulFunctionCall","src":"18143:73:30"},"nodeType":"YulExpressionStatement","src":"18143:73:30"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"18270:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18283:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"18294:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18279:3:30"},"nodeType":"YulFunctionCall","src":"18279:19:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18226:43:30"},"nodeType":"YulFunctionCall","src":"18226:73:30"},"nodeType":"YulExpressionStatement","src":"18226:73:30"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17701:9:30","type":""},{"name":"value5","nodeType":"YulTypedName","src":"17713:6:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"17721:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17729:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17737:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17745:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17753:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17764:4:30","type":""}],"src":"17531:775:30"},{"body":{"nodeType":"YulBlock","src":"18418:74:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18440:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"18448:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18436:3:30"},"nodeType":"YulFunctionCall","src":"18436:14:30"},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"18452:32:30","type":"","value":"ERC20Permit: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18429:6:30"},"nodeType":"YulFunctionCall","src":"18429:56:30"},"nodeType":"YulExpressionStatement","src":"18429:56:30"}]},"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18410:6:30","type":""}],"src":"18312:180:30"},{"body":{"nodeType":"YulBlock","src":"18644:220:30","statements":[{"nodeType":"YulAssignment","src":"18654:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18720:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"18725:2:30","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18661:58:30"},"nodeType":"YulFunctionCall","src":"18661:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18654:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18826:3:30"}],"functionName":{"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulIdentifier","src":"18737:88:30"},"nodeType":"YulFunctionCall","src":"18737:93:30"},"nodeType":"YulExpressionStatement","src":"18737:93:30"},{"nodeType":"YulAssignment","src":"18839:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18850:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"18855:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18846:3:30"},"nodeType":"YulFunctionCall","src":"18846:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18839:3:30"}]}]},"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18632:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18640:3:30","type":""}],"src":"18498:366:30"},{"body":{"nodeType":"YulBlock","src":"19041:248:30","statements":[{"nodeType":"YulAssignment","src":"19051:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19063:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19074:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19059:3:30"},"nodeType":"YulFunctionCall","src":"19059:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19051:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19098:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"19109:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19094:3:30"},"nodeType":"YulFunctionCall","src":"19094:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19117:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"19123:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19113:3:30"},"nodeType":"YulFunctionCall","src":"19113:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19087:6:30"},"nodeType":"YulFunctionCall","src":"19087:47:30"},"nodeType":"YulExpressionStatement","src":"19087:47:30"},{"nodeType":"YulAssignment","src":"19143:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19277:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19151:124:30"},"nodeType":"YulFunctionCall","src":"19151:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19143:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19021:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19036:4:30","type":""}],"src":"18870:419:30"},{"body":{"nodeType":"YulBlock","src":"19401:117:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19423:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"19431:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19419:3:30"},"nodeType":"YulFunctionCall","src":"19419:14:30"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"19435:34:30","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19412:6:30"},"nodeType":"YulFunctionCall","src":"19412:58:30"},"nodeType":"YulExpressionStatement","src":"19412:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19491:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"19499:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19487:3:30"},"nodeType":"YulFunctionCall","src":"19487:15:30"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"19504:6:30","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19480:6:30"},"nodeType":"YulFunctionCall","src":"19480:31:30"},"nodeType":"YulExpressionStatement","src":"19480:31:30"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19393:6:30","type":""}],"src":"19295:223:30"},{"body":{"nodeType":"YulBlock","src":"19670:220:30","statements":[{"nodeType":"YulAssignment","src":"19680:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19746:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"19751:2:30","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19687:58:30"},"nodeType":"YulFunctionCall","src":"19687:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19680:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19852:3:30"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"19763:88:30"},"nodeType":"YulFunctionCall","src":"19763:93:30"},"nodeType":"YulExpressionStatement","src":"19763:93:30"},{"nodeType":"YulAssignment","src":"19865:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19876:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"19881:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19872:3:30"},"nodeType":"YulFunctionCall","src":"19872:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19865:3:30"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19658:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19666:3:30","type":""}],"src":"19524:366:30"},{"body":{"nodeType":"YulBlock","src":"20067:248:30","statements":[{"nodeType":"YulAssignment","src":"20077:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20089:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20100:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20085:3:30"},"nodeType":"YulFunctionCall","src":"20085:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20077:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20124:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"20135:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20120:3:30"},"nodeType":"YulFunctionCall","src":"20120:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20143:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"20149:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20139:3:30"},"nodeType":"YulFunctionCall","src":"20139:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20113:6:30"},"nodeType":"YulFunctionCall","src":"20113:47:30"},"nodeType":"YulExpressionStatement","src":"20113:47:30"},{"nodeType":"YulAssignment","src":"20169:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20303:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20177:124:30"},"nodeType":"YulFunctionCall","src":"20177:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20169:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20047:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20062:4:30","type":""}],"src":"19896:419:30"},{"body":{"nodeType":"YulBlock","src":"20427:115:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20449:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"20457:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20445:3:30"},"nodeType":"YulFunctionCall","src":"20445:14:30"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"20461:34:30","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20438:6:30"},"nodeType":"YulFunctionCall","src":"20438:58:30"},"nodeType":"YulExpressionStatement","src":"20438:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20517:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"20525:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20513:3:30"},"nodeType":"YulFunctionCall","src":"20513:15:30"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"20530:4:30","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20506:6:30"},"nodeType":"YulFunctionCall","src":"20506:29:30"},"nodeType":"YulExpressionStatement","src":"20506:29:30"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20419:6:30","type":""}],"src":"20321:221:30"},{"body":{"nodeType":"YulBlock","src":"20694:220:30","statements":[{"nodeType":"YulAssignment","src":"20704:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20770:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20775:2:30","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20711:58:30"},"nodeType":"YulFunctionCall","src":"20711:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20704:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20876:3:30"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"20787:88:30"},"nodeType":"YulFunctionCall","src":"20787:93:30"},"nodeType":"YulExpressionStatement","src":"20787:93:30"},{"nodeType":"YulAssignment","src":"20889:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20900:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"20905:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20896:3:30"},"nodeType":"YulFunctionCall","src":"20896:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20889:3:30"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20682:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20690:3:30","type":""}],"src":"20548:366:30"},{"body":{"nodeType":"YulBlock","src":"21091:248:30","statements":[{"nodeType":"YulAssignment","src":"21101:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21113:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21124:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21109:3:30"},"nodeType":"YulFunctionCall","src":"21109:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21101:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21148:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"21159:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21144:3:30"},"nodeType":"YulFunctionCall","src":"21144:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21167:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"21173:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21163:3:30"},"nodeType":"YulFunctionCall","src":"21163:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21137:6:30"},"nodeType":"YulFunctionCall","src":"21137:47:30"},"nodeType":"YulExpressionStatement","src":"21137:47:30"},{"nodeType":"YulAssignment","src":"21193:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21327:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21201:124:30"},"nodeType":"YulFunctionCall","src":"21201:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21193:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21071:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21086:4:30","type":""}],"src":"20920:419:30"},{"body":{"nodeType":"YulBlock","src":"21451:75:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21473:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"21481:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21469:3:30"},"nodeType":"YulFunctionCall","src":"21469:14:30"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"21485:33:30","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21462:6:30"},"nodeType":"YulFunctionCall","src":"21462:57:30"},"nodeType":"YulExpressionStatement","src":"21462:57:30"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21443:6:30","type":""}],"src":"21345:181:30"},{"body":{"nodeType":"YulBlock","src":"21678:220:30","statements":[{"nodeType":"YulAssignment","src":"21688:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21754:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"21759:2:30","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21695:58:30"},"nodeType":"YulFunctionCall","src":"21695:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21688:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21860:3:30"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"21771:88:30"},"nodeType":"YulFunctionCall","src":"21771:93:30"},"nodeType":"YulExpressionStatement","src":"21771:93:30"},{"nodeType":"YulAssignment","src":"21873:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21884:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"21889:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21880:3:30"},"nodeType":"YulFunctionCall","src":"21880:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21873:3:30"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21666:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21674:3:30","type":""}],"src":"21532:366:30"},{"body":{"nodeType":"YulBlock","src":"22075:248:30","statements":[{"nodeType":"YulAssignment","src":"22085:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22097:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22108:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22093:3:30"},"nodeType":"YulFunctionCall","src":"22093:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22085:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22132:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"22143:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22128:3:30"},"nodeType":"YulFunctionCall","src":"22128:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22151:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"22157:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22147:3:30"},"nodeType":"YulFunctionCall","src":"22147:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22121:6:30"},"nodeType":"YulFunctionCall","src":"22121:47:30"},"nodeType":"YulExpressionStatement","src":"22121:47:30"},{"nodeType":"YulAssignment","src":"22177:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22311:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22185:124:30"},"nodeType":"YulFunctionCall","src":"22185:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22177:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22055:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22070:4:30","type":""}],"src":"21904:419:30"},{"body":{"nodeType":"YulBlock","src":"22435:73:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22457:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"22465:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22453:3:30"},"nodeType":"YulFunctionCall","src":"22453:14:30"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"22469:31:30","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22446:6:30"},"nodeType":"YulFunctionCall","src":"22446:55:30"},"nodeType":"YulExpressionStatement","src":"22446:55:30"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22427:6:30","type":""}],"src":"22329:179:30"},{"body":{"nodeType":"YulBlock","src":"22660:220:30","statements":[{"nodeType":"YulAssignment","src":"22670:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22736:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"22741:2:30","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22677:58:30"},"nodeType":"YulFunctionCall","src":"22677:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22670:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22842:3:30"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"22753:88:30"},"nodeType":"YulFunctionCall","src":"22753:93:30"},"nodeType":"YulExpressionStatement","src":"22753:93:30"},{"nodeType":"YulAssignment","src":"22855:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22866:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"22871:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22862:3:30"},"nodeType":"YulFunctionCall","src":"22862:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22855:3:30"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22648:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22656:3:30","type":""}],"src":"22514:366:30"},{"body":{"nodeType":"YulBlock","src":"23057:248:30","statements":[{"nodeType":"YulAssignment","src":"23067:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23079:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23090:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23075:3:30"},"nodeType":"YulFunctionCall","src":"23075:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23067:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23114:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"23125:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23110:3:30"},"nodeType":"YulFunctionCall","src":"23110:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23133:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"23139:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23129:3:30"},"nodeType":"YulFunctionCall","src":"23129:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23103:6:30"},"nodeType":"YulFunctionCall","src":"23103:47:30"},"nodeType":"YulExpressionStatement","src":"23103:47:30"},{"nodeType":"YulAssignment","src":"23159:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23293:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23167:124:30"},"nodeType":"YulFunctionCall","src":"23167:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23159:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23037:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23052:4:30","type":""}],"src":"22886:419:30"},{"body":{"nodeType":"YulBlock","src":"23417:118:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23439:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"23447:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23435:3:30"},"nodeType":"YulFunctionCall","src":"23435:14:30"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"23451:34:30","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23428:6:30"},"nodeType":"YulFunctionCall","src":"23428:58:30"},"nodeType":"YulExpressionStatement","src":"23428:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23507:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"23515:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23503:3:30"},"nodeType":"YulFunctionCall","src":"23503:15:30"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"23520:7:30","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23496:6:30"},"nodeType":"YulFunctionCall","src":"23496:32:30"},"nodeType":"YulExpressionStatement","src":"23496:32:30"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23409:6:30","type":""}],"src":"23311:224:30"},{"body":{"nodeType":"YulBlock","src":"23687:220:30","statements":[{"nodeType":"YulAssignment","src":"23697:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23763:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23768:2:30","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23704:58:30"},"nodeType":"YulFunctionCall","src":"23704:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23697:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23869:3:30"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"23780:88:30"},"nodeType":"YulFunctionCall","src":"23780:93:30"},"nodeType":"YulExpressionStatement","src":"23780:93:30"},{"nodeType":"YulAssignment","src":"23882:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23893:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"23898:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23889:3:30"},"nodeType":"YulFunctionCall","src":"23889:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23882:3:30"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23675:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23683:3:30","type":""}],"src":"23541:366:30"},{"body":{"nodeType":"YulBlock","src":"24084:248:30","statements":[{"nodeType":"YulAssignment","src":"24094:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24106:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24117:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24102:3:30"},"nodeType":"YulFunctionCall","src":"24102:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24094:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24141:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"24152:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24137:3:30"},"nodeType":"YulFunctionCall","src":"24137:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24160:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"24166:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24156:3:30"},"nodeType":"YulFunctionCall","src":"24156:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24130:6:30"},"nodeType":"YulFunctionCall","src":"24130:47:30"},"nodeType":"YulExpressionStatement","src":"24130:47:30"},{"nodeType":"YulAssignment","src":"24186:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24320:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24194:124:30"},"nodeType":"YulFunctionCall","src":"24194:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24186:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24064:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24079:4:30","type":""}],"src":"23913:419:30"},{"body":{"nodeType":"YulBlock","src":"24444:116:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24466:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"24474:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24462:3:30"},"nodeType":"YulFunctionCall","src":"24462:14:30"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"24478:34:30","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24455:6:30"},"nodeType":"YulFunctionCall","src":"24455:58:30"},"nodeType":"YulExpressionStatement","src":"24455:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24534:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"24542:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24530:3:30"},"nodeType":"YulFunctionCall","src":"24530:15:30"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"24547:5:30","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24523:6:30"},"nodeType":"YulFunctionCall","src":"24523:30:30"},"nodeType":"YulExpressionStatement","src":"24523:30:30"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24436:6:30","type":""}],"src":"24338:222:30"},{"body":{"nodeType":"YulBlock","src":"24712:220:30","statements":[{"nodeType":"YulAssignment","src":"24722:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24788:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"24793:2:30","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24729:58:30"},"nodeType":"YulFunctionCall","src":"24729:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24722:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24894:3:30"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"24805:88:30"},"nodeType":"YulFunctionCall","src":"24805:93:30"},"nodeType":"YulExpressionStatement","src":"24805:93:30"},{"nodeType":"YulAssignment","src":"24907:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24918:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"24923:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24914:3:30"},"nodeType":"YulFunctionCall","src":"24914:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24907:3:30"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24700:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24708:3:30","type":""}],"src":"24566:366:30"},{"body":{"nodeType":"YulBlock","src":"25109:248:30","statements":[{"nodeType":"YulAssignment","src":"25119:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25131:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25142:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25127:3:30"},"nodeType":"YulFunctionCall","src":"25127:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25119:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25166:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"25177:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25162:3:30"},"nodeType":"YulFunctionCall","src":"25162:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25185:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"25191:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25181:3:30"},"nodeType":"YulFunctionCall","src":"25181:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25155:6:30"},"nodeType":"YulFunctionCall","src":"25155:47:30"},"nodeType":"YulExpressionStatement","src":"25155:47:30"},{"nodeType":"YulAssignment","src":"25211:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25345:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25219:124:30"},"nodeType":"YulFunctionCall","src":"25219:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25211:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25089:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25104:4:30","type":""}],"src":"24938:419:30"},{"body":{"nodeType":"YulBlock","src":"25469:119:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25491:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"25499:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25487:3:30"},"nodeType":"YulFunctionCall","src":"25487:14:30"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"25503:34:30","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25480:6:30"},"nodeType":"YulFunctionCall","src":"25480:58:30"},"nodeType":"YulExpressionStatement","src":"25480:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25559:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"25567:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25555:3:30"},"nodeType":"YulFunctionCall","src":"25555:15:30"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"25572:8:30","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25548:6:30"},"nodeType":"YulFunctionCall","src":"25548:33:30"},"nodeType":"YulExpressionStatement","src":"25548:33:30"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25461:6:30","type":""}],"src":"25363:225:30"},{"body":{"nodeType":"YulBlock","src":"25740:220:30","statements":[{"nodeType":"YulAssignment","src":"25750:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25816:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25821:2:30","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25757:58:30"},"nodeType":"YulFunctionCall","src":"25757:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25750:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25922:3:30"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"25833:88:30"},"nodeType":"YulFunctionCall","src":"25833:93:30"},"nodeType":"YulExpressionStatement","src":"25833:93:30"},{"nodeType":"YulAssignment","src":"25935:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25946:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"25951:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25942:3:30"},"nodeType":"YulFunctionCall","src":"25942:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25935:3:30"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25728:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25736:3:30","type":""}],"src":"25594:366:30"},{"body":{"nodeType":"YulBlock","src":"26137:248:30","statements":[{"nodeType":"YulAssignment","src":"26147:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26159:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26170:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26155:3:30"},"nodeType":"YulFunctionCall","src":"26155:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26147:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26194:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26205:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26190:3:30"},"nodeType":"YulFunctionCall","src":"26190:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26213:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"26219:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26209:3:30"},"nodeType":"YulFunctionCall","src":"26209:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26183:6:30"},"nodeType":"YulFunctionCall","src":"26183:47:30"},"nodeType":"YulExpressionStatement","src":"26183:47:30"},{"nodeType":"YulAssignment","src":"26239:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26373:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26247:124:30"},"nodeType":"YulFunctionCall","src":"26247:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26239:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26117:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26132:4:30","type":""}],"src":"25966:419:30"},{"body":{"nodeType":"YulBlock","src":"26489:124:30","statements":[{"nodeType":"YulAssignment","src":"26499:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26511:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26522:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26507:3:30"},"nodeType":"YulFunctionCall","src":"26507:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26499:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26579:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26592:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"26603:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26588:3:30"},"nodeType":"YulFunctionCall","src":"26588:17:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26535:43:30"},"nodeType":"YulFunctionCall","src":"26535:71:30"},"nodeType":"YulExpressionStatement","src":"26535:71:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26461:9:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26473:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26484:4:30","type":""}],"src":"26391:222:30"},{"body":{"nodeType":"YulBlock","src":"26733:34:30","statements":[{"nodeType":"YulAssignment","src":"26743:18:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"26758:3:30"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26743:11:30"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26705:3:30","type":""},{"name":"length","nodeType":"YulTypedName","src":"26710:6:30","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26721:11:30","type":""}],"src":"26619:148:30"},{"body":{"nodeType":"YulBlock","src":"26879:67:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26901:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"26909:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26897:3:30"},"nodeType":"YulFunctionCall","src":"26897:14:30"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"26913:25:30","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26890:6:30"},"nodeType":"YulFunctionCall","src":"26890:49:30"},"nodeType":"YulExpressionStatement","src":"26890:49:30"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26871:6:30","type":""}],"src":"26773:173:30"},{"body":{"nodeType":"YulBlock","src":"27116:238:30","statements":[{"nodeType":"YulAssignment","src":"27126:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27210:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"27215:2:30","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27133:76:30"},"nodeType":"YulFunctionCall","src":"27133:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27126:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27316:3:30"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"27227:88:30"},"nodeType":"YulFunctionCall","src":"27227:93:30"},"nodeType":"YulExpressionStatement","src":"27227:93:30"},{"nodeType":"YulAssignment","src":"27329:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27340:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"27345:2:30","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27336:3:30"},"nodeType":"YulFunctionCall","src":"27336:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27329:3:30"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27104:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27112:3:30","type":""}],"src":"26952:402:30"},{"body":{"nodeType":"YulBlock","src":"27470:280:30","statements":[{"nodeType":"YulVariableDeclaration","src":"27480:53:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27527:5:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"27494:32:30"},"nodeType":"YulFunctionCall","src":"27494:39:30"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"27484:6:30","type":""}]},{"nodeType":"YulAssignment","src":"27542:96:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27626:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"27631:6:30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27549:76:30"},"nodeType":"YulFunctionCall","src":"27549:89:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27542:3:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27686:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"27693:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27682:3:30"},"nodeType":"YulFunctionCall","src":"27682:16:30"},{"name":"pos","nodeType":"YulIdentifier","src":"27700:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"27705:6:30"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27647:34:30"},"nodeType":"YulFunctionCall","src":"27647:65:30"},"nodeType":"YulExpressionStatement","src":"27647:65:30"},{"nodeType":"YulAssignment","src":"27721:23:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27732:3:30"},{"name":"length","nodeType":"YulIdentifier","src":"27737:6:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27728:3:30"},"nodeType":"YulFunctionCall","src":"27728:16:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27721:3:30"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27451:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"27458:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27466:3:30","type":""}],"src":"27360:390:30"},{"body":{"nodeType":"YulBlock","src":"27862:61:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27884:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"27892:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27880:3:30"},"nodeType":"YulFunctionCall","src":"27880:14:30"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"27896:19:30","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27873:6:30"},"nodeType":"YulFunctionCall","src":"27873:43:30"},"nodeType":"YulExpressionStatement","src":"27873:43:30"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27854:6:30","type":""}],"src":"27756:167:30"},{"body":{"nodeType":"YulBlock","src":"28093:238:30","statements":[{"nodeType":"YulAssignment","src":"28103:92:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28187:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"28192:2:30","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28110:76:30"},"nodeType":"YulFunctionCall","src":"28110:85:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28103:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28293:3:30"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"28204:88:30"},"nodeType":"YulFunctionCall","src":"28204:93:30"},"nodeType":"YulExpressionStatement","src":"28204:93:30"},{"nodeType":"YulAssignment","src":"28306:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28317:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"28322:2:30","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28313:3:30"},"nodeType":"YulFunctionCall","src":"28313:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28306:3:30"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28081:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28089:3:30","type":""}],"src":"27929:402:30"},{"body":{"nodeType":"YulBlock","src":"28723:581:30","statements":[{"nodeType":"YulAssignment","src":"28734:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28885:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28741:142:30"},"nodeType":"YulFunctionCall","src":"28741:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28734:3:30"}]},{"nodeType":"YulAssignment","src":"28899:102:30","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28988:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"28997:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"28906:81:30"},"nodeType":"YulFunctionCall","src":"28906:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28899:3:30"}]},{"nodeType":"YulAssignment","src":"29011:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29162:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"29018:142:30"},"nodeType":"YulFunctionCall","src":"29018:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29011:3:30"}]},{"nodeType":"YulAssignment","src":"29176:102:30","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29265:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"29274:3:30"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"29183:81:30"},"nodeType":"YulFunctionCall","src":"29183:95:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29176:3:30"}]},{"nodeType":"YulAssignment","src":"29288:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"29295:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29288:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28694:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28700:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28708:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28719:3:30","type":""}],"src":"28337:967:30"},{"body":{"nodeType":"YulBlock","src":"29520:454:30","statements":[{"nodeType":"YulAssignment","src":"29530:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29542:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29553:3:30","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29538:3:30"},"nodeType":"YulFunctionCall","src":"29538:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29530:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29611:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29624:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29635:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29620:3:30"},"nodeType":"YulFunctionCall","src":"29620:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29567:43:30"},"nodeType":"YulFunctionCall","src":"29567:71:30"},"nodeType":"YulExpressionStatement","src":"29567:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29692:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29705:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29716:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29701:3:30"},"nodeType":"YulFunctionCall","src":"29701:18:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29648:43:30"},"nodeType":"YulFunctionCall","src":"29648:72:30"},"nodeType":"YulExpressionStatement","src":"29648:72:30"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29774:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29787:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29798:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29783:3:30"},"nodeType":"YulFunctionCall","src":"29783:18:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29730:43:30"},"nodeType":"YulFunctionCall","src":"29730:72:30"},"nodeType":"YulExpressionStatement","src":"29730:72:30"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"29856:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29869:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29880:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29865:3:30"},"nodeType":"YulFunctionCall","src":"29865:18:30"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29812:43:30"},"nodeType":"YulFunctionCall","src":"29812:72:30"},"nodeType":"YulExpressionStatement","src":"29812:72:30"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"29938:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29951:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"29962:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29947:3:30"},"nodeType":"YulFunctionCall","src":"29947:19:30"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"29894:43:30"},"nodeType":"YulFunctionCall","src":"29894:73:30"},"nodeType":"YulExpressionStatement","src":"29894:73:30"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29460:9:30","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29472:6:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29480:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29488:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29496:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29504:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29515:4:30","type":""}],"src":"29310:664:30"},{"body":{"nodeType":"YulBlock","src":"30086:64:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30108:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"30116:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30104:3:30"},"nodeType":"YulFunctionCall","src":"30104:14:30"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"30120:22:30","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30097:6:30"},"nodeType":"YulFunctionCall","src":"30097:46:30"},"nodeType":"YulExpressionStatement","src":"30097:46:30"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30078:6:30","type":""}],"src":"29980:170:30"},{"body":{"nodeType":"YulBlock","src":"30302:220:30","statements":[{"nodeType":"YulAssignment","src":"30312:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30378:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"30383:2:30","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30319:58:30"},"nodeType":"YulFunctionCall","src":"30319:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30312:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30484:3:30"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"30395:88:30"},"nodeType":"YulFunctionCall","src":"30395:93:30"},"nodeType":"YulExpressionStatement","src":"30395:93:30"},{"nodeType":"YulAssignment","src":"30497:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30508:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"30513:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30504:3:30"},"nodeType":"YulFunctionCall","src":"30504:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30497:3:30"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30290:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30298:3:30","type":""}],"src":"30156:366:30"},{"body":{"nodeType":"YulBlock","src":"30699:248:30","statements":[{"nodeType":"YulAssignment","src":"30709:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30721:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30732:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30717:3:30"},"nodeType":"YulFunctionCall","src":"30717:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30709:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30756:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"30767:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30752:3:30"},"nodeType":"YulFunctionCall","src":"30752:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30775:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"30781:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30771:3:30"},"nodeType":"YulFunctionCall","src":"30771:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30745:6:30"},"nodeType":"YulFunctionCall","src":"30745:47:30"},"nodeType":"YulExpressionStatement","src":"30745:47:30"},{"nodeType":"YulAssignment","src":"30801:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30935:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30809:124:30"},"nodeType":"YulFunctionCall","src":"30809:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30801:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30679:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30694:4:30","type":""}],"src":"30528:419:30"},{"body":{"nodeType":"YulBlock","src":"30981:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30998:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31001:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30991:6:30"},"nodeType":"YulFunctionCall","src":"30991:88:30"},"nodeType":"YulExpressionStatement","src":"30991:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31095:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"31098:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31088:6:30"},"nodeType":"YulFunctionCall","src":"31088:15:30"},"nodeType":"YulExpressionStatement","src":"31088:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31119:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31122:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31112:6:30"},"nodeType":"YulFunctionCall","src":"31112:15:30"},"nodeType":"YulExpressionStatement","src":"31112:15:30"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"30953:180:30"},{"body":{"nodeType":"YulBlock","src":"31193:87:30","statements":[{"nodeType":"YulAssignment","src":"31203:11:30","value":{"name":"ptr","nodeType":"YulIdentifier","src":"31211:3:30"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"31203:4:30"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31231:1:30","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"31234:3:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31224:6:30"},"nodeType":"YulFunctionCall","src":"31224:14:30"},"nodeType":"YulExpressionStatement","src":"31224:14:30"},{"nodeType":"YulAssignment","src":"31247:26:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31265:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31268:4:30","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"31255:9:30"},"nodeType":"YulFunctionCall","src":"31255:18:30"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"31247:4:30"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"31180:3:30","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"31188:4:30","type":""}],"src":"31139:141:30"},{"body":{"nodeType":"YulBlock","src":"31330:49:30","statements":[{"nodeType":"YulAssignment","src":"31340:33:30","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31358:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"31365:2:30","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31354:3:30"},"nodeType":"YulFunctionCall","src":"31354:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"31370:2:30","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"31350:3:30"},"nodeType":"YulFunctionCall","src":"31350:23:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"31340:6:30"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31313:5:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"31323:6:30","type":""}],"src":"31286:93:30"},{"body":{"nodeType":"YulBlock","src":"31438:54:30","statements":[{"nodeType":"YulAssignment","src":"31448:37:30","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"31473:4:30"},{"name":"value","nodeType":"YulIdentifier","src":"31479:5:30"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31469:3:30"},"nodeType":"YulFunctionCall","src":"31469:16:30"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"31448:8:30"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"31413:4:30","type":""},{"name":"value","nodeType":"YulTypedName","src":"31419:5:30","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"31429:8:30","type":""}],"src":"31385:107:30"},{"body":{"nodeType":"YulBlock","src":"31574:317:30","statements":[{"nodeType":"YulVariableDeclaration","src":"31584:35:30","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"31605:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"31617:1:30","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"31601:3:30"},"nodeType":"YulFunctionCall","src":"31601:18:30"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"31588:9:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31628:109:30","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"31659:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"31670:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"31640:18:30"},"nodeType":"YulFunctionCall","src":"31640:97:30"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"31632:4:30","type":""}]},{"nodeType":"YulAssignment","src":"31746:51:30","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"31777:9:30"},{"name":"toInsert","nodeType":"YulIdentifier","src":"31788:8:30"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"31758:18:30"},"nodeType":"YulFunctionCall","src":"31758:39:30"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"31746:8:30"}]},{"nodeType":"YulAssignment","src":"31806:30:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31819:5:30"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"31830:4:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31826:3:30"},"nodeType":"YulFunctionCall","src":"31826:9:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31815:3:30"},"nodeType":"YulFunctionCall","src":"31815:21:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31806:5:30"}]},{"nodeType":"YulAssignment","src":"31845:40:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31858:5:30"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"31869:8:30"},{"name":"mask","nodeType":"YulIdentifier","src":"31879:4:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31865:3:30"},"nodeType":"YulFunctionCall","src":"31865:19:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"31855:2:30"},"nodeType":"YulFunctionCall","src":"31855:30:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"31845:6:30"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31535:5:30","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"31542:10:30","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"31554:8:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"31567:6:30","type":""}],"src":"31498:393:30"},{"body":{"nodeType":"YulBlock","src":"31957:82:30","statements":[{"nodeType":"YulAssignment","src":"31967:66:30","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32025:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32007:17:30"},"nodeType":"YulFunctionCall","src":"32007:24:30"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"31998:8:30"},"nodeType":"YulFunctionCall","src":"31998:34:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31980:17:30"},"nodeType":"YulFunctionCall","src":"31980:53:30"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"31967:9:30"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31937:5:30","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"31947:9:30","type":""}],"src":"31897:142:30"},{"body":{"nodeType":"YulBlock","src":"32092:28:30","statements":[{"nodeType":"YulAssignment","src":"32102:12:30","value":{"name":"value","nodeType":"YulIdentifier","src":"32109:5:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32102:3:30"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32078:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32088:3:30","type":""}],"src":"32045:75:30"},{"body":{"nodeType":"YulBlock","src":"32202:193:30","statements":[{"nodeType":"YulVariableDeclaration","src":"32212:63:30","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"32267:7:30"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"32236:30:30"},"nodeType":"YulFunctionCall","src":"32236:39:30"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"32216:16:30","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32291:4:30"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32331:4:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"32325:5:30"},"nodeType":"YulFunctionCall","src":"32325:11:30"},{"name":"offset","nodeType":"YulIdentifier","src":"32338:6:30"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"32370:16:30"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"32346:23:30"},"nodeType":"YulFunctionCall","src":"32346:41:30"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"32297:27:30"},"nodeType":"YulFunctionCall","src":"32297:91:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32284:6:30"},"nodeType":"YulFunctionCall","src":"32284:105:30"},"nodeType":"YulExpressionStatement","src":"32284:105:30"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"32179:4:30","type":""},{"name":"offset","nodeType":"YulTypedName","src":"32185:6:30","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"32193:7:30","type":""}],"src":"32126:269:30"},{"body":{"nodeType":"YulBlock","src":"32450:24:30","statements":[{"nodeType":"YulAssignment","src":"32460:8:30","value":{"kind":"number","nodeType":"YulLiteral","src":"32467:1:30","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32460:3:30"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32446:3:30","type":""}],"src":"32401:73:30"},{"body":{"nodeType":"YulBlock","src":"32533:136:30","statements":[{"nodeType":"YulVariableDeclaration","src":"32543:46:30","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"32557:30:30"},"nodeType":"YulFunctionCall","src":"32557:32:30"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"32547:6:30","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32642:4:30"},{"name":"offset","nodeType":"YulIdentifier","src":"32648:6:30"},{"name":"zero_0","nodeType":"YulIdentifier","src":"32656:6:30"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"32598:43:30"},"nodeType":"YulFunctionCall","src":"32598:65:30"},"nodeType":"YulExpressionStatement","src":"32598:65:30"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"32519:4:30","type":""},{"name":"offset","nodeType":"YulTypedName","src":"32525:6:30","type":""}],"src":"32480:189:30"},{"body":{"nodeType":"YulBlock","src":"32725:136:30","statements":[{"body":{"nodeType":"YulBlock","src":"32792:63:30","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"32836:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"32843:1:30","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"32806:29:30"},"nodeType":"YulFunctionCall","src":"32806:39:30"},"nodeType":"YulExpressionStatement","src":"32806:39:30"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"32745:5:30"},{"name":"end","nodeType":"YulIdentifier","src":"32752:3:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32742:2:30"},"nodeType":"YulFunctionCall","src":"32742:14:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"32757:26:30","statements":[{"nodeType":"YulAssignment","src":"32759:22:30","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"32772:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"32779:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32768:3:30"},"nodeType":"YulFunctionCall","src":"32768:13:30"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"32759:5:30"}]}]},"pre":{"nodeType":"YulBlock","src":"32739:2:30","statements":[]},"src":"32735:120:30"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"32713:5:30","type":""},{"name":"end","nodeType":"YulTypedName","src":"32720:3:30","type":""}],"src":"32675:186:30"},{"body":{"nodeType":"YulBlock","src":"32946:464:30","statements":[{"body":{"nodeType":"YulBlock","src":"32972:431:30","statements":[{"nodeType":"YulVariableDeclaration","src":"32986:54:30","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"33034:5:30"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"33002:31:30"},"nodeType":"YulFunctionCall","src":"33002:38:30"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"32990:8:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33053:63:30","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"33076:8:30"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"33104:10:30"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"33086:17:30"},"nodeType":"YulFunctionCall","src":"33086:29:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33072:3:30"},"nodeType":"YulFunctionCall","src":"33072:44:30"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"33057:11:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"33273:27:30","statements":[{"nodeType":"YulAssignment","src":"33275:23:30","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"33290:8:30"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"33275:11:30"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"33257:10:30"},{"kind":"number","nodeType":"YulLiteral","src":"33269:2:30","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"33254:2:30"},"nodeType":"YulFunctionCall","src":"33254:18:30"},"nodeType":"YulIf","src":"33251:49:30"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"33342:11:30"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"33359:8:30"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"33387:3:30"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"33369:17:30"},"nodeType":"YulFunctionCall","src":"33369:22:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33355:3:30"},"nodeType":"YulFunctionCall","src":"33355:37:30"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"33313:28:30"},"nodeType":"YulFunctionCall","src":"33313:80:30"},"nodeType":"YulExpressionStatement","src":"33313:80:30"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"32963:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"32968:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"32960:2:30"},"nodeType":"YulFunctionCall","src":"32960:11:30"},"nodeType":"YulIf","src":"32957:446:30"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"32922:5:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"32929:3:30","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"32934:10:30","type":""}],"src":"32867:543:30"},{"body":{"nodeType":"YulBlock","src":"33479:54:30","statements":[{"nodeType":"YulAssignment","src":"33489:37:30","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"33514:4:30"},{"name":"value","nodeType":"YulIdentifier","src":"33520:5:30"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"33510:3:30"},"nodeType":"YulFunctionCall","src":"33510:16:30"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"33489:8:30"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"33454:4:30","type":""},{"name":"value","nodeType":"YulTypedName","src":"33460:5:30","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"33470:8:30","type":""}],"src":"33416:117:30"},{"body":{"nodeType":"YulBlock","src":"33590:118:30","statements":[{"nodeType":"YulVariableDeclaration","src":"33600:68:30","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33649:1:30","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"33652:5:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33645:3:30"},"nodeType":"YulFunctionCall","src":"33645:13:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33664:1:30","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33660:3:30"},"nodeType":"YulFunctionCall","src":"33660:6:30"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"33616:28:30"},"nodeType":"YulFunctionCall","src":"33616:51:30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33612:3:30"},"nodeType":"YulFunctionCall","src":"33612:56:30"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"33604:4:30","type":""}]},{"nodeType":"YulAssignment","src":"33677:25:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33691:4:30"},{"name":"mask","nodeType":"YulIdentifier","src":"33697:4:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33687:3:30"},"nodeType":"YulFunctionCall","src":"33687:15:30"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"33677:6:30"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"33567:4:30","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"33573:5:30","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"33583:6:30","type":""}],"src":"33539:169:30"},{"body":{"nodeType":"YulBlock","src":"33794:214:30","statements":[{"nodeType":"YulAssignment","src":"33927:37:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33954:4:30"},{"name":"len","nodeType":"YulIdentifier","src":"33960:3:30"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"33935:18:30"},"nodeType":"YulFunctionCall","src":"33935:29:30"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"33927:4:30"}]},{"nodeType":"YulAssignment","src":"33973:29:30","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33984:4:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33994:1:30","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"33997:3:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33990:3:30"},"nodeType":"YulFunctionCall","src":"33990:11:30"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"33981:2:30"},"nodeType":"YulFunctionCall","src":"33981:21:30"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"33973:4:30"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"33775:4:30","type":""},{"name":"len","nodeType":"YulTypedName","src":"33781:3:30","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"33789:4:30","type":""}],"src":"33713:295:30"},{"body":{"nodeType":"YulBlock","src":"34105:1303:30","statements":[{"nodeType":"YulVariableDeclaration","src":"34116:51:30","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34163:3:30"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"34130:32:30"},"nodeType":"YulFunctionCall","src":"34130:37:30"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"34120:6:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"34252:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"34254:16:30"},"nodeType":"YulFunctionCall","src":"34254:18:30"},"nodeType":"YulExpressionStatement","src":"34254:18:30"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34224:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"34232:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34221:2:30"},"nodeType":"YulFunctionCall","src":"34221:30:30"},"nodeType":"YulIf","src":"34218:56:30"},{"nodeType":"YulVariableDeclaration","src":"34284:52:30","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34330:4:30"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"34324:5:30"},"nodeType":"YulFunctionCall","src":"34324:11:30"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"34298:25:30"},"nodeType":"YulFunctionCall","src":"34298:38:30"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"34288:6:30","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34429:4:30"},{"name":"oldLen","nodeType":"YulIdentifier","src":"34435:6:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"34443:6:30"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"34383:45:30"},"nodeType":"YulFunctionCall","src":"34383:67:30"},"nodeType":"YulExpressionStatement","src":"34383:67:30"},{"nodeType":"YulVariableDeclaration","src":"34460:18:30","value":{"kind":"number","nodeType":"YulLiteral","src":"34477:1:30","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"34464:9:30","type":""}]},{"nodeType":"YulAssignment","src":"34488:17:30","value":{"kind":"number","nodeType":"YulLiteral","src":"34501:4:30","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"34488:9:30"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"34552:611:30","statements":[{"nodeType":"YulVariableDeclaration","src":"34566:37:30","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34585:6:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34597:4:30","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34593:3:30"},"nodeType":"YulFunctionCall","src":"34593:9:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34581:3:30"},"nodeType":"YulFunctionCall","src":"34581:22:30"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"34570:7:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34617:51:30","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34663:4:30"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"34631:31:30"},"nodeType":"YulFunctionCall","src":"34631:37:30"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"34621:6:30","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34681:10:30","value":{"kind":"number","nodeType":"YulLiteral","src":"34690:1:30","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"34685:1:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"34749:163:30","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"34774:6:30"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34792:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"34797:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34788:3:30"},"nodeType":"YulFunctionCall","src":"34788:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34782:5:30"},"nodeType":"YulFunctionCall","src":"34782:26:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34767:6:30"},"nodeType":"YulFunctionCall","src":"34767:42:30"},"nodeType":"YulExpressionStatement","src":"34767:42:30"},{"nodeType":"YulAssignment","src":"34826:24:30","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"34840:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"34848:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34836:3:30"},"nodeType":"YulFunctionCall","src":"34836:14:30"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"34826:6:30"}]},{"nodeType":"YulAssignment","src":"34867:31:30","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"34884:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"34895:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34880:3:30"},"nodeType":"YulFunctionCall","src":"34880:18:30"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"34867:9:30"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"34715:1:30"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"34718:7:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34712:2:30"},"nodeType":"YulFunctionCall","src":"34712:14:30"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"34727:21:30","statements":[{"nodeType":"YulAssignment","src":"34729:17:30","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"34738:1:30"},{"kind":"number","nodeType":"YulLiteral","src":"34741:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34734:3:30"},"nodeType":"YulFunctionCall","src":"34734:12:30"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"34729:1:30"}]}]},"pre":{"nodeType":"YulBlock","src":"34708:3:30","statements":[]},"src":"34704:208:30"},{"body":{"nodeType":"YulBlock","src":"34948:156:30","statements":[{"nodeType":"YulVariableDeclaration","src":"34966:43:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34993:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"34998:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34989:3:30"},"nodeType":"YulFunctionCall","src":"34989:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"34983:5:30"},"nodeType":"YulFunctionCall","src":"34983:26:30"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"34970:9:30","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35033:6:30"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"35060:9:30"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35075:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"35083:4:30","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35071:3:30"},"nodeType":"YulFunctionCall","src":"35071:17:30"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"35041:18:30"},"nodeType":"YulFunctionCall","src":"35041:48:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35026:6:30"},"nodeType":"YulFunctionCall","src":"35026:64:30"},"nodeType":"YulExpressionStatement","src":"35026:64:30"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"34931:7:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"34940:6:30"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34928:2:30"},"nodeType":"YulFunctionCall","src":"34928:19:30"},"nodeType":"YulIf","src":"34925:179:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35124:4:30"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35138:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"35146:1:30","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"35134:3:30"},"nodeType":"YulFunctionCall","src":"35134:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"35150:1:30","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35130:3:30"},"nodeType":"YulFunctionCall","src":"35130:22:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35117:6:30"},"nodeType":"YulFunctionCall","src":"35117:36:30"},"nodeType":"YulExpressionStatement","src":"35117:36:30"}]},"nodeType":"YulCase","src":"34545:618:30","value":{"kind":"number","nodeType":"YulLiteral","src":"34550:1:30","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"35180:222:30","statements":[{"nodeType":"YulVariableDeclaration","src":"35194:14:30","value":{"kind":"number","nodeType":"YulLiteral","src":"35207:1:30","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"35198:5:30","type":""}]},{"body":{"nodeType":"YulBlock","src":"35231:67:30","statements":[{"nodeType":"YulAssignment","src":"35249:35:30","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35268:3:30"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35273:9:30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35264:3:30"},"nodeType":"YulFunctionCall","src":"35264:19:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35258:5:30"},"nodeType":"YulFunctionCall","src":"35258:26:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"35249:5:30"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"35224:6:30"},"nodeType":"YulIf","src":"35221:77:30"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35318:4:30"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35377:5:30"},{"name":"newLen","nodeType":"YulIdentifier","src":"35384:6:30"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"35324:52:30"},"nodeType":"YulFunctionCall","src":"35324:67:30"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35311:6:30"},"nodeType":"YulFunctionCall","src":"35311:81:30"},"nodeType":"YulExpressionStatement","src":"35311:81:30"}]},"nodeType":"YulCase","src":"35172:230:30","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34525:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"34533:2:30","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34522:2:30"},"nodeType":"YulFunctionCall","src":"34522:14:30"},"nodeType":"YulSwitch","src":"34515:887:30"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"34094:4:30","type":""},{"name":"src","nodeType":"YulTypedName","src":"34100:3:30","type":""}],"src":"34013:1395:30"},{"body":{"nodeType":"YulBlock","src":"35520:60:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35542:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"35550:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35538:3:30"},"nodeType":"YulFunctionCall","src":"35538:14:30"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"35554:18:30","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35531:6:30"},"nodeType":"YulFunctionCall","src":"35531:42:30"},"nodeType":"YulExpressionStatement","src":"35531:42:30"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35512:6:30","type":""}],"src":"35414:166:30"},{"body":{"nodeType":"YulBlock","src":"35732:220:30","statements":[{"nodeType":"YulAssignment","src":"35742:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35808:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"35813:2:30","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35749:58:30"},"nodeType":"YulFunctionCall","src":"35749:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35742:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35914:3:30"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"35825:88:30"},"nodeType":"YulFunctionCall","src":"35825:93:30"},"nodeType":"YulExpressionStatement","src":"35825:93:30"},{"nodeType":"YulAssignment","src":"35927:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35938:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"35943:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35934:3:30"},"nodeType":"YulFunctionCall","src":"35934:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35927:3:30"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35720:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35728:3:30","type":""}],"src":"35586:366:30"},{"body":{"nodeType":"YulBlock","src":"36129:248:30","statements":[{"nodeType":"YulAssignment","src":"36139:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36151:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"36162:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36147:3:30"},"nodeType":"YulFunctionCall","src":"36147:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36139:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36186:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"36197:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36182:3:30"},"nodeType":"YulFunctionCall","src":"36182:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36205:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"36211:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36201:3:30"},"nodeType":"YulFunctionCall","src":"36201:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36175:6:30"},"nodeType":"YulFunctionCall","src":"36175:47:30"},"nodeType":"YulExpressionStatement","src":"36175:47:30"},{"nodeType":"YulAssignment","src":"36231:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36365:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36239:124:30"},"nodeType":"YulFunctionCall","src":"36239:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36231:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36109:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36124:4:30","type":""}],"src":"35958:419:30"},{"body":{"nodeType":"YulBlock","src":"36489:108:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36511:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"36519:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36507:3:30"},"nodeType":"YulFunctionCall","src":"36507:14:30"},{"kind":"number","nodeType":"YulLiteral","src":"36523:66:30","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36500:6:30"},"nodeType":"YulFunctionCall","src":"36500:90:30"},"nodeType":"YulExpressionStatement","src":"36500:90:30"}]},"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36481:6:30","type":""}],"src":"36383:214:30"},{"body":{"nodeType":"YulBlock","src":"36767:236:30","statements":[{"nodeType":"YulAssignment","src":"36777:91:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36861:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"36866:1:30","type":"","value":"2"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"36784:76:30"},"nodeType":"YulFunctionCall","src":"36784:84:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36777:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36966:3:30"}],"functionName":{"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulIdentifier","src":"36877:88:30"},"nodeType":"YulFunctionCall","src":"36877:93:30"},"nodeType":"YulExpressionStatement","src":"36877:93:30"},{"nodeType":"YulAssignment","src":"36979:18:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36990:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"36995:1:30","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36986:3:30"},"nodeType":"YulFunctionCall","src":"36986:11:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36979:3:30"}]}]},"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36755:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36763:3:30","type":""}],"src":"36603:400:30"},{"body":{"nodeType":"YulBlock","src":"37056:32:30","statements":[{"nodeType":"YulAssignment","src":"37066:16:30","value":{"name":"value","nodeType":"YulIdentifier","src":"37077:5:30"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"37066:7:30"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37038:5:30","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"37048:7:30","type":""}],"src":"37009:79:30"},{"body":{"nodeType":"YulBlock","src":"37177:74:30","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37194:3:30"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37237:5:30"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"37219:17:30"},"nodeType":"YulFunctionCall","src":"37219:24:30"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"37199:19:30"},"nodeType":"YulFunctionCall","src":"37199:45:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37187:6:30"},"nodeType":"YulFunctionCall","src":"37187:58:30"},"nodeType":"YulExpressionStatement","src":"37187:58:30"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37165:5:30","type":""},{"name":"pos","nodeType":"YulTypedName","src":"37172:3:30","type":""}],"src":"37094:157:30"},{"body":{"nodeType":"YulBlock","src":"37502:418:30","statements":[{"nodeType":"YulAssignment","src":"37513:155:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37664:3:30"}],"functionName":{"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"37520:142:30"},"nodeType":"YulFunctionCall","src":"37520:148:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37513:3:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"37740:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"37749:3:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"37678:61:30"},"nodeType":"YulFunctionCall","src":"37678:75:30"},"nodeType":"YulExpressionStatement","src":"37678:75:30"},{"nodeType":"YulAssignment","src":"37762:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37773:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"37778:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37769:3:30"},"nodeType":"YulFunctionCall","src":"37769:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37762:3:30"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"37853:6:30"},{"name":"pos","nodeType":"YulIdentifier","src":"37862:3:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"37791:61:30"},"nodeType":"YulFunctionCall","src":"37791:75:30"},"nodeType":"YulExpressionStatement","src":"37791:75:30"},{"nodeType":"YulAssignment","src":"37875:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37886:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"37891:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37882:3:30"},"nodeType":"YulFunctionCall","src":"37882:12:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37875:3:30"}]},{"nodeType":"YulAssignment","src":"37904:10:30","value":{"name":"pos","nodeType":"YulIdentifier","src":"37911:3:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37904:3:30"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37473:3:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"37479:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"37487:6:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37498:3:30","type":""}],"src":"37257:663:30"},{"body":{"nodeType":"YulBlock","src":"38104:367:30","statements":[{"nodeType":"YulAssignment","src":"38114:27:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38126:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"38137:3:30","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38122:3:30"},"nodeType":"YulFunctionCall","src":"38122:19:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38114:4:30"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"38195:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38208:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"38219:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38204:3:30"},"nodeType":"YulFunctionCall","src":"38204:17:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"38151:43:30"},"nodeType":"YulFunctionCall","src":"38151:71:30"},"nodeType":"YulExpressionStatement","src":"38151:71:30"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"38272:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38285:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"38296:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38281:3:30"},"nodeType":"YulFunctionCall","src":"38281:18:30"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"38232:39:30"},"nodeType":"YulFunctionCall","src":"38232:68:30"},"nodeType":"YulExpressionStatement","src":"38232:68:30"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"38354:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38367:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"38378:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38363:3:30"},"nodeType":"YulFunctionCall","src":"38363:18:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"38310:43:30"},"nodeType":"YulFunctionCall","src":"38310:72:30"},"nodeType":"YulExpressionStatement","src":"38310:72:30"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"38436:6:30"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38449:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"38460:2:30","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38445:3:30"},"nodeType":"YulFunctionCall","src":"38445:18:30"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"38392:43:30"},"nodeType":"YulFunctionCall","src":"38392:72:30"},"nodeType":"YulExpressionStatement","src":"38392:72:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38052:9:30","type":""},{"name":"value3","nodeType":"YulTypedName","src":"38064:6:30","type":""},{"name":"value2","nodeType":"YulTypedName","src":"38072:6:30","type":""},{"name":"value1","nodeType":"YulTypedName","src":"38080:6:30","type":""},{"name":"value0","nodeType":"YulTypedName","src":"38088:6:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38099:4:30","type":""}],"src":"37926:545:30"},{"body":{"nodeType":"YulBlock","src":"38505:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38522:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38525:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38515:6:30"},"nodeType":"YulFunctionCall","src":"38515:88:30"},"nodeType":"YulExpressionStatement","src":"38515:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38619:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"38622:4:30","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38612:6:30"},"nodeType":"YulFunctionCall","src":"38612:15:30"},"nodeType":"YulExpressionStatement","src":"38612:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38643:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38646:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38636:6:30"},"nodeType":"YulFunctionCall","src":"38636:15:30"},"nodeType":"YulExpressionStatement","src":"38636:15:30"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"38477:180:30"},{"body":{"nodeType":"YulBlock","src":"38769:68:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38791:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"38799:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38787:3:30"},"nodeType":"YulFunctionCall","src":"38787:14:30"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"38803:26:30","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38780:6:30"},"nodeType":"YulFunctionCall","src":"38780:50:30"},"nodeType":"YulExpressionStatement","src":"38780:50:30"}]},"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"38761:6:30","type":""}],"src":"38663:174:30"},{"body":{"nodeType":"YulBlock","src":"38989:220:30","statements":[{"nodeType":"YulAssignment","src":"38999:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39065:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"39070:2:30","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39006:58:30"},"nodeType":"YulFunctionCall","src":"39006:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38999:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39171:3:30"}],"functionName":{"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulIdentifier","src":"39082:88:30"},"nodeType":"YulFunctionCall","src":"39082:93:30"},"nodeType":"YulExpressionStatement","src":"39082:93:30"},{"nodeType":"YulAssignment","src":"39184:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39195:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"39200:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39191:3:30"},"nodeType":"YulFunctionCall","src":"39191:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"39184:3:30"}]}]},"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38977:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38985:3:30","type":""}],"src":"38843:366:30"},{"body":{"nodeType":"YulBlock","src":"39386:248:30","statements":[{"nodeType":"YulAssignment","src":"39396:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39408:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"39419:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39404:3:30"},"nodeType":"YulFunctionCall","src":"39404:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39396:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39443:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"39454:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39439:3:30"},"nodeType":"YulFunctionCall","src":"39439:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39462:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"39468:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39458:3:30"},"nodeType":"YulFunctionCall","src":"39458:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39432:6:30"},"nodeType":"YulFunctionCall","src":"39432:47:30"},"nodeType":"YulExpressionStatement","src":"39432:47:30"},{"nodeType":"YulAssignment","src":"39488:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39622:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39496:124:30"},"nodeType":"YulFunctionCall","src":"39496:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39488:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39366:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39381:4:30","type":""}],"src":"39215:419:30"},{"body":{"nodeType":"YulBlock","src":"39746:75:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"39768:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"39776:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39764:3:30"},"nodeType":"YulFunctionCall","src":"39764:14:30"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"39780:33:30","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39757:6:30"},"nodeType":"YulFunctionCall","src":"39757:57:30"},"nodeType":"YulExpressionStatement","src":"39757:57:30"}]},"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"39738:6:30","type":""}],"src":"39640:181:30"},{"body":{"nodeType":"YulBlock","src":"39973:220:30","statements":[{"nodeType":"YulAssignment","src":"39983:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40049:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"40054:2:30","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39990:58:30"},"nodeType":"YulFunctionCall","src":"39990:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39983:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40155:3:30"}],"functionName":{"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulIdentifier","src":"40066:88:30"},"nodeType":"YulFunctionCall","src":"40066:93:30"},"nodeType":"YulExpressionStatement","src":"40066:93:30"},{"nodeType":"YulAssignment","src":"40168:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40179:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"40184:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40175:3:30"},"nodeType":"YulFunctionCall","src":"40175:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"40168:3:30"}]}]},"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39961:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39969:3:30","type":""}],"src":"39827:366:30"},{"body":{"nodeType":"YulBlock","src":"40370:248:30","statements":[{"nodeType":"YulAssignment","src":"40380:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40392:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"40403:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40388:3:30"},"nodeType":"YulFunctionCall","src":"40388:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40380:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40427:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"40438:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40423:3:30"},"nodeType":"YulFunctionCall","src":"40423:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40446:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"40452:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40442:3:30"},"nodeType":"YulFunctionCall","src":"40442:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40416:6:30"},"nodeType":"YulFunctionCall","src":"40416:47:30"},"nodeType":"YulExpressionStatement","src":"40416:47:30"},{"nodeType":"YulAssignment","src":"40472:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40606:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40480:124:30"},"nodeType":"YulFunctionCall","src":"40480:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40472:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40350:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40365:4:30","type":""}],"src":"40199:419:30"},{"body":{"nodeType":"YulBlock","src":"40730:115:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"40752:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"40760:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40748:3:30"},"nodeType":"YulFunctionCall","src":"40748:14:30"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"40764:34:30","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40741:6:30"},"nodeType":"YulFunctionCall","src":"40741:58:30"},"nodeType":"YulExpressionStatement","src":"40741:58:30"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"40820:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"40828:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40816:3:30"},"nodeType":"YulFunctionCall","src":"40816:15:30"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"40833:4:30","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40809:6:30"},"nodeType":"YulFunctionCall","src":"40809:29:30"},"nodeType":"YulExpressionStatement","src":"40809:29:30"}]},"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"40722:6:30","type":""}],"src":"40624:221:30"},{"body":{"nodeType":"YulBlock","src":"40997:220:30","statements":[{"nodeType":"YulAssignment","src":"41007:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41073:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"41078:2:30","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41014:58:30"},"nodeType":"YulFunctionCall","src":"41014:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"41007:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41179:3:30"}],"functionName":{"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulIdentifier","src":"41090:88:30"},"nodeType":"YulFunctionCall","src":"41090:93:30"},"nodeType":"YulExpressionStatement","src":"41090:93:30"},{"nodeType":"YulAssignment","src":"41192:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41203:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"41208:2:30","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41199:3:30"},"nodeType":"YulFunctionCall","src":"41199:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41192:3:30"}]}]},"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"40985:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"40993:3:30","type":""}],"src":"40851:366:30"},{"body":{"nodeType":"YulBlock","src":"41394:248:30","statements":[{"nodeType":"YulAssignment","src":"41404:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41416:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"41427:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41412:3:30"},"nodeType":"YulFunctionCall","src":"41412:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41404:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41451:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"41462:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41447:3:30"},"nodeType":"YulFunctionCall","src":"41447:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41470:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"41476:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41466:3:30"},"nodeType":"YulFunctionCall","src":"41466:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41440:6:30"},"nodeType":"YulFunctionCall","src":"41440:47:30"},"nodeType":"YulExpressionStatement","src":"41440:47:30"},{"nodeType":"YulAssignment","src":"41496:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41630:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41504:124:30"},"nodeType":"YulFunctionCall","src":"41504:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41496:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41374:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41389:4:30","type":""}],"src":"41223:419:30"},{"body":{"nodeType":"YulBlock","src":"41696:300:30","statements":[{"nodeType":"YulAssignment","src":"41706:25:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"41729:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"41711:17:30"},"nodeType":"YulFunctionCall","src":"41711:20:30"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"41706:1:30"}]},{"nodeType":"YulAssignment","src":"41740:25:30","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"41763:1:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"41745:17:30"},"nodeType":"YulFunctionCall","src":"41745:20:30"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"41740:1:30"}]},{"body":{"nodeType":"YulBlock","src":"41938:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"41940:16:30"},"nodeType":"YulFunctionCall","src":"41940:18:30"},"nodeType":"YulExpressionStatement","src":"41940:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"41850:1:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"41843:6:30"},"nodeType":"YulFunctionCall","src":"41843:9:30"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"41836:6:30"},"nodeType":"YulFunctionCall","src":"41836:17:30"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"41858:1:30"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41865:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"41933:1:30"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"41861:3:30"},"nodeType":"YulFunctionCall","src":"41861:74:30"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"41855:2:30"},"nodeType":"YulFunctionCall","src":"41855:81:30"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41832:3:30"},"nodeType":"YulFunctionCall","src":"41832:105:30"},"nodeType":"YulIf","src":"41829:131:30"},{"nodeType":"YulAssignment","src":"41970:20:30","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"41985:1:30"},{"name":"y","nodeType":"YulIdentifier","src":"41988:1:30"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"41981:3:30"},"nodeType":"YulFunctionCall","src":"41981:9:30"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"41970:7:30"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"41679:1:30","type":""},{"name":"y","nodeType":"YulTypedName","src":"41682:1:30","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"41688:7:30","type":""}],"src":"41648:348:30"},{"body":{"nodeType":"YulBlock","src":"42030:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42047:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"42050:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42040:6:30"},"nodeType":"YulFunctionCall","src":"42040:88:30"},"nodeType":"YulExpressionStatement","src":"42040:88:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42144:1:30","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"42147:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42137:6:30"},"nodeType":"YulFunctionCall","src":"42137:15:30"},"nodeType":"YulExpressionStatement","src":"42137:15:30"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"42168:1:30","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"42171:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"42161:6:30"},"nodeType":"YulFunctionCall","src":"42161:15:30"},"nodeType":"YulExpressionStatement","src":"42161:15:30"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"42002:180:30"},{"body":{"nodeType":"YulBlock","src":"42231:128:30","statements":[{"nodeType":"YulAssignment","src":"42241:33:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42268:5:30"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"42250:17:30"},"nodeType":"YulFunctionCall","src":"42250:24:30"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"42241:5:30"}]},{"body":{"nodeType":"YulBlock","src":"42302:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"42304:16:30"},"nodeType":"YulFunctionCall","src":"42304:18:30"},"nodeType":"YulExpressionStatement","src":"42304:18:30"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42289:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"42296:4:30","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"42286:2:30"},"nodeType":"YulFunctionCall","src":"42286:15:30"},"nodeType":"YulIf","src":"42283:41:30"},{"nodeType":"YulAssignment","src":"42333:20:30","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42344:5:30"},{"kind":"number","nodeType":"YulLiteral","src":"42351:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42340:3:30"},"nodeType":"YulFunctionCall","src":"42340:13:30"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"42333:3:30"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"42217:5:30","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"42227:3:30","type":""}],"src":"42188:171:30"},{"body":{"nodeType":"YulBlock","src":"42471:76:30","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42493:6:30"},{"kind":"number","nodeType":"YulLiteral","src":"42501:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42489:3:30"},"nodeType":"YulFunctionCall","src":"42489:14:30"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"42505:34:30","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42482:6:30"},"nodeType":"YulFunctionCall","src":"42482:58:30"},"nodeType":"YulExpressionStatement","src":"42482:58:30"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42463:6:30","type":""}],"src":"42365:182:30"},{"body":{"nodeType":"YulBlock","src":"42699:220:30","statements":[{"nodeType":"YulAssignment","src":"42709:74:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42775:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"42780:2:30","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42716:58:30"},"nodeType":"YulFunctionCall","src":"42716:67:30"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42709:3:30"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42881:3:30"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"42792:88:30"},"nodeType":"YulFunctionCall","src":"42792:93:30"},"nodeType":"YulExpressionStatement","src":"42792:93:30"},{"nodeType":"YulAssignment","src":"42894:19:30","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42905:3:30"},{"kind":"number","nodeType":"YulLiteral","src":"42910:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42901:3:30"},"nodeType":"YulFunctionCall","src":"42901:12:30"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42894:3:30"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42687:3:30","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42695:3:30","type":""}],"src":"42553:366:30"},{"body":{"nodeType":"YulBlock","src":"43096:248:30","statements":[{"nodeType":"YulAssignment","src":"43106:26:30","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43118:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"43129:2:30","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43114:3:30"},"nodeType":"YulFunctionCall","src":"43114:18:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43106:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43153:9:30"},{"kind":"number","nodeType":"YulLiteral","src":"43164:1:30","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43149:3:30"},"nodeType":"YulFunctionCall","src":"43149:17:30"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43172:4:30"},{"name":"headStart","nodeType":"YulIdentifier","src":"43178:9:30"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43168:3:30"},"nodeType":"YulFunctionCall","src":"43168:20:30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43142:6:30"},"nodeType":"YulFunctionCall","src":"43142:47:30"},"nodeType":"YulExpressionStatement","src":"43142:47:30"},{"nodeType":"YulAssignment","src":"43198:139:30","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43332:4:30"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43206:124:30"},"nodeType":"YulFunctionCall","src":"43206:131:30"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43198:4:30"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43076:9:30","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43091:4:30","type":""}],"src":"42925:419:30"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: expired deadline\")\n\n    }\n\n    function abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr) {\n\n        mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)\n        store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)\n        end := add(pos, 2)\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101c45760003560e01c80636e810b1a116100f9578063a217fddf11610097578063b6db75a011610071578063b6db75a014610509578063d505accf14610527578063d547741f14610543578063dd62ed3e1461055f576101c4565b8063a217fddf1461048b578063a457c2d7146104a9578063a9059cbb146104d9576101c4565b80638129fc1c116100d35780638129fc1c146104295780638456cb591461043357806391d148541461043d57806395d89b411461046d576101c4565b80636e810b1a146103ad57806370a08231146103c95780637ecebe00146103f9576101c4565b80632f2ff15d1161016657806336568abe1161014057806336568abe1461033957806339509351146103555780633f4ba83a146103855780635c975abb1461038f576101c4565b80632f2ff15d146102e1578063313ce567146102fd5780633644e5151461031b576101c4565b806318160ddd116101a257806318160ddd1461024757806319ab453c1461026557806323b872dd14610281578063248a9ca3146102b1576101c4565b806301ffc9a7146101c957806306fdde03146101f9578063095ea7b314610217575b600080fd5b6101e360048036038101906101de9190612636565b61058f565b6040516101f0919061267e565b60405180910390f35b610201610609565b60405161020e9190612729565b60405180910390f35b610231600480360381019061022c91906127df565b61069b565b60405161023e919061267e565b60405180910390f35b61024f6106be565b60405161025c919061282e565b60405180910390f35b61027f600480360381019061027a9190612849565b6106c8565b005b61029b60048036038101906102969190612876565b61077c565b6040516102a8919061267e565b60405180910390f35b6102cb60048036038101906102c691906128ff565b6107ab565b6040516102d8919061293b565b60405180910390f35b6102fb60048036038101906102f69190612956565b6107cc565b005b6103056107ed565b60405161031291906129b2565b60405180910390f35b6103236107f6565b604051610330919061293b565b60405180910390f35b610353600480360381019061034e9190612956565b610805565b005b61036f600480360381019061036a91906127df565b610888565b60405161037c919061267e565b60405180910390f35b61038d6108bf565b005b610397610910565b6040516103a4919061267e565b60405180910390f35b6103c760048036038101906103c29190612849565b610927565b005b6103e360048036038101906103de9190612849565b610a49565b6040516103f0919061282e565b60405180910390f35b610413600480360381019061040e9190612849565b610a92565b604051610420919061282e565b60405180910390f35b610431610ae2565b005b61043b610cda565b005b61045760048036038101906104529190612956565b610d2b565b604051610464919061267e565b60405180910390f35b610475610d97565b6040516104829190612729565b60405180910390f35b610493610e29565b6040516104a0919061293b565b60405180910390f35b6104c360048036038101906104be91906127df565b610e30565b6040516104d0919061267e565b60405180910390f35b6104f360048036038101906104ee91906127df565b610ea7565b604051610500919061267e565b60405180910390f35b610511610eca565b60405161051e919061267e565b60405180910390f35b610541600480360381019061053c91906129f9565b610ee9565b005b61055d60048036038101906105589190612956565b61102b565b005b61057960048036038101906105749190612a9b565b61104c565b604051610586919061282e565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106025750610601826110d3565b5b9050919050565b60606036805461061890612b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461064490612b0a565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b5050505050905090565b6000806106a661113d565b90506106b3818585611145565b600191505092915050565b6000603554905090565b6106d0610eca565b61070f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070690612bad565b60405180910390fd5b600061019454111561074d576040517f19389a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101946000815461075d90612bfc565b91905081905550610779816a084595161401484a00000061130e565b50565b60008061078761113d565b9050610794858285611465565b61079f8585856114f1565b60019150509392505050565b60006101306000838152602001908152602001600020600101549050919050565b6107d5826107ab565b6107de8161176a565b6107e8838361177e565b505050565b60006012905090565b6000610800611860565b905090565b61080d61113d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190612cb6565b60405180910390fd5b61088482826118a0565b5050565b60008061089361113d565b90506108b48185856108a5858961104c565b6108af9190612cd6565b611145565b600191505092915050565b6108c7610eca565b610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90612bad565b60405180910390fd5b61090e611983565b565b600060cc60009054906101000a900460ff16905090565b600060019054906101000a900460ff16610976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096d90612d7c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109dc576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109e46119e6565b6109ec611a3f565b6109f4611a90565b610a056109ff611ae9565b8261177e565b610a16610a10611b11565b8261177e565b610a2e610a21611b11565b610a29611ae9565b611b39565b610a46610a39611ae9565b610a41611ae9565b611b39565b50565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610adb609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611b96565b9050919050565b60008060019054906101000a900460ff16159050808015610b135750600160008054906101000a900460ff1660ff16105b80610b405750610b2230611ba4565b158015610b3f5750600160008054906101000a900460ff1660ff16145b5b610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7690612e0e565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610bbc576001600060016101000a81548160ff0219169083151502179055505b610c306040518060400160405280600981526020017f47656e5a204c61627300000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f47454e5a00000000000000000000000000000000000000000000000000000000815250611bc7565b610c6e6040518060400160405280600481526020017f47454e5a00000000000000000000000000000000000000000000000000000000815250611c24565b610c7e610c7961113d565b610927565b8015610cd75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610cce9190612e73565b60405180910390a15b50565b610ce2610eca565b610d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1890612bad565b60405180910390fd5b610d29611cb5565b565b6000610130600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060378054610da690612b0a565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd290612b0a565b8015610e1f5780601f10610df457610100808354040283529160200191610e1f565b820191906000526020600020905b815481529060010190602001808311610e0257829003601f168201915b5050505050905090565b6000801b81565b600080610e3b61113d565b90506000610e49828661104c565b905083811015610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8590612f00565b60405180910390fd5b610e9b8286868403611145565b60019250505092915050565b600080610eb261113d565b9050610ebf8185856114f1565b600191505092915050565b6000610ee4610ed7611ae9565b610edf61113d565b610d2b565b905090565b83421115610f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2390612f6c565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610f5b8c611d18565b89604051602001610f7196959493929190612f9b565b6040516020818303038152906040528051906020012090506000610f9482611d76565b90506000610fa482878787611d90565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b90613048565b60405180910390fd5b61101f8a8a8a611145565b50505050505050505050565b611034826107ab565b61103d8161176a565b61104783836118a0565b505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ab906130da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121a9061316c565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611301919061282e565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361137d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611374906131d8565b60405180910390fd5b61138960008383611dbb565b806035600082825461139b9190612cd6565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161144d919061282e565b60405180910390a361146160008383611dc0565b5050565b6000611471848461104c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146114eb57818110156114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d490613244565b60405180910390fd5b6114ea8484848403611145565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611560576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611557906132d6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c690613368565b60405180910390fd5b6115da838383611dbb565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611661576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611658906133fa565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611751919061282e565b60405180910390a3611764848484611dc0565b50505050565b61177b8161177661113d565b611dc5565b50565b6117888282610d2b565b61185c576001610130600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061180161113d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061189b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61188e611e4a565b611896611e54565b611e5e565b905090565b6118aa8282610d2b565b1561197f576000610130600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061192461113d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61198b611e98565b600060cc60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6119cf61113d565b6040516119dc919061341a565b60405180910390a1565b600060019054906101000a900460ff16611a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2c90612d7c565b60405180910390fd5b611a3d611ee1565b565b600060019054906101000a900460ff16611a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8590612d7c565b60405180910390fd5b565b600060019054906101000a900460ff16611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad690612d7c565b60405180910390fd5b611ae7611f4d565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b6000611b44836107ab565b9050816101306000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b600081600001549050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0d90612d7c565b60405180910390fd5b611c208282611fa7565b5050565b600060019054906101000a900460ff16611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a90612d7c565b60405180910390fd5b611cb2816040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525061201a565b50565b611cbd612095565b600160cc60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d0161113d565b604051611d0e919061341a565b60405180910390a1565b600080609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611d6581611b96565b9150611d70816120df565b50919050565b6000611d89611d83611860565b836120f5565b9050919050565b6000806000611da187878787612128565b91509150611dae8161220a565b8192505050949350505050565b505050565b505050565b611dcf8282610d2b565b611e4657611ddc81612370565b611dea8360001c602061239d565b604051602001611dfb929190613509565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3d9190612729565b60405180910390fd5b5050565b6000606554905090565b6000606654905090565b60008383834630604051602001611e79959493929190613543565b6040516020818303038152906040528051906020012090509392505050565b611ea0610910565b611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed6906135e2565b60405180910390fd5b565b600060019054906101000a900460ff16611f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2790612d7c565b60405180910390fd5b600060cc60006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16611f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9390612d7c565b60405180910390fd5b600161016281905550565b600060019054906101000a900460ff16611ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fed90612d7c565b60405180910390fd5b816036908161200591906137d3565b50806037908161201591906137d3565b505050565b600060019054906101000a900460ff16612069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206090612d7c565b60405180910390fd5b600082805190602001209050600082805190602001209050816065819055508060668190555050505050565b61209d610910565b156120dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d4906138f1565b60405180910390fd5b565b6001816000016000828254019250508190555050565b6000828260405160200161210a92919061397e565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612163576000600391509150612201565b60006001878787876040516000815260200160405260405161218894939291906139b5565b6020604051602081039080840390855afa1580156121aa573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121f857600060019250925050612201565b80600092509250505b94509492505050565b6000600481111561221e5761221d6139fa565b5b816004811115612231576122306139fa565b5b031561236d576001600481111561224b5761224a6139fa565b5b81600481111561225e5761225d6139fa565b5b0361229e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229590613a75565b60405180910390fd5b600260048111156122b2576122b16139fa565b5b8160048111156122c5576122c46139fa565b5b03612305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fc90613ae1565b60405180910390fd5b60036004811115612319576123186139fa565b5b81600481111561232c5761232b6139fa565b5b0361236c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236390613b73565b60405180910390fd5b5b50565b60606123968273ffffffffffffffffffffffffffffffffffffffff16601460ff1661239d565b9050919050565b6060600060028360026123b09190613b93565b6123ba9190612cd6565b67ffffffffffffffff8111156123d3576123d2613602565b5b6040519080825280601f01601f1916602001820160405280156124055781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061243d5761243c613bed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124a1576124a0613bed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026124e19190613b93565b6124eb9190612cd6565b90505b600181111561258b577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061252d5761252c613bed565b5b1a60f81b82828151811061254457612543613bed565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061258490613c1c565b90506124ee565b50600084146125cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c690613c91565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612613816125de565b811461261e57600080fd5b50565b6000813590506126308161260a565b92915050565b60006020828403121561264c5761264b6125d9565b5b600061265a84828501612621565b91505092915050565b60008115159050919050565b61267881612663565b82525050565b6000602082019050612693600083018461266f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126d35780820151818401526020810190506126b8565b60008484015250505050565b6000601f19601f8301169050919050565b60006126fb82612699565b61270581856126a4565b93506127158185602086016126b5565b61271e816126df565b840191505092915050565b6000602082019050818103600083015261274381846126f0565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127768261274b565b9050919050565b6127868161276b565b811461279157600080fd5b50565b6000813590506127a38161277d565b92915050565b6000819050919050565b6127bc816127a9565b81146127c757600080fd5b50565b6000813590506127d9816127b3565b92915050565b600080604083850312156127f6576127f56125d9565b5b600061280485828601612794565b9250506020612815858286016127ca565b9150509250929050565b612828816127a9565b82525050565b6000602082019050612843600083018461281f565b92915050565b60006020828403121561285f5761285e6125d9565b5b600061286d84828501612794565b91505092915050565b60008060006060848603121561288f5761288e6125d9565b5b600061289d86828701612794565b93505060206128ae86828701612794565b92505060406128bf868287016127ca565b9150509250925092565b6000819050919050565b6128dc816128c9565b81146128e757600080fd5b50565b6000813590506128f9816128d3565b92915050565b600060208284031215612915576129146125d9565b5b6000612923848285016128ea565b91505092915050565b612935816128c9565b82525050565b6000602082019050612950600083018461292c565b92915050565b6000806040838503121561296d5761296c6125d9565b5b600061297b858286016128ea565b925050602061298c85828601612794565b9150509250929050565b600060ff82169050919050565b6129ac81612996565b82525050565b60006020820190506129c760008301846129a3565b92915050565b6129d681612996565b81146129e157600080fd5b50565b6000813590506129f3816129cd565b92915050565b600080600080600080600060e0888a031215612a1857612a176125d9565b5b6000612a268a828b01612794565b9750506020612a378a828b01612794565b9650506040612a488a828b016127ca565b9550506060612a598a828b016127ca565b9450506080612a6a8a828b016129e4565b93505060a0612a7b8a828b016128ea565b92505060c0612a8c8a828b016128ea565b91505092959891949750929550565b60008060408385031215612ab257612ab16125d9565b5b6000612ac085828601612794565b9250506020612ad185828601612794565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b2257607f821691505b602082108103612b3557612b34612adb565b5b50919050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b6000612b97602c836126a4565b9150612ba282612b3b565b604082019050919050565b60006020820190508181036000830152612bc681612b8a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c07826127a9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c3957612c38612bcd565b5b600182019050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612ca0602f836126a4565b9150612cab82612c44565b604082019050919050565b60006020820190508181036000830152612ccf81612c93565b9050919050565b6000612ce1826127a9565b9150612cec836127a9565b9250828201905080821115612d0457612d03612bcd565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612d66602b836126a4565b9150612d7182612d0a565b604082019050919050565b60006020820190508181036000830152612d9581612d59565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612df8602e836126a4565b9150612e0382612d9c565b604082019050919050565b60006020820190508181036000830152612e2781612deb565b9050919050565b6000819050919050565b6000819050919050565b6000612e5d612e58612e5384612e2e565b612e38565b612996565b9050919050565b612e6d81612e42565b82525050565b6000602082019050612e886000830184612e64565b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612eea6025836126a4565b9150612ef582612e8e565b604082019050919050565b60006020820190508181036000830152612f1981612edd565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b6000612f56601d836126a4565b9150612f6182612f20565b602082019050919050565b60006020820190508181036000830152612f8581612f49565b9050919050565b612f958161276b565b82525050565b600060c082019050612fb0600083018961292c565b612fbd6020830188612f8c565b612fca6040830187612f8c565b612fd7606083018661281f565b612fe4608083018561281f565b612ff160a083018461281f565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000613032601e836126a4565b915061303d82612ffc565b602082019050919050565b6000602082019050818103600083015261306181613025565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006130c46024836126a4565b91506130cf82613068565b604082019050919050565b600060208201905081810360008301526130f3816130b7565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006131566022836126a4565b9150613161826130fa565b604082019050919050565b6000602082019050818103600083015261318581613149565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006131c2601f836126a4565b91506131cd8261318c565b602082019050919050565b600060208201905081810360008301526131f1816131b5565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061322e601d836126a4565b9150613239826131f8565b602082019050919050565b6000602082019050818103600083015261325d81613221565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006132c06025836126a4565b91506132cb82613264565b604082019050919050565b600060208201905081810360008301526132ef816132b3565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006133526023836126a4565b915061335d826132f6565b604082019050919050565b6000602082019050818103600083015261338181613345565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006133e46026836126a4565b91506133ef82613388565b604082019050919050565b60006020820190508181036000830152613413816133d7565b9050919050565b600060208201905061342f6000830184612f8c565b92915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613476601783613435565b915061348182613440565b601782019050919050565b600061349782612699565b6134a18185613435565b93506134b18185602086016126b5565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006134f3601183613435565b91506134fe826134bd565b601182019050919050565b600061351482613469565b9150613520828561348c565b915061352b826134e6565b9150613537828461348c565b91508190509392505050565b600060a082019050613558600083018861292c565b613565602083018761292c565b613572604083018661292c565b61357f606083018561281f565b61358c6080830184612f8c565b9695505050505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006135cc6014836126a4565b91506135d782613596565b602082019050919050565b600060208201905081810360008301526135fb816135bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613656565b61369d8683613656565b95508019841693508086168417925050509392505050565b60006136d06136cb6136c6846127a9565b612e38565b6127a9565b9050919050565b6000819050919050565b6136ea836136b5565b6136fe6136f6826136d7565b848454613663565b825550505050565b600090565b613713613706565b61371e8184846136e1565b505050565b5b818110156137425761373760008261370b565b600181019050613724565b5050565b601f8211156137875761375881613631565b61376184613646565b81016020851015613770578190505b61378461377c85613646565b830182613723565b50505b505050565b600082821c905092915050565b60006137aa6000198460080261378c565b1980831691505092915050565b60006137c38383613799565b9150826002028217905092915050565b6137dc82612699565b67ffffffffffffffff8111156137f5576137f4613602565b5b6137ff8254612b0a565b61380a828285613746565b600060209050601f83116001811461383d576000841561382b578287015190505b61383585826137b7565b86555061389d565b601f19841661384b86613631565b60005b828110156138735784890151825560018201915060208501945060208101905061384e565b86831015613890578489015161388c601f891682613799565b8355505b6001600288020188555050505b505050505050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006138db6010836126a4565b91506138e6826138a5565b602082019050919050565b6000602082019050818103600083015261390a816138ce565b9050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000613947600283613435565b915061395282613911565b600282019050919050565b6000819050919050565b613978613973826128c9565b61395d565b82525050565b60006139898261393a565b91506139958285613967565b6020820191506139a58284613967565b6020820191508190509392505050565b60006080820190506139ca600083018761292c565b6139d760208301866129a3565b6139e4604083018561292c565b6139f1606083018461292c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613a5f6018836126a4565b9150613a6a82613a29565b602082019050919050565b60006020820190508181036000830152613a8e81613a52565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613acb601f836126a4565b9150613ad682613a95565b602082019050919050565b60006020820190508181036000830152613afa81613abe565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b5d6022836126a4565b9150613b6882613b01565b604082019050919050565b60006020820190508181036000830152613b8c81613b50565b9050919050565b6000613b9e826127a9565b9150613ba9836127a9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613be257613be1612bcd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613c27826127a9565b915060008203613c3a57613c39612bcd565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613c7b6020836126a4565b9150613c8682613c45565b602082019050919050565b60006020820190508181036000830152613caa81613c6e565b905091905056fea2646970667358221220278499bc91063563324f8c4b12deacfeb306fd03b7bdd13fcdca8ca351f95b6764736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA217FDDF GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB6DB75A0 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x543 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x55F JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4D9 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x8129FC1C GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x429 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x433 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x46D JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x3F9 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x36568ABE GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x38F JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x31B JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x19AB453C EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2B1 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x217 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x2636 JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x201 PUSH2 0x609 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22C SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24F PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25C SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0x6C8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x2876 JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x293B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F6 SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x305 PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x323 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x293B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x353 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x805 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x36F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36A SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0x888 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37C SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x38D PUSH2 0x8BF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x397 PUSH2 0x910 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A4 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C2 SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F0 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x413 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40E SWAP2 SWAP1 PUSH2 0x2849 JUMP JUMPDEST PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x420 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x431 PUSH2 0xAE2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x43B PUSH2 0xCDA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x457 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x452 SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x464 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x475 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x482 SWAP2 SWAP1 PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x493 PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x293B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BE SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0xE30 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x27DF JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x500 SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x511 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51E SWAP2 SWAP1 PUSH2 0x267E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x541 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53C SWAP2 SWAP1 PUSH2 0x29F9 JUMP JUMPDEST PUSH2 0xEE9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x55D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x558 SWAP2 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x102B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x579 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x2A9B JUMP JUMPDEST PUSH2 0x104C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x586 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x602 JUMPI POP PUSH2 0x601 DUP3 PUSH2 0x10D3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x618 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x644 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x691 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x666 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x691 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x674 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6A6 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0x6B3 DUP2 DUP6 DUP6 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x6D0 PUSH2 0xECA JUMP JUMPDEST PUSH2 0x70F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x706 SWAP1 PUSH2 0x2BAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x194 SLOAD GT ISZERO PUSH2 0x74D JUMPI PUSH1 0x40 MLOAD PUSH32 0x19389A4700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x194 PUSH1 0x0 DUP2 SLOAD PUSH2 0x75D SWAP1 PUSH2 0x2BFC JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH2 0x779 DUP2 PUSH11 0x84595161401484A000000 PUSH2 0x130E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x787 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0x794 DUP6 DUP3 DUP6 PUSH2 0x1465 JUMP JUMPDEST PUSH2 0x79F DUP6 DUP6 DUP6 PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7D5 DUP3 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x7DE DUP2 PUSH2 0x176A JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 PUSH2 0x177E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x800 PUSH2 0x1860 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x80D PUSH2 0x113D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x871 SWAP1 PUSH2 0x2CB6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x884 DUP3 DUP3 PUSH2 0x18A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x893 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0x8B4 DUP2 DUP6 DUP6 PUSH2 0x8A5 DUP6 DUP10 PUSH2 0x104C JUMP JUMPDEST PUSH2 0x8AF SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8C7 PUSH2 0xECA JUMP JUMPDEST PUSH2 0x906 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8FD SWAP1 PUSH2 0x2BAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x90E PUSH2 0x1983 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x976 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96D SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9E4 PUSH2 0x19E6 JUMP JUMPDEST PUSH2 0x9EC PUSH2 0x1A3F JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x1A90 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x9FF PUSH2 0x1AE9 JUMP JUMPDEST DUP3 PUSH2 0x177E JUMP JUMPDEST PUSH2 0xA16 PUSH2 0xA10 PUSH2 0x1B11 JUMP JUMPDEST DUP3 PUSH2 0x177E JUMP JUMPDEST PUSH2 0xA2E PUSH2 0xA21 PUSH2 0x1B11 JUMP JUMPDEST PUSH2 0xA29 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST PUSH2 0xA46 PUSH2 0xA39 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xA41 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x1B39 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x1B96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0xB13 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0xB40 JUMPI POP PUSH2 0xB22 ADDRESS PUSH2 0x1BA4 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xB3F JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0xB7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB76 SWAP1 PUSH2 0x2E0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xBBC JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0xC30 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x47656E5A204C6162730000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x47454E5A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1BC7 JUMP JUMPDEST PUSH2 0xC6E PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x47454E5A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0xC7E PUSH2 0xC79 PUSH2 0x113D JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCD7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xCCE SWAP2 SWAP1 PUSH2 0x2E73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0xCE2 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xD21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD18 SWAP1 PUSH2 0x2BAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD29 PUSH2 0x1CB5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0xDA6 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDD2 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE1F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDF4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE1F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE02 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE3B PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE49 DUP3 DUP7 PUSH2 0x104C JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xE8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE85 SWAP1 PUSH2 0x2F00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE9B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEB2 PUSH2 0x113D JUMP JUMPDEST SWAP1 POP PUSH2 0xEBF DUP2 DUP6 DUP6 PUSH2 0x14F1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE4 PUSH2 0xED7 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xEDF PUSH2 0x113D JUMP JUMPDEST PUSH2 0xD2B JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xF2C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF23 SWAP1 PUSH2 0x2F6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xF5B DUP13 PUSH2 0x1D18 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF71 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xF94 DUP3 PUSH2 0x1D76 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xFA4 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1D90 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x100B SWAP1 PUSH2 0x3048 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x101F DUP11 DUP11 DUP11 PUSH2 0x1145 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1034 DUP3 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x103D DUP2 PUSH2 0x176A JUMP JUMPDEST PUSH2 0x1047 DUP4 DUP4 PUSH2 0x18A0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11B4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11AB SWAP1 PUSH2 0x30DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1223 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x121A SWAP1 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1301 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x137D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1374 SWAP1 PUSH2 0x31D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1389 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1DBB JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x139B SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x33 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x144D SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1461 PUSH1 0x0 DUP4 DUP4 PUSH2 0x1DC0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1471 DUP5 DUP5 PUSH2 0x104C JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x14EB JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x14DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14D4 SWAP1 PUSH2 0x3244 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14EA DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x1145 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1560 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1557 SWAP1 PUSH2 0x32D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C6 SWAP1 PUSH2 0x3368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x15DA DUP4 DUP4 DUP4 PUSH2 0x1DBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1661 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1658 SWAP1 PUSH2 0x33FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1751 SWAP2 SWAP1 PUSH2 0x282E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1764 DUP5 DUP5 DUP5 PUSH2 0x1DC0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x177B DUP2 PUSH2 0x1776 PUSH2 0x113D JUMP JUMPDEST PUSH2 0x1DC5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1788 DUP3 DUP3 PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x185C JUMPI PUSH1 0x1 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1801 PUSH2 0x113D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x189B PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x188E PUSH2 0x1E4A JUMP JUMPDEST PUSH2 0x1896 PUSH2 0x1E54 JUMP JUMPDEST PUSH2 0x1E5E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x18AA DUP3 DUP3 PUSH2 0xD2B JUMP JUMPDEST ISZERO PUSH2 0x197F JUMPI PUSH1 0x0 PUSH2 0x130 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x1924 PUSH2 0x113D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x198B PUSH2 0x1E98 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x19CF PUSH2 0x113D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19DC SWAP2 SWAP1 PUSH2 0x341A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A2C SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A3D PUSH2 0x1EE1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1A8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A85 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1ADF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD6 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1AE7 PUSH2 0x1F4D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B44 DUP4 PUSH2 0x7AB JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x130 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C16 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C0D SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C20 DUP3 DUP3 PUSH2 0x1FA7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C73 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C6A SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CB2 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x201A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1CBD PUSH2 0x2095 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1D01 PUSH2 0x113D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0E SWAP2 SWAP1 PUSH2 0x341A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1D65 DUP2 PUSH2 0x1B96 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D70 DUP2 PUSH2 0x20DF JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D89 PUSH2 0x1D83 PUSH2 0x1860 JUMP JUMPDEST DUP4 PUSH2 0x20F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1DA1 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2128 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1DAE DUP2 PUSH2 0x220A JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1DCF DUP3 DUP3 PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x1E46 JUMPI PUSH2 0x1DDC DUP2 PUSH2 0x2370 JUMP JUMPDEST PUSH2 0x1DEA DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x239D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1DFB SWAP3 SWAP2 SWAP1 PUSH2 0x3509 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E3D SWAP2 SWAP1 PUSH2 0x2729 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x65 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x66 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1E79 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1EA0 PUSH2 0x910 JUMP JUMPDEST PUSH2 0x1EDF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1ED6 SWAP1 PUSH2 0x35E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F27 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xCC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1F9C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F93 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x162 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FF6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FED SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x36 SWAP1 DUP2 PUSH2 0x2005 SWAP2 SWAP1 PUSH2 0x37D3 JUMP JUMPDEST POP DUP1 PUSH1 0x37 SWAP1 DUP2 PUSH2 0x2015 SWAP2 SWAP1 PUSH2 0x37D3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2069 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2060 SWAP1 PUSH2 0x2D7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x66 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x209D PUSH2 0x910 JUMP JUMPDEST ISZERO PUSH2 0x20DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20D4 SWAP1 PUSH2 0x38F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x210A SWAP3 SWAP2 SWAP1 PUSH2 0x397E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x2163 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2188 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39B5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x21F8 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2201 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x221E JUMPI PUSH2 0x221D PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2231 JUMPI PUSH2 0x2230 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x236D JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x224B JUMPI PUSH2 0x224A PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x225E JUMPI PUSH2 0x225D PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB PUSH2 0x229E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2295 SWAP1 PUSH2 0x3A75 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x22B2 JUMPI PUSH2 0x22B1 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x22C5 JUMPI PUSH2 0x22C4 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB PUSH2 0x2305 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22FC SWAP1 PUSH2 0x3AE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2319 JUMPI PUSH2 0x2318 PUSH2 0x39FA JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x232C JUMPI PUSH2 0x232B PUSH2 0x39FA JUMP JUMPDEST JUMPDEST SUB PUSH2 0x236C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2363 SWAP1 PUSH2 0x3B73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2396 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x239D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x23B0 SWAP2 SWAP1 PUSH2 0x3B93 JUMP JUMPDEST PUSH2 0x23BA SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23D3 JUMPI PUSH2 0x23D2 PUSH2 0x3602 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2405 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x243D JUMPI PUSH2 0x243C PUSH2 0x3BED JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x24A1 JUMPI PUSH2 0x24A0 PUSH2 0x3BED JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x24E1 SWAP2 SWAP1 PUSH2 0x3B93 JUMP JUMPDEST PUSH2 0x24EB SWAP2 SWAP1 PUSH2 0x2CD6 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x258B JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x252D JUMPI PUSH2 0x252C PUSH2 0x3BED JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2544 JUMPI PUSH2 0x2543 PUSH2 0x3BED JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2584 SWAP1 PUSH2 0x3C1C JUMP JUMPDEST SWAP1 POP PUSH2 0x24EE JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x25CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25C6 SWAP1 PUSH2 0x3C91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2613 DUP2 PUSH2 0x25DE JUMP JUMPDEST DUP2 EQ PUSH2 0x261E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2630 DUP2 PUSH2 0x260A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x264C JUMPI PUSH2 0x264B PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x265A DUP5 DUP3 DUP6 ADD PUSH2 0x2621 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2678 DUP2 PUSH2 0x2663 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2693 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x266F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x26D3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x26B8 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26FB DUP3 PUSH2 0x2699 JUMP JUMPDEST PUSH2 0x2705 DUP2 DUP6 PUSH2 0x26A4 JUMP JUMPDEST SWAP4 POP PUSH2 0x2715 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x26B5 JUMP JUMPDEST PUSH2 0x271E DUP2 PUSH2 0x26DF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2743 DUP2 DUP5 PUSH2 0x26F0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2776 DUP3 PUSH2 0x274B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2786 DUP2 PUSH2 0x276B JUMP JUMPDEST DUP2 EQ PUSH2 0x2791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27A3 DUP2 PUSH2 0x277D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27BC DUP2 PUSH2 0x27A9 JUMP JUMPDEST DUP2 EQ PUSH2 0x27C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27D9 DUP2 PUSH2 0x27B3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27F6 JUMPI PUSH2 0x27F5 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2804 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2815 DUP6 DUP3 DUP7 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2828 DUP2 PUSH2 0x27A9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2843 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x281F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x285F JUMPI PUSH2 0x285E PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x286D DUP5 DUP3 DUP6 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x288F JUMPI PUSH2 0x288E PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x289D DUP7 DUP3 DUP8 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x28AE DUP7 DUP3 DUP8 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x28BF DUP7 DUP3 DUP8 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x28DC DUP2 PUSH2 0x28C9 JUMP JUMPDEST DUP2 EQ PUSH2 0x28E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x28F9 DUP2 PUSH2 0x28D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2915 JUMPI PUSH2 0x2914 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2923 DUP5 DUP3 DUP6 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2935 DUP2 PUSH2 0x28C9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2950 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x292C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x296D JUMPI PUSH2 0x296C PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x297B DUP6 DUP3 DUP7 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x298C DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29AC DUP2 PUSH2 0x2996 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29C7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x29A3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29D6 DUP2 PUSH2 0x2996 JUMP JUMPDEST DUP2 EQ PUSH2 0x29E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x29F3 DUP2 PUSH2 0x29CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2A18 JUMPI PUSH2 0x2A17 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A26 DUP11 DUP3 DUP12 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x2A37 DUP11 DUP3 DUP12 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x2A48 DUP11 DUP3 DUP12 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x2A59 DUP11 DUP3 DUP12 ADD PUSH2 0x27CA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x2A6A DUP11 DUP3 DUP12 ADD PUSH2 0x29E4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x2A7B DUP11 DUP3 DUP12 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x2A8C DUP11 DUP3 DUP12 ADD PUSH2 0x28EA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AB2 JUMPI PUSH2 0x2AB1 PUSH2 0x25D9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AC0 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2AD1 DUP6 DUP3 DUP7 ADD PUSH2 0x2794 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2B22 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2B35 JUMPI PUSH2 0x2B34 PUSH2 0x2ADB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B97 PUSH1 0x2C DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BA2 DUP3 PUSH2 0x2B3B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2BC6 DUP2 PUSH2 0x2B8A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2C07 DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2C39 JUMPI PUSH2 0x2C38 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA0 PUSH1 0x2F DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CAB DUP3 PUSH2 0x2C44 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CCF DUP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE1 DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CEC DUP4 PUSH2 0x27A9 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2D04 JUMPI PUSH2 0x2D03 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D66 PUSH1 0x2B DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D71 DUP3 PUSH2 0x2D0A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2D95 DUP2 PUSH2 0x2D59 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DF8 PUSH1 0x2E DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E03 DUP3 PUSH2 0x2D9C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E27 DUP2 PUSH2 0x2DEB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E5D PUSH2 0x2E58 PUSH2 0x2E53 DUP5 PUSH2 0x2E2E JUMP JUMPDEST PUSH2 0x2E38 JUMP JUMPDEST PUSH2 0x2996 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2E6D DUP2 PUSH2 0x2E42 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2E88 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E64 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EEA PUSH1 0x25 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2EF5 DUP3 PUSH2 0x2E8E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F19 DUP2 PUSH2 0x2EDD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F56 PUSH1 0x1D DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F61 DUP3 PUSH2 0x2F20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F85 DUP2 PUSH2 0x2F49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F95 DUP2 PUSH2 0x276B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x2FB0 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x2FBD PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x2FCA PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x2FD7 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x281F JUMP JUMPDEST PUSH2 0x2FE4 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x281F JUMP JUMPDEST PUSH2 0x2FF1 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x281F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3032 PUSH1 0x1E DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x303D DUP3 PUSH2 0x2FFC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3061 DUP2 PUSH2 0x3025 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30C4 PUSH1 0x24 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x30CF DUP3 PUSH2 0x3068 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30F3 DUP2 PUSH2 0x30B7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3156 PUSH1 0x22 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3161 DUP3 PUSH2 0x30FA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3185 DUP2 PUSH2 0x3149 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31C2 PUSH1 0x1F DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x31CD DUP3 PUSH2 0x318C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31F1 DUP2 PUSH2 0x31B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x322E PUSH1 0x1D DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3239 DUP3 PUSH2 0x31F8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x325D DUP2 PUSH2 0x3221 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32C0 PUSH1 0x25 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x32CB DUP3 PUSH2 0x3264 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32EF DUP2 PUSH2 0x32B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3352 PUSH1 0x23 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x335D DUP3 PUSH2 0x32F6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3381 DUP2 PUSH2 0x3345 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E4 PUSH1 0x26 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x33EF DUP3 PUSH2 0x3388 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3413 DUP2 PUSH2 0x33D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x342F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3476 PUSH1 0x17 DUP4 PUSH2 0x3435 JUMP JUMPDEST SWAP2 POP PUSH2 0x3481 DUP3 PUSH2 0x3440 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3497 DUP3 PUSH2 0x2699 JUMP JUMPDEST PUSH2 0x34A1 DUP2 DUP6 PUSH2 0x3435 JUMP JUMPDEST SWAP4 POP PUSH2 0x34B1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x26B5 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F3 PUSH1 0x11 DUP4 PUSH2 0x3435 JUMP JUMPDEST SWAP2 POP PUSH2 0x34FE DUP3 PUSH2 0x34BD JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3514 DUP3 PUSH2 0x3469 JUMP JUMPDEST SWAP2 POP PUSH2 0x3520 DUP3 DUP6 PUSH2 0x348C JUMP JUMPDEST SWAP2 POP PUSH2 0x352B DUP3 PUSH2 0x34E6 JUMP JUMPDEST SWAP2 POP PUSH2 0x3537 DUP3 DUP5 PUSH2 0x348C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x3558 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x3565 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x3572 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x357F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x281F JUMP JUMPDEST PUSH2 0x358C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2F8C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35CC PUSH1 0x14 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x35D7 DUP3 PUSH2 0x3596 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35FB DUP2 PUSH2 0x35BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3693 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3656 JUMP JUMPDEST PUSH2 0x369D DUP7 DUP4 PUSH2 0x3656 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36D0 PUSH2 0x36CB PUSH2 0x36C6 DUP5 PUSH2 0x27A9 JUMP JUMPDEST PUSH2 0x2E38 JUMP JUMPDEST PUSH2 0x27A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36EA DUP4 PUSH2 0x36B5 JUMP JUMPDEST PUSH2 0x36FE PUSH2 0x36F6 DUP3 PUSH2 0x36D7 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3663 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3713 PUSH2 0x3706 JUMP JUMPDEST PUSH2 0x371E DUP2 DUP5 DUP5 PUSH2 0x36E1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3742 JUMPI PUSH2 0x3737 PUSH1 0x0 DUP3 PUSH2 0x370B JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3724 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3787 JUMPI PUSH2 0x3758 DUP2 PUSH2 0x3631 JUMP JUMPDEST PUSH2 0x3761 DUP5 PUSH2 0x3646 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3770 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3784 PUSH2 0x377C DUP6 PUSH2 0x3646 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3723 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37AA PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x378C JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37C3 DUP4 DUP4 PUSH2 0x3799 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x37DC DUP3 PUSH2 0x2699 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x37F5 JUMPI PUSH2 0x37F4 PUSH2 0x3602 JUMP JUMPDEST JUMPDEST PUSH2 0x37FF DUP3 SLOAD PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0x380A DUP3 DUP3 DUP6 PUSH2 0x3746 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x383D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x382B JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3835 DUP6 DUP3 PUSH2 0x37B7 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x389D JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x384B DUP7 PUSH2 0x3631 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3873 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x384E JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3890 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x388C PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3799 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38DB PUSH1 0x10 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x38E6 DUP3 PUSH2 0x38A5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x390A DUP2 PUSH2 0x38CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3947 PUSH1 0x2 DUP4 PUSH2 0x3435 JUMP JUMPDEST SWAP2 POP PUSH2 0x3952 DUP3 PUSH2 0x3911 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3978 PUSH2 0x3973 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x395D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3989 DUP3 PUSH2 0x393A JUMP JUMPDEST SWAP2 POP PUSH2 0x3995 DUP3 DUP6 PUSH2 0x3967 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x39A5 DUP3 DUP5 PUSH2 0x3967 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x39CA PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x39D7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x39E4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x292C JUMP JUMPDEST PUSH2 0x39F1 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x292C JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A5F PUSH1 0x18 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A6A DUP3 PUSH2 0x3A29 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A8E DUP2 PUSH2 0x3A52 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ACB PUSH1 0x1F DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AD6 DUP3 PUSH2 0x3A95 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AFA DUP2 PUSH2 0x3ABE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B5D PUSH1 0x22 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B68 DUP3 PUSH2 0x3B01 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B8C DUP2 PUSH2 0x3B50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B9E DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH2 0x3BA9 DUP4 PUSH2 0x27A9 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3BE2 JUMPI PUSH2 0x3BE1 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3C27 DUP3 PUSH2 0x27A9 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x3C3A JUMPI PUSH2 0x3C39 PUSH2 0x2BCD JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C7B PUSH1 0x20 DUP4 PUSH2 0x26A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x3C86 DUP3 PUSH2 0x3C45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CAA DUP2 PUSH2 0x3C6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 DUP5 SWAP10 0xBC SWAP2 MOD CALLDATALOAD PUSH4 0x324F8C4B SLT 0xDE 0xAC INVALID 0xB3 MOD REVERT SUB 0xB7 0xBD 0xD1 EXTCODEHASH 0xCD 0xCA DUP13 LOG3 MLOAD 0xF9 JUMPDEST PUSH8 0x64736F6C63430008 LT STOP CALLER ","sourceMap":"492:798:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2491:98:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3579:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;938:212:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5527:286:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3428:91:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3276:113:9;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6242:214:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6208:234:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1223:65:25;;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:21;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3743:125:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3026:126:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;708:183:25;;;:::i;:::-;;1156:61;;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2702:102:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6929:427:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4064:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:21;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2328:637:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4311:149:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;2491:98:6:-;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;4867:13;4883:12;:10;:12::i;:::-;4867:28;;4905:32;4914:5;4921:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;:::o;3579:106::-;3640:7;3666:12;;3659:19;;3579:106;:::o;938:212:25:-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1022:1:25::1;1007:12;;:16;1003:83;;;1046:29;;;;;;;;;;;;;;1003:83;1097:12;;1095:14;;;;;:::i;:::-;;;;;;;;1119:24;1125:11;1138:4;1119:5;:24::i;:::-;938:212:::0;:::o;5527:286:6:-;5654:4;5670:15;5688:12;:10;:12::i;:::-;5670:30;;5710:38;5726:4;5732:7;5741:6;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;5802:4;5795:11;;;5527:286;;;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;3428:91:6:-;3486:5;3510:2;3503:9;;3428:91;:::o;3276:113:9:-;3336:7;3362:20;:18;:20::i;:::-;3355:27;;3276:113;:::o;6242:214:0:-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;6208:234:6:-;6296:4;6312:13;6328:12;:10;:12::i;:::-;6312:28;;6350:64;6359:5;6366:7;6403:10;6375:25;6385:5;6392:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;:::-;6431:4;6424:11;;;6208:234;;;;:::o;1223:65:25:-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1271:10:25::1;:8;:10::i;:::-;1223:65::o:0;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:21:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:21::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;3743:125:6:-;3817:7;3843:9;:18;3853:7;3843:18;;;;;;;;;;;;;;;;3836:25;;3743:125;;;:::o;3026:126:9:-;3095:7;3121:24;:7;:14;3129:5;3121:14;;;;;;;;;;;;;;;:22;:24::i;:::-;3114:31;;3026:126;;;:::o;708:183:25:-;3268:19:3;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;761:33:25::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;::::0;:12:::1;:33::i;:::-;804:26;;;;;;;;;;;;;;;;;::::0;:18:::1;:26::i;:::-;840:44;871:12;:10;:12::i;:::-;840:30;:44::i;:::-;3640:14:3::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;708:183:25:o;1156:61::-;652:9:21;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;1202:8:25::1;:6;:8::i;:::-;1156:61::o:0;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2702:102:6:-;2758:13;2790:7;2783:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2702:102;:::o;2324:49:0:-;2369:4;2324:49;;;:::o;6929:427:6:-;7022:4;7038:13;7054:12;:10;:12::i;:::-;7038:28;;7076:24;7103:25;7113:5;7120:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;7345:4;7338:11;;;;6929:427;;;;:::o;4064:189::-;4143:4;4159:13;4175:12;:10;:12::i;:::-;4159:28;;4197;4207:5;4214:2;4218:6;4197:9;:28::i;:::-;4242:4;4235:11;;;4064:189;;;;:::o;1289:117:21:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;2328:637:9:-;2563:8;2544:15;:27;;2536:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2616:18;1363:95;2676:5;2683:7;2692:5;2699:16;2709:5;2699:9;:16::i;:::-;2717:8;2647:79;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2637:90;;;;;;2616:111;;2738:12;2753:28;2770:10;2753:16;:28::i;:::-;2738:43;;2792:14;2809:39;2834:4;2840:1;2843;2846;2809:24;:39::i;:::-;2792:56;;2876:5;2866:15;;:6;:15;;;2858:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;2927:31;2936:5;2943:7;2952:5;2927:8;:31::i;:::-;2526:439;;;2328:637;;;;;;;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;4311:149:6:-;4400:7;4426:11;:18;4438:5;4426:18;;;;;;;;;;;;;;;:27;4445:7;4426:27;;;;;;;;;;;;;;;;4419:34;;4311:149;;;;:::o;1060:166:18:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;850:96:13:-;903:7;929:10;922:17;;850:96;:::o;10841:370:6:-;10989:1;10972:19;;:5;:19;;;10964:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11069:1;11050:21;;:7;:21;;;11042:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11151:6;11121:11;:18;11133:5;11121:18;;;;;;;;;;;;;;;:27;11140:7;11121:27;;;;;;;;;;;;;;;:36;;;;11188:7;11172:32;;11181:5;11172:32;;;11197:6;11172:32;;;;;;:::i;:::-;;;;;;;;10841:370;;;:::o;8904:535::-;9006:1;8987:21;;:7;:21;;;8979:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;9055:49;9084:1;9088:7;9097:6;9055:20;:49::i;:::-;9131:6;9115:12;;:22;;;;;;;:::i;:::-;;;;;;;;9305:6;9283:9;:18;9293:7;9283:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9357:7;9336:37;;9353:1;9336:37;;;9366:6;9336:37;;;;;;:::i;:::-;;;;;;;;9384:48;9412:1;9416:7;9425:6;9384:19;:48::i;:::-;8904:535;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;11708:17;11688:16;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11684:243;11612:321;11492:441;;;:::o;7810:818::-;7952:1;7936:18;;:4;:18;;;7928:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8028:1;8014:16;;:2;:16;;;8006:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;8130:19;8152:9;:15;8162:4;8152:15;;;;;;;;;;;;;;;;8130:37;;8200:6;8185:11;:21;;8177:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8315:6;8301:11;:20;8283:9;:15;8293:4;8283:15;;;;;;;;;;;;;;;:38;;;;8515:6;8498:9;:13;8508:2;8498:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8562:2;8547:26;;8556:4;8547:26;;;8566:6;8547:26;;;;;;:::i;:::-;;;;;;;;8584:37;8604:4;8610:2;8614:6;8584:19;:37::i;:::-;7918:710;7810:818;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;2851:160:17:-;2904:7;2930:74;1604:95;2964:17;:15;:17::i;:::-;2983:20;:18;:20::i;:::-;2930:21;:74::i;:::-;2923:81;;2851:160;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;2676:117:4:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;1063:97::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:22:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;838:112:14:-;903:7;929;:14;;;922:21;;838:112;;;:::o;1186:320:12:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;2114:147:6:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2216:38:6::1;2239:5;2246:7;2216:22;:38::i;:::-;2114:147:::0;;:::o;2055:125:9:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2139:34:9::1;2163:4;2139:34;;;;;;;;;;;;;;;;::::0;:23:::1;:34::i;:::-;2055:125:::0;:::o;2429:115:4:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;3520:214:9:-;3580:15;3607:41;3651:7;:14;3659:5;3651:14;;;;;;;;;;;;;;;3607:58;;3685:15;:5;:13;:15::i;:::-;3675:25;;3710:17;:5;:15;:17::i;:::-;3597:137;3520:214;;;:::o;3899:176:17:-;3976:7;4002:66;4035:20;:18;:20::i;:::-;4057:10;4002:32;:66::i;:::-;3995:73;;3899:176;;;:::o;6718:270:16:-;6841:7;6861:17;6880:18;6902:25;6913:4;6919:1;6922;6925;6902:10;:25::i;:::-;6860:67;;;;6937:18;6949:5;6937:11;:18::i;:::-;6972:9;6965:16;;;;6718:270;;;;;;:::o;12517:121:6:-;;;;:::o;13226:120::-;;;;:::o;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;4311:103:17:-;4369:7;4395:12;;4388:19;;4311:103;:::o;4653:109::-;4714:7;4740:15;;4733:22;;4653:109;:::o;3017:257::-;3157:7;3204:8;3214;3224:11;3237:13;3260:4;3193:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3183:84;;;;;;3176:91;;3017:257;;;;;:::o;2188:106:4:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;1166:95::-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2267:159:6:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2387:5:6::1;2379;:13;;;;;;:::i;:::-;;2412:7;2402;:17;;;;;;:::i;:::-;;2267:159:::0;;:::o;2468:297:17:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2580:18:17::1;2617:4;2601:22;;;;;;2580:43;;2633:21;2673:7;2657:25;;;;;;2633:49;;2707:10;2692:12;:25;;;;2745:13;2727:15;:31;;;;2570:195;;2468:297:::0;;:::o;2010:106:4:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;956:123:14:-;1061:1;1043:7;:14;;;:19;;;;;;;;;;;956:123;:::o;8374:194:16:-;8467:7;8532:15;8549:10;8503:57;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8493:68;;;;;;8486:75;;8374:194;;;;:::o;5091:1494::-;5217:7;5226:12;6141:66;6136:1;6128:10;;:79;6124:161;;;6239:1;6243:30;6223:51;;;;;;6124:161;6379:14;6396:24;6406:4;6412:1;6415;6418;6396:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6379:41;;6452:1;6434:20;;:6;:20;;;6430:101;;6486:1;6490:29;6470:50;;;;;;;6430:101;6549:6;6557:20;6541:37;;;;;5091:1494;;;;;;;;:::o;592:511::-;669:20;660:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;656:441;705:7;656:441;765:29;756:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;752:345;;810:34;;;;;;;;;;:::i;:::-;;;;;;;;752:345;874:35;865:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;861:236;;925:41;;;;;;;;;;:::i;:::-;;;;;;;;861:236;996:30;987:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;983:114;;1042:44;;;;;;;;;;:::i;:::-;;;;;;;;983:114;592:511;;:::o;2146:149:15:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:30:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:126::-;2897:7;2937:42;2930:5;2926:54;2915:65;;2860:126;;;:::o;2992:96::-;3029:7;3058:24;3076:5;3058:24;:::i;:::-;3047:35;;2992:96;;;:::o;3094:122::-;3167:24;3185:5;3167:24;:::i;:::-;3160:5;3157:35;3147:63;;3206:1;3203;3196:12;3147:63;3094:122;:::o;3222:139::-;3268:5;3306:6;3293:20;3284:29;;3322:33;3349:5;3322:33;:::i;:::-;3222:139;;;;:::o;3367:77::-;3404:7;3433:5;3422:16;;3367:77;;;:::o;3450:122::-;3523:24;3541:5;3523:24;:::i;:::-;3516:5;3513:35;3503:63;;3562:1;3559;3552:12;3503:63;3450:122;:::o;3578:139::-;3624:5;3662:6;3649:20;3640:29;;3678:33;3705:5;3678:33;:::i;:::-;3578:139;;;;:::o;3723:474::-;3791:6;3799;3848:2;3836:9;3827:7;3823:23;3819:32;3816:119;;;3854:79;;:::i;:::-;3816:119;3974:1;3999:53;4044:7;4035:6;4024:9;4020:22;3999:53;:::i;:::-;3989:63;;3945:117;4101:2;4127:53;4172:7;4163:6;4152:9;4148:22;4127:53;:::i;:::-;4117:63;;4072:118;3723:474;;;;;:::o;4203:118::-;4290:24;4308:5;4290:24;:::i;:::-;4285:3;4278:37;4203:118;;:::o;4327:222::-;4420:4;4458:2;4447:9;4443:18;4435:26;;4471:71;4539:1;4528:9;4524:17;4515:6;4471:71;:::i;:::-;4327:222;;;;:::o;4555:329::-;4614:6;4663:2;4651:9;4642:7;4638:23;4634:32;4631:119;;;4669:79;;:::i;:::-;4631:119;4789:1;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4760:117;4555:329;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:77::-;5552:7;5581:5;5570:16;;5515:77;;;:::o;5598:122::-;5671:24;5689:5;5671:24;:::i;:::-;5664:5;5661:35;5651:63;;5710:1;5707;5700:12;5651:63;5598:122;:::o;5726:139::-;5772:5;5810:6;5797:20;5788:29;;5826:33;5853:5;5826:33;:::i;:::-;5726:139;;;;:::o;5871:329::-;5930:6;5979:2;5967:9;5958:7;5954:23;5950:32;5947:119;;;5985:79;;:::i;:::-;5947:119;6105:1;6130:53;6175:7;6166:6;6155:9;6151:22;6130:53;:::i;:::-;6120:63;;6076:117;5871:329;;;;:::o;6206:118::-;6293:24;6311:5;6293:24;:::i;:::-;6288:3;6281:37;6206:118;;:::o;6330:222::-;6423:4;6461:2;6450:9;6446:18;6438:26;;6474:71;6542:1;6531:9;6527:17;6518:6;6474:71;:::i;:::-;6330:222;;;;:::o;6558:474::-;6626:6;6634;6683:2;6671:9;6662:7;6658:23;6654:32;6651:119;;;6689:79;;:::i;:::-;6651:119;6809:1;6834:53;6879:7;6870:6;6859:9;6855:22;6834:53;:::i;:::-;6824:63;;6780:117;6936:2;6962:53;7007:7;6998:6;6987:9;6983:22;6962:53;:::i;:::-;6952:63;;6907:118;6558:474;;;;;:::o;7038:86::-;7073:7;7113:4;7106:5;7102:16;7091:27;;7038:86;;;:::o;7130:112::-;7213:22;7229:5;7213:22;:::i;:::-;7208:3;7201:35;7130:112;;:::o;7248:214::-;7337:4;7375:2;7364:9;7360:18;7352:26;;7388:67;7452:1;7441:9;7437:17;7428:6;7388:67;:::i;:::-;7248:214;;;;:::o;7468:118::-;7539:22;7555:5;7539:22;:::i;:::-;7532:5;7529:33;7519:61;;7576:1;7573;7566:12;7519:61;7468:118;:::o;7592:135::-;7636:5;7674:6;7661:20;7652:29;;7690:31;7715:5;7690:31;:::i;:::-;7592:135;;;;:::o;7733:1199::-;7844:6;7852;7860;7868;7876;7884;7892;7941:3;7929:9;7920:7;7916:23;7912:33;7909:120;;;7948:79;;:::i;:::-;7909:120;8068:1;8093:53;8138:7;8129:6;8118:9;8114:22;8093:53;:::i;:::-;8083:63;;8039:117;8195:2;8221:53;8266:7;8257:6;8246:9;8242:22;8221:53;:::i;:::-;8211:63;;8166:118;8323:2;8349:53;8394:7;8385:6;8374:9;8370:22;8349:53;:::i;:::-;8339:63;;8294:118;8451:2;8477:53;8522:7;8513:6;8502:9;8498:22;8477:53;:::i;:::-;8467:63;;8422:118;8579:3;8606:51;8649:7;8640:6;8629:9;8625:22;8606:51;:::i;:::-;8596:61;;8550:117;8706:3;8733:53;8778:7;8769:6;8758:9;8754:22;8733:53;:::i;:::-;8723:63;;8677:119;8835:3;8862:53;8907:7;8898:6;8887:9;8883:22;8862:53;:::i;:::-;8852:63;;8806:119;7733:1199;;;;;;;;;;:::o;8938:474::-;9006:6;9014;9063:2;9051:9;9042:7;9038:23;9034:32;9031:119;;;9069:79;;:::i;:::-;9031:119;9189:1;9214:53;9259:7;9250:6;9239:9;9235:22;9214:53;:::i;:::-;9204:63;;9160:117;9316:2;9342:53;9387:7;9378:6;9367:9;9363:22;9342:53;:::i;:::-;9332:63;;9287:118;8938:474;;;;;:::o;9418:180::-;9466:77;9463:1;9456:88;9563:4;9560:1;9553:15;9587:4;9584:1;9577:15;9604:320;9648:6;9685:1;9679:4;9675:12;9665:22;;9732:1;9726:4;9722:12;9753:18;9743:81;;9809:4;9801:6;9797:17;9787:27;;9743:81;9871:2;9863:6;9860:14;9840:18;9837:38;9834:84;;9890:18;;:::i;:::-;9834:84;9655:269;9604:320;;;:::o;9930:231::-;10070:34;10066:1;10058:6;10054:14;10047:58;10139:14;10134:2;10126:6;10122:15;10115:39;9930:231;:::o;10167:366::-;10309:3;10330:67;10394:2;10389:3;10330:67;:::i;:::-;10323:74;;10406:93;10495:3;10406:93;:::i;:::-;10524:2;10519:3;10515:12;10508:19;;10167:366;;;:::o;10539:419::-;10705:4;10743:2;10732:9;10728:18;10720:26;;10792:9;10786:4;10782:20;10778:1;10767:9;10763:17;10756:47;10820:131;10946:4;10820:131;:::i;:::-;10812:139;;10539:419;;;:::o;10964:180::-;11012:77;11009:1;11002:88;11109:4;11106:1;11099:15;11133:4;11130:1;11123:15;11150:233;11189:3;11212:24;11230:5;11212:24;:::i;:::-;11203:33;;11258:66;11251:5;11248:77;11245:103;;11328:18;;:::i;:::-;11245:103;11375:1;11368:5;11364:13;11357:20;;11150:233;;;:::o;11389:234::-;11529:34;11525:1;11517:6;11513:14;11506:58;11598:17;11593:2;11585:6;11581:15;11574:42;11389:234;:::o;11629:366::-;11771:3;11792:67;11856:2;11851:3;11792:67;:::i;:::-;11785:74;;11868:93;11957:3;11868:93;:::i;:::-;11986:2;11981:3;11977:12;11970:19;;11629:366;;;:::o;12001:419::-;12167:4;12205:2;12194:9;12190:18;12182:26;;12254:9;12248:4;12244:20;12240:1;12229:9;12225:17;12218:47;12282:131;12408:4;12282:131;:::i;:::-;12274:139;;12001:419;;;:::o;12426:191::-;12466:3;12485:20;12503:1;12485:20;:::i;:::-;12480:25;;12519:20;12537:1;12519:20;:::i;:::-;12514:25;;12562:1;12559;12555:9;12548:16;;12583:3;12580:1;12577:10;12574:36;;;12590:18;;:::i;:::-;12574:36;12426:191;;;;:::o;12623:230::-;12763:34;12759:1;12751:6;12747:14;12740:58;12832:13;12827:2;12819:6;12815:15;12808:38;12623:230;:::o;12859:366::-;13001:3;13022:67;13086:2;13081:3;13022:67;:::i;:::-;13015:74;;13098:93;13187:3;13098:93;:::i;:::-;13216:2;13211:3;13207:12;13200:19;;12859:366;;;:::o;13231:419::-;13397:4;13435:2;13424:9;13420:18;13412:26;;13484:9;13478:4;13474:20;13470:1;13459:9;13455:17;13448:47;13512:131;13638:4;13512:131;:::i;:::-;13504:139;;13231:419;;;:::o;13656:233::-;13796:34;13792:1;13784:6;13780:14;13773:58;13865:16;13860:2;13852:6;13848:15;13841:41;13656:233;:::o;13895:366::-;14037:3;14058:67;14122:2;14117:3;14058:67;:::i;:::-;14051:74;;14134:93;14223:3;14134:93;:::i;:::-;14252:2;14247:3;14243:12;14236:19;;13895:366;;;:::o;14267:419::-;14433:4;14471:2;14460:9;14456:18;14448:26;;14520:9;14514:4;14510:20;14506:1;14495:9;14491:17;14484:47;14548:131;14674:4;14548:131;:::i;:::-;14540:139;;14267:419;;;:::o;14692:85::-;14737:7;14766:5;14755:16;;14692:85;;;:::o;14783:60::-;14811:3;14832:5;14825:12;;14783:60;;;:::o;14849:154::-;14905:9;14938:59;14954:42;14963:32;14989:5;14963:32;:::i;:::-;14954:42;:::i;:::-;14938:59;:::i;:::-;14925:72;;14849:154;;;:::o;15009:143::-;15102:43;15139:5;15102:43;:::i;:::-;15097:3;15090:56;15009:143;;:::o;15158:234::-;15257:4;15295:2;15284:9;15280:18;15272:26;;15308:77;15382:1;15371:9;15367:17;15358:6;15308:77;:::i;:::-;15158:234;;;;:::o;15398:224::-;15538:34;15534:1;15526:6;15522:14;15515:58;15607:7;15602:2;15594:6;15590:15;15583:32;15398:224;:::o;15628:366::-;15770:3;15791:67;15855:2;15850:3;15791:67;:::i;:::-;15784:74;;15867:93;15956:3;15867:93;:::i;:::-;15985:2;15980:3;15976:12;15969:19;;15628:366;;;:::o;16000:419::-;16166:4;16204:2;16193:9;16189:18;16181:26;;16253:9;16247:4;16243:20;16239:1;16228:9;16224:17;16217:47;16281:131;16407:4;16281:131;:::i;:::-;16273:139;;16000:419;;;:::o;16425:179::-;16565:31;16561:1;16553:6;16549:14;16542:55;16425:179;:::o;16610:366::-;16752:3;16773:67;16837:2;16832:3;16773:67;:::i;:::-;16766:74;;16849:93;16938:3;16849:93;:::i;:::-;16967:2;16962:3;16958:12;16951:19;;16610:366;;;:::o;16982:419::-;17148:4;17186:2;17175:9;17171:18;17163:26;;17235:9;17229:4;17225:20;17221:1;17210:9;17206:17;17199:47;17263:131;17389:4;17263:131;:::i;:::-;17255:139;;16982:419;;;:::o;17407:118::-;17494:24;17512:5;17494:24;:::i;:::-;17489:3;17482:37;17407:118;;:::o;17531:775::-;17764:4;17802:3;17791:9;17787:19;17779:27;;17816:71;17884:1;17873:9;17869:17;17860:6;17816:71;:::i;:::-;17897:72;17965:2;17954:9;17950:18;17941:6;17897:72;:::i;:::-;17979;18047:2;18036:9;18032:18;18023:6;17979:72;:::i;:::-;18061;18129:2;18118:9;18114:18;18105:6;18061:72;:::i;:::-;18143:73;18211:3;18200:9;18196:19;18187:6;18143:73;:::i;:::-;18226;18294:3;18283:9;18279:19;18270:6;18226:73;:::i;:::-;17531:775;;;;;;;;;:::o;18312:180::-;18452:32;18448:1;18440:6;18436:14;18429:56;18312:180;:::o;18498:366::-;18640:3;18661:67;18725:2;18720:3;18661:67;:::i;:::-;18654:74;;18737:93;18826:3;18737:93;:::i;:::-;18855:2;18850:3;18846:12;18839:19;;18498:366;;;:::o;18870:419::-;19036:4;19074:2;19063:9;19059:18;19051:26;;19123:9;19117:4;19113:20;19109:1;19098:9;19094:17;19087:47;19151:131;19277:4;19151:131;:::i;:::-;19143:139;;18870:419;;;:::o;19295:223::-;19435:34;19431:1;19423:6;19419:14;19412:58;19504:6;19499:2;19491:6;19487:15;19480:31;19295:223;:::o;19524:366::-;19666:3;19687:67;19751:2;19746:3;19687:67;:::i;:::-;19680:74;;19763:93;19852:3;19763:93;:::i;:::-;19881:2;19876:3;19872:12;19865:19;;19524:366;;;:::o;19896:419::-;20062:4;20100:2;20089:9;20085:18;20077:26;;20149:9;20143:4;20139:20;20135:1;20124:9;20120:17;20113:47;20177:131;20303:4;20177:131;:::i;:::-;20169:139;;19896:419;;;:::o;20321:221::-;20461:34;20457:1;20449:6;20445:14;20438:58;20530:4;20525:2;20517:6;20513:15;20506:29;20321:221;:::o;20548:366::-;20690:3;20711:67;20775:2;20770:3;20711:67;:::i;:::-;20704:74;;20787:93;20876:3;20787:93;:::i;:::-;20905:2;20900:3;20896:12;20889:19;;20548:366;;;:::o;20920:419::-;21086:4;21124:2;21113:9;21109:18;21101:26;;21173:9;21167:4;21163:20;21159:1;21148:9;21144:17;21137:47;21201:131;21327:4;21201:131;:::i;:::-;21193:139;;20920:419;;;:::o;21345:181::-;21485:33;21481:1;21473:6;21469:14;21462:57;21345:181;:::o;21532:366::-;21674:3;21695:67;21759:2;21754:3;21695:67;:::i;:::-;21688:74;;21771:93;21860:3;21771:93;:::i;:::-;21889:2;21884:3;21880:12;21873:19;;21532:366;;;:::o;21904:419::-;22070:4;22108:2;22097:9;22093:18;22085:26;;22157:9;22151:4;22147:20;22143:1;22132:9;22128:17;22121:47;22185:131;22311:4;22185:131;:::i;:::-;22177:139;;21904:419;;;:::o;22329:179::-;22469:31;22465:1;22457:6;22453:14;22446:55;22329:179;:::o;22514:366::-;22656:3;22677:67;22741:2;22736:3;22677:67;:::i;:::-;22670:74;;22753:93;22842:3;22753:93;:::i;:::-;22871:2;22866:3;22862:12;22855:19;;22514:366;;;:::o;22886:419::-;23052:4;23090:2;23079:9;23075:18;23067:26;;23139:9;23133:4;23129:20;23125:1;23114:9;23110:17;23103:47;23167:131;23293:4;23167:131;:::i;:::-;23159:139;;22886:419;;;:::o;23311:224::-;23451:34;23447:1;23439:6;23435:14;23428:58;23520:7;23515:2;23507:6;23503:15;23496:32;23311:224;:::o;23541:366::-;23683:3;23704:67;23768:2;23763:3;23704:67;:::i;:::-;23697:74;;23780:93;23869:3;23780:93;:::i;:::-;23898:2;23893:3;23889:12;23882:19;;23541:366;;;:::o;23913:419::-;24079:4;24117:2;24106:9;24102:18;24094:26;;24166:9;24160:4;24156:20;24152:1;24141:9;24137:17;24130:47;24194:131;24320:4;24194:131;:::i;:::-;24186:139;;23913:419;;;:::o;24338:222::-;24478:34;24474:1;24466:6;24462:14;24455:58;24547:5;24542:2;24534:6;24530:15;24523:30;24338:222;:::o;24566:366::-;24708:3;24729:67;24793:2;24788:3;24729:67;:::i;:::-;24722:74;;24805:93;24894:3;24805:93;:::i;:::-;24923:2;24918:3;24914:12;24907:19;;24566:366;;;:::o;24938:419::-;25104:4;25142:2;25131:9;25127:18;25119:26;;25191:9;25185:4;25181:20;25177:1;25166:9;25162:17;25155:47;25219:131;25345:4;25219:131;:::i;:::-;25211:139;;24938:419;;;:::o;25363:225::-;25503:34;25499:1;25491:6;25487:14;25480:58;25572:8;25567:2;25559:6;25555:15;25548:33;25363:225;:::o;25594:366::-;25736:3;25757:67;25821:2;25816:3;25757:67;:::i;:::-;25750:74;;25833:93;25922:3;25833:93;:::i;:::-;25951:2;25946:3;25942:12;25935:19;;25594:366;;;:::o;25966:419::-;26132:4;26170:2;26159:9;26155:18;26147:26;;26219:9;26213:4;26209:20;26205:1;26194:9;26190:17;26183:47;26247:131;26373:4;26247:131;:::i;:::-;26239:139;;25966:419;;;:::o;26391:222::-;26484:4;26522:2;26511:9;26507:18;26499:26;;26535:71;26603:1;26592:9;26588:17;26579:6;26535:71;:::i;:::-;26391:222;;;;:::o;26619:148::-;26721:11;26758:3;26743:18;;26619:148;;;;:::o;26773:173::-;26913:25;26909:1;26901:6;26897:14;26890:49;26773:173;:::o;26952:402::-;27112:3;27133:85;27215:2;27210:3;27133:85;:::i;:::-;27126:92;;27227:93;27316:3;27227:93;:::i;:::-;27345:2;27340:3;27336:12;27329:19;;26952:402;;;:::o;27360:390::-;27466:3;27494:39;27527:5;27494:39;:::i;:::-;27549:89;27631:6;27626:3;27549:89;:::i;:::-;27542:96;;27647:65;27705:6;27700:3;27693:4;27686:5;27682:16;27647:65;:::i;:::-;27737:6;27732:3;27728:16;27721:23;;27470:280;27360:390;;;;:::o;27756:167::-;27896:19;27892:1;27884:6;27880:14;27873:43;27756:167;:::o;27929:402::-;28089:3;28110:85;28192:2;28187:3;28110:85;:::i;:::-;28103:92;;28204:93;28293:3;28204:93;:::i;:::-;28322:2;28317:3;28313:12;28306:19;;27929:402;;;:::o;28337:967::-;28719:3;28741:148;28885:3;28741:148;:::i;:::-;28734:155;;28906:95;28997:3;28988:6;28906:95;:::i;:::-;28899:102;;29018:148;29162:3;29018:148;:::i;:::-;29011:155;;29183:95;29274:3;29265:6;29183:95;:::i;:::-;29176:102;;29295:3;29288:10;;28337:967;;;;;:::o;29310:664::-;29515:4;29553:3;29542:9;29538:19;29530:27;;29567:71;29635:1;29624:9;29620:17;29611:6;29567:71;:::i;:::-;29648:72;29716:2;29705:9;29701:18;29692:6;29648:72;:::i;:::-;29730;29798:2;29787:9;29783:18;29774:6;29730:72;:::i;:::-;29812;29880:2;29869:9;29865:18;29856:6;29812:72;:::i;:::-;29894:73;29962:3;29951:9;29947:19;29938:6;29894:73;:::i;:::-;29310:664;;;;;;;;:::o;29980:170::-;30120:22;30116:1;30108:6;30104:14;30097:46;29980:170;:::o;30156:366::-;30298:3;30319:67;30383:2;30378:3;30319:67;:::i;:::-;30312:74;;30395:93;30484:3;30395:93;:::i;:::-;30513:2;30508:3;30504:12;30497:19;;30156:366;;;:::o;30528:419::-;30694:4;30732:2;30721:9;30717:18;30709:26;;30781:9;30775:4;30771:20;30767:1;30756:9;30752:17;30745:47;30809:131;30935:4;30809:131;:::i;:::-;30801:139;;30528:419;;;:::o;30953:180::-;31001:77;30998:1;30991:88;31098:4;31095:1;31088:15;31122:4;31119:1;31112:15;31139:141;31188:4;31211:3;31203:11;;31234:3;31231:1;31224:14;31268:4;31265:1;31255:18;31247:26;;31139:141;;;:::o;31286:93::-;31323:6;31370:2;31365;31358:5;31354:14;31350:23;31340:33;;31286:93;;;:::o;31385:107::-;31429:8;31479:5;31473:4;31469:16;31448:37;;31385:107;;;;:::o;31498:393::-;31567:6;31617:1;31605:10;31601:18;31640:97;31670:66;31659:9;31640:97;:::i;:::-;31758:39;31788:8;31777:9;31758:39;:::i;:::-;31746:51;;31830:4;31826:9;31819:5;31815:21;31806:30;;31879:4;31869:8;31865:19;31858:5;31855:30;31845:40;;31574:317;;31498:393;;;;;:::o;31897:142::-;31947:9;31980:53;31998:34;32007:24;32025:5;32007:24;:::i;:::-;31998:34;:::i;:::-;31980:53;:::i;:::-;31967:66;;31897:142;;;:::o;32045:75::-;32088:3;32109:5;32102:12;;32045:75;;;:::o;32126:269::-;32236:39;32267:7;32236:39;:::i;:::-;32297:91;32346:41;32370:16;32346:41;:::i;:::-;32338:6;32331:4;32325:11;32297:91;:::i;:::-;32291:4;32284:105;32202:193;32126:269;;;:::o;32401:73::-;32446:3;32401:73;:::o;32480:189::-;32557:32;;:::i;:::-;32598:65;32656:6;32648;32642:4;32598:65;:::i;:::-;32533:136;32480:189;;:::o;32675:186::-;32735:120;32752:3;32745:5;32742:14;32735:120;;;32806:39;32843:1;32836:5;32806:39;:::i;:::-;32779:1;32772:5;32768:13;32759:22;;32735:120;;;32675:186;;:::o;32867:543::-;32968:2;32963:3;32960:11;32957:446;;;33002:38;33034:5;33002:38;:::i;:::-;33086:29;33104:10;33086:29;:::i;:::-;33076:8;33072:44;33269:2;33257:10;33254:18;33251:49;;;33290:8;33275:23;;33251:49;33313:80;33369:22;33387:3;33369:22;:::i;:::-;33359:8;33355:37;33342:11;33313:80;:::i;:::-;32972:431;;32957:446;32867:543;;;:::o;33416:117::-;33470:8;33520:5;33514:4;33510:16;33489:37;;33416:117;;;;:::o;33539:169::-;33583:6;33616:51;33664:1;33660:6;33652:5;33649:1;33645:13;33616:51;:::i;:::-;33612:56;33697:4;33691;33687:15;33677:25;;33590:118;33539:169;;;;:::o;33713:295::-;33789:4;33935:29;33960:3;33954:4;33935:29;:::i;:::-;33927:37;;33997:3;33994:1;33990:11;33984:4;33981:21;33973:29;;33713:295;;;;:::o;34013:1395::-;34130:37;34163:3;34130:37;:::i;:::-;34232:18;34224:6;34221:30;34218:56;;;34254:18;;:::i;:::-;34218:56;34298:38;34330:4;34324:11;34298:38;:::i;:::-;34383:67;34443:6;34435;34429:4;34383:67;:::i;:::-;34477:1;34501:4;34488:17;;34533:2;34525:6;34522:14;34550:1;34545:618;;;;35207:1;35224:6;35221:77;;;35273:9;35268:3;35264:19;35258:26;35249:35;;35221:77;35324:67;35384:6;35377:5;35324:67;:::i;:::-;35318:4;35311:81;35180:222;34515:887;;34545:618;34597:4;34593:9;34585:6;34581:22;34631:37;34663:4;34631:37;:::i;:::-;34690:1;34704:208;34718:7;34715:1;34712:14;34704:208;;;34797:9;34792:3;34788:19;34782:26;34774:6;34767:42;34848:1;34840:6;34836:14;34826:24;;34895:2;34884:9;34880:18;34867:31;;34741:4;34738:1;34734:12;34729:17;;34704:208;;;34940:6;34931:7;34928:19;34925:179;;;34998:9;34993:3;34989:19;34983:26;35041:48;35083:4;35075:6;35071:17;35060:9;35041:48;:::i;:::-;35033:6;35026:64;34948:156;34925:179;35150:1;35146;35138:6;35134:14;35130:22;35124:4;35117:36;34552:611;;;34515:887;;34105:1303;;;34013:1395;;:::o;35414:166::-;35554:18;35550:1;35542:6;35538:14;35531:42;35414:166;:::o;35586:366::-;35728:3;35749:67;35813:2;35808:3;35749:67;:::i;:::-;35742:74;;35825:93;35914:3;35825:93;:::i;:::-;35943:2;35938:3;35934:12;35927:19;;35586:366;;;:::o;35958:419::-;36124:4;36162:2;36151:9;36147:18;36139:26;;36211:9;36205:4;36201:20;36197:1;36186:9;36182:17;36175:47;36239:131;36365:4;36239:131;:::i;:::-;36231:139;;35958:419;;;:::o;36383:214::-;36523:66;36519:1;36511:6;36507:14;36500:90;36383:214;:::o;36603:400::-;36763:3;36784:84;36866:1;36861:3;36784:84;:::i;:::-;36777:91;;36877:93;36966:3;36877:93;:::i;:::-;36995:1;36990:3;36986:11;36979:18;;36603:400;;;:::o;37009:79::-;37048:7;37077:5;37066:16;;37009:79;;;:::o;37094:157::-;37199:45;37219:24;37237:5;37219:24;:::i;:::-;37199:45;:::i;:::-;37194:3;37187:58;37094:157;;:::o;37257:663::-;37498:3;37520:148;37664:3;37520:148;:::i;:::-;37513:155;;37678:75;37749:3;37740:6;37678:75;:::i;:::-;37778:2;37773:3;37769:12;37762:19;;37791:75;37862:3;37853:6;37791:75;:::i;:::-;37891:2;37886:3;37882:12;37875:19;;37911:3;37904:10;;37257:663;;;;;:::o;37926:545::-;38099:4;38137:3;38126:9;38122:19;38114:27;;38151:71;38219:1;38208:9;38204:17;38195:6;38151:71;:::i;:::-;38232:68;38296:2;38285:9;38281:18;38272:6;38232:68;:::i;:::-;38310:72;38378:2;38367:9;38363:18;38354:6;38310:72;:::i;:::-;38392;38460:2;38449:9;38445:18;38436:6;38392:72;:::i;:::-;37926:545;;;;;;;:::o;38477:180::-;38525:77;38522:1;38515:88;38622:4;38619:1;38612:15;38646:4;38643:1;38636:15;38663:174;38803:26;38799:1;38791:6;38787:14;38780:50;38663:174;:::o;38843:366::-;38985:3;39006:67;39070:2;39065:3;39006:67;:::i;:::-;38999:74;;39082:93;39171:3;39082:93;:::i;:::-;39200:2;39195:3;39191:12;39184:19;;38843:366;;;:::o;39215:419::-;39381:4;39419:2;39408:9;39404:18;39396:26;;39468:9;39462:4;39458:20;39454:1;39443:9;39439:17;39432:47;39496:131;39622:4;39496:131;:::i;:::-;39488:139;;39215:419;;;:::o;39640:181::-;39780:33;39776:1;39768:6;39764:14;39757:57;39640:181;:::o;39827:366::-;39969:3;39990:67;40054:2;40049:3;39990:67;:::i;:::-;39983:74;;40066:93;40155:3;40066:93;:::i;:::-;40184:2;40179:3;40175:12;40168:19;;39827:366;;;:::o;40199:419::-;40365:4;40403:2;40392:9;40388:18;40380:26;;40452:9;40446:4;40442:20;40438:1;40427:9;40423:17;40416:47;40480:131;40606:4;40480:131;:::i;:::-;40472:139;;40199:419;;;:::o;40624:221::-;40764:34;40760:1;40752:6;40748:14;40741:58;40833:4;40828:2;40820:6;40816:15;40809:29;40624:221;:::o;40851:366::-;40993:3;41014:67;41078:2;41073:3;41014:67;:::i;:::-;41007:74;;41090:93;41179:3;41090:93;:::i;:::-;41208:2;41203:3;41199:12;41192:19;;40851:366;;;:::o;41223:419::-;41389:4;41427:2;41416:9;41412:18;41404:26;;41476:9;41470:4;41466:20;41462:1;41451:9;41447:17;41440:47;41504:131;41630:4;41504:131;:::i;:::-;41496:139;;41223:419;;;:::o;41648:348::-;41688:7;41711:20;41729:1;41711:20;:::i;:::-;41706:25;;41745:20;41763:1;41745:20;:::i;:::-;41740:25;;41933:1;41865:66;41861:74;41858:1;41855:81;41850:1;41843:9;41836:17;41832:105;41829:131;;;41940:18;;:::i;:::-;41829:131;41988:1;41985;41981:9;41970:20;;41648:348;;;;:::o;42002:180::-;42050:77;42047:1;42040:88;42147:4;42144:1;42137:15;42171:4;42168:1;42161:15;42188:171;42227:3;42250:24;42268:5;42250:24;:::i;:::-;42241:33;;42296:4;42289:5;42286:15;42283:41;;42304:18;;:::i;:::-;42283:41;42351:1;42344:5;42340:13;42333:20;;42188:171;;;:::o;42365:182::-;42505:34;42501:1;42493:6;42489:14;42482:58;42365:182;:::o;42553:366::-;42695:3;42716:67;42780:2;42775:3;42716:67;:::i;:::-;42709:74;;42792:93;42881:3;42792:93;:::i;:::-;42910:2;42905:3;42901:12;42894:19;;42553:366;;;:::o;42925:419::-;43091:4;43129:2;43118:9;43114:18;43106:26;;43178:9;43172:4;43168:20;43164:1;43153:9;43149:17;43142:47;43206:131;43332:4;43206:131;:::i;:::-;43198:139;;42925:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3118200","executionCost":"3444","totalCost":"3121644"},"external":{"DEFAULT_ADMIN_ROLE()":"380","DOMAIN_SEPARATOR()":"infinite","__BaseUpgradeablePausable_init(address)":"infinite","allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2909","decimals()":"411","decreaseAllowance(address,uint256)":"infinite","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3229","increaseAllowance(address,uint256)":"infinite","init(address)":"infinite","initialize()":"infinite","isAdmin()":"2814","name()":"infinite","nonces(address)":"2980","pause()":"infinite","paused()":"2590","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","totalSupply()":"2483","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","unpause()":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","DOMAIN_SEPARATOR()":"3644e515","__BaseUpgradeablePausable_init(address)":"6e810b1a","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","increaseAllowance(address,uint256)":"39509351","init(address)":"19ab453c","initialize()":"8129fc1c","isAdmin()":"b6db75a0","name()":"06fdde03","nonces(address)":"7ecebe00","pause()":"8456cb59","paused()":"5c975abb","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GENZ__ImmutableChangesError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/token/GENZERC20.sol\":\"GENZ\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/token/GENZERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title GENZ ERC20 Token Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n/// Importing required contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\ncontract GENZ is ERC20Upgradeable, ERC20PermitUpgradeable, BaseUpgradeablePausable {\\n\\n    /*\\n\\n    100M fixed supply GENZ tokens will be minted to the Buy Contract. \\n\\n    */\\n    uint256 private _initVersion;\\n    \\n    function initialize() external initializer {\\n        __ERC20_init(\\\"GenZ Labs\\\", \\\"GENZ\\\");\\n        __ERC20Permit_init(\\\"GENZ\\\");\\n        __BaseUpgradeablePausable_init(_msgSender());\\n    }\\n\\n    error GENZ__ImmutableChangesError();\\n    function init(address buyContract) external onlyAdmin {\\n         if (_initVersion > 0) {\\n            revert GENZ__ImmutableChangesError();\\n        }\\n        ++_initVersion;\\n        _mint(buyContract, 1e25);\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\",\"keccak256\":\"0x853c2b31394472dddd2be19662c4df0837c2c8db33544919b650778e3389dce9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2328,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":799,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_balances","offset":0,"slot":"51","type":"t_mapping(t_address,t_uint256)"},{"astId":805,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_allowances","offset":0,"slot":"52","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":807,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_totalSupply","offset":0,"slot":"53","type":"t_uint256"},{"astId":809,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_name","offset":0,"slot":"54","type":"t_string_storage"},{"astId":811,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_symbol","offset":0,"slot":"55","type":"t_string_storage"},{"astId":1391,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"56","type":"t_array(t_uint256)45_storage"},{"astId":2948,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_HASHED_NAME","offset":0,"slot":"101","type":"t_bytes32"},{"astId":2950,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_HASHED_VERSION","offset":0,"slot":"102","type":"t_bytes32"},{"astId":3088,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"103","type":"t_array(t_uint256)50_storage"},{"astId":1521,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_nonces","offset":0,"slot":"153","type":"t_mapping(t_address,t_struct(Counter)2335_storage)"},{"astId":1529,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"154","type":"t_bytes32"},{"astId":1685,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)49_storage"},{"astId":601,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_paused","offset":0,"slot":"204","type":"t_bool"},{"astId":706,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"205","type":"t_array(t_uint256)49_storage"},{"astId":3132,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"254","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_roles","offset":0,"slot":"304","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"305","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_status","offset":0,"slot":"354","type":"t_uint256"},{"astId":779,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"__gap","offset":0,"slot":"355","type":"t_array(t_uint256)49_storage"},{"astId":5342,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_initVersion","offset":0,"slot":"404","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)45_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[45]","numberOfBytes":"1440"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)2335_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CountersUpgradeable.Counter)","numberOfBytes":"32","value":"t_struct(Counter)2335_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2335_storage":{"encoding":"inplace","label":"struct CountersUpgradeable.Counter","members":[{"astId":2334,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/token/GENZERC20.sol:GENZ","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"notice":"Report any bug or issues at:","version":1}}},"contracts/interfaces/IBuyGENZ.sol":{"IBuyGENZ":{"abi":[{"inputs":[],"name":"BuySellGENZ__GENZBurnFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__GENZMintFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ImmutableChangesError","type":"error"},{"inputs":[],"name":"BuySellGENZ__InsufficientBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowAmountError","type":"error"},{"inputs":[],"name":"BuySellGENZ__LowSZTBalanceError","type":"error"},{"inputs":[],"name":"BuySellGENZ__PausedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__TransactionFailedError","type":"error"},{"inputs":[],"name":"BuySellGENZ__ZeroAddressTransactionError","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BuySellGENZ__GENZBurnFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__GENZMintFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__InsufficientBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__LowSZTBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__PausedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__TransactionFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuySellGENZ__ZeroAddressTransactionError\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"BuySellGENZ__PausedError()\":[{\"notice\":\"Custom Error Codes\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IBuyGENZ.sol\":\"IBuyGENZ\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBuyGENZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IBuyGENZ {\\n    \\n    /// Custom Error Codes\\n    error BuySellGENZ__PausedError();\\n    error BuySellGENZ__LowAmountError();\\n    error BuySellGENZ__LowSZTBalanceError();\\n    error BuySellGENZ__GENZBurnFailedError();\\n    error BuySellGENZ__GENZMintFailedError();\\n    error BuySellGENZ__ImmutableChangesError();\\n    error BuySellGENZ__TransactionFailedError();\\n    error BuySellGENZ__InsufficientBalanceError();\\n    error BuySellGENZ__ZeroAddressTransactionError();\\n\\n}\",\"keccak256\":\"0x74d79d87e23c822d6044d2489608ddbeb5ccc83b4db663c7bb509f46803da0ee\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"BuySellGENZ__PausedError()":[{"notice":"Custom Error Codes"}]},"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IERC20Extended.sol":{"IERC20Extended":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional mint and burnFrom functions from the ERC20 standard.","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burnFrom(address,uint256)":"79cc6790","mint(address,uint256)":"40c10f19","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional mint and burnFrom functions from the ERC20 standard.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC20Extended.sol\":\"IERC20Extended\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional mint and burnFrom functions from the ERC20 standard.\\n */\\ninterface IERC20Extended is IERC20Upgradeable {\\n    \\n    function mint(address to, uint256 amount) external returns(bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\n    \\n}\",\"keccak256\":\"0x77d287ad89310c9c5b7acef41830a116628435e9f209b78088282a3e9d683213\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IGENZStaking.sol":{"IGENZStaking":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"StakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UnstakedGENZ","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"value","type":"uint256"}],"name":"UpdatedMinStakingAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"timeInMinutes","type":"uint256"}],"name":"UpdatedWithdrawTimer","type":"event"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"activateWithdrawalTimer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getUserStakedGENZBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"stakeGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalTokensStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_value","type":"uint256"}],"name":"withdrawGENZ","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"activateWithdrawalTimer(uint256)":"6c64f0b4","getUserStakedGENZBalance()":"ed0cdb1a","stakeGENZ(uint256)":"d6fb97a5","totalTokensStaked()":"b0e31b2d","withdrawGENZ(uint256)":"060e5c6e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnstakedGENZ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinStakingAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"UpdatedWithdrawTimer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"activateWithdrawalTimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserStakedGENZBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"stakeGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawGENZ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGENZStaking.sol\":\"IGENZStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGENZStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\ninterface IGENZStaking {\\n\\n    event UpdatedWithdrawTimer(uint256 indexed timeInMinutes);\\n\\n    event UpdatedMinStakingAmount(uint256 indexed value);\\n\\n    event StakedGENZ(address indexed userAddress, uint256 value);\\n\\n    event UnstakedGENZ(address indexed userAddress, uint256 value);\\n\\n    function stakeGENZ(uint256 _value) external returns(bool);\\n\\n    function activateWithdrawalTimer(uint256 _value) external returns(bool);\\n\\n    function withdrawGENZ(uint256 _value) external returns(bool);\\n\\n    function totalTokensStaked() external view returns(uint256);\\n\\n    function getUserStakedGENZBalance() external view returns(uint256);\\n\\n}\",\"keccak256\":\"0x386900ee190a486d4e7197828a671c60a054f8c06f32e33ec0ffffcbb5895636\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IGlobalPauseOperation.sol":{"IGlobalPauseOperation":{"abi":[{"inputs":[],"name":"GlobalPauseOperation__ImmutableChangesError","type":"error"},{"inputs":[],"name":"GlobalPauseOps__ZeroAddressInputError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"PausedOperation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"UnpausedOperation","type":"event"},{"inputs":[],"name":"isPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pauseOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isPaused()":"b187bd26","pauseOperation()":"c9d07020","unpauseOperation()":"39511e99"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"GlobalPauseOperation__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalPauseOps__ZeroAddressInputError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedOperation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGlobalPauseOperation.sol\":\"IGlobalPauseOperation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGlobalPauseOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGlobalPauseOperation {\\n\\n    error GlobalPauseOps__ZeroAddressInputError();\\n\\n    error GlobalPauseOperation__ImmutableChangesError();\\n\\n    event PausedOperation(address account);\\n\\n    event UnpausedOperation(address account);\\n\\n    function pauseOperation() external returns(bool);\\n\\n    function unpauseOperation() external returns(bool);\\n    \\n    function isPaused() external view returns(bool);\\n}\",\"keccak256\":\"0x79586f955f8b52af0e350004f608462d4af71c872ea75ce1b633239c5d00fc29\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}