{"id":"a544b294eb8af0df225ab150f64c2d36","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16+commit.07a7930e","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/BaseUpgradeablePausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"./Constants.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nerror BaseUpgradeablePausable__ZeroAddressError();\n\ncontract BaseUpgradeablePausable is \n    Initializable, \n    PausableUpgradeable, \n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable \n{\n\n    modifier onlyAdmin() {\n        require(isAdmin(), \"Must have admin role to perform this action.\");\n        _;\n    }\n\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\n        if(owner == address(0)) {\n            revert BaseUpgradeablePausable__ZeroAddressError();\n        }\n        __Pausable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        _grantRole(Constants.getAdminRole(), owner);\n        _grantRole(Constants.getPauserRole(), owner);\n\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\n    }\n\n    function isAdmin() public view returns (bool) {\n        return hasRole(Constants.getAdminRole(), _msgSender());\n    }\n\n  \n}"},"contracts/Constants.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\nlibrary Constants {\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    function getAdminRole() internal pure returns (bytes32) {\n        return ADMIN_ROLE;\n    }\n\n    function getPauserRole() internal pure returns (bytes32) {\n        return PAUSER_ROLE;\n    }\n}"},"contracts/core/payAsYouGo/Claim.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// @title Insurance Claim Governance Contract\n/// @author Anshik Bansal <anshik@safezen.finance>\n\n// Importing contracts\nimport \"./../../BaseUpgradeablePausable.sol\";\n\n/// Importing required libraries\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n// Importing interfaces\nimport \"./../../interfaces/IClaim.sol\";\nimport \"./../../interfaces/IGlobalPauseOperation.sol\";\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\";\n\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\n\ncontract ClaimGovernance is IClaim, BaseUpgradeablePausable {\n    /// claimID: unique insurance claim ID\n    /// _openClaimsCount: count of the open insurance claims\n    /// VOTING_END_TIME: voting maximum duration in hours\n    /// TIME_BEFORE_VOTING_START: time before voting starts, so as users can be notified\n    /// AFTER_VOTING_WAIT_PERIOD: voting challenge duration\n    uint256 public claimID;\n    uint256 private _stakedAmount;\n    uint256 private _openClaimsCount;\n    uint256 private constant VOTING_END_TIME = 5 minutes;\n    uint256 private constant TIME_BEFORE_VOTING_START = 1 minutes;\n    uint256 private constant AFTER_VOTING_WAIT_PERIOD = 1 minutes;\n    \n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\n\n    /// _tokenGSZT: SafeZen Governance contract\n    /// _globalPauseOperation: Pause Operation contract\n    IERC20Upgradeable private _tokenDAI;\n    IERC20PermitUpgradeable private _tokenPermitDAI;\n    IERC20Upgradeable private _tokenGSZT;\n    IGlobalPauseOperation private _globalPauseOperation;\n\n    /// @dev collects essential insurance claim info\n    /// @param claimer: claimer wallet address\n    /// @param _claimID: unique insurance claim ID\n    /// @param subcategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\n    /// @param claimAmountRequested: claim amount requested by claimer.\n    /// @param proof: digital uploaded proof of the claiming event \n    /// @param closed: checks if the insurance claim is closed or not.\n    /// @param accepted: checks if the insurance claim request has been accpeted or not.\n    /// @param isChallenged: checks if the insurance claim has been challenged or not.\n    /// @param votingInfo: maps insurance claim ID to VotingInfo\n    /// @param receipts:\n    struct Claim {\n        address claimer;\n        uint256 _claimID;  // not needed thou, but nice to have\n        uint256 categoryID; \n        uint256 subcategoryID;\n        uint256 claimAmountRequested;\n        string proof;  // IPFS link or some storage link, where proof is stored\n        bool closed;\n        bool accepted;\n        bool isChallenged;\n        mapping(uint256 => VotingInfo) votingInfo; \n        mapping(address => Receipt) receipts;\n    }\n\n    struct VotingInfo {\n        uint256 votingStartTime;\n        uint256 votingEndTime;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 advisorForVotes;\n        uint256 advisorAgainstVotes;\n        uint256 votingCounts;  // no of times decision has been challenged\n    }\n\n    struct Receipt {\n        bool hasVoted;\n        bool support;\n        uint256 votes;\n    }\n\n    mapping(address => bool) public isAdvisor;\n\n    /// @notice The official record of all claims ever made\n    mapping(uint256 => Claim) public claims;\n\n    /// @notice The latest claim for each individual claimer\n    /// if a user have filed most claims, then the protocol that user invests are generally risky\n    mapping(address => uint256) public individualClaims;\n\n    /// @notice mapping the protocol specific claims count to date\n    /// more the number, more the risky the platform will be\n    mapping(uint256 => mapping(uint256 => uint256)) public protocolSpecificClaims;\n\n    /// @custom:oz-upgrades-unsafe-allow-constructor\n    constructor(address tokenDAI) {\n        _tokenDAI = IERC20Upgradeable(tokenDAI); // Immutable\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAI); //Immutable\n    }\n\n    function initialize(\n        address safezenGovernanceTokenAddress,\n        address globalPauseOperationAddress\n    ) external initializer {\n        _stakedAmount = 10e18;\n        _tokenGSZT = IERC20Upgradeable(safezenGovernanceTokenAddress);\n        _globalPauseOperation = IGlobalPauseOperation(globalPauseOperationAddress);\n        __BaseUpgradeablePausable_init(_msgSender());\n    }\n\n    function pause() external onlyAdmin {\n        _pause();\n    }\n\n    function unpause() external onlyAdmin {\n        _unpause();\n    }\n\n    /// @dev in case if certain claim require additional time for DAO, \n    /// for e.g., awaiting additional inputs to reserve their decisions \n    function updateVotingEndTime(\n        uint256 _claimID, \n        uint256 timeInHours\n    ) external onlyAdmin {\n        claims[_claimID].votingInfo[_claimID].votingEndTime = timeInHours * 1 hours;\n    }\n\n    function updateAdvisors(address userAddress) external onlyAdmin {\n        isAdvisor[userAddress] = true;\n    }\n\n    function updateStakeAmount(uint256 stakeAmount) external onlyAdmin {\n        _stakedAmount = stakeAmount;\n    }\n\n    function createClaim(\n        uint256 categoryID,\n        uint256 subcategoryID, \n        string memory proof, \n        uint256 requestedClaimAmount,\n        uint256 deadline, \n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) public override returns(bool) {\n        ++claimID;\n        Claim storage newClaim = claims[claimID];\n        newClaim.categoryID = categoryID;\n        newClaim.subcategoryID = subcategoryID;\n        newClaim._claimID = claimID;\n        newClaim.claimer = _msgSender();\n        newClaim.proof = proof;\n        newClaim.claimAmountRequested = requestedClaimAmount;\n        newClaim.votingInfo[claimID].votingStartTime = block.timestamp + TIME_BEFORE_VOTING_START;\n        newClaim.votingInfo[claimID].votingEndTime = newClaim.votingInfo[claimID].votingStartTime + VOTING_END_TIME;\n        ++individualClaims[_msgSender()];\n        ++protocolSpecificClaims[categoryID][subcategoryID];\n        ++_openClaimsCount;\n        bool success = _globalPauseOperation.pauseOperation();\n        if(!success) {\n            revert Claim__PausedOperationFailedError();\n        }\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), _stakedAmount, deadline, v, r, s);\n        _tokenDAI.safeTransfer(address(this), _stakedAmount);\n        emit NewClaimCreated(_msgSender(), claimID, proof);\n        return true;\n    }\n     \n    \n    function vote(\n        uint256 _claimID, \n        bool support\n    ) external override returns(bool) {\n        /// checks are made in order\n        /// 1. making sure voting time has started\n        /// 2. has the user voted or not\n        /// 3. if not, whether the user is voting within the voting time limit\n        if (claims[_claimID].votingInfo[_claimID].votingStartTime > block.timestamp) {\n            revert Claim__VotingNotYetStartedError();\n        }\n        if (claims[_claimID].receipts[_msgSender()].hasVoted) {\n            revert Claim__UserAlreadyVotedError();\n        }\n        if (claims[_claimID].votingInfo[_claimID].votingEndTime < block.timestamp) {\n            revert Claim__VotingTimeEndedError();\n        }\n        claims[_claimID].receipts[_msgSender()].support = support;\n        claims[_claimID].receipts[_msgSender()].votes = _tokenGSZT.balanceOf(_msgSender());\n        claims[_claimID].receipts[_msgSender()].hasVoted = true;\n\n        if ((isAdvisor[_msgSender()]) && (claims[_claimID].votingInfo[_claimID].votingCounts == 2)) {\n            if (support) {\n                claims[_claimID].votingInfo[_claimID].advisorForVotes += claims[_claimID].receipts[_msgSender()].votes;\n            }\n            else {\n                claims[_claimID].votingInfo[_claimID].advisorAgainstVotes += claims[_claimID].receipts[_msgSender()].votes;\n            }\n        }\n        else {\n            if (support) {\n                claims[_claimID].votingInfo[_claimID].forVotes += claims[_claimID].receipts[_msgSender()].votes;\n            }\n            else {\n                claims[_claimID].votingInfo[_claimID].againstVotes += claims[_claimID].receipts[_msgSender()].votes;\n            }\n        }\n        return true;\n    }\n\n    /// @dev this function aims to finalize the claim decision, based on the claim voting\n    /// @param _claimID: unique insurance claim ID\n    function claimDecision(uint256 _claimID) external override returns(bool) {\n        if (\n            (claims[_claimID].votingInfo[_claimID].votingEndTime + AFTER_VOTING_WAIT_PERIOD) > \n            block.timestamp\n        ) {\n            revert Claim__VotingDecisionNotYetFinalizedError();\n        }\n        if (claims[_claimID].isChallenged) {\n            revert Claim__DecisionChallengedError();\n        }\n        uint256 totalCommunityVotes = (\n            claims[_claimID].votingInfo[_claimID].forVotes + \n            claims[_claimID].votingInfo[_claimID].againstVotes\n        );\n        if (claims[_claimID].votingInfo[_claimID].votingCounts == 2) {\n            uint256 totalAdvisorVotes = (\n                claims[_claimID].votingInfo[_claimID].advisorForVotes + \n                claims[_claimID].votingInfo[_claimID].advisorAgainstVotes\n            );\n            uint256 forAdvisorVotesEligible = (\n                (claims[_claimID].votingInfo[_claimID].advisorForVotes >= \n                claims[_claimID].votingInfo[_claimID].advisorAgainstVotes) ? \n                ((claims[claimID].votingInfo[claimID].forVotes * 100) / totalAdvisorVotes) : 0\n            );\n            /// even if all the community votes are in favor, but, 49% of the voting power will be \n            /// given to the advisors in the final claim decision round.\n            /// Community --> (100 * 0.51) = 51%    Advisors -->  (60 * 0.49) = 29.4%\n            /// Total  = 51% + 29.4% < 80% (needed to get approved)\n            /// keeping >= 59% instead of 60% because of underflow value in forAdvisorVotesEligible\n            if (forAdvisorVotesEligible >= 59) {\n                uint256 forVotesEligible = (\n                    (claims[_claimID].votingInfo[_claimID].forVotes > \n                    claims[_claimID].votingInfo[_claimID].againstVotes) ? \n                    ((claims[_claimID].votingInfo[_claimID].forVotes * 100) / totalCommunityVotes) : 1\n                );\n                uint256 supportPercent = (\n                    ((forAdvisorVotesEligible * 49) / 100) + \n                    ((forVotesEligible * 51) / 100)\n                );\n                claims[_claimID].accepted = (supportPercent >= 80) ? true : false;\n            }\n            else {\n                claims[_claimID].accepted = false;\n            }\n        }\n        else {\n            uint256 forVotesEligible = (\n                (claims[_claimID].votingInfo[_claimID].forVotes > \n                claims[_claimID].votingInfo[_claimID].againstVotes) ? \n                ((claims[_claimID].votingInfo[_claimID].forVotes * 100) / totalCommunityVotes) : 1\n            );\n            claims[_claimID].accepted = (forVotesEligible >= 80) ? true : false;\n        }\n        claims[_claimID].closed = true;\n        if (claims[_claimID].accepted) {\n            uint256 totalAmountStaked = (\n                _stakedAmount * (claims[_claimID].votingInfo[_claimID].votingCounts + 1)\n            );\n            _tokenDAI.safeTransfer(claims[_claimID].claimer, totalAmountStaked);\n        }\n        --_openClaimsCount;\n        return true;\n    }\n\n    \n    function challengeDecision(\n        uint256 _claimID,\n        uint256 deadline, \n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) external override {\n        if ((!claims[_claimID].closed) || (!claims[_claimID].isChallenged)) {\n            revert Claim__DecisionNotYetTakenError();\n        }\n        if (claims[_claimID].votingInfo[_claimID].votingCounts >= 2) {\n            revert Claim__DecisionNoLongerCanBeChallengedError();\n        }\n        claims[_claimID].isChallenged = true;\n        ++claims[claimID].votingInfo[claimID + 1].votingCounts; \n        createClaim(\n            claims[_claimID].categoryID,\n            claims[_claimID].subcategoryID,\n            claims[_claimID].proof,\n            claims[_claimID].claimAmountRequested,\n            deadline, \n            v, \n            r, \n            s\n        );\n        \n        // ^ global _claimID, as the latest claim refers to challenged claim\n    }\n\n    function viewVoteReceipt(\n        uint256 _claimID\n    ) external view override returns(bool, bool, uint256) {\n        return (\n            claims[_claimID].receipts[_msgSender()].hasVoted,\n            claims[_claimID].receipts[_msgSender()].support,\n            claims[_claimID].receipts[_msgSender()].votes\n        );\n    }\n\n    function getClaimID() external view override returns(uint256) {\n        return claimID;\n    }\n\n    function getVotingInfo(\n        uint256 _claimID\n    ) external view override returns(\n        uint256, uint256, uint256, uint256, uint256, uint256, uint256\n    ) {\n        VotingInfo storage claim = claims[_claimID].votingInfo[_claimID];\n        return (\n            claim.votingStartTime, \n            claim.votingEndTime, \n            claim.forVotes, \n            claim.againstVotes, \n            claim.advisorForVotes, \n            claim.advisorAgainstVotes, \n            claim.votingCounts\n        );\n    }\n}"},"contracts/interfaces/IClaim.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.16;\n\n/// Report any bug or issues at:\n/// @custom:security-contact anshik@safezen.finance\n\ninterface IClaim {\n\n    /// Custom Error Codes\n    error Claim__VotingTimeEndedError();\n    error Claim__UserAlreadyVotedError();\n    error Claim__ImmutableChangesError();\n    error Claim__DecisionChallengedError();\n    error Claim__VotingNotYetStartedError();\n    error Claim__DecisionNotYetTakenError();\n    error Claim__PausedOperationFailedError();\n    error Claim__VotingDecisionNotYetFinalizedError();\n    error Claim__DecisionNoLongerCanBeChallengedError();\n\n    event NewClaimCreated(address indexed userAddress, uint256 indexed claimID, string indexed proof);\n\n    function createClaim(\n        uint256 categoryID,\n        uint256 subCategoryID, \n        string memory proof, \n        uint256 requestedClaimAmount,\n        uint256 deadline, \n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) external returns(bool); \n\n    function vote(\n        uint256 claimID, \n        bool support\n    ) external returns(bool);\n\n    function claimDecision(\n        uint256 claimID\n    ) external returns(bool);\n\n    function challengeDecision(\n        uint256 claimID,\n        uint256 deadline, \n        uint8 v, \n        bytes32 r, \n        bytes32 s\n    ) external;\n\n    function viewVoteReceipt(\n        uint256 claimID\n    ) external view returns(bool, bool, uint256);\n\n    function getClaimID() external view returns(uint256);\n\n    function getVotingInfo(\n        uint256 claimID\n    ) external view returns(\n        uint256, uint256, uint256, uint256, uint256, uint256, uint256\n    );\n}   "},"contracts/interfaces/IGlobalPauseOperation.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IGlobalPauseOperation {\n\n    error GlobalPauseOps__ZeroAddressInputError();\n\n    error GlobalPauseOperation__ImmutableChangesError();\n\n    event PausedOperation(address account);\n\n    event UnpausedOperation(address account);\n\n    function pauseOperation() external returns(bool);\n\n    function unpauseOperation() external returns(bool);\n    \n    function isPaused() external view returns(bool);\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[1732],"Initializable":[580],"MathUpgradeable":[2597],"StringsUpgradeable":[1676]},"id":336,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","file":"./IAccessControlUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":409,"src":"133:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1502,"src":"175:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../utils/StringsUpgradeable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1677,"src":"217:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":1721,"src":"259:54:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":336,"sourceUnit":581,"src":"314:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":8,"name":"Initializable","nameLocations":["1939:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"1939:13:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"1939:13:0"},{"baseName":{"id":10,"name":"ContextUpgradeable","nameLocations":["1954:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1501,"src":"1954:18:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"1954:18:0"},{"baseName":{"id":12,"name":"IAccessControlUpgradeable","nameLocations":["1974:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"1974:25:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"1974:25:0"},{"baseName":{"id":14,"name":"ERC165Upgradeable","nameLocations":["2001:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"2001:17:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"2001:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"358:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":335,"linearizedBaseContracts":[335,1720,1732,408,1501,580],"name":"AccessControlUpgradeable","nameLocation":"1911:24:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":20,"nodeType":"Block","src":"2083:7:0","statements":[]},"id":21,"implemented":true,"kind":"function","modifiers":[{"id":18,"kind":"modifierInvocation","modifierName":{"id":17,"name":"onlyInitializing","nameLocations":["2066:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2066:16:0"},"nodeType":"ModifierInvocation","src":"2066:16:0"}],"name":"__AccessControl_init","nameLocation":"2034:20:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2054:2:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[],"src":"2083:0:0"},"scope":335,"src":"2025:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":26,"nodeType":"Block","src":"2164:7:0","statements":[]},"id":27,"implemented":true,"kind":"function","modifiers":[{"id":24,"kind":"modifierInvocation","modifierName":{"id":23,"name":"onlyInitializing","nameLocations":["2147:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2147:16:0"},"nodeType":"ModifierInvocation","src":"2147:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"2105:30:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"2135:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"2164:0:0"},"scope":335,"src":"2096:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"canonicalName":"AccessControlUpgradeable.RoleData","id":34,"members":[{"constant":false,"id":31,"mutability":"mutable","name":"members","nameLocation":"2227:7:0","nodeType":"VariableDeclaration","scope":34,"src":"2202:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":30,"keyType":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2202:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2221:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"adminRole","nameLocation":"2252:9:0","nodeType":"VariableDeclaration","scope":34,"src":"2244:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":32,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2244:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2183:8:0","nodeType":"StructDefinition","scope":335,"src":"2176:92:0","visibility":"public"},{"constant":false,"id":39,"mutability":"mutable","name":"_roles","nameLocation":"2311:6:0","nodeType":"VariableDeclaration","scope":335,"src":"2274:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":38,"keyType":{"id":35,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2282:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2274:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueType":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"RoleData","nameLocations":["2293:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":34,"src":"2293:8:0"},"referencedDeclaration":34,"src":"2293:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":42,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2348:18:0","nodeType":"VariableDeclaration","scope":335,"src":"2324:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":52,"nodeType":"Block","src":"2792:44:0","statements":[{"expression":{"arguments":[{"id":48,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"2813:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":47,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":107,"src":"2802:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2802:16:0"},{"id":51,"nodeType":"PlaceholderStatement","src":"2828:1:0"}]},"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"2380:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":53,"name":"onlyRole","nameLocation":"2769:8:0","nodeType":"ModifierDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"role","nameLocation":"2786:4:0","nodeType":"VariableDeclaration","scope":53,"src":"2778:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2777:14:0"},"src":"2760:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[1714],"body":{"id":74,"nodeType":"Block","src":"2994:122:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3011:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":64,"name":"IAccessControlUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"3031:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlUpgradeable_$408_$","typeString":"type(contract IAccessControlUpgradeable)"}],"id":63,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3026:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3026:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlUpgradeable_$408","typeString":"type(contract IAccessControlUpgradeable)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3058:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"3026:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3011:58:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":70,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3097:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":68,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3073:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$335_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3079:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1714,"src":"3073:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3073:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3011:98:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":61,"id":73,"nodeType":"Return","src":"3004:105:0"}]},"documentation":{"id":54,"nodeType":"StructuredDocumentation","src":"2842:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":75,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2912:17:0","nodeType":"FunctionDefinition","overrides":{"id":58,"nodeType":"OverrideSpecifier","overrides":[],"src":"2970:8:0"},"parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"interfaceId","nameLocation":"2937:11:0","nodeType":"VariableDeclaration","scope":75,"src":"2930:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":55,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2930:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2929:20:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":75,"src":"2988:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":59,"name":"bool","nodeType":"ElementaryTypeName","src":"2988:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2987:6:0"},"scope":335,"src":"2903:213:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[375],"body":{"id":93,"nodeType":"Block","src":"3295:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":86,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"3312:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":88,"indexExpression":{"id":87,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"3319:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":89,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3325:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"3312:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":91,"indexExpression":{"id":90,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"3333:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3312:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":85,"id":92,"nodeType":"Return","src":"3305:36:0"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"3122:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":94,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3212:7:0","nodeType":"FunctionDefinition","overrides":{"id":82,"nodeType":"OverrideSpecifier","overrides":[],"src":"3271:8:0"},"parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"3228:4:0","nodeType":"VariableDeclaration","scope":94,"src":"3220:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3220:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"3242:7:0","nodeType":"VariableDeclaration","scope":94,"src":"3234:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3219:31:0"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"3289:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":83,"name":"bool","nodeType":"ElementaryTypeName","src":"3289:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3288:6:0"},"scope":335,"src":"3203:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":106,"nodeType":"Block","src":"3698:47:0","statements":[{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3719:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":102,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"3725:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3725:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[107,146],"referencedDeclaration":146,"src":"3708:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"3708:30:0"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3354:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":107,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3651:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"role","nameLocation":"3670:4:0","nodeType":"VariableDeclaration","scope":107,"src":"3662:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":96,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3662:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3661:14:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3698:0:0"},"scope":335,"src":"3642:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"4099:428:0","statements":[{"condition":{"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4113:23:0","subExpression":{"arguments":[{"id":116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4122:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":117,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4128:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":115,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4114:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4114:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"4109:412:0","trueBody":{"id":143,"nodeType":"Block","src":"4138:383:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4246:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":128,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"4328:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":126,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"4297:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1676_$","typeString":"type(library StringsUpgradeable)"}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4316:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1675,"src":"4297:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4362:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":135,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"4446:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4438:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:0","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4453:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":131,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"4407:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1676_$","typeString":"type(library StringsUpgradeable)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4426:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1655,"src":"4407:30:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":123,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4208:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"4204:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:274:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4176:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":121,"name":"string","nodeType":"ElementaryTypeName","src":"4176:6:0","typeDescriptions":{}}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4176:320:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":120,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4152:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4152:358:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"ExpressionStatement","src":"4152:358:0"}]}}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3751:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4035:10:0","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"4054:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4046:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4046:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"4068:7:0","nodeType":"VariableDeclaration","scope":146,"src":"4060:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"4060:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4045:31:0"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"4099:0:0"},"scope":335,"src":"4026:501:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[383],"body":{"id":160,"nodeType":"Block","src":"4791:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":155,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"4808:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":157,"indexExpression":{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4815:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4808:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4821:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"4808:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":154,"id":159,"nodeType":"Return","src":"4801:29:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4533:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":161,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4717:12:0","nodeType":"FunctionDefinition","overrides":{"id":151,"nodeType":"OverrideSpecifier","overrides":[],"src":"4764:8:0"},"parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4738:4:0","nodeType":"VariableDeclaration","scope":161,"src":"4730:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4730:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4729:14:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":161,"src":"4782:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4782:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4781:9:0"},"scope":335,"src":"4708:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[391],"body":{"id":180,"nodeType":"Block","src":"5236:42:0","statements":[{"expression":{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5257:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":177,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5263:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":175,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"5246:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5246:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"ExpressionStatement","src":"5246:25:0"}]},"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"4843:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":181,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":171,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5229:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":170,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5216:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5216:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":173,"kind":"modifierInvocation","modifierName":{"id":169,"name":"onlyRole","nameLocations":["5207:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5207:8:0"},"nodeType":"ModifierInvocation","src":"5207:28:0"}],"name":"grantRole","nameLocation":"5142:9:0","nodeType":"FunctionDefinition","overrides":{"id":168,"nodeType":"OverrideSpecifier","overrides":[],"src":"5198:8:0"},"parameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"role","nameLocation":"5160:4:0","nodeType":"VariableDeclaration","scope":181,"src":"5152:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":163,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5152:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":166,"mutability":"mutable","name":"account","nameLocation":"5174:7:0","nodeType":"VariableDeclaration","scope":181,"src":"5166:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"5166:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5151:31:0"},"returnParameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"5236:0:0"},"scope":335,"src":"5133:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[399],"body":{"id":200,"nodeType":"Block","src":"5662:43:0","statements":[{"expression":{"arguments":[{"id":196,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5684:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"5690:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":195,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5672:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"5672:26:0"}]},"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"5284:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":201,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":191,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5655:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":190,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5642:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5642:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":193,"kind":"modifierInvocation","modifierName":{"id":189,"name":"onlyRole","nameLocations":["5633:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":53,"src":"5633:8:0"},"nodeType":"ModifierInvocation","src":"5633:28:0"}],"name":"revokeRole","nameLocation":"5567:10:0","nodeType":"FunctionDefinition","overrides":{"id":188,"nodeType":"OverrideSpecifier","overrides":[],"src":"5624:8:0"},"parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"role","nameLocation":"5586:4:0","nodeType":"VariableDeclaration","scope":201,"src":"5578:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5578:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"account","nameLocation":"5600:7:0","nodeType":"VariableDeclaration","scope":201,"src":"5592:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"5592:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5577:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5662:0:0"},"scope":335,"src":"5558:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[407],"body":{"id":223,"nodeType":"Block","src":"6319:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":211,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":212,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6348:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6348:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6337:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6362:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6329:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6329:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"ExpressionStatement","src":"6329:83:0"},{"expression":{"arguments":[{"id":219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6435:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":220,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6441:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":218,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6423:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6423:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"ExpressionStatement","src":"6423:26:0"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"5711:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6251:12:0","nodeType":"FunctionDefinition","overrides":{"id":208,"nodeType":"OverrideSpecifier","overrides":[],"src":"6310:8:0"},"parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"role","nameLocation":"6272:4:0","nodeType":"VariableDeclaration","scope":224,"src":"6264:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6264:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"account","nameLocation":"6286:7:0","nodeType":"VariableDeclaration","scope":224,"src":"6278:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"6278:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6263:31:0"},"returnParameters":{"id":209,"nodeType":"ParameterList","parameters":[],"src":"6319:0:0"},"scope":335,"src":"6242:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":237,"nodeType":"Block","src":"7209:42:0","statements":[{"expression":{"arguments":[{"id":233,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"7230:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":234,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7236:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":232,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"7219:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7219:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"7219:25:0"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"6462:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"7150:10:0","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"role","nameLocation":"7169:4:0","nodeType":"VariableDeclaration","scope":238,"src":"7161:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7161:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"account","nameLocation":"7183:7:0","nodeType":"VariableDeclaration","scope":238,"src":"7175:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"7175:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7160:31:0"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"7209:0:0"},"scope":335,"src":"7141:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":265,"nodeType":"Block","src":"7449:174:0","statements":[{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7467:17:0","nodeType":"VariableDeclaration","scope":265,"src":"7459:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7459:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7500:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"7487:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7487:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7459:46:0"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":252,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7515:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":254,"indexExpression":{"id":253,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7522:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7515:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7528:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":33,"src":"7515:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7540:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7515:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":258,"nodeType":"ExpressionStatement","src":"7515:34:0"},{"eventCall":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"7581:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7587:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":262,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7606:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7564:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7564:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":264,"nodeType":"EmitStatement","src":"7559:57:0"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"7257:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":266,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7385:13:0","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"7407:4:0","nodeType":"VariableDeclaration","scope":266,"src":"7399:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7399:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"adminRole","nameLocation":"7421:9:0","nodeType":"VariableDeclaration","scope":266,"src":"7413:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":242,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7413:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7398:33:0"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"7449:0:0"},"scope":335,"src":"7376:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":297,"nodeType":"Block","src":"7859:165:0","statements":[{"condition":{"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7873:23:0","subExpression":{"arguments":[{"id":275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7882:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7888:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"7874:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7874:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"7869:149:0","trueBody":{"id":295,"nodeType":"Block","src":"7898:120:0","statements":[{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":279,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"7912:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":281,"indexExpression":{"id":280,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7919:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7912:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7925:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"7912:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":284,"indexExpression":{"id":283,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7912:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7944:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7912:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":287,"nodeType":"ExpressionStatement","src":"7912:36:0"},{"eventCall":{"arguments":[{"id":289,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"7979:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":290,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7985:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":291,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7994:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7994:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":288,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"7967:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7967:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":294,"nodeType":"EmitStatement","src":"7962:45:0"}]}}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"7629:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":298,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7800:10:0","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"role","nameLocation":"7819:4:0","nodeType":"VariableDeclaration","scope":298,"src":"7811:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7811:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"7833:7:0","nodeType":"VariableDeclaration","scope":298,"src":"7825:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"7825:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7810:31:0"},"returnParameters":{"id":273,"nodeType":"ParameterList","parameters":[],"src":"7859:0:0"},"scope":335,"src":"7791:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":328,"nodeType":"Block","src":"8264:165:0","statements":[{"condition":{"arguments":[{"id":307,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8286:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":308,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8292:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":306,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"8278:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8278:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"nodeType":"IfStatement","src":"8274:149:0","trueBody":{"id":326,"nodeType":"Block","src":"8302:121:0","statements":[{"expression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":310,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"8316:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$34_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":312,"indexExpression":{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8323:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8316:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$34_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8329:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":31,"src":"8316:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":315,"indexExpression":{"id":314,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8337:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8316:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8348:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8316:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":318,"nodeType":"ExpressionStatement","src":"8316:37:0"},{"eventCall":{"arguments":[{"id":320,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"8384:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"8390:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"8399:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":319,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"8372:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8372:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"8367:45:0"}]}}]},"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"8030:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8204:11:0","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"8224:4:0","nodeType":"VariableDeclaration","scope":329,"src":"8216:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8216:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"account","nameLocation":"8238:7:0","nodeType":"VariableDeclaration","scope":329,"src":"8230:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"8230:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8215:31:0"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"8264:0:0"},"scope":335,"src":"8195:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"8435:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":334,"mutability":"mutable","name":"__gap","nameLocation":"8714:5:0","nodeType":"VariableDeclaration","scope":335,"src":"8694:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":333,"length":{"hexValue":"3439","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8702:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"8694:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":336,"src":"1893:6829:0","usedErrors":[]}],"src":"108:8615:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol","exportedSymbols":{"IAccessControlUpgradeable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":337,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":408,"linearizedBaseContracts":[408],"name":"IAccessControlUpgradeable","nameLocation":"219:25:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":339,"nodeType":"StructuredDocumentation","src":"251:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":347,"name":"RoleAdminChanged","nameLocation":"554:16:1","nodeType":"EventDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"587:4:1","nodeType":"VariableDeclaration","scope":347,"src":"571:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"571:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"609:17:1","nodeType":"VariableDeclaration","scope":347,"src":"593:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":345,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"644:12:1","nodeType":"VariableDeclaration","scope":347,"src":"628:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"628:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"570:87:1"},"src":"548:110:1"},{"anonymous":false,"documentation":{"id":348,"nodeType":"StructuredDocumentation","src":"664:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":356,"name":"RoleGranted","nameLocation":"887:11:1","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"915:4:1","nodeType":"VariableDeclaration","scope":356,"src":"899:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"937:7:1","nodeType":"VariableDeclaration","scope":356,"src":"921:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"962:6:1","nodeType":"VariableDeclaration","scope":356,"src":"946:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"946:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:71:1"},"src":"881:89:1"},{"anonymous":false,"documentation":{"id":357,"nodeType":"StructuredDocumentation","src":"976:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":365,"name":"RoleRevoked","nameLocation":"1262:11:1","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1290:4:1","nodeType":"VariableDeclaration","scope":365,"src":"1274:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1274:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1312:7:1","nodeType":"VariableDeclaration","scope":365,"src":"1296:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":365,"src":"1321:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1273:71:1"},"src":"1256:89:1"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"1351:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1441:7:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"role","nameLocation":"1457:4:1","nodeType":"VariableDeclaration","scope":375,"src":"1449:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":367,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1449:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"account","nameLocation":"1471:7:1","nodeType":"VariableDeclaration","scope":375,"src":"1463:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1448:31:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":375,"src":"1503:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":372,"name":"bool","nodeType":"ElementaryTypeName","src":"1503:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1502:6:1"},"scope":408,"src":"1432:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"1515:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":383,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1713:12:1","nodeType":"FunctionDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1734:4:1","nodeType":"VariableDeclaration","scope":383,"src":"1726:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1726:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1725:14:1"},"returnParameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":383,"src":"1763:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1763:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1762:9:1"},"scope":408,"src":"1704:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"1778:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":391,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2031:9:1","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"role","nameLocation":"2049:4:1","nodeType":"VariableDeclaration","scope":391,"src":"2041:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"account","nameLocation":"2063:7:1","nodeType":"VariableDeclaration","scope":391,"src":"2055:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:31:1"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"2080:0:1"},"scope":408,"src":"2022:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"2087:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2324:10:1","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"role","nameLocation":"2343:4:1","nodeType":"VariableDeclaration","scope":399,"src":"2335:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"account","nameLocation":"2357:7:1","nodeType":"VariableDeclaration","scope":399,"src":"2349:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"2349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:31:1"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"2374:0:1"},"scope":408,"src":"2315:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2381:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2875:12:1","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"role","nameLocation":"2896:4:1","nodeType":"VariableDeclaration","scope":407,"src":"2888:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"account","nameLocation":"2910:7:1","nodeType":"VariableDeclaration","scope":407,"src":"2902:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":403,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2887:31:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[],"src":"2927:0:1"},"scope":408,"src":"2866:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":409,"src":"209:2721:1","usedErrors":[]}],"src":"94:2837:1"},"id":1},"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[858]},"id":412,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../token/ERC20/IERC20Upgradeable.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":412,"sourceUnit":859,"src":"115:46:2","symbolAliases":[],"unitAlias":""}],"src":"90:72:2"},"id":2},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"Initializable":[580]},"id":581,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":413,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":414,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":581,"sourceUnit":1460,"src":"138:44:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"184:2198:3","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":580,"linearizedBaseContracts":[580],"name":"Initializable","nameLocation":"2401:13:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"2421:109:3","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":418,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:3","nodeType":"VariableDeclaration","scope":580,"src":"2535:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":417,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"2568:91:3","text":" @dev Indicates that the contract is in the process of being initialized."},"id":421,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:3","nodeType":"VariableDeclaration","scope":580,"src":"2664:26:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":420,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"2697:90:3","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":426,"name":"Initialized","nameLocation":"2798:11:3","nodeType":"EventDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:3","nodeType":"VariableDeclaration","scope":426,"src":"2810:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":423,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:3"},"src":"2792:33:3"},{"body":{"id":481,"nodeType":"Block","src":"3258:483:3","statements":[{"assignments":[430],"declarations":[{"constant":false,"id":430,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:3","nodeType":"VariableDeclaration","scope":481,"src":"3268:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":429,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":433,"initialValue":{"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:3","subExpression":{"id":431,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3291:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":435,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3336:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":436,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3354:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:3","subExpression":{"arguments":[{"arguments":[{"id":445,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$580","typeString":"contract Initializable"}],"id":444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:3","typeDescriptions":{}}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":441,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"3377:18:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1459_$","typeString":"type(library AddressUpgradeable)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3396:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1193,"src":"3377:29:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":449,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3425:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":434,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:201:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"3314:201:3"},{"expression":{"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":458,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"3525:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":461,"nodeType":"ExpressionStatement","src":"3525:16:3"},{"condition":{"id":462,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3555:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":468,"nodeType":"IfStatement","src":"3551:65:3","trueBody":{"id":467,"nodeType":"Block","src":"3571:45:3","statements":[{"expression":{"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":463,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3585:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":466,"nodeType":"ExpressionStatement","src":"3585:20:3"}]}},{"id":469,"nodeType":"PlaceholderStatement","src":"3625:1:3"},{"condition":{"id":470,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"3640:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":480,"nodeType":"IfStatement","src":"3636:99:3","trueBody":{"id":479,"nodeType":"Block","src":"3656:79:3","statements":[{"expression":{"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":471,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"3670:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":474,"nodeType":"ExpressionStatement","src":"3670:21:3"},{"eventCall":{"arguments":[{"hexValue":"31","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":475,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"3710:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3710:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":478,"nodeType":"EmitStatement","src":"3705:19:3"}]}}]},"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"2831:399:3","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":482,"name":"initializer","nameLocation":"3244:11:3","nodeType":"ModifierDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"3255:2:3"},"src":"3235:506:3","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"4852:255:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:3","subExpression":{"id":488,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4871:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4888:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":491,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4903:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"4862:99:3"},{"expression":{"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":497,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"4971:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":498,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"4986:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":500,"nodeType":"ExpressionStatement","src":"4971:22:3"},{"expression":{"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":501,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5003:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":504,"nodeType":"ExpressionStatement","src":"5003:20:3"},{"id":505,"nodeType":"PlaceholderStatement","src":"5033:1:3"},{"expression":{"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":506,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5044:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"nodeType":"ExpressionStatement","src":"5044:21:3"},{"eventCall":{"arguments":[{"id":511,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"5092:7:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":510,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"5080:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5080:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":513,"nodeType":"EmitStatement","src":"5075:25:3"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"3747:1062:3","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":515,"name":"reinitializer","nameLocation":"4823:13:3","nodeType":"ModifierDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"version","nameLocation":"4843:7:3","nodeType":"VariableDeclaration","scope":515,"src":"4837:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":484,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:3"},"src":"4814:293:3","virtual":false,"visibility":"internal"},{"body":{"id":524,"nodeType":"Block","src":"5345:97:3","statements":[{"expression":{"arguments":[{"id":519,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5363:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5355:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":522,"nodeType":"ExpressionStatement","src":"5355:69:3"},{"id":523,"nodeType":"PlaceholderStatement","src":"5434:1:3"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"5113:199:3","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":525,"name":"onlyInitializing","nameLocation":"5326:16:3","nodeType":"ModifierDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"5342:2:3"},"src":"5317:125:3","virtual":false,"visibility":"internal"},{"body":{"id":560,"nodeType":"Block","src":"5977:230:3","statements":[{"expression":{"arguments":[{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:3","subExpression":{"id":530,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"5996:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5987:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":534,"nodeType":"ExpressionStatement","src":"5987:66:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":535,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6067:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":537,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":536,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6082:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6094:3:3","memberName":"max","nodeType":"MemberAccess","src":"6082:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":559,"nodeType":"IfStatement","src":"6063:138:3","trueBody":{"id":558,"nodeType":"Block","src":"6099:102:3","statements":[{"expression":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":542,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6113:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":544,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":543,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6140:3:3","memberName":"max","nodeType":"MemberAccess","src":"6128:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":549,"nodeType":"ExpressionStatement","src":"6113:30:3"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":552,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":551,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6186:3:3","memberName":"max","nodeType":"MemberAccess","src":"6174:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":550,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"6162:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6162:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":557,"nodeType":"EmitStatement","src":"6157:33:3"}]}}]},"documentation":{"id":526,"nodeType":"StructuredDocumentation","src":"5448:475:3","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":561,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:3","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"5957:2:3"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"5977:0:3"},"scope":580,"src":"5928:279:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"6381:36:3","statements":[{"expression":{"id":567,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"6398:12:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":566,"id":568,"nodeType":"Return","src":"6391:19:3"}]},"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"6213:99:3","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":570,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6326:22:3","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"6348:2:3"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":570,"src":"6374:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":564,"name":"uint8","nodeType":"ElementaryTypeName","src":"6374:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6373:7:3"},"scope":580,"src":"6317:100:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":578,"nodeType":"Block","src":"6589:37:3","statements":[{"expression":{"id":576,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"6606:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":575,"id":577,"nodeType":"Return","src":"6599:20:3"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"6423:105:3","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":579,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6542:15:3","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"6557:2:3"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":579,"src":"6583:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"6583:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6582:6:3"},"scope":580,"src":"6533:93:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":581,"src":"2383:4245:3","usedErrors":[]}],"src":"113:6516:3"},"id":3},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"ContextUpgradeable":[1501],"Initializable":[580],"PausableUpgradeable":[707]},"id":708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":582,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":1502,"src":"130:41:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":584,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":708,"sourceUnit":581,"src":"172:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":586,"name":"Initializable","nameLocations":["697:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"697:13:4"},"id":587,"nodeType":"InheritanceSpecifier","src":"697:13:4"},{"baseName":{"id":588,"name":"ContextUpgradeable","nameLocations":["712:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1501,"src":"712:18:4"},"id":589,"nodeType":"InheritanceSpecifier","src":"712:18:4"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"216:439:4","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":707,"linearizedBaseContracts":[707,1501,580],"name":"PausableUpgradeable","nameLocation":"674:19:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":590,"nodeType":"StructuredDocumentation","src":"737:73:4","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":594,"name":"Paused","nameLocation":"821:6:4","nodeType":"EventDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"836:7:4","nodeType":"VariableDeclaration","scope":594,"src":"828:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":591,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"827:17:4"},"src":"815:30:4"},{"anonymous":false,"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"851:70:4","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":599,"name":"Unpaused","nameLocation":"932:8:4","nodeType":"EventDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"949:7:4","nodeType":"VariableDeclaration","scope":599,"src":"941:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"940:17:4"},"src":"926:32:4"},{"constant":false,"id":601,"mutability":"mutable","name":"_paused","nameLocation":"977:7:4","nodeType":"VariableDeclaration","scope":707,"src":"964:20:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":600,"name":"bool","nodeType":"ElementaryTypeName","src":"964:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":610,"nodeType":"Block","src":"1116:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":607,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"1126:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":609,"nodeType":"ExpressionStatement","src":"1126:27:4"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"991:67:4","text":" @dev Initializes the contract in unpaused state."},"id":611,"implemented":true,"kind":"function","modifiers":[{"id":605,"kind":"modifierInvocation","modifierName":{"id":604,"name":"onlyInitializing","nameLocations":["1099:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1099:16:4"},"nodeType":"ModifierInvocation","src":"1099:16:4"}],"name":"__Pausable_init","nameLocation":"1072:15:4","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"1087:2:4"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"1116:0:4"},"scope":707,"src":"1063:97:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":620,"nodeType":"Block","src":"1229:32:4","statements":[{"expression":{"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":616,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1239:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1249:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1239:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":619,"nodeType":"ExpressionStatement","src":"1239:15:4"}]},"id":621,"implemented":true,"kind":"function","modifiers":[{"id":614,"kind":"modifierInvocation","modifierName":{"id":613,"name":"onlyInitializing","nameLocations":["1212:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1212:16:4"},"nodeType":"ModifierInvocation","src":"1212:16:4"}],"name":"__Pausable_init_unchained","nameLocation":"1175:25:4","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"1200:2:4"},"returnParameters":{"id":615,"nodeType":"ParameterList","parameters":[],"src":"1229:0:4"},"scope":707,"src":"1166:95:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":628,"nodeType":"Block","src":"1472:47:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":624,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"1482:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":626,"nodeType":"ExpressionStatement","src":"1482:19:4"},{"id":627,"nodeType":"PlaceholderStatement","src":"1511:1:4"}]},"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"1267:175:4","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":629,"name":"whenNotPaused","nameLocation":"1456:13:4","nodeType":"ModifierDefinition","parameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"1469:2:4"},"src":"1447:72:4","virtual":false,"visibility":"internal"},{"body":{"id":636,"nodeType":"Block","src":"1719:44:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":632,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"1729:14:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"1729:16:4"},{"id":635,"nodeType":"PlaceholderStatement","src":"1755:1:4"}]},"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"1525:167:4","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":637,"name":"whenPaused","nameLocation":"1706:10:4","nodeType":"ModifierDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[],"src":"1716:2:4"},"src":"1697:66:4","virtual":false,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"1911:31:4","statements":[{"expression":{"id":643,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1928:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":642,"id":644,"nodeType":"Return","src":"1921:14:4"}]},"documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"1769:84:4","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":646,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1867:6:4","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[],"src":"1873:2:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"1905:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":640,"name":"bool","nodeType":"ElementaryTypeName","src":"1905:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1904:6:4"},"scope":707,"src":"1858:84:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":657,"nodeType":"Block","src":"2061:55:4","statements":[{"expression":{"arguments":[{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2079:9:4","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":651,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2080:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2080:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2090:18:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2071:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2071:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":656,"nodeType":"ExpressionStatement","src":"2071:38:4"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"1948:57:4","text":" @dev Throws if the contract is paused."},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2019:17:4","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[],"src":"2036:2:4"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"2061:0:4"},"scope":707,"src":"2010:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"2236:58:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":663,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2254:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2254:8:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2264:22:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2246:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"2246:41:4"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"2122:61:4","text":" @dev Throws if the contract is not paused."},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2197:14:4","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[],"src":"2211:2:4"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[],"src":"2236:0:4"},"scope":707,"src":"2188:106:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":684,"nodeType":"Block","src":"2478:66:4","statements":[{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":675,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2488:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2498:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2488:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":678,"nodeType":"ExpressionStatement","src":"2488:14:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":680,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"2524:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2524:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":679,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2517:6:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":683,"nodeType":"EmitStatement","src":"2512:25:4"}]},"documentation":{"id":670,"nodeType":"StructuredDocumentation","src":"2300:124:4","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":685,"implemented":true,"kind":"function","modifiers":[{"id":673,"kind":"modifierInvocation","modifierName":{"id":672,"name":"whenNotPaused","nameLocations":["2464:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":629,"src":"2464:13:4"},"nodeType":"ModifierInvocation","src":"2464:13:4"}],"name":"_pause","nameLocation":"2438:6:4","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"2444:2:4"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"2478:0:4"},"scope":707,"src":"2429:115:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":700,"nodeType":"Block","src":"2724:69:4","statements":[{"expression":{"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":691,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2734:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2744:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2734:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":694,"nodeType":"ExpressionStatement","src":"2734:15:4"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":696,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"2773:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":695,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"2764:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2764:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":699,"nodeType":"EmitStatement","src":"2759:27:4"}]},"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"2550:121:4","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":701,"implemented":true,"kind":"function","modifiers":[{"id":689,"kind":"modifierInvocation","modifierName":{"id":688,"name":"whenPaused","nameLocations":["2713:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":637,"src":"2713:10:4"},"nodeType":"ModifierInvocation","src":"2713:10:4"}],"name":"_unpause","nameLocation":"2685:8:4","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[],"src":"2693:2:4"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"2724:0:4"},"scope":707,"src":"2676:117:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"2799:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":706,"mutability":"mutable","name":"__gap","nameLocation":"3078:5:4","nodeType":"VariableDeclaration","scope":707,"src":"3058:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"length":{"hexValue":"3439","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3066:2:4","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3058:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":708,"src":"656:2430:4","usedErrors":[]}],"src":"105:2982:4"},"id":4},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"Initializable":[580],"ReentrancyGuardUpgradeable":[780]},"id":781,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":709,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":781,"sourceUnit":581,"src":"136:42:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":712,"name":"Initializable","nameLocations":["979:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"979:13:5"},"id":713,"nodeType":"InheritanceSpecifier","src":"979:13:5"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":711,"nodeType":"StructuredDocumentation","src":"180:750:5","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":780,"linearizedBaseContracts":[780,580],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":716,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:5","nodeType":"VariableDeclaration","scope":780,"src":"1747:41:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":719,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:5","nodeType":"VariableDeclaration","scope":780,"src":"1794:37:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":721,"mutability":"mutable","name":"_status","nameLocation":"1854:7:5","nodeType":"VariableDeclaration","scope":780,"src":"1838:23:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":729,"nodeType":"Block","src":"1928:51:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":726,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"1938:32:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":728,"nodeType":"ExpressionStatement","src":"1938:34:5"}]},"id":730,"implemented":true,"kind":"function","modifiers":[{"id":724,"kind":"modifierInvocation","modifierName":{"id":723,"name":"onlyInitializing","nameLocations":["1911:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1911:16:5"},"nodeType":"ModifierInvocation","src":"1911:16:5"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:5","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"1899:2:5"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[],"src":"1928:0:5"},"scope":780,"src":"1868:111:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":739,"nodeType":"Block","src":"2055:39:5","statements":[{"expression":{"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":735,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2065:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":736,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"2075:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":738,"nodeType":"ExpressionStatement","src":"2065:22:5"}]},"id":740,"implemented":true,"kind":"function","modifiers":[{"id":733,"kind":"modifierInvocation","modifierName":{"id":732,"name":"onlyInitializing","nameLocations":["2038:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2038:16:5"},"nodeType":"ModifierInvocation","src":"2038:16:5"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:5","nodeType":"FunctionDefinition","parameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"2026:2:5"},"returnParameters":{"id":734,"nodeType":"ParameterList","parameters":[],"src":"2055:0:5"},"scope":780,"src":"1985:109:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":750,"nodeType":"Block","src":"2495:79:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":743,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"2505:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":745,"nodeType":"ExpressionStatement","src":"2505:21:5"},{"id":746,"nodeType":"PlaceholderStatement","src":"2536:1:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":747,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"2547:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":749,"nodeType":"ExpressionStatement","src":"2547:20:5"}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"2100:366:5","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":751,"name":"nonReentrant","nameLocation":"2480:12:5","nodeType":"ModifierDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[],"src":"2492:2:5"},"src":"2471:103:5","virtual":false,"visibility":"internal"},{"body":{"id":765,"nodeType":"Block","src":"2619:248:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":755,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2712:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":756,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"2723:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":754,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":760,"nodeType":"ExpressionStatement","src":"2704:63:5"},{"expression":{"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":761,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2842:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":762,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"2852:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":764,"nodeType":"ExpressionStatement","src":"2842:18:5"}]},"id":766,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:5","nodeType":"FunctionDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[],"src":"2608:2:5"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[],"src":"2619:0:5"},"scope":780,"src":"2580:287:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":773,"nodeType":"Block","src":"2911:171:5","statements":[{"expression":{"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":769,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3053:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":770,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"3063:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":772,"nodeType":"ExpressionStatement","src":"3053:22:5"}]},"id":774,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:5","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[],"src":"2900:2:5"},"returnParameters":{"id":768,"nodeType":"ParameterList","parameters":[],"src":"2911:0:5"},"scope":780,"src":"2873:209:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"constant":false,"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"3088:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":779,"mutability":"mutable","name":"__gap","nameLocation":"3367:5:5","nodeType":"VariableDeclaration","scope":780,"src":"3347:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"3347:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":778,"length":{"hexValue":"3439","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3355:2:5","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3347:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":781,"src":"931:2444:5","usedErrors":[]}],"src":"112:3264:5"},"id":5},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[858]},"id":859,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":782,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"131:70:6","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":858,"linearizedBaseContracts":[858],"name":"IERC20Upgradeable","nameLocation":"212:17:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"236:158:6","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":792,"name":"Transfer","nameLocation":"405:8:6","nodeType":"EventDefinition","parameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:6","nodeType":"VariableDeclaration","scope":792,"src":"414:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":785,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":788,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:6","nodeType":"VariableDeclaration","scope":792,"src":"436:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":790,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:6","nodeType":"VariableDeclaration","scope":792,"src":"456:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":789,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:6"},"src":"399:72:6"},{"anonymous":false,"documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"477:148:6","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":801,"name":"Approval","nameLocation":"636:8:6","nodeType":"EventDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:6","nodeType":"VariableDeclaration","scope":801,"src":"645:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":794,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":797,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:6","nodeType":"VariableDeclaration","scope":801,"src":"668:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":796,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":799,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:6","nodeType":"VariableDeclaration","scope":801,"src":"693:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:6"},"src":"630:78:6"},{"documentation":{"id":802,"nodeType":"StructuredDocumentation","src":"714:66:6","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":807,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:6","nodeType":"FunctionDefinition","parameters":{"id":803,"nodeType":"ParameterList","parameters":[],"src":"805:2:6"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":807,"src":"831:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:6"},"scope":858,"src":"785:55:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"846:72:6","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":815,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:6","nodeType":"FunctionDefinition","parameters":{"id":811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"account","nameLocation":"950:7:6","nodeType":"VariableDeclaration","scope":815,"src":"942:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:6"},"returnParameters":{"id":814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":815,"src":"982:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:6"},"scope":858,"src":"923:68:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"997:202:6","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":825,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:6","nodeType":"FunctionDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"to","nameLocation":"1230:2:6","nodeType":"VariableDeclaration","scope":825,"src":"1222:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"amount","nameLocation":"1242:6:6","nodeType":"VariableDeclaration","scope":825,"src":"1234:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:6"},"returnParameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":825,"src":"1268:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":822,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:6"},"scope":858,"src":"1204:70:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"1280:264:6","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":835,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:6","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"owner","nameLocation":"1576:5:6","nodeType":"VariableDeclaration","scope":835,"src":"1568:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":827,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"spender","nameLocation":"1591:7:6","nodeType":"VariableDeclaration","scope":835,"src":"1583:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:6"},"returnParameters":{"id":834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":835,"src":"1623:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:6"},"scope":858,"src":"1549:83:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":836,"nodeType":"StructuredDocumentation","src":"1638:642:6","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":845,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:6","nodeType":"FunctionDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":838,"mutability":"mutable","name":"spender","nameLocation":"2310:7:6","nodeType":"VariableDeclaration","scope":845,"src":"2302:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":840,"mutability":"mutable","name":"amount","nameLocation":"2327:6:6","nodeType":"VariableDeclaration","scope":845,"src":"2319:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:6"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":845,"src":"2353:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":842,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:6"},"scope":858,"src":"2285:74:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":846,"nodeType":"StructuredDocumentation","src":"2365:287:6","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":857,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:6","nodeType":"FunctionDefinition","parameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"from","nameLocation":"2696:4:6","nodeType":"VariableDeclaration","scope":857,"src":"2688:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"2688:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"to","nameLocation":"2718:2:6","nodeType":"VariableDeclaration","scope":857,"src":"2710:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":849,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":852,"mutability":"mutable","name":"amount","nameLocation":"2738:6:6","nodeType":"VariableDeclaration","scope":857,"src":"2730:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":851,"name":"uint256","nodeType":"ElementaryTypeName","src":"2730:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:72:6"},"returnParameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":857,"src":"2769:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":854,"name":"bool","nodeType":"ElementaryTypeName","src":"2769:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2768:6:6"},"scope":858,"src":"2657:118:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":859,"src":"202:2575:6","usedErrors":[]}],"src":"106:2672:6"},"id":6},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[894]},"id":895,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":860,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"139:480:7","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":894,"linearizedBaseContracts":[894],"name":"IERC20PermitUpgradeable","nameLocation":"630:23:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"660:792:7","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":879,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1466:6:7","nodeType":"FunctionDefinition","parameters":{"id":877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"owner","nameLocation":"1490:5:7","nodeType":"VariableDeclaration","scope":879,"src":"1482:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"1482:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"spender","nameLocation":"1513:7:7","nodeType":"VariableDeclaration","scope":879,"src":"1505:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":868,"mutability":"mutable","name":"value","nameLocation":"1538:5:7","nodeType":"VariableDeclaration","scope":879,"src":"1530:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1530:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":870,"mutability":"mutable","name":"deadline","nameLocation":"1561:8:7","nodeType":"VariableDeclaration","scope":879,"src":"1553:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"v","nameLocation":"1585:1:7","nodeType":"VariableDeclaration","scope":879,"src":"1579:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":871,"name":"uint8","nodeType":"ElementaryTypeName","src":"1579:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"r","nameLocation":"1604:1:7","nodeType":"VariableDeclaration","scope":879,"src":"1596:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":873,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1596:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":876,"mutability":"mutable","name":"s","nameLocation":"1623:1:7","nodeType":"VariableDeclaration","scope":879,"src":"1615:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1615:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1472:158:7"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[],"src":"1639:0:7"},"scope":894,"src":"1457:183:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"1646:294:7","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":887,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1954:6:7","nodeType":"FunctionDefinition","parameters":{"id":883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":882,"mutability":"mutable","name":"owner","nameLocation":"1969:5:7","nodeType":"VariableDeclaration","scope":887,"src":"1961:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":881,"name":"address","nodeType":"ElementaryTypeName","src":"1961:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1960:15:7"},"returnParameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":887,"src":"1999:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":884,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1998:9:7"},"scope":894,"src":"1945:63:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":888,"nodeType":"StructuredDocumentation","src":"2014:128:7","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":893,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2209:16:7","nodeType":"FunctionDefinition","parameters":{"id":889,"nodeType":"ParameterList","parameters":[],"src":"2225:2:7"},"returnParameters":{"id":892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":893,"src":"2251:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":890,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2251:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2250:9:7"},"scope":894,"src":"2200:60:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":895,"src":"620:1642:7","usedErrors":[]}],"src":"114:2149:7"},"id":7},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"IERC20PermitUpgradeable":[894],"IERC20Upgradeable":[858],"SafeERC20Upgradeable":[1175]},"id":1176,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":896,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":897,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1176,"sourceUnit":859,"src":"140:34:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol","file":"../extensions/draft-IERC20PermitUpgradeable.sol","id":898,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1176,"sourceUnit":895,"src":"175:57:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":899,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1176,"sourceUnit":1460,"src":"233:47:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":900,"nodeType":"StructuredDocumentation","src":"282:457:8","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1175,"linearizedBaseContracts":[1175],"name":"SafeERC20Upgradeable","nameLocation":"748:20:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":903,"libraryName":{"id":901,"name":"AddressUpgradeable","nameLocations":["781:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":1459,"src":"781:18:8"},"nodeType":"UsingForDirective","src":"775:37:8","typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"804:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":925,"nodeType":"Block","src":"931:103:8","statements":[{"expression":{"arguments":[{"id":914,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"961:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":917,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"991:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"997:8:8","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":825,"src":"991:14:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1006:8:8","memberName":"selector","nodeType":"MemberAccess","src":"991:23:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":920,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"1016:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"1020:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":915,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"968:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"972:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"968:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"968:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":913,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"941:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"941:86:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"941:86:8"}]},"id":926,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"827:12:8","nodeType":"FunctionDefinition","parameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"token","nameLocation":"867:5:8","nodeType":"VariableDeclaration","scope":926,"src":"849:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":905,"nodeType":"UserDefinedTypeName","pathNode":{"id":904,"name":"IERC20Upgradeable","nameLocations":["849:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"849:17:8"},"referencedDeclaration":858,"src":"849:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"to","nameLocation":"890:2:8","nodeType":"VariableDeclaration","scope":926,"src":"882:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":907,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":910,"mutability":"mutable","name":"value","nameLocation":"910:5:8","nodeType":"VariableDeclaration","scope":926,"src":"902:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"839:82:8"},"returnParameters":{"id":912,"nodeType":"ParameterList","parameters":[],"src":"931:0:8"},"scope":1175,"src":"818:216:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":951,"nodeType":"Block","src":"1179:113:8","statements":[{"expression":{"arguments":[{"id":939,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"1209:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":942,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"1239:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1245:12:8","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":857,"src":"1239:18:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1258:8:8","memberName":"selector","nodeType":"MemberAccess","src":"1239:27:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":945,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"1268:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":946,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1274:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"1278:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":940,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1216:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1220:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1216:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":938,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"1189:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1189:96:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":950,"nodeType":"ExpressionStatement","src":"1189:96:8"}]},"id":952,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1049:16:8","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"token","nameLocation":"1093:5:8","nodeType":"VariableDeclaration","scope":952,"src":"1075:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":928,"nodeType":"UserDefinedTypeName","pathNode":{"id":927,"name":"IERC20Upgradeable","nameLocations":["1075:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1075:17:8"},"referencedDeclaration":858,"src":"1075:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"from","nameLocation":"1116:4:8","nodeType":"VariableDeclaration","scope":952,"src":"1108:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"1108:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"to","nameLocation":"1138:2:8","nodeType":"VariableDeclaration","scope":952,"src":"1130:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":932,"name":"address","nodeType":"ElementaryTypeName","src":"1130:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"value","nameLocation":"1158:5:8","nodeType":"VariableDeclaration","scope":952,"src":"1150:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1150:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1065:104:8"},"returnParameters":{"id":937,"nodeType":"ParameterList","parameters":[],"src":"1179:0:8"},"scope":1175,"src":"1040:252:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":995,"nodeType":"Block","src":"1669:497:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"1918:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1927:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1918:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1917:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":972,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1958:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}],"id":971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1950:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:8","typeDescriptions":{}}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1950:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":974,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"1965:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":968,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"1934:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1940:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":835,"src":"1934:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1934:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1977:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1934:44:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1933:46:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1917:62:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1993:56:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":963,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1896:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1896:163:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":982,"nodeType":"ExpressionStatement","src":"1896:163:8"},{"expression":{"arguments":[{"id":984,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"2089:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":987,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"2119:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2125:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":845,"src":"2119:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2133:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2119:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":990,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"2143:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2152:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":985,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2096:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2100:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2096:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2096:62:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":983,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2069:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2069:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":994,"nodeType":"ExpressionStatement","src":"2069:90:8"}]},"documentation":{"id":953,"nodeType":"StructuredDocumentation","src":"1298:249:8","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":996,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1561:11:8","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"token","nameLocation":"1600:5:8","nodeType":"VariableDeclaration","scope":996,"src":"1582:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":955,"nodeType":"UserDefinedTypeName","pathNode":{"id":954,"name":"IERC20Upgradeable","nameLocations":["1582:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1582:17:8"},"referencedDeclaration":858,"src":"1582:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"spender","nameLocation":"1623:7:8","nodeType":"VariableDeclaration","scope":996,"src":"1615:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":957,"name":"address","nodeType":"ElementaryTypeName","src":"1615:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":960,"mutability":"mutable","name":"value","nameLocation":"1648:5:8","nodeType":"VariableDeclaration","scope":996,"src":"1640:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":959,"name":"uint256","nodeType":"ElementaryTypeName","src":"1640:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1572:87:8"},"returnParameters":{"id":962,"nodeType":"ParameterList","parameters":[],"src":"1669:0:8"},"scope":1175,"src":"1552:614:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1031,"nodeType":"Block","src":"2299:194:8","statements":[{"assignments":[1007],"declarations":[{"constant":false,"id":1007,"mutability":"mutable","name":"newAllowance","nameLocation":"2317:12:8","nodeType":"VariableDeclaration","scope":1031,"src":"2309:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"2309:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1018,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1012,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2356:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}],"id":1011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2348:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1010,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:8","typeDescriptions":{}}},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2348:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1014,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"2363:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1008,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2332:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2338:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":835,"src":"2332:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"2374:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2332:47:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2309:70:8"},{"expression":{"arguments":[{"id":1020,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2409:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1023,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2439:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2445:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":845,"src":"2439:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2453:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2439:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1026,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"2463:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1027,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"2472:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1021,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2416:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2420:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2416:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2416:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1019,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2389:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2389:97:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1030,"nodeType":"ExpressionStatement","src":"2389:97:8"}]},"id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2181:21:8","nodeType":"FunctionDefinition","parameters":{"id":1004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"token","nameLocation":"2230:5:8","nodeType":"VariableDeclaration","scope":1032,"src":"2212:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":998,"nodeType":"UserDefinedTypeName","pathNode":{"id":997,"name":"IERC20Upgradeable","nameLocations":["2212:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"2212:17:8"},"referencedDeclaration":858,"src":"2212:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"spender","nameLocation":"2253:7:8","nodeType":"VariableDeclaration","scope":1032,"src":"2245:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"2245:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"value","nameLocation":"2278:5:8","nodeType":"VariableDeclaration","scope":1032,"src":"2270:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1002,"name":"uint256","nodeType":"ElementaryTypeName","src":"2270:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2202:87:8"},"returnParameters":{"id":1005,"nodeType":"ParameterList","parameters":[],"src":"2299:0:8"},"scope":1175,"src":"2172:321:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1079,"nodeType":"Block","src":"2626:370:8","statements":[{"id":1078,"nodeType":"UncheckedBlock","src":"2636:354:8","statements":[{"assignments":[1043],"declarations":[{"constant":false,"id":1043,"mutability":"mutable","name":"oldAllowance","nameLocation":"2668:12:8","nodeType":"VariableDeclaration","scope":1078,"src":"2660:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"2660:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1052,"initialValue":{"arguments":[{"arguments":[{"id":1048,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2707:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$1175","typeString":"library SafeERC20Upgradeable"}],"id":1047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2699:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1046,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:8","typeDescriptions":{}}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1050,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"2714:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1044,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2683:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2689:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":835,"src":"2683:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2683:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2660:62:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1054,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"2744:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2760:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2744:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2767:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1053,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2736:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1059,"nodeType":"ExpressionStatement","src":"2736:75:8"},{"assignments":[1061],"declarations":[{"constant":false,"id":1061,"mutability":"mutable","name":"newAllowance","nameLocation":"2833:12:8","nodeType":"VariableDeclaration","scope":1078,"src":"2825:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1060,"name":"uint256","nodeType":"ElementaryTypeName","src":"2825:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1065,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"2848:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2863:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2848:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2825:43:8"},{"expression":{"arguments":[{"id":1067,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2902:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":1070,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2932:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2938:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":845,"src":"2932:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2946:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2932:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1073,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"2956:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1074,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"2965:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1068,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2909:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2913:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2909:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2909:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1066,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2882:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2882:97:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1077,"nodeType":"ExpressionStatement","src":"2882:97:8"}]}]},"id":1080,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2508:21:8","nodeType":"FunctionDefinition","parameters":{"id":1040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"token","nameLocation":"2557:5:8","nodeType":"VariableDeclaration","scope":1080,"src":"2539:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1034,"nodeType":"UserDefinedTypeName","pathNode":{"id":1033,"name":"IERC20Upgradeable","nameLocations":["2539:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"2539:17:8"},"referencedDeclaration":858,"src":"2539:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"spender","nameLocation":"2580:7:8","nodeType":"VariableDeclaration","scope":1080,"src":"2572:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"2572:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"value","nameLocation":"2605:5:8","nodeType":"VariableDeclaration","scope":1080,"src":"2597:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"2597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2529:87:8"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"2626:0:8"},"scope":1175,"src":"2499:497:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1135,"nodeType":"Block","src":"3228:257:8","statements":[{"assignments":[1101],"declarations":[{"constant":false,"id":1101,"mutability":"mutable","name":"nonceBefore","nameLocation":"3246:11:8","nodeType":"VariableDeclaration","scope":1135,"src":"3238:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"3238:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1106,"initialValue":{"arguments":[{"id":1104,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"3273:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1102,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3260:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3266:6:8","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":887,"src":"3260:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3238:41:8"},{"expression":{"arguments":[{"id":1110,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"3302:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1111,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"3309:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1112,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"3318:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1113,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"3325:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1114,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"3335:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1115,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1095,"src":"3338:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1116,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"3341:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1107,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3289:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3295:6:8","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":879,"src":"3289:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3289:54:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1118,"nodeType":"ExpressionStatement","src":"3289:54:8"},{"assignments":[1120],"declarations":[{"constant":false,"id":1120,"mutability":"mutable","name":"nonceAfter","nameLocation":"3361:10:8","nodeType":"VariableDeclaration","scope":1135,"src":"3353:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"3353:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1125,"initialValue":{"arguments":[{"id":1123,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"3387:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1121,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3374:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3380:6:8","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":887,"src":"3374:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3374:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3353:40:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1127,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3411:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1128,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"3425:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3439:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3411:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3442:35:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3403:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3403:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1134,"nodeType":"ExpressionStatement","src":"3403:75:8"}]},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"3011:10:8","nodeType":"FunctionDefinition","parameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1083,"mutability":"mutable","name":"token","nameLocation":"3055:5:8","nodeType":"VariableDeclaration","scope":1136,"src":"3031:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":1082,"nodeType":"UserDefinedTypeName","pathNode":{"id":1081,"name":"IERC20PermitUpgradeable","nameLocations":["3031:23:8"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"3031:23:8"},"referencedDeclaration":894,"src":"3031:23:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"owner","nameLocation":"3078:5:8","nodeType":"VariableDeclaration","scope":1136,"src":"3070:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1084,"name":"address","nodeType":"ElementaryTypeName","src":"3070:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1087,"mutability":"mutable","name":"spender","nameLocation":"3101:7:8","nodeType":"VariableDeclaration","scope":1136,"src":"3093:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"3093:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"value","nameLocation":"3126:5:8","nodeType":"VariableDeclaration","scope":1136,"src":"3118:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"deadline","nameLocation":"3149:8:8","nodeType":"VariableDeclaration","scope":1136,"src":"3141:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"3141:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"v","nameLocation":"3173:1:8","nodeType":"VariableDeclaration","scope":1136,"src":"3167:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1092,"name":"uint8","nodeType":"ElementaryTypeName","src":"3167:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1095,"mutability":"mutable","name":"r","nameLocation":"3192:1:8","nodeType":"VariableDeclaration","scope":1136,"src":"3184:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3184:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"s","nameLocation":"3211:1:8","nodeType":"VariableDeclaration","scope":1136,"src":"3203:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3203:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3021:197:8"},"returnParameters":{"id":1099,"nodeType":"ParameterList","parameters":[],"src":"3228:0:8"},"scope":1175,"src":"3002:483:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1173,"nodeType":"Block","src":"3949:636:8","statements":[{"assignments":[1146],"declarations":[{"constant":false,"id":1146,"mutability":"mutable","name":"returndata","nameLocation":"4311:10:8","nodeType":"VariableDeclaration","scope":1173,"src":"4298:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1145,"name":"bytes","nodeType":"ElementaryTypeName","src":"4298:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1155,"initialValue":{"arguments":[{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"4352:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4358:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1149,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"4332:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}],"id":1148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4324:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1147,"name":"address","nodeType":"ElementaryTypeName","src":"4324:7:8","typeDescriptions":{}}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4339:12:8","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1265,"src":"4324:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4298:95:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1156,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"4407:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4418:6:8","memberName":"length","nodeType":"MemberAccess","src":"4407:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4427:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4407:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1172,"nodeType":"IfStatement","src":"4403:176:8","trueBody":{"id":1171,"nodeType":"Block","src":"4430:149:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1163,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"4502:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4515:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1164,"name":"bool","nodeType":"ElementaryTypeName","src":"4515:4:8","typeDescriptions":{}}}],"id":1166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4514:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1161,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4491:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4495:6:8","memberName":"decode","nodeType":"MemberAccess","src":"4491:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4491:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4523:44:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1160,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4483:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4483:85:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"ExpressionStatement","src":"4483:85:8"}]}}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"3491:372:8","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1174,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3877:19:8","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"token","nameLocation":"3915:5:8","nodeType":"VariableDeclaration","scope":1174,"src":"3897:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":1139,"nodeType":"UserDefinedTypeName","pathNode":{"id":1138,"name":"IERC20Upgradeable","nameLocations":["3897:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"3897:17:8"},"referencedDeclaration":858,"src":"3897:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"data","nameLocation":"3935:4:8","nodeType":"VariableDeclaration","scope":1174,"src":"3922:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1141,"name":"bytes","nodeType":"ElementaryTypeName","src":"3922:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3896:44:8"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[],"src":"3949:0:8"},"scope":1175,"src":"3868:717:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1176,"src":"740:3847:8","usedErrors":[]}],"src":"115:4473:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459]},"id":1460,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1177,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"126:67:9","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1459,"linearizedBaseContracts":[1459],"name":"AddressUpgradeable","nameLocation":"202:18:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1192,"nodeType":"Block","src":"1252:254:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1186,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"1476:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:4:9","memberName":"code","nodeType":"MemberAccess","src":"1476:12:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1489:6:9","memberName":"length","nodeType":"MemberAccess","src":"1476:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1185,"id":1191,"nodeType":"Return","src":"1469:30:9"}]},"documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"227:954:9","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1193,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:9","nodeType":"FunctionDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"account","nameLocation":"1214:7:9","nodeType":"VariableDeclaration","scope":1193,"src":"1206:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:9"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1193,"src":"1246:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1183,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:9"},"scope":1459,"src":"1186:320:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1226,"nodeType":"Block","src":"2494:241:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1204,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}],"id":1203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:9","typeDescriptions":{}}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2512:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2526:7:9","memberName":"balance","nodeType":"MemberAccess","src":"2512:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1207,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"2537:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1201,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2504:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1211,"nodeType":"ExpressionStatement","src":"2504:73:9"},{"assignments":[1213,null],"declarations":[{"constant":false,"id":1213,"mutability":"mutable","name":"success","nameLocation":"2594:7:9","nodeType":"VariableDeclaration","scope":1226,"src":"2589:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1212,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1220,"initialValue":{"arguments":[{"hexValue":"","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1214,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"2607:9:9","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2617:4:9","memberName":"call","nodeType":"MemberAccess","src":"2607:14:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1216,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"2629:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:9"},{"expression":{"arguments":[{"id":1222,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"2658:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1221,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:78:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"2650:78:9"}]},"documentation":{"id":1194,"nodeType":"StructuredDocumentation","src":"1512:906:9","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1227,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:9","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:9","nodeType":"VariableDeclaration","scope":1227,"src":"2442:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"amount","nameLocation":"2477:6:9","nodeType":"VariableDeclaration","scope":1227,"src":"2469:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:9"},"returnParameters":{"id":1200,"nodeType":"ParameterList","parameters":[],"src":"2494:0:9"},"scope":1459,"src":"2423:312:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1244,"nodeType":"Block","src":"3566:96:9","statements":[{"expression":{"arguments":[{"id":1238,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"3605:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1239,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"3613:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1237,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1285,1329],"referencedDeclaration":1329,"src":"3583:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1236,"id":1243,"nodeType":"Return","src":"3576:79:9"}]},"documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"2741:731:9","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1245,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:9","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1230,"mutability":"mutable","name":"target","nameLocation":"3507:6:9","nodeType":"VariableDeclaration","scope":1245,"src":"3499:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"data","nameLocation":"3528:4:9","nodeType":"VariableDeclaration","scope":1245,"src":"3515:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1231,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:9"},"returnParameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1245,"src":"3552:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1234,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:9"},"scope":1459,"src":"3477:185:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1264,"nodeType":"Block","src":"4031:76:9","statements":[{"expression":{"arguments":[{"id":1258,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"4070:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1259,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"4078:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1261,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"4087:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1257,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1285,1329],"referencedDeclaration":1329,"src":"4048:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1256,"id":1263,"nodeType":"Return","src":"4041:59:9"}]},"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"3668:211:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1265,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:9","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"target","nameLocation":"3923:6:9","nodeType":"VariableDeclaration","scope":1265,"src":"3915:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"data","nameLocation":"3952:4:9","nodeType":"VariableDeclaration","scope":1265,"src":"3939:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1249,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1252,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:9","nodeType":"VariableDeclaration","scope":1265,"src":"3966:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1251,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:9"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1265,"src":"4017:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1254,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:9"},"scope":1459,"src":"3884:223:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1284,"nodeType":"Block","src":"4612:111:9","statements":[{"expression":{"arguments":[{"id":1278,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"4651:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1279,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"4659:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1280,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"4665:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1277,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1285,1329],"referencedDeclaration":1329,"src":"4629:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1276,"id":1283,"nodeType":"Return","src":"4622:94:9"}]},"documentation":{"id":1266,"nodeType":"StructuredDocumentation","src":"4113:351:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1285,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:9","nodeType":"FunctionDefinition","parameters":{"id":1273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1268,"mutability":"mutable","name":"target","nameLocation":"4517:6:9","nodeType":"VariableDeclaration","scope":1285,"src":"4509:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1267,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1270,"mutability":"mutable","name":"data","nameLocation":"4546:4:9","nodeType":"VariableDeclaration","scope":1285,"src":"4533:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1269,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1272,"mutability":"mutable","name":"value","nameLocation":"4568:5:9","nodeType":"VariableDeclaration","scope":1285,"src":"4560:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1271,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:9"},"returnParameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1285,"src":"4598:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1274,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:9"},"scope":1459,"src":"4469:254:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1328,"nodeType":"Block","src":"5150:267:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1302,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1459","typeString":"library AddressUpgradeable"}],"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1300,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:9","typeDescriptions":{}}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5182:7:9","memberName":"balance","nodeType":"MemberAccess","src":"5168:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1305,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"5193:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1299,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5160:81:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1309,"nodeType":"ExpressionStatement","src":"5160:81:9"},{"assignments":[1311,1313],"declarations":[{"constant":false,"id":1311,"mutability":"mutable","name":"success","nameLocation":"5257:7:9","nodeType":"VariableDeclaration","scope":1328,"src":"5252:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1310,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:9","nodeType":"VariableDeclaration","scope":1328,"src":"5266:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1312,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1320,"initialValue":{"arguments":[{"id":1318,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"5319:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1314,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"5293:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5300:4:9","memberName":"call","nodeType":"MemberAccess","src":"5293:11:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"5312:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5293:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:9"},{"expression":{"arguments":[{"id":1322,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"5368:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1323,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"5376:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1324,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"5385:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1325,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"5397:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1321,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"5341:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1298,"id":1327,"nodeType":"Return","src":"5334:76:9"}]},"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"4729:237:9","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1329,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:9","nodeType":"FunctionDefinition","parameters":{"id":1295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"target","nameLocation":"5019:6:9","nodeType":"VariableDeclaration","scope":1329,"src":"5011:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1290,"mutability":"mutable","name":"data","nameLocation":"5048:4:9","nodeType":"VariableDeclaration","scope":1329,"src":"5035:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1289,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1292,"mutability":"mutable","name":"value","nameLocation":"5070:5:9","nodeType":"VariableDeclaration","scope":1329,"src":"5062:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1291,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1294,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:9","nodeType":"VariableDeclaration","scope":1329,"src":"5085:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1293,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:9"},"returnParameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1329,"src":"5136:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1296,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:9"},"scope":1459,"src":"4971:446:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1345,"nodeType":"Block","src":"5694:97:9","statements":[{"expression":{"arguments":[{"id":1340,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"5730:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1341,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"5738:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1339,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1346,1375],"referencedDeclaration":1375,"src":"5711:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5711:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1338,"id":1344,"nodeType":"Return","src":"5704:80:9"}]},"documentation":{"id":1330,"nodeType":"StructuredDocumentation","src":"5423:166:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1346,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:9","nodeType":"FunctionDefinition","parameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"target","nameLocation":"5630:6:9","nodeType":"VariableDeclaration","scope":1346,"src":"5622:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1334,"mutability":"mutable","name":"data","nameLocation":"5651:4:9","nodeType":"VariableDeclaration","scope":1346,"src":"5638:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1333,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:9"},"returnParameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1346,"src":"5680:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1336,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:9"},"scope":1459,"src":"5594:197:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"6133:168:9","statements":[{"assignments":[1359,1361],"declarations":[{"constant":false,"id":1359,"mutability":"mutable","name":"success","nameLocation":"6149:7:9","nodeType":"VariableDeclaration","scope":1374,"src":"6144:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1358,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1361,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:9","nodeType":"VariableDeclaration","scope":1374,"src":"6158:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1360,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1366,"initialValue":{"arguments":[{"id":1364,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"6203:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1362,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"6185:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6192:10:9","memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:9","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6185:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:9"},{"expression":{"arguments":[{"id":1368,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"6252:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1369,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"6260:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1370,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"6269:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1371,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"6281:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1367,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"6225:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1357,"id":1373,"nodeType":"Return","src":"6218:76:9"}]},"documentation":{"id":1347,"nodeType":"StructuredDocumentation","src":"5797:173:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:9","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1349,"mutability":"mutable","name":"target","nameLocation":"6020:6:9","nodeType":"VariableDeclaration","scope":1375,"src":"6012:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"data","nameLocation":"6049:4:9","nodeType":"VariableDeclaration","scope":1375,"src":"6036:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1350,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:9","nodeType":"VariableDeclaration","scope":1375,"src":"6063:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1352,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:9"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1375,"src":"6119:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:9"},"scope":1459,"src":"5975:326:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1413,"nodeType":"Block","src":"6783:434:9","statements":[{"condition":{"id":1389,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"6797:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1411,"nodeType":"Block","src":"7153:58:9","statements":[{"expression":{"arguments":[{"id":1407,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"7175:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1408,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"7187:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1406,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"7167:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7167:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1410,"nodeType":"ExpressionStatement","src":"7167:33:9"}]},"id":1412,"nodeType":"IfStatement","src":"6793:418:9","trueBody":{"id":1405,"nodeType":"Block","src":"6806:341:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1390,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"6824:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:6:9","memberName":"length","nodeType":"MemberAccess","src":"6824:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1402,"nodeType":"IfStatement","src":"6820:286:9","trueBody":{"id":1401,"nodeType":"Block","src":"6848:258:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1396,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"7050:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1395,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"7039:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1394,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7031:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1400,"nodeType":"ExpressionStatement","src":"7031:60:9"}]}},{"expression":{"id":1403,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"7126:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1388,"id":1404,"nodeType":"Return","src":"7119:17:9"}]}}]},"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"6307:277:9","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1414,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:9","nodeType":"FunctionDefinition","parameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"target","nameLocation":"6642:6:9","nodeType":"VariableDeclaration","scope":1414,"src":"6634:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"success","nameLocation":"6663:7:9","nodeType":"VariableDeclaration","scope":1414,"src":"6658:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1379,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:9","nodeType":"VariableDeclaration","scope":1414,"src":"6680:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1381,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1384,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:9","nodeType":"VariableDeclaration","scope":1414,"src":"6713:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1383,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:9"},"returnParameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1414,"src":"6769:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1386,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:9"},"scope":1459,"src":"6589:628:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1437,"nodeType":"Block","src":"7598:135:9","statements":[{"condition":{"id":1426,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"7612:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1435,"nodeType":"Block","src":"7669:58:9","statements":[{"expression":{"arguments":[{"id":1431,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"7691:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1432,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"7703:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1430,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"7683:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1434,"nodeType":"ExpressionStatement","src":"7683:33:9"}]},"id":1436,"nodeType":"IfStatement","src":"7608:119:9","trueBody":{"id":1429,"nodeType":"Block","src":"7621:42:9","statements":[{"expression":{"id":1427,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"7642:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1425,"id":1428,"nodeType":"Return","src":"7635:17:9"}]}}]},"documentation":{"id":1415,"nodeType":"StructuredDocumentation","src":"7223:210:9","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1438,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:9","nodeType":"FunctionDefinition","parameters":{"id":1422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"success","nameLocation":"7478:7:9","nodeType":"VariableDeclaration","scope":1438,"src":"7473:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1416,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1419,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:9","nodeType":"VariableDeclaration","scope":1438,"src":"7495:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1418,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1421,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:9","nodeType":"VariableDeclaration","scope":1438,"src":"7528:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1420,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:9"},"returnParameters":{"id":1425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1438,"src":"7584:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1423,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:9"},"scope":1459,"src":"7438:295:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1457,"nodeType":"Block","src":"7822:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1445,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"7898:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7909:6:9","memberName":"length","nodeType":"MemberAccess","src":"7898:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1455,"nodeType":"Block","src":"8228:45:9","statements":[{"expression":{"arguments":[{"id":1452,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"8249:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1451,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1454,"nodeType":"ExpressionStatement","src":"8242:20:9"}]},"id":1456,"nodeType":"IfStatement","src":"7894:379:9","trueBody":{"id":1450,"nodeType":"Block","src":"7921:301:9","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:9","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:9","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:9"},"nodeType":"YulFunctionCall","src":"8120:17:9"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:9","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:9"},"nodeType":"YulFunctionCall","src":"8161:19:9"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:9"},"nodeType":"YulFunctionCall","src":"8154:44:9"},"nodeType":"YulExpressionStatement","src":"8154:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1440,"isOffset":false,"isSlot":false,"src":"8126:10:9","valueSize":1},{"declaration":1440,"isOffset":false,"isSlot":false,"src":"8169:10:9","valueSize":1}],"id":1449,"nodeType":"InlineAssembly","src":"8070:142:9"}]}}]},"id":1458,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:9","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:9","nodeType":"VariableDeclaration","scope":1458,"src":"7756:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:9","nodeType":"VariableDeclaration","scope":1458,"src":"7781:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1441,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:9"},"returnParameters":{"id":1444,"nodeType":"ParameterList","parameters":[],"src":"7822:0:9"},"scope":1459,"src":"7739:540:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1460,"src":"194:8087:9","usedErrors":[]}],"src":"101:8181:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"ContextUpgradeable":[1501],"Initializable":[580]},"id":1502,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1461,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1462,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1502,"sourceUnit":581,"src":"110:42:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1464,"name":"Initializable","nameLocations":["691:13:10"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"691:13:10"},"id":1465,"nodeType":"InheritanceSpecifier","src":"691:13:10"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"154:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1501,"linearizedBaseContracts":[1501,580],"name":"ContextUpgradeable","nameLocation":"669:18:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1470,"nodeType":"Block","src":"763:7:10","statements":[]},"id":1471,"implemented":true,"kind":"function","modifiers":[{"id":1468,"kind":"modifierInvocation","modifierName":{"id":1467,"name":"onlyInitializing","nameLocations":["746:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"746:16:10"},"nodeType":"ModifierInvocation","src":"746:16:10"}],"name":"__Context_init","nameLocation":"720:14:10","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[],"src":"734:2:10"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[],"src":"763:0:10"},"scope":1501,"src":"711:59:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1476,"nodeType":"Block","src":"838:7:10","statements":[]},"id":1477,"implemented":true,"kind":"function","modifiers":[{"id":1474,"kind":"modifierInvocation","modifierName":{"id":1473,"name":"onlyInitializing","nameLocations":["821:16:10"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"821:16:10"},"nodeType":"ModifierInvocation","src":"821:16:10"}],"name":"__Context_init_unchained","nameLocation":"785:24:10","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[],"src":"809:2:10"},"returnParameters":{"id":1475,"nodeType":"ParameterList","parameters":[],"src":"838:0:10"},"scope":1501,"src":"776:69:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1485,"nodeType":"Block","src":"912:34:10","statements":[{"expression":{"expression":{"id":1482,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:10","memberName":"sender","nodeType":"MemberAccess","src":"929:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1481,"id":1484,"nodeType":"Return","src":"922:17:10"}]},"id":1486,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:10","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"869:2:10"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1486,"src":"903:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:10"},"scope":1501,"src":"850:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1494,"nodeType":"Block","src":"1019:32:10","statements":[{"expression":{"expression":{"id":1491,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:10","memberName":"data","nodeType":"MemberAccess","src":"1036:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1490,"id":1493,"nodeType":"Return","src":"1029:15:10"}]},"id":1495,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:10","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"969:2:10"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1495,"src":"1003:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1488,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:10"},"scope":1501,"src":"952:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1496,"nodeType":"StructuredDocumentation","src":"1057:254:10","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1500,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:10","nodeType":"VariableDeclaration","scope":1501,"src":"1316:25:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1499,"length":{"hexValue":"3530","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:10","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1502,"src":"651:693:10","usedErrors":[]}],"src":"86:1259:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2597],"StringsUpgradeable":[1676]},"id":1677,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1503,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1677,"sourceUnit":2598,"src":"126:36:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"164:34:11","text":" @dev String operations."},"fullyImplemented":true,"id":1676,"linearizedBaseContracts":[1676],"name":"StringsUpgradeable","nameLocation":"207:18:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1508,"mutability":"constant","name":"_SYMBOLS","nameLocation":"257:8:11","nodeType":"VariableDeclaration","scope":1676,"src":"232:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1506,"name":"bytes16","nodeType":"ElementaryTypeName","src":"232:7:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"268:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1511,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"315:15:11","nodeType":"VariableDeclaration","scope":1676,"src":"292:43:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1509,"name":"uint8","nodeType":"ElementaryTypeName","src":"292:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"333:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1558,"nodeType":"Block","src":"508:636:11","statements":[{"id":1557,"nodeType":"UncheckedBlock","src":"518:620:11","statements":[{"assignments":[1520],"declarations":[{"constant":false,"id":1520,"mutability":"mutable","name":"length","nameLocation":"550:6:11","nodeType":"VariableDeclaration","scope":1557,"src":"542:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1519,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1527,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"581:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1521,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"559:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2597_$","typeString":"type(library MathUpgradeable)"}},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"575:5:11","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"559:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"559:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"590:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"559:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"542:49:11"},{"assignments":[1529],"declarations":[{"constant":false,"id":1529,"mutability":"mutable","name":"buffer","nameLocation":"619:6:11","nodeType":"VariableDeclaration","scope":1557,"src":"605:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1528,"name":"string","nodeType":"ElementaryTypeName","src":"605:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1534,"initialValue":{"arguments":[{"id":1532,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"639:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"628:10:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1530,"name":"string","nodeType":"ElementaryTypeName","src":"632:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"628:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"605:41:11"},{"assignments":[1536],"declarations":[{"constant":false,"id":1536,"mutability":"mutable","name":"ptr","nameLocation":"668:3:11","nodeType":"VariableDeclaration","scope":1557,"src":"660:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1535,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1537,"nodeType":"VariableDeclarationStatement","src":"660:11:11"},{"AST":{"nodeType":"YulBlock","src":"741:67:11","statements":[{"nodeType":"YulAssignment","src":"759:35:11","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"770:6:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"782:2:11","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"786:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"778:3:11"},"nodeType":"YulFunctionCall","src":"778:15:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:11"},"nodeType":"YulFunctionCall","src":"766:28:11"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"759:3:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1529,"isOffset":false,"isSlot":false,"src":"770:6:11","valueSize":1},{"declaration":1520,"isOffset":false,"isSlot":false,"src":"786:6:11","valueSize":1},{"declaration":1536,"isOffset":false,"isSlot":false,"src":"759:3:11","valueSize":1}],"id":1538,"nodeType":"InlineAssembly","src":"732:76:11"},{"body":{"id":1553,"nodeType":"Block","src":"834:267:11","statements":[{"expression":{"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"852:5:11","subExpression":{"id":1540,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"852:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1542,"nodeType":"ExpressionStatement","src":"852:5:11"},{"AST":{"nodeType":"YulBlock","src":"935:84:11","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"965:3:11"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:11"},{"kind":"number","nodeType":"YulLiteral","src":"986:2:11","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"975:3:11"},"nodeType":"YulFunctionCall","src":"975:14:11"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"991:8:11"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"970:4:11"},"nodeType":"YulFunctionCall","src":"970:30:11"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"957:7:11"},"nodeType":"YulFunctionCall","src":"957:44:11"},"nodeType":"YulExpressionStatement","src":"957:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1508,"isOffset":false,"isSlot":false,"src":"991:8:11","valueSize":1},{"declaration":1536,"isOffset":false,"isSlot":false,"src":"965:3:11","valueSize":1},{"declaration":1514,"isOffset":false,"isSlot":false,"src":"979:5:11","valueSize":1}],"id":1543,"nodeType":"InlineAssembly","src":"926:93:11"},{"expression":{"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"1036:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1036:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1547,"nodeType":"ExpressionStatement","src":"1036:11:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"1069:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1078:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1069:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1552,"nodeType":"IfStatement","src":"1065:21:11","trueBody":{"id":1551,"nodeType":"Break","src":"1081:5:11"}}]},"condition":{"hexValue":"74727565","id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"828:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1554,"nodeType":"WhileStatement","src":"821:280:11"},{"expression":{"id":1555,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"1121:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1518,"id":1556,"nodeType":"Return","src":"1114:13:11"}]}]},"documentation":{"id":1512,"nodeType":"StructuredDocumentation","src":"342:90:11","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1559,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"446:8:11","nodeType":"FunctionDefinition","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1514,"mutability":"mutable","name":"value","nameLocation":"463:5:11","nodeType":"VariableDeclaration","scope":1559,"src":"455:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"454:15:11"},"returnParameters":{"id":1518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1559,"src":"493:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1516,"name":"string","nodeType":"ElementaryTypeName","src":"493:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"492:15:11"},"scope":1676,"src":"437:707:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1578,"nodeType":"Block","src":"1323:111:11","statements":[{"id":1577,"nodeType":"UncheckedBlock","src":"1333:95:11","statements":[{"expression":{"arguments":[{"id":1568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"1376:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"1406:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1569,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"1383:15:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2597_$","typeString":"type(library MathUpgradeable)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1399:6:11","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2557,"src":"1383:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1383:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1415:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1383:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1567,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1579,1655,1675],"referencedDeclaration":1655,"src":"1364:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1566,"id":1576,"nodeType":"Return","src":"1357:60:11"}]}]},"documentation":{"id":1560,"nodeType":"StructuredDocumentation","src":"1150:94:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1579,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1258:11:11","nodeType":"FunctionDefinition","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"value","nameLocation":"1278:5:11","nodeType":"VariableDeclaration","scope":1579,"src":"1270:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1561,"name":"uint256","nodeType":"ElementaryTypeName","src":"1270:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1269:15:11"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"1308:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1564,"name":"string","nodeType":"ElementaryTypeName","src":"1308:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1307:15:11"},"scope":1676,"src":"1249:185:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1654,"nodeType":"Block","src":"1647:347:11","statements":[{"assignments":[1590],"declarations":[{"constant":false,"id":1590,"mutability":"mutable","name":"buffer","nameLocation":"1670:6:11","nodeType":"VariableDeclaration","scope":1654,"src":"1657:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1589,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1599,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1594,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"1693:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1689:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1679:9:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1591,"name":"bytes","nodeType":"ElementaryTypeName","src":"1683:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1657:47:11"},{"expression":{"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1600,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1714:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1602,"indexExpression":{"hexValue":"30","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1721:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1714:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1726:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1714:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1605,"nodeType":"ExpressionStatement","src":"1714:15:11"},{"expression":{"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1606,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1739:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1608,"indexExpression":{"hexValue":"31","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1751:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1739:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1611,"nodeType":"ExpressionStatement","src":"1739:15:11"},{"body":{"id":1640,"nodeType":"Block","src":"1809:83:11","statements":[{"expression":{"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1626,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1823:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1628,"indexExpression":{"id":1627,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1830:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1823:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1629,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"1835:8:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1633,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"1844:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:3:11","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1844:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1835:21:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1823:33:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1635,"nodeType":"ExpressionStatement","src":"1823:33:11"},{"expression":{"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"1870:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1870:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1639,"nodeType":"ExpressionStatement","src":"1870:11:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1620,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1797:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1797:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1641,"initializationExpression":{"assignments":[1613],"declarations":[{"constant":false,"id":1613,"mutability":"mutable","name":"i","nameLocation":"1777:1:11","nodeType":"VariableDeclaration","scope":1641,"src":"1769:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"1769:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1619,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1615,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"1785:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1781:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1794:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1781:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1769:26:11"},"loopExpression":{"expression":{"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1804:3:11","subExpression":{"id":1623,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1806:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1625,"nodeType":"ExpressionStatement","src":"1804:3:11"},"nodeType":"ForStatement","src":"1764:128:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"1909:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1918:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1909:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1642,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1901:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1648,"nodeType":"ExpressionStatement","src":"1901:55:11"},{"expression":{"arguments":[{"id":1651,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1980:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1973:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1649,"name":"string","nodeType":"ElementaryTypeName","src":"1973:6:11","typeDescriptions":{}}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1588,"id":1653,"nodeType":"Return","src":"1966:21:11"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"1440:112:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1655,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1566:11:11","nodeType":"FunctionDefinition","parameters":{"id":1585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"value","nameLocation":"1586:5:11","nodeType":"VariableDeclaration","scope":1655,"src":"1578:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"1578:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"length","nameLocation":"1601:6:11","nodeType":"VariableDeclaration","scope":1655,"src":"1593:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1577:31:11"},"returnParameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1655,"src":"1632:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1586,"name":"string","nodeType":"ElementaryTypeName","src":"1632:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1631:15:11"},"scope":1676,"src":"1557:437:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1674,"nodeType":"Block","src":"2219:76:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1668,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"2264:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1666,"name":"uint160","nodeType":"ElementaryTypeName","src":"2256:7:11","typeDescriptions":{}}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2248:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"2248:7:11","typeDescriptions":{}}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2248:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1671,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"2272:15:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1663,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1579,1655,1675],"referencedDeclaration":1655,"src":"2236:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1662,"id":1673,"nodeType":"Return","src":"2229:59:11"}]},"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"2000:141:11","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1675,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2155:11:11","nodeType":"FunctionDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"addr","nameLocation":"2175:4:11","nodeType":"VariableDeclaration","scope":1675,"src":"2167:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:14:11"},"returnParameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1675,"src":"2204:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1660,"name":"string","nodeType":"ElementaryTypeName","src":"2204:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2203:15:11"},"scope":1676,"src":"2146:149:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1677,"src":"199:2098:11","usedErrors":[]}],"src":"101:2197:11"},"id":11},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1459],"ERC165Upgradeable":[1720],"IERC165Upgradeable":[1732],"Initializable":[580]},"id":1721,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1678,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","file":"./IERC165Upgradeable.sol","id":1679,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1721,"sourceUnit":1733,"src":"124:34:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1680,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1721,"sourceUnit":581,"src":"159:45:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1682,"name":"Initializable","nameLocations":["822:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"822:13:12"},"id":1683,"nodeType":"InheritanceSpecifier","src":"822:13:12"},{"baseName":{"id":1684,"name":"IERC165Upgradeable","nameLocations":["837:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":1732,"src":"837:18:12"},"id":1685,"nodeType":"InheritanceSpecifier","src":"837:18:12"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1681,"nodeType":"StructuredDocumentation","src":"206:576:12","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1720,"linearizedBaseContracts":[1720,1732,580],"name":"ERC165Upgradeable","nameLocation":"801:17:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1690,"nodeType":"Block","src":"913:7:12","statements":[]},"id":1691,"implemented":true,"kind":"function","modifiers":[{"id":1688,"kind":"modifierInvocation","modifierName":{"id":1687,"name":"onlyInitializing","nameLocations":["896:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"896:16:12"},"nodeType":"ModifierInvocation","src":"896:16:12"}],"name":"__ERC165_init","nameLocation":"871:13:12","nodeType":"FunctionDefinition","parameters":{"id":1686,"nodeType":"ParameterList","parameters":[],"src":"884:2:12"},"returnParameters":{"id":1689,"nodeType":"ParameterList","parameters":[],"src":"913:0:12"},"scope":1720,"src":"862:58:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1696,"nodeType":"Block","src":"987:7:12","statements":[]},"id":1697,"implemented":true,"kind":"function","modifiers":[{"id":1694,"kind":"modifierInvocation","modifierName":{"id":1693,"name":"onlyInitializing","nameLocations":["970:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"970:16:12"},"nodeType":"ModifierInvocation","src":"970:16:12"}],"name":"__ERC165_init_unchained","nameLocation":"935:23:12","nodeType":"FunctionDefinition","parameters":{"id":1692,"nodeType":"ParameterList","parameters":[],"src":"958:2:12"},"returnParameters":{"id":1695,"nodeType":"ParameterList","parameters":[],"src":"987:0:12"},"scope":1720,"src":"926:68:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1731],"body":{"id":1713,"nodeType":"Block","src":"1151:75:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1706,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1168:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1708,"name":"IERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"1188:18:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1732_$","typeString":"type(contract IERC165Upgradeable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165Upgradeable_$1732_$","typeString":"type(contract IERC165Upgradeable)"}],"id":1707,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1183:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165Upgradeable_$1732","typeString":"type(contract IERC165Upgradeable)"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1208:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1183:36:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1168:51:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1705,"id":1712,"nodeType":"Return","src":"1161:58:12"}]},"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"999:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1714,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1069:17:12","nodeType":"FunctionDefinition","overrides":{"id":1702,"nodeType":"OverrideSpecifier","overrides":[],"src":"1127:8:12"},"parameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"interfaceId","nameLocation":"1094:11:12","nodeType":"VariableDeclaration","scope":1714,"src":"1087:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1699,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1087:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1086:20:12"},"returnParameters":{"id":1705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1714,"src":"1145:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1703,"name":"bool","nodeType":"ElementaryTypeName","src":"1145:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1144:6:12"},"scope":1720,"src":"1060:166:12","stateMutability":"view","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":1715,"nodeType":"StructuredDocumentation","src":"1232:254:12","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1719,"mutability":"mutable","name":"__gap","nameLocation":"1511:5:12","nodeType":"VariableDeclaration","scope":1720,"src":"1491:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1716,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1718,"length":{"hexValue":"3530","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1499:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1491:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1721,"src":"783:736:12","usedErrors":[]}],"src":"99:1421:12"},"id":12},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol","exportedSymbols":{"IERC165Upgradeable":[1732]},"id":1733,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1722,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"125:279:13","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1732,"linearizedBaseContracts":[1732],"name":"IERC165Upgradeable","nameLocation":"415:18:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1724,"nodeType":"StructuredDocumentation","src":"440:340:13","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1731,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"794:17:13","nodeType":"FunctionDefinition","parameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"interfaceId","nameLocation":"819:11:13","nodeType":"VariableDeclaration","scope":1731,"src":"812:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1725,"name":"bytes4","nodeType":"ElementaryTypeName","src":"812:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"811:20:13"},"returnParameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1731,"src":"855:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1728,"name":"bool","nodeType":"ElementaryTypeName","src":"855:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"854:6:13"},"scope":1732,"src":"785:76:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1733,"src":"405:458:13","usedErrors":[]}],"src":"100:764:13"},"id":13},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2597]},"id":2598,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1734,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1735,"nodeType":"StructuredDocumentation","src":"128:73:14","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2597,"linearizedBaseContracts":[2597],"name":"MathUpgradeable","nameLocation":"210:15:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1739,"members":[{"id":1736,"name":"Down","nameLocation":"256:4:14","nodeType":"EnumValue","src":"256:4:14"},{"id":1737,"name":"Up","nameLocation":"298:2:14","nodeType":"EnumValue","src":"298:2:14"},{"id":1738,"name":"Zero","nameLocation":"329:4:14","nodeType":"EnumValue","src":"329:4:14"}],"name":"Rounding","nameLocation":"237:8:14","nodeType":"EnumDefinition","src":"232:122:14"},{"body":{"id":1756,"nodeType":"Block","src":"491:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1749,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"508:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1750,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"512:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1753,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"520:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:14","trueExpression":{"id":1752,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1742,"src":"516:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1748,"id":1755,"nodeType":"Return","src":"501:20:14"}]},"documentation":{"id":1740,"nodeType":"StructuredDocumentation","src":"360:59:14","text":" @dev Returns the largest of two numbers."},"id":1757,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:14","nodeType":"FunctionDefinition","parameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"a","nameLocation":"445:1:14","nodeType":"VariableDeclaration","scope":1757,"src":"437:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1741,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1744,"mutability":"mutable","name":"b","nameLocation":"456:1:14","nodeType":"VariableDeclaration","scope":1757,"src":"448:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1743,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:14"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1757,"src":"482:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:14"},"scope":2597,"src":"424:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1774,"nodeType":"Block","src":"666:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1767,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"683:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1768,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"687:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1771,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"695:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:14","trueExpression":{"id":1770,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"691:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1766,"id":1773,"nodeType":"Return","src":"676:20:14"}]},"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"534:60:14","text":" @dev Returns the smallest of two numbers."},"id":1775,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:14","nodeType":"FunctionDefinition","parameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"a","nameLocation":"620:1:14","nodeType":"VariableDeclaration","scope":1775,"src":"612:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1759,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"b","nameLocation":"631:1:14","nodeType":"VariableDeclaration","scope":1775,"src":"623:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1761,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:14"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1765,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1775,"src":"657:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:14"},"scope":2597,"src":"599:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1797,"nodeType":"Block","src":"887:82:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1785,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"942:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1786,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"946:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1789,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"952:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1790,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"956:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1792,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1784,"id":1796,"nodeType":"Return","src":"934:28:14"}]},"documentation":{"id":1776,"nodeType":"StructuredDocumentation","src":"709:102:14","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1798,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:14","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"a","nameLocation":"841:1:14","nodeType":"VariableDeclaration","scope":1798,"src":"833:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1777,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"b","nameLocation":"852:1:14","nodeType":"VariableDeclaration","scope":1798,"src":"844:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:14"},"returnParameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1798,"src":"878:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:14"},"scope":2597,"src":"816:153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"1239:123:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1808,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"1327:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1812,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"1341:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1816,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"1350:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:14","trueExpression":{"hexValue":"30","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1807,"id":1821,"nodeType":"Return","src":"1320:35:14"}]},"documentation":{"id":1799,"nodeType":"StructuredDocumentation","src":"975:188:14","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:14","nodeType":"FunctionDefinition","parameters":{"id":1804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"a","nameLocation":"1193:1:14","nodeType":"VariableDeclaration","scope":1823,"src":"1185:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1803,"mutability":"mutable","name":"b","nameLocation":"1204:1:14","nodeType":"VariableDeclaration","scope":1823,"src":"1196:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:14"},"returnParameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"1230:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:14"},"scope":2597,"src":"1168:194:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1944,"nodeType":"Block","src":"1806:3797:14","statements":[{"id":1943,"nodeType":"UncheckedBlock","src":"1816:3781:14","statements":[{"assignments":[1836],"declarations":[{"constant":false,"id":1836,"mutability":"mutable","name":"prod0","nameLocation":"2145:5:14","nodeType":"VariableDeclaration","scope":1943,"src":"2137:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1835,"name":"uint256","nodeType":"ElementaryTypeName","src":"2137:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1837,"nodeType":"VariableDeclarationStatement","src":"2137:13:14"},{"assignments":[1839],"declarations":[{"constant":false,"id":1839,"mutability":"mutable","name":"prod1","nameLocation":"2217:5:14","nodeType":"VariableDeclaration","scope":1943,"src":"2209:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1838,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1840,"nodeType":"VariableDeclarationStatement","src":"2209:13:14"},{"AST":{"nodeType":"YulBlock","src":"2289:157:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2307:30:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2324:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2327:1:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2334:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2330:3:14"},"nodeType":"YulFunctionCall","src":"2330:6:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2317:6:14"},"nodeType":"YulFunctionCall","src":"2317:20:14"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2311:2:14","type":""}]},{"nodeType":"YulAssignment","src":"2354:18:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2367:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2370:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2363:3:14"},"nodeType":"YulFunctionCall","src":"2363:9:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2354:5:14"}]},{"nodeType":"YulAssignment","src":"2389:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2406:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2410:5:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2402:3:14"},"nodeType":"YulFunctionCall","src":"2402:14:14"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2421:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2425:5:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2418:2:14"},"nodeType":"YulFunctionCall","src":"2418:13:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2398:3:14"},"nodeType":"YulFunctionCall","src":"2398:34:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2389:5:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1836,"isOffset":false,"isSlot":false,"src":"2354:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"2410:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"2425:5:14","valueSize":1},{"declaration":1839,"isOffset":false,"isSlot":false,"src":"2389:5:14","valueSize":1},{"declaration":1826,"isOffset":false,"isSlot":false,"src":"2324:1:14","valueSize":1},{"declaration":1826,"isOffset":false,"isSlot":false,"src":"2367:1:14","valueSize":1},{"declaration":1828,"isOffset":false,"isSlot":false,"src":"2327:1:14","valueSize":1},{"declaration":1828,"isOffset":false,"isSlot":false,"src":"2370:1:14","valueSize":1}],"id":1841,"nodeType":"InlineAssembly","src":"2280:166:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1842,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"2527:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2536:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2527:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1850,"nodeType":"IfStatement","src":"2523:75:14","trueBody":{"id":1849,"nodeType":"Block","src":"2539:59:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1845,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"2564:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1846,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"2572:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2564:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1834,"id":1848,"nodeType":"Return","src":"2557:26:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1852,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"2708:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1853,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"2722:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2708:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2700:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2700:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1856,"nodeType":"ExpressionStatement","src":"2700:28:14"},{"assignments":[1858],"declarations":[{"constant":false,"id":1858,"mutability":"mutable","name":"remainder","nameLocation":"2992:9:14","nodeType":"VariableDeclaration","scope":1943,"src":"2984:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1859,"nodeType":"VariableDeclarationStatement","src":"2984:17:14"},{"AST":{"nodeType":"YulBlock","src":"3024:291:14","statements":[{"nodeType":"YulAssignment","src":"3093:38:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3113:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"3116:1:14"},{"name":"denominator","nodeType":"YulIdentifier","src":"3119:11:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3106:6:14"},"nodeType":"YulFunctionCall","src":"3106:25:14"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3093:9:14"}]},{"nodeType":"YulAssignment","src":"3213:41:14","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3226:5:14"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3236:9:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"3247:5:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3233:2:14"},"nodeType":"YulFunctionCall","src":"3233:20:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3222:3:14"},"nodeType":"YulFunctionCall","src":"3222:32:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3213:5:14"}]},{"nodeType":"YulAssignment","src":"3271:30:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3284:5:14"},{"name":"remainder","nodeType":"YulIdentifier","src":"3291:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3280:3:14"},"nodeType":"YulFunctionCall","src":"3280:21:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3271:5:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1830,"isOffset":false,"isSlot":false,"src":"3119:11:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3247:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3271:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3284:5:14","valueSize":1},{"declaration":1839,"isOffset":false,"isSlot":false,"src":"3213:5:14","valueSize":1},{"declaration":1839,"isOffset":false,"isSlot":false,"src":"3226:5:14","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"3093:9:14","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"3236:9:14","valueSize":1},{"declaration":1858,"isOffset":false,"isSlot":false,"src":"3291:9:14","valueSize":1},{"declaration":1826,"isOffset":false,"isSlot":false,"src":"3113:1:14","valueSize":1},{"declaration":1828,"isOffset":false,"isSlot":false,"src":"3116:1:14","valueSize":1}],"id":1860,"nodeType":"InlineAssembly","src":"3015:300:14"},{"assignments":[1862],"declarations":[{"constant":false,"id":1862,"mutability":"mutable","name":"twos","nameLocation":"3630:4:14","nodeType":"VariableDeclaration","scope":1943,"src":"3622:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1870,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1863,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"3637:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3652:12:14","subExpression":{"id":1864,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"3653:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3667:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3652:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1868,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3651:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3637:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3622:47:14"},{"AST":{"nodeType":"YulBlock","src":"3692:362:14","statements":[{"nodeType":"YulAssignment","src":"3757:37:14","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3776:11:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3789:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3772:3:14"},"nodeType":"YulFunctionCall","src":"3772:22:14"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3757:11:14"}]},{"nodeType":"YulAssignment","src":"3861:25:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3874:5:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3881:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3870:3:14"},"nodeType":"YulFunctionCall","src":"3870:16:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3861:5:14"}]},{"nodeType":"YulAssignment","src":"4001:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4021:1:14","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4024:4:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4017:3:14"},"nodeType":"YulFunctionCall","src":"4017:12:14"},{"name":"twos","nodeType":"YulIdentifier","src":"4031:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4013:3:14"},"nodeType":"YulFunctionCall","src":"4013:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4038:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4009:3:14"},"nodeType":"YulFunctionCall","src":"4009:31:14"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4001:4:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1830,"isOffset":false,"isSlot":false,"src":"3757:11:14","valueSize":1},{"declaration":1830,"isOffset":false,"isSlot":false,"src":"3776:11:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3861:5:14","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"3874:5:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"3789:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"3881:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"4001:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"4024:4:14","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"4031:4:14","valueSize":1}],"id":1871,"nodeType":"InlineAssembly","src":"3683:371:14"},{"expression":{"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1872,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"4120:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"4129:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1874,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"4137:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4129:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4120:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1877,"nodeType":"ExpressionStatement","src":"4120:21:14"},{"assignments":[1879],"declarations":[{"constant":false,"id":1879,"mutability":"mutable","name":"inverse","nameLocation":"4467:7:14","nodeType":"VariableDeclaration","scope":1943,"src":"4459:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1878,"name":"uint256","nodeType":"ElementaryTypeName","src":"4459:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1886,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4478:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1881,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4482:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1883,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4477:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4497:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4477:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4459:39:14"},{"expression":{"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1887,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4715:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4726:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1889,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4730:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1890,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4744:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4730:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4726:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1894,"nodeType":"ExpressionStatement","src":"4715:36:14"},{"expression":{"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1895,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4784:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4795:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1897,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4799:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1898,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4813:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4799:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4795:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1902,"nodeType":"ExpressionStatement","src":"4784:36:14"},{"expression":{"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1903,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4854:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4865:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1905,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4869:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1906,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4883:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4869:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4865:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1910,"nodeType":"ExpressionStatement","src":"4854:36:14"},{"expression":{"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1911,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4924:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4935:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1913,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4939:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1914,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4953:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4939:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4935:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1918,"nodeType":"ExpressionStatement","src":"4924:36:14"},{"expression":{"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1919,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4994:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5005:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"5009:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1922,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5023:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5009:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5005:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1926,"nodeType":"ExpressionStatement","src":"4994:36:14"},{"expression":{"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1927,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5065:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5076:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1929,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"5080:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1930,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5094:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5080:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1934,"nodeType":"ExpressionStatement","src":"5065:36:14"},{"expression":{"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1935,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"5535:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1936,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"5544:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1937,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5552:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5544:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5535:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1940,"nodeType":"ExpressionStatement","src":"5535:24:14"},{"expression":{"id":1941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"5580:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1834,"id":1942,"nodeType":"Return","src":"5573:13:14"}]}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"1368:305:14","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1945,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:14","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"x","nameLocation":"1711:1:14","nodeType":"VariableDeclaration","scope":1945,"src":"1703:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1825,"name":"uint256","nodeType":"ElementaryTypeName","src":"1703:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"y","nameLocation":"1730:1:14","nodeType":"VariableDeclaration","scope":1945,"src":"1722:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"denominator","nameLocation":"1749:11:14","nodeType":"VariableDeclaration","scope":1945,"src":"1741:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:73:14"},"returnParameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"result","nameLocation":"1798:6:14","nodeType":"VariableDeclaration","scope":1945,"src":"1790:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1789:16:14"},"scope":2597,"src":"1678:3925:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1988,"nodeType":"Block","src":"5883:189:14","statements":[{"assignments":[1961],"declarations":[{"constant":false,"id":1961,"mutability":"mutable","name":"result","nameLocation":"5901:6:14","nodeType":"VariableDeclaration","scope":1988,"src":"5893:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"5893:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1967,"initialValue":{"arguments":[{"id":1963,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"5917:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1964,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"5920:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1965,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"5923:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1962,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1945,1989],"referencedDeclaration":1945,"src":"5910:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5910:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5893:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"5949:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1969,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"5961:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5970:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"5961:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"5949:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1973,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"5983:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1974,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"5986:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1975,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"5989:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1972,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5976:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5976:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6004:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5976:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5949:56:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1985,"nodeType":"IfStatement","src":"5945:98:14","trueBody":{"id":1984,"nodeType":"Block","src":"6007:36:14","statements":[{"expression":{"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1980,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"6021:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6031:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6021:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1983,"nodeType":"ExpressionStatement","src":"6021:11:14"}]}},{"expression":{"id":1986,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"6059:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1959,"id":1987,"nodeType":"Return","src":"6052:13:14"}]},"documentation":{"id":1946,"nodeType":"StructuredDocumentation","src":"5609:121:14","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1989,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5744:6:14","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1948,"mutability":"mutable","name":"x","nameLocation":"5768:1:14","nodeType":"VariableDeclaration","scope":1989,"src":"5760:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1950,"mutability":"mutable","name":"y","nameLocation":"5787:1:14","nodeType":"VariableDeclaration","scope":1989,"src":"5779:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1949,"name":"uint256","nodeType":"ElementaryTypeName","src":"5779:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1952,"mutability":"mutable","name":"denominator","nameLocation":"5806:11:14","nodeType":"VariableDeclaration","scope":1989,"src":"5798:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1951,"name":"uint256","nodeType":"ElementaryTypeName","src":"5798:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"rounding","nameLocation":"5836:8:14","nodeType":"VariableDeclaration","scope":1989,"src":"5827:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1954,"nodeType":"UserDefinedTypeName","pathNode":{"id":1953,"name":"Rounding","nameLocations":["5827:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"5827:8:14"},"referencedDeclaration":1739,"src":"5827:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"5750:100:14"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"5874:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1957,"name":"uint256","nodeType":"ElementaryTypeName","src":"5874:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5873:9:14"},"scope":2597,"src":"5735:337:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2100,"nodeType":"Block","src":"6348:1585:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"6362:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6367:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6362:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2003,"nodeType":"IfStatement","src":"6358:45:14","trueBody":{"id":2002,"nodeType":"Block","src":"6370:33:14","statements":[{"expression":{"hexValue":"30","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6391:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1996,"id":2001,"nodeType":"Return","src":"6384:8:14"}]}},{"assignments":[2005],"declarations":[{"constant":false,"id":2005,"mutability":"mutable","name":"result","nameLocation":"7090:6:14","nodeType":"VariableDeclaration","scope":2100,"src":"7082:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2004,"name":"uint256","nodeType":"ElementaryTypeName","src":"7082:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2014,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7099:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2008,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7110:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2007,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2269,2305],"referencedDeclaration":2269,"src":"7105:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7105:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7116:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7105:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2012,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7104:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7099:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7082:36:14"},{"id":2099,"nodeType":"UncheckedBlock","src":"7519:408:14","statements":[{"expression":{"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7543:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2016,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7553:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7562:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2018,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7566:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7562:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7553:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2021,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7552:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7577:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7552:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7543:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2025,"nodeType":"ExpressionStatement","src":"7543:35:14"},{"expression":{"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2026,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7592:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2027,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7602:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2028,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7611:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2029,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7615:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7611:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7602:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2032,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7601:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7626:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7601:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7592:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2036,"nodeType":"ExpressionStatement","src":"7592:35:14"},{"expression":{"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2037,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7641:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2038,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7651:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7660:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2040,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7664:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7660:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7651:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2043,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7650:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7675:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7641:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2047,"nodeType":"ExpressionStatement","src":"7641:35:14"},{"expression":{"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2048,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7690:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7700:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2050,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7709:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7713:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7699:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7724:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7699:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7690:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2058,"nodeType":"ExpressionStatement","src":"7690:35:14"},{"expression":{"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2059,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7739:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2060,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7749:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7758:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2062,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7762:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7758:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7749:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2065,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7748:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7773:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7748:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7739:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2069,"nodeType":"ExpressionStatement","src":"7739:35:14"},{"expression":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2070,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7788:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2071,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7798:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2072,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7807:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2073,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7811:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7807:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7798:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2076,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7797:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7822:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7797:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7788:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2080,"nodeType":"ExpressionStatement","src":"7788:35:14"},{"expression":{"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7837:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2082,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7847:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2083,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7856:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2084,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7860:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7856:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7847:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2087,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7846:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7846:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7837:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2091,"nodeType":"ExpressionStatement","src":"7837:35:14"},{"expression":{"arguments":[{"id":2093,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7897:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2094,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"7905:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7909:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7905:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2092,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1775,"src":"7893:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7893:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1996,"id":2098,"nodeType":"Return","src":"7886:30:14"}]}]},"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"6078:208:14","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2101,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6300:4:14","nodeType":"FunctionDefinition","parameters":{"id":1993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"a","nameLocation":"6313:1:14","nodeType":"VariableDeclaration","scope":2101,"src":"6305:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"6305:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6304:11:14"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2101,"src":"6339:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"6339:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6338:9:14"},"scope":2597,"src":"6291:1642:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2136,"nodeType":"Block","src":"8109:161:14","statements":[{"id":2135,"nodeType":"UncheckedBlock","src":"8119:145:14","statements":[{"assignments":[2113],"declarations":[{"constant":false,"id":2113,"mutability":"mutable","name":"result","nameLocation":"8151:6:14","nodeType":"VariableDeclaration","scope":2135,"src":"8143:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"8143:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2117,"initialValue":{"arguments":[{"id":2115,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"8165:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2114,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2101,2137],"referencedDeclaration":2101,"src":"8160:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8160:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8143:24:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2118,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"8188:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2119,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"8198:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2120,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"8210:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8219:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"8210:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"8198:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2123,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"8225:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"8234:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2126,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"8243:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8225:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8198:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8251:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8198:54:14","trueExpression":{"hexValue":"31","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8247:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2132,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8197:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8188:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2111,"id":2134,"nodeType":"Return","src":"8181:72:14"}]}]},"documentation":{"id":2102,"nodeType":"StructuredDocumentation","src":"7939:89:14","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2137,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8042:4:14","nodeType":"FunctionDefinition","parameters":{"id":2108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"mutability":"mutable","name":"a","nameLocation":"8055:1:14","nodeType":"VariableDeclaration","scope":2137,"src":"8047:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"8047:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2107,"mutability":"mutable","name":"rounding","nameLocation":"8067:8:14","nodeType":"VariableDeclaration","scope":2137,"src":"8058:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2106,"nodeType":"UserDefinedTypeName","pathNode":{"id":2105,"name":"Rounding","nameLocations":["8058:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"8058:8:14"},"referencedDeclaration":1739,"src":"8058:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8046:30:14"},"returnParameters":{"id":2111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2137,"src":"8100:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"8100:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8099:9:14"},"scope":2597,"src":"8033:237:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2268,"nodeType":"Block","src":"8455:922:14","statements":[{"assignments":[2146],"declarations":[{"constant":false,"id":2146,"mutability":"mutable","name":"result","nameLocation":"8473:6:14","nodeType":"VariableDeclaration","scope":2268,"src":"8465:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2145,"name":"uint256","nodeType":"ElementaryTypeName","src":"8465:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2148,"initialValue":{"hexValue":"30","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8482:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8465:18:14"},{"id":2265,"nodeType":"UncheckedBlock","src":"8493:855:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8521:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8530:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8521:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8521:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2163,"nodeType":"IfStatement","src":"8517:99:14","trueBody":{"id":2162,"nodeType":"Block","src":"8539:77:14","statements":[{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8557:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8567:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8557:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"8557:13:14"},{"expression":{"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8588:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8598:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8588:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2161,"nodeType":"ExpressionStatement","src":"8588:13:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2164,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8633:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8642:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8633:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8647:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8633:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"IfStatement","src":"8629:96:14","trueBody":{"id":2177,"nodeType":"Block","src":"8650:75:14","statements":[{"expression":{"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8668:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8678:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8668:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2172,"nodeType":"ExpressionStatement","src":"8668:12:14"},{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2173,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8698:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8708:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8698:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"8698:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2179,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8742:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8751:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8742:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8756:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8742:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2193,"nodeType":"IfStatement","src":"8738:96:14","trueBody":{"id":2192,"nodeType":"Block","src":"8759:75:14","statements":[{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8777:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8787:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8777:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2187,"nodeType":"ExpressionStatement","src":"8777:12:14"},{"expression":{"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2188,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8807:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8807:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2191,"nodeType":"ExpressionStatement","src":"8807:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8851:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8860:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8851:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8865:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8851:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2208,"nodeType":"IfStatement","src":"8847:96:14","trueBody":{"id":2207,"nodeType":"Block","src":"8868:75:14","statements":[{"expression":{"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2199,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8886:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8896:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8886:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2202,"nodeType":"ExpressionStatement","src":"8886:12:14"},{"expression":{"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2203,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"8916:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8916:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2206,"nodeType":"ExpressionStatement","src":"8916:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2209,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8960:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8960:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8973:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8960:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2223,"nodeType":"IfStatement","src":"8956:93:14","trueBody":{"id":2222,"nodeType":"Block","src":"8976:73:14","statements":[{"expression":{"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"8994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9004:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8994:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2217,"nodeType":"ExpressionStatement","src":"8994:11:14"},{"expression":{"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2218,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9023:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9023:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2221,"nodeType":"ExpressionStatement","src":"9023:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9066:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9066:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9079:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9066:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2238,"nodeType":"IfStatement","src":"9062:93:14","trueBody":{"id":2237,"nodeType":"Block","src":"9082:73:14","statements":[{"expression":{"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9100:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9100:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2232,"nodeType":"ExpressionStatement","src":"9100:11:14"},{"expression":{"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9129:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9139:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9129:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2236,"nodeType":"ExpressionStatement","src":"9129:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9172:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9181:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9172:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9185:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9172:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2253,"nodeType":"IfStatement","src":"9168:93:14","trueBody":{"id":2252,"nodeType":"Block","src":"9188:73:14","statements":[{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9206:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9216:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9206:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"9206:11:14"},{"expression":{"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9235:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9245:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9235:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2251,"nodeType":"ExpressionStatement","src":"9235:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9278:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9287:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9278:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9291:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9278:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"nodeType":"IfStatement","src":"9274:64:14","trueBody":{"id":2263,"nodeType":"Block","src":"9294:44:14","statements":[{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9312:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9322:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9312:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"9312:11:14"}]}}]},{"expression":{"id":2266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"9364:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2144,"id":2267,"nodeType":"Return","src":"9357:13:14"}]},"documentation":{"id":2138,"nodeType":"StructuredDocumentation","src":"8276:113:14","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2269,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8403:4:14","nodeType":"FunctionDefinition","parameters":{"id":2141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2140,"mutability":"mutable","name":"value","nameLocation":"8416:5:14","nodeType":"VariableDeclaration","scope":2269,"src":"8408:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2139,"name":"uint256","nodeType":"ElementaryTypeName","src":"8408:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8407:15:14"},"returnParameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2269,"src":"8446:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"8446:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8445:9:14"},"scope":2597,"src":"8394:983:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2304,"nodeType":"Block","src":"9610:165:14","statements":[{"id":2303,"nodeType":"UncheckedBlock","src":"9620:149:14","statements":[{"assignments":[2281],"declarations":[{"constant":false,"id":2281,"mutability":"mutable","name":"result","nameLocation":"9652:6:14","nodeType":"VariableDeclaration","scope":2303,"src":"9644:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"9644:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2285,"initialValue":{"arguments":[{"id":2283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"9666:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2282,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2269,2305],"referencedDeclaration":2269,"src":"9661:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9661:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9644:28:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"9693:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2287,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"9703:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2288,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"9715:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9724:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"9715:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"9703:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9730:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"9735:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2272,"src":"9744:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9730:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9703:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9756:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9703:54:14","trueExpression":{"hexValue":"31","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9752:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2300,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9702:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9693:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2279,"id":2302,"nodeType":"Return","src":"9686:72:14"}]}]},"documentation":{"id":2270,"nodeType":"StructuredDocumentation","src":"9383:142:14","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2305,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9539:4:14","nodeType":"FunctionDefinition","parameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2272,"mutability":"mutable","name":"value","nameLocation":"9552:5:14","nodeType":"VariableDeclaration","scope":2305,"src":"9544:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2271,"name":"uint256","nodeType":"ElementaryTypeName","src":"9544:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2275,"mutability":"mutable","name":"rounding","nameLocation":"9568:8:14","nodeType":"VariableDeclaration","scope":2305,"src":"9559:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2274,"nodeType":"UserDefinedTypeName","pathNode":{"id":2273,"name":"Rounding","nameLocations":["9559:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"9559:8:14"},"referencedDeclaration":1739,"src":"9559:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9543:34:14"},"returnParameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2305,"src":"9601:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"9601:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9600:9:14"},"scope":2597,"src":"9530:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2433,"nodeType":"Block","src":"9962:828:14","statements":[{"assignments":[2314],"declarations":[{"constant":false,"id":2314,"mutability":"mutable","name":"result","nameLocation":"9980:6:14","nodeType":"VariableDeclaration","scope":2433,"src":"9972:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2313,"name":"uint256","nodeType":"ElementaryTypeName","src":"9972:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2316,"initialValue":{"hexValue":"30","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9989:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9972:18:14"},{"id":2430,"nodeType":"UncheckedBlock","src":"10000:761:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10028:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10037:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10041:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10037:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10028:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2333,"nodeType":"IfStatement","src":"10024:99:14","trueBody":{"id":2332,"nodeType":"Block","src":"10045:78:14","statements":[{"expression":{"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10063:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10076:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10072:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10063:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2327,"nodeType":"ExpressionStatement","src":"10063:15:14"},{"expression":{"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10096:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10106:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10096:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2331,"nodeType":"ExpressionStatement","src":"10096:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10140:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10149:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10153:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10149:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10140:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2350,"nodeType":"IfStatement","src":"10136:99:14","trueBody":{"id":2349,"nodeType":"Block","src":"10157:78:14","statements":[{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10175:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10188:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10184:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10175:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"10175:15:14"},{"expression":{"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10208:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10218:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10208:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2348,"nodeType":"ExpressionStatement","src":"10208:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10252:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10261:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10265:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10261:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10252:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2367,"nodeType":"IfStatement","src":"10248:99:14","trueBody":{"id":2366,"nodeType":"Block","src":"10269:78:14","statements":[{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10287:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10296:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10300:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10296:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10287:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"10287:15:14"},{"expression":{"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2362,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10320:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10320:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2365,"nodeType":"ExpressionStatement","src":"10320:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2368,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10364:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10373:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10377:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10373:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10364:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2384,"nodeType":"IfStatement","src":"10360:96:14","trueBody":{"id":2383,"nodeType":"Block","src":"10380:76:14","statements":[{"expression":{"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10398:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10411:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10407:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10398:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2378,"nodeType":"ExpressionStatement","src":"10398:14:14"},{"expression":{"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10430:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10430:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2382,"nodeType":"ExpressionStatement","src":"10430:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10473:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10482:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10473:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2401,"nodeType":"IfStatement","src":"10469:96:14","trueBody":{"id":2400,"nodeType":"Block","src":"10489:76:14","statements":[{"expression":{"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10507:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10520:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10516:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10507:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2395,"nodeType":"ExpressionStatement","src":"10507:14:14"},{"expression":{"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2396,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10539:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10549:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10539:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2399,"nodeType":"ExpressionStatement","src":"10539:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10582:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10591:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10595:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10591:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10582:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2418,"nodeType":"IfStatement","src":"10578:96:14","trueBody":{"id":2417,"nodeType":"Block","src":"10598:76:14","statements":[{"expression":{"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10616:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10625:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10625:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10616:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2412,"nodeType":"ExpressionStatement","src":"10616:14:14"},{"expression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10648:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10658:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10648:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2416,"nodeType":"ExpressionStatement","src":"10648:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"10691:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10700:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10704:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10700:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10691:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2429,"nodeType":"IfStatement","src":"10687:64:14","trueBody":{"id":2428,"nodeType":"Block","src":"10707:44:14","statements":[{"expression":{"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2424,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10725:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10735:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10725:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2427,"nodeType":"ExpressionStatement","src":"10725:11:14"}]}}]},{"expression":{"id":2431,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10777:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2312,"id":2432,"nodeType":"Return","src":"10770:13:14"}]},"documentation":{"id":2306,"nodeType":"StructuredDocumentation","src":"9781:114:14","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9909:5:14","nodeType":"FunctionDefinition","parameters":{"id":2309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"value","nameLocation":"9923:5:14","nodeType":"VariableDeclaration","scope":2434,"src":"9915:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2307,"name":"uint256","nodeType":"ElementaryTypeName","src":"9915:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9914:15:14"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2434,"src":"9953:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2310,"name":"uint256","nodeType":"ElementaryTypeName","src":"9953:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9952:9:14"},"scope":2597,"src":"9900:890:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2469,"nodeType":"Block","src":"11025:165:14","statements":[{"id":2468,"nodeType":"UncheckedBlock","src":"11035:149:14","statements":[{"assignments":[2446],"declarations":[{"constant":false,"id":2446,"mutability":"mutable","name":"result","nameLocation":"11067:6:14","nodeType":"VariableDeclaration","scope":2468,"src":"11059:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2445,"name":"uint256","nodeType":"ElementaryTypeName","src":"11059:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2450,"initialValue":{"arguments":[{"id":2448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11082:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2447,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2434,2470],"referencedDeclaration":2434,"src":"11076:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11059:29:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"11109:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2452,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"11119:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2453,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"11131:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11140:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"11131:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"11119:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11146:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"11150:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"11159:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11146:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11119:45:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11171:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11119:53:14","trueExpression":{"hexValue":"31","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2465,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11118:55:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11109:64:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2444,"id":2467,"nodeType":"Return","src":"11102:71:14"}]}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"10796:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2470,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10953:5:14","nodeType":"FunctionDefinition","parameters":{"id":2441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"value","nameLocation":"10967:5:14","nodeType":"VariableDeclaration","scope":2470,"src":"10959:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2436,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2440,"mutability":"mutable","name":"rounding","nameLocation":"10983:8:14","nodeType":"VariableDeclaration","scope":2470,"src":"10974:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2439,"nodeType":"UserDefinedTypeName","pathNode":{"id":2438,"name":"Rounding","nameLocations":["10974:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"10974:8:14"},"referencedDeclaration":1739,"src":"10974:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"10958:34:14"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2470,"src":"11016:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2442,"name":"uint256","nodeType":"ElementaryTypeName","src":"11016:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11015:9:14"},"scope":2597,"src":"10944:246:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2556,"nodeType":"Block","src":"11504:600:14","statements":[{"assignments":[2479],"declarations":[{"constant":false,"id":2479,"mutability":"mutable","name":"result","nameLocation":"11522:6:14","nodeType":"VariableDeclaration","scope":2556,"src":"11514:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2478,"name":"uint256","nodeType":"ElementaryTypeName","src":"11514:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2481,"initialValue":{"hexValue":"30","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11531:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11514:18:14"},{"id":2553,"nodeType":"UncheckedBlock","src":"11542:533:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11570:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11579:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11570:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11585:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11570:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2496,"nodeType":"IfStatement","src":"11566:98:14","trueBody":{"id":2495,"nodeType":"Block","src":"11588:76:14","statements":[{"expression":{"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11606:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11606:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2490,"nodeType":"ExpressionStatement","src":"11606:13:14"},{"expression":{"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11637:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11647:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11637:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2494,"nodeType":"ExpressionStatement","src":"11637:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11681:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11690:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11681:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11695:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11681:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2511,"nodeType":"IfStatement","src":"11677:95:14","trueBody":{"id":2510,"nodeType":"Block","src":"11698:74:14","statements":[{"expression":{"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2502,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11716:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11726:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11716:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2505,"nodeType":"ExpressionStatement","src":"11716:12:14"},{"expression":{"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11746:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11756:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11746:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2509,"nodeType":"ExpressionStatement","src":"11746:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11789:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11789:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11803:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11789:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2526,"nodeType":"IfStatement","src":"11785:95:14","trueBody":{"id":2525,"nodeType":"Block","src":"11806:74:14","statements":[{"expression":{"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11824:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11834:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11824:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2520,"nodeType":"ExpressionStatement","src":"11824:12:14"},{"expression":{"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11854:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11864:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11854:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2524,"nodeType":"ExpressionStatement","src":"11854:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11897:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11906:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11897:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11911:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11897:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2541,"nodeType":"IfStatement","src":"11893:95:14","trueBody":{"id":2540,"nodeType":"Block","src":"11914:74:14","statements":[{"expression":{"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"11932:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11942:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11932:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2535,"nodeType":"ExpressionStatement","src":"11932:12:14"},{"expression":{"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2536,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11962:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11972:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11962:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2539,"nodeType":"ExpressionStatement","src":"11962:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"12005:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12014:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12005:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12018:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12005:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2552,"nodeType":"IfStatement","src":"12001:64:14","trueBody":{"id":2551,"nodeType":"Block","src":"12021:44:14","statements":[{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"12039:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12049:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12039:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2550,"nodeType":"ExpressionStatement","src":"12039:11:14"}]}}]},{"expression":{"id":2554,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"12091:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2477,"id":2555,"nodeType":"Return","src":"12084:13:14"}]},"documentation":{"id":2471,"nodeType":"StructuredDocumentation","src":"11196:240:14","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2557,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11450:6:14","nodeType":"FunctionDefinition","parameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"value","nameLocation":"11465:5:14","nodeType":"VariableDeclaration","scope":2557,"src":"11457:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"11457:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11456:15:14"},"returnParameters":{"id":2477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2557,"src":"11495:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2475,"name":"uint256","nodeType":"ElementaryTypeName","src":"11495:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11494:9:14"},"scope":2597,"src":"11441:663:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2595,"nodeType":"Block","src":"12340:173:14","statements":[{"id":2594,"nodeType":"UncheckedBlock","src":"12350:157:14","statements":[{"assignments":[2569],"declarations":[{"constant":false,"id":2569,"mutability":"mutable","name":"result","nameLocation":"12382:6:14","nodeType":"VariableDeclaration","scope":2594,"src":"12374:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"12374:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2573,"initialValue":{"arguments":[{"id":2571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"12398:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2570,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2557,2596],"referencedDeclaration":2557,"src":"12391:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12391:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12374:30:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"12425:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2575,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"12435:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2576,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"12447:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1739_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12456:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1737,"src":"12447:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"src":"12435:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12462:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"12468:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12477:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12468:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2583,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12467:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"12482:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12462:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12435:52:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12494:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12435:60:14","trueExpression":{"hexValue":"31","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12490:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12434:62:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12425:71:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2567,"id":2593,"nodeType":"Return","src":"12418:78:14"}]}]},"documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"12110:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2596,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12267:6:14","nodeType":"FunctionDefinition","parameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"value","nameLocation":"12282:5:14","nodeType":"VariableDeclaration","scope":2596,"src":"12274:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2559,"name":"uint256","nodeType":"ElementaryTypeName","src":"12274:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2563,"mutability":"mutable","name":"rounding","nameLocation":"12298:8:14","nodeType":"VariableDeclaration","scope":2596,"src":"12289:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2562,"nodeType":"UserDefinedTypeName","pathNode":{"id":2561,"name":"Rounding","nameLocations":["12289:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":1739,"src":"12289:8:14"},"referencedDeclaration":1739,"src":"12289:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1739","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12273:34:14"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2596,"src":"12331:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"12331:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12330:9:14"},"scope":2597,"src":"12258:255:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2598,"src":"202:12313:14","usedErrors":[]}],"src":"103:12413:14"},"id":14},"contracts/BaseUpgradeablePausable.sol":{"ast":{"absolutePath":"contracts/BaseUpgradeablePausable.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"BaseUpgradeablePausable":[2699],"BaseUpgradeablePausable__ZeroAddressError":[2606],"Constants":[2728],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"IAccessControlUpgradeable":[408],"IERC165Upgradeable":[1732],"Initializable":[580],"MathUpgradeable":[2597],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"StringsUpgradeable":[1676]},"id":2700,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2599,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"33:23:15"},{"absolutePath":"contracts/Constants.sol","file":"./Constants.sol","id":2600,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":2729,"src":"58:25:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":2601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":581,"src":"85:75:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":2602,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":708,"src":"161:78:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":2603,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":336,"src":"240:81:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":2604,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2700,"sourceUnit":781,"src":"322:85:15","symbolAliases":[],"unitAlias":""},{"errorSelector":"54151394","id":2606,"name":"BaseUpgradeablePausable__ZeroAddressError","nameLocation":"415:41:15","nodeType":"ErrorDefinition","parameters":{"id":2605,"nodeType":"ParameterList","parameters":[],"src":"456:2:15"},"src":"409:50:15"},{"abstract":false,"baseContracts":[{"baseName":{"id":2607,"name":"Initializable","nameLocations":["502:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":580,"src":"502:13:15"},"id":2608,"nodeType":"InheritanceSpecifier","src":"502:13:15"},{"baseName":{"id":2609,"name":"PausableUpgradeable","nameLocations":["522:19:15"],"nodeType":"IdentifierPath","referencedDeclaration":707,"src":"522:19:15"},"id":2610,"nodeType":"InheritanceSpecifier","src":"522:19:15"},{"baseName":{"id":2611,"name":"AccessControlUpgradeable","nameLocations":["548:24:15"],"nodeType":"IdentifierPath","referencedDeclaration":335,"src":"548:24:15"},"id":2612,"nodeType":"InheritanceSpecifier","src":"548:24:15"},{"baseName":{"id":2613,"name":"ReentrancyGuardUpgradeable","nameLocations":["578:26:15"],"nodeType":"IdentifierPath","referencedDeclaration":780,"src":"578:26:15"},"id":2614,"nodeType":"InheritanceSpecifier","src":"578:26:15"}],"canonicalName":"BaseUpgradeablePausable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2699,"linearizedBaseContracts":[2699,780,335,1720,1732,408,707,1501,580],"name":"BaseUpgradeablePausable","nameLocation":"470:23:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":2623,"nodeType":"Block","src":"634:94:15","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2617,"name":"isAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"652:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"652:9:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d207468697320616374696f6e2e","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"663:46:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""},"value":"Must have admin role to perform this action."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","typeString":"literal_string \"Must have admin role to perform this action.\""}],"id":2616,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"644:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"644:66:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2621,"nodeType":"ExpressionStatement","src":"644:66:15"},{"id":2622,"nodeType":"PlaceholderStatement","src":"720:1:15"}]},"id":2624,"name":"onlyAdmin","nameLocation":"622:9:15","nodeType":"ModifierDefinition","parameters":{"id":2615,"nodeType":"ParameterList","parameters":[],"src":"631:2:15"},"src":"613:115:15","virtual":false,"visibility":"internal"},{"body":{"id":2683,"nodeType":"Block","src":"815:468:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2631,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"828:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"845:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"837:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2632,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:15","typeDescriptions":{}}},"id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"828:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2641,"nodeType":"IfStatement","src":"825:99:15","trueBody":{"id":2640,"nodeType":"Block","src":"849:75:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2637,"name":"BaseUpgradeablePausable__ZeroAddressError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"870:41:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2639,"nodeType":"RevertStatement","src":"863:50:15"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2642,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"933:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2644,"nodeType":"ExpressionStatement","src":"933:17:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2645,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"960:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"960:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2647,"nodeType":"ExpressionStatement","src":"960:22:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2648,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"992:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2650,"nodeType":"ExpressionStatement","src":"992:24:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2652,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1038:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1038:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1038:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2655,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"1064:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2651,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1027:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1027:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2657,"nodeType":"ExpressionStatement","src":"1027:43:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2659,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1091:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1101:13:15","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":2727,"src":"1091:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2662,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"1118:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2658,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1080:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1080:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2664,"nodeType":"ExpressionStatement","src":"1080:44:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2666,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1149:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1159:13:15","memberName":"getPauserRole","nodeType":"MemberAccess","referencedDeclaration":2727,"src":"1149:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2669,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1176:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1186:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1176:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2665,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1135:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1135:66:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2673,"nodeType":"ExpressionStatement","src":"1135:66:15"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2675,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1225:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1235:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1225:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2678,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1251:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1261:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1251:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1251:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2674,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1211:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1211:65:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2682,"nodeType":"ExpressionStatement","src":"1211:65:15"}]},"functionSelector":"6e810b1a","id":2684,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":2629,"kind":"modifierInvocation","modifierName":{"id":2628,"name":"onlyInitializing","nameLocations":["796:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"796:16:15"},"nodeType":"ModifierInvocation","src":"796:18:15"}],"name":"__BaseUpgradeablePausable_init","nameLocation":"743:30:15","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"mutability":"mutable","name":"owner","nameLocation":"782:5:15","nodeType":"VariableDeclaration","scope":2684,"src":"774:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2625,"name":"address","nodeType":"ElementaryTypeName","src":"774:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"773:15:15"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[],"src":"815:0:15"},"scope":2699,"src":"734:549:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2697,"nodeType":"Block","src":"1335:71:15","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2690,"name":"Constants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1360:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Constants_$2728_$","typeString":"type(library Constants)"}},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1370:12:15","memberName":"getAdminRole","nodeType":"MemberAccess","referencedDeclaration":2719,"src":"1360:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes32_$","typeString":"function () pure returns (bytes32)"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1360:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2693,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"1386:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1386:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2689,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1352:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1352:47:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2688,"id":2696,"nodeType":"Return","src":"1345:54:15"}]},"functionSelector":"b6db75a0","id":2698,"implemented":true,"kind":"function","modifiers":[],"name":"isAdmin","nameLocation":"1298:7:15","nodeType":"FunctionDefinition","parameters":{"id":2685,"nodeType":"ParameterList","parameters":[],"src":"1305:2:15"},"returnParameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2698,"src":"1329:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2686,"name":"bool","nodeType":"ElementaryTypeName","src":"1329:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1328:6:15"},"scope":2699,"src":"1289:117:15","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":2700,"src":"461:951:15","usedErrors":[2606]}],"src":"33:1379:15"},"id":15},"contracts/Constants.sol":{"ast":{"absolutePath":"contracts/Constants.sol","exportedSymbols":{"Constants":[2728]},"id":2729,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":2701,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Constants","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2728,"linearizedBaseContracts":[2728],"name":"Constants","nameLocation":"70:9:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"75b238fc","id":2706,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"111:10:16","nodeType":"VariableDeclaration","scope":2728,"src":"87:60:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"87:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"134:12:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":2703,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"124:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"124:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e63ab1e9","id":2711,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"177:11:16","nodeType":"VariableDeclaration","scope":2728,"src":"153:62:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"153:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"201:13:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":2708,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"191:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"191:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":2718,"nodeType":"Block","src":"278:34:16","statements":[{"expression":{"id":2716,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"295:10:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2715,"id":2717,"nodeType":"Return","src":"288:17:16"}]},"id":2719,"implemented":true,"kind":"function","modifiers":[],"name":"getAdminRole","nameLocation":"231:12:16","nodeType":"FunctionDefinition","parameters":{"id":2712,"nodeType":"ParameterList","parameters":[],"src":"243:2:16"},"returnParameters":{"id":2715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2719,"src":"269:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2713,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"268:9:16"},"scope":2728,"src":"222:90:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2726,"nodeType":"Block","src":"375:35:16","statements":[{"expression":{"id":2724,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"392:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2723,"id":2725,"nodeType":"Return","src":"385:18:16"}]},"id":2727,"implemented":true,"kind":"function","modifiers":[],"name":"getPauserRole","nameLocation":"327:13:16","nodeType":"FunctionDefinition","parameters":{"id":2720,"nodeType":"ParameterList","parameters":[],"src":"340:2:16"},"returnParameters":{"id":2723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2727,"src":"366:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2721,"name":"bytes32","nodeType":"ElementaryTypeName","src":"366:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"365:9:16"},"scope":2728,"src":"318:92:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2729,"src":"62:350:16","usedErrors":[]}],"src":"37:375:16"},"id":16},"contracts/core/payAsYouGo/Claim.sol":{"ast":{"absolutePath":"contracts/core/payAsYouGo/Claim.sol","exportedSymbols":{"AccessControlUpgradeable":[335],"AddressUpgradeable":[1459],"BaseUpgradeablePausable":[2699],"BaseUpgradeablePausable__ZeroAddressError":[2606],"ClaimGovernance":[3794],"Constants":[2728],"ContextUpgradeable":[1501],"ERC165Upgradeable":[1720],"IAccessControlUpgradeable":[408],"IClaim":[3910],"IERC165Upgradeable":[1732],"IERC20PermitUpgradeable":[894],"IERC20Upgradeable":[858],"IGlobalPauseOperation":[3940],"Initializable":[580],"MathUpgradeable":[2597],"PausableUpgradeable":[707],"ReentrancyGuardUpgradeable":[780],"SafeERC20Upgradeable":[1175],"StringsUpgradeable":[1676]},"id":3795,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":2730,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:17"},{"absolutePath":"contracts/BaseUpgradeablePausable.sol","file":"./../../BaseUpgradeablePausable.sol","id":2731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3795,"sourceUnit":2700,"src":"184:45:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":2732,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3795,"sourceUnit":1176,"src":"264:88:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IClaim.sol","file":"./../../interfaces/IClaim.sol","id":2733,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3795,"sourceUnit":3911,"src":"378:39:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGlobalPauseOperation.sol","file":"./../../interfaces/IGlobalPauseOperation.sol","id":2734,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3795,"sourceUnit":3941,"src":"418:54:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol","id":2735,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3795,"sourceUnit":412,"src":"473:78:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2737,"name":"IClaim","nameLocations":["668:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":3910,"src":"668:6:17"},"id":2738,"nodeType":"InheritanceSpecifier","src":"668:6:17"},{"baseName":{"id":2739,"name":"BaseUpgradeablePausable","nameLocations":["676:23:17"],"nodeType":"IdentifierPath","referencedDeclaration":2699,"src":"676:23:17"},"id":2740,"nodeType":"InheritanceSpecifier","src":"676:23:17"}],"canonicalName":"ClaimGovernance","contractDependencies":[],"contractKind":"contract","documentation":{"id":2736,"nodeType":"StructuredDocumentation","src":"554:85:17","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":true,"id":3794,"linearizedBaseContracts":[3794,2699,780,335,1720,1732,408,707,1501,580,3910],"name":"ClaimGovernance","nameLocation":"649:15:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":2741,"nodeType":"StructuredDocumentation","src":"706:306:17","text":"claimID: unique insurance claim ID\n _openClaimsCount: count of the open insurance claims\n VOTING_END_TIME: voting maximum duration in hours\n TIME_BEFORE_VOTING_START: time before voting starts, so as users can be notified\n AFTER_VOTING_WAIT_PERIOD: voting challenge duration"},"functionSelector":"5df6f2ee","id":2743,"mutability":"mutable","name":"claimID","nameLocation":"1032:7:17","nodeType":"VariableDeclaration","scope":3794,"src":"1017:22:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1017:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":2745,"mutability":"mutable","name":"_stakedAmount","nameLocation":"1061:13:17","nodeType":"VariableDeclaration","scope":3794,"src":"1045:29:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1045:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2747,"mutability":"mutable","name":"_openClaimsCount","nameLocation":"1096:16:17","nodeType":"VariableDeclaration","scope":3794,"src":"1080:32:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2746,"name":"uint256","nodeType":"ElementaryTypeName","src":"1080:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"id":2750,"mutability":"constant","name":"VOTING_END_TIME","nameLocation":"1143:15:17","nodeType":"VariableDeclaration","scope":3794,"src":"1118:52:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1118:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1161:9:17","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"5"},"visibility":"private"},{"constant":true,"id":2753,"mutability":"constant","name":"TIME_BEFORE_VOTING_START","nameLocation":"1201:24:17","nodeType":"VariableDeclaration","scope":3794,"src":"1176:61:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1176:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1228:9:17","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"visibility":"private"},{"constant":true,"id":2756,"mutability":"constant","name":"AFTER_VOTING_WAIT_PERIOD","nameLocation":"1268:24:17","nodeType":"VariableDeclaration","scope":3794,"src":"1243:61:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2754,"name":"uint256","nodeType":"ElementaryTypeName","src":"1243:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1295:9:17","subdenomination":"minutes","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"1"},"visibility":"private"},{"global":false,"id":2760,"libraryName":{"id":2757,"name":"SafeERC20Upgradeable","nameLocations":["1321:20:17"],"nodeType":"IdentifierPath","referencedDeclaration":1175,"src":"1321:20:17"},"nodeType":"UsingForDirective","src":"1315:49:17","typeName":{"id":2759,"nodeType":"UserDefinedTypeName","pathNode":{"id":2758,"name":"IERC20Upgradeable","nameLocations":["1346:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1346:17:17"},"referencedDeclaration":858,"src":"1346:17:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}}},{"global":false,"id":2764,"libraryName":{"id":2761,"name":"SafeERC20Upgradeable","nameLocations":["1375:20:17"],"nodeType":"IdentifierPath","referencedDeclaration":1175,"src":"1375:20:17"},"nodeType":"UsingForDirective","src":"1369:55:17","typeName":{"id":2763,"nodeType":"UserDefinedTypeName","pathNode":{"id":2762,"name":"IERC20PermitUpgradeable","nameLocations":["1400:23:17"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"1400:23:17"},"referencedDeclaration":894,"src":"1400:23:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}}},{"constant":false,"documentation":{"id":2765,"nodeType":"StructuredDocumentation","src":"1430:99:17","text":"_tokenGSZT: SafeZen Governance contract\n _globalPauseOperation: Pause Operation contract"},"id":2768,"mutability":"mutable","name":"_tokenDAI","nameLocation":"1560:9:17","nodeType":"VariableDeclaration","scope":3794,"src":"1534:35:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2767,"nodeType":"UserDefinedTypeName","pathNode":{"id":2766,"name":"IERC20Upgradeable","nameLocations":["1534:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1534:17:17"},"referencedDeclaration":858,"src":"1534:17:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":2771,"mutability":"mutable","name":"_tokenPermitDAI","nameLocation":"1607:15:17","nodeType":"VariableDeclaration","scope":3794,"src":"1575:47:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":2770,"nodeType":"UserDefinedTypeName","pathNode":{"id":2769,"name":"IERC20PermitUpgradeable","nameLocations":["1575:23:17"],"nodeType":"IdentifierPath","referencedDeclaration":894,"src":"1575:23:17"},"referencedDeclaration":894,"src":"1575:23:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"private"},{"constant":false,"id":2774,"mutability":"mutable","name":"_tokenGSZT","nameLocation":"1654:10:17","nodeType":"VariableDeclaration","scope":3794,"src":"1628:36:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"},"typeName":{"id":2773,"nodeType":"UserDefinedTypeName","pathNode":{"id":2772,"name":"IERC20Upgradeable","nameLocations":["1628:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":858,"src":"1628:17:17"},"referencedDeclaration":858,"src":"1628:17:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"visibility":"private"},{"constant":false,"id":2777,"mutability":"mutable","name":"_globalPauseOperation","nameLocation":"1700:21:17","nodeType":"VariableDeclaration","scope":3794,"src":"1670:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$3940","typeString":"contract IGlobalPauseOperation"},"typeName":{"id":2776,"nodeType":"UserDefinedTypeName","pathNode":{"id":2775,"name":"IGlobalPauseOperation","nameLocations":["1670:21:17"],"nodeType":"IdentifierPath","referencedDeclaration":3940,"src":"1670:21:17"},"referencedDeclaration":3940,"src":"1670:21:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$3940","typeString":"contract IGlobalPauseOperation"}},"visibility":"private"},{"canonicalName":"ClaimGovernance.Claim","id":2806,"members":[{"constant":false,"id":2779,"mutability":"mutable","name":"claimer","nameLocation":"2488:7:17","nodeType":"VariableDeclaration","scope":2806,"src":"2480:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2778,"name":"address","nodeType":"ElementaryTypeName","src":"2480:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2781,"mutability":"mutable","name":"_claimID","nameLocation":"2513:8:17","nodeType":"VariableDeclaration","scope":2806,"src":"2505:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"2505:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2783,"mutability":"mutable","name":"categoryID","nameLocation":"2577:10:17","nodeType":"VariableDeclaration","scope":2806,"src":"2569:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2782,"name":"uint256","nodeType":"ElementaryTypeName","src":"2569:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2785,"mutability":"mutable","name":"subcategoryID","nameLocation":"2606:13:17","nodeType":"VariableDeclaration","scope":2806,"src":"2598:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"2598:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"claimAmountRequested","nameLocation":"2637:20:17","nodeType":"VariableDeclaration","scope":2806,"src":"2629:28:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2786,"name":"uint256","nodeType":"ElementaryTypeName","src":"2629:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2789,"mutability":"mutable","name":"proof","nameLocation":"2674:5:17","nodeType":"VariableDeclaration","scope":2806,"src":"2667:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2788,"name":"string","nodeType":"ElementaryTypeName","src":"2667:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2791,"mutability":"mutable","name":"closed","nameLocation":"2752:6:17","nodeType":"VariableDeclaration","scope":2806,"src":"2747:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2790,"name":"bool","nodeType":"ElementaryTypeName","src":"2747:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2793,"mutability":"mutable","name":"accepted","nameLocation":"2773:8:17","nodeType":"VariableDeclaration","scope":2806,"src":"2768:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2792,"name":"bool","nodeType":"ElementaryTypeName","src":"2768:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2795,"mutability":"mutable","name":"isChallenged","nameLocation":"2796:12:17","nodeType":"VariableDeclaration","scope":2806,"src":"2791:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2794,"name":"bool","nodeType":"ElementaryTypeName","src":"2791:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2800,"mutability":"mutable","name":"votingInfo","nameLocation":"2849:10:17","nodeType":"VariableDeclaration","scope":2806,"src":"2818:41:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo)"},"typeName":{"id":2799,"keyType":{"id":2796,"name":"uint256","nodeType":"ElementaryTypeName","src":"2826:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2818:30:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo)"},"valueType":{"id":2798,"nodeType":"UserDefinedTypeName","pathNode":{"id":2797,"name":"VotingInfo","nameLocations":["2837:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2821,"src":"2837:10:17"},"referencedDeclaration":2821,"src":"2837:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo"}}},"visibility":"internal"},{"constant":false,"id":2805,"mutability":"mutable","name":"receipts","nameLocation":"2898:8:17","nodeType":"VariableDeclaration","scope":2806,"src":"2870:36:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt)"},"typeName":{"id":2804,"keyType":{"id":2801,"name":"address","nodeType":"ElementaryTypeName","src":"2878:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2870:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt)"},"valueType":{"id":2803,"nodeType":"UserDefinedTypeName","pathNode":{"id":2802,"name":"Receipt","nameLocations":["2889:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":2828,"src":"2889:7:17"},"referencedDeclaration":2828,"src":"2889:7:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage_ptr","typeString":"struct ClaimGovernance.Receipt"}}},"visibility":"internal"}],"name":"Claim","nameLocation":"2464:5:17","nodeType":"StructDefinition","scope":3794,"src":"2457:456:17","visibility":"public"},{"canonicalName":"ClaimGovernance.VotingInfo","id":2821,"members":[{"constant":false,"id":2808,"mutability":"mutable","name":"votingStartTime","nameLocation":"2955:15:17","nodeType":"VariableDeclaration","scope":2821,"src":"2947:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"2947:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2810,"mutability":"mutable","name":"votingEndTime","nameLocation":"2988:13:17","nodeType":"VariableDeclaration","scope":2821,"src":"2980:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2809,"name":"uint256","nodeType":"ElementaryTypeName","src":"2980:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2812,"mutability":"mutable","name":"forVotes","nameLocation":"3019:8:17","nodeType":"VariableDeclaration","scope":2821,"src":"3011:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2811,"name":"uint256","nodeType":"ElementaryTypeName","src":"3011:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2814,"mutability":"mutable","name":"againstVotes","nameLocation":"3045:12:17","nodeType":"VariableDeclaration","scope":2821,"src":"3037:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2813,"name":"uint256","nodeType":"ElementaryTypeName","src":"3037:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"advisorForVotes","nameLocation":"3075:15:17","nodeType":"VariableDeclaration","scope":2821,"src":"3067:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2815,"name":"uint256","nodeType":"ElementaryTypeName","src":"3067:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"advisorAgainstVotes","nameLocation":"3108:19:17","nodeType":"VariableDeclaration","scope":2821,"src":"3100:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"3100:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2820,"mutability":"mutable","name":"votingCounts","nameLocation":"3145:12:17","nodeType":"VariableDeclaration","scope":2821,"src":"3137:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2819,"name":"uint256","nodeType":"ElementaryTypeName","src":"3137:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"VotingInfo","nameLocation":"2926:10:17","nodeType":"StructDefinition","scope":3794,"src":"2919:290:17","visibility":"public"},{"canonicalName":"ClaimGovernance.Receipt","id":2828,"members":[{"constant":false,"id":2823,"mutability":"mutable","name":"hasVoted","nameLocation":"3245:8:17","nodeType":"VariableDeclaration","scope":2828,"src":"3240:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2822,"name":"bool","nodeType":"ElementaryTypeName","src":"3240:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2825,"mutability":"mutable","name":"support","nameLocation":"3268:7:17","nodeType":"VariableDeclaration","scope":2828,"src":"3263:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2824,"name":"bool","nodeType":"ElementaryTypeName","src":"3263:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2827,"mutability":"mutable","name":"votes","nameLocation":"3293:5:17","nodeType":"VariableDeclaration","scope":2828,"src":"3285:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"3285:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Receipt","nameLocation":"3222:7:17","nodeType":"StructDefinition","scope":3794,"src":"3215:90:17","visibility":"public"},{"constant":false,"functionSelector":"c661fed3","id":2832,"mutability":"mutable","name":"isAdvisor","nameLocation":"3343:9:17","nodeType":"VariableDeclaration","scope":3794,"src":"3311:41:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":2831,"keyType":{"id":2829,"name":"address","nodeType":"ElementaryTypeName","src":"3319:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3311:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":2830,"name":"bool","nodeType":"ElementaryTypeName","src":"3330:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2833,"nodeType":"StructuredDocumentation","src":"3359:55:17","text":"@notice The official record of all claims ever made"},"functionSelector":"a888c2cd","id":2838,"mutability":"mutable","name":"claims","nameLocation":"3452:6:17","nodeType":"VariableDeclaration","scope":3794,"src":"3419:39:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim)"},"typeName":{"id":2837,"keyType":{"id":2834,"name":"uint256","nodeType":"ElementaryTypeName","src":"3427:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3419:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim)"},"valueType":{"id":2836,"nodeType":"UserDefinedTypeName","pathNode":{"id":2835,"name":"Claim","nameLocations":["3438:5:17"],"nodeType":"IdentifierPath","referencedDeclaration":2806,"src":"3438:5:17"},"referencedDeclaration":2806,"src":"3438:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2839,"nodeType":"StructuredDocumentation","src":"3465:154:17","text":"@notice The latest claim for each individual claimer\n if a user have filed most claims, then the protocol that user invests are generally risky"},"functionSelector":"c4993140","id":2843,"mutability":"mutable","name":"individualClaims","nameLocation":"3659:16:17","nodeType":"VariableDeclaration","scope":3794,"src":"3624:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2842,"keyType":{"id":2840,"name":"address","nodeType":"ElementaryTypeName","src":"3632:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3624:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"3643:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2844,"nodeType":"StructuredDocumentation","src":"3682:123:17","text":"@notice mapping the protocol specific claims count to date\n more the number, more the risky the platform will be"},"functionSelector":"c95bee81","id":2850,"mutability":"mutable","name":"protocolSpecificClaims","nameLocation":"3865:22:17","nodeType":"VariableDeclaration","scope":3794,"src":"3810:77:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"},"typeName":{"id":2849,"keyType":{"id":2845,"name":"uint256","nodeType":"ElementaryTypeName","src":"3818:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3810:47:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"},"valueType":{"id":2848,"keyType":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"3837:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3829:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2847,"name":"uint256","nodeType":"ElementaryTypeName","src":"3848:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"body":{"id":2868,"nodeType":"Block","src":"3977:142:17","statements":[{"expression":{"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2856,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"3987:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2858,"name":"tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"4017:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2857,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"3999:17:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$858_$","typeString":"type(contract IERC20Upgradeable)"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3999:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"src":"3987:39:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":2861,"nodeType":"ExpressionStatement","src":"3987:39:17"},{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2862,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"4049:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2864,"name":"tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"4091:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2863,"name":"IERC20PermitUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"4067:23:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20PermitUpgradeable_$894_$","typeString":"type(contract IERC20PermitUpgradeable)"}},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4067:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"src":"4049:51:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":2867,"nodeType":"ExpressionStatement","src":"4049:51:17"}]},"documentation":{"id":2851,"nodeType":"StructuredDocumentation","src":"3894:48:17","text":"@custom:oz-upgrades-unsafe-allow-constructor"},"id":2869,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2853,"mutability":"mutable","name":"tokenDAI","nameLocation":"3967:8:17","nodeType":"VariableDeclaration","scope":2869,"src":"3959:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2852,"name":"address","nodeType":"ElementaryTypeName","src":"3959:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3958:18:17"},"returnParameters":{"id":2855,"nodeType":"ParameterList","parameters":[],"src":"3977:0:17"},"scope":3794,"src":"3947:172:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2899,"nodeType":"Block","src":"4264:247:17","statements":[{"expression":{"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2878,"name":"_stakedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"4274:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130653138","id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4290:5:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000_by_1","typeString":"int_const 10000000000000000000"},"value":"10e18"},"src":"4274:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2881,"nodeType":"ExpressionStatement","src":"4274:21:17"},{"expression":{"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2882,"name":"_tokenGSZT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"4305:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2884,"name":"safezenGovernanceTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"4336:29:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2883,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"4318:17:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$858_$","typeString":"type(contract IERC20Upgradeable)"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4318:48:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"src":"4305:61:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":2887,"nodeType":"ExpressionStatement","src":"4305:61:17"},{"expression":{"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2888,"name":"_globalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"4376:21:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$3940","typeString":"contract IGlobalPauseOperation"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2890,"name":"globalPauseOperationAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"4422:27:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2889,"name":"IGlobalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"4400:21:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IGlobalPauseOperation_$3940_$","typeString":"type(contract IGlobalPauseOperation)"}},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4400:50:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$3940","typeString":"contract IGlobalPauseOperation"}},"src":"4376:74:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$3940","typeString":"contract IGlobalPauseOperation"}},"id":2893,"nodeType":"ExpressionStatement","src":"4376:74:17"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2895,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"4491:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4491:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2894,"name":"__BaseUpgradeablePausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"4460:30:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4460:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2898,"nodeType":"ExpressionStatement","src":"4460:44:17"}]},"functionSelector":"485cc955","id":2900,"implemented":true,"kind":"function","modifiers":[{"id":2876,"kind":"modifierInvocation","modifierName":{"id":2875,"name":"initializer","nameLocations":["4252:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"4252:11:17"},"nodeType":"ModifierInvocation","src":"4252:11:17"}],"name":"initialize","nameLocation":"4134:10:17","nodeType":"FunctionDefinition","parameters":{"id":2874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2871,"mutability":"mutable","name":"safezenGovernanceTokenAddress","nameLocation":"4162:29:17","nodeType":"VariableDeclaration","scope":2900,"src":"4154:37:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2870,"name":"address","nodeType":"ElementaryTypeName","src":"4154:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"globalPauseOperationAddress","nameLocation":"4209:27:17","nodeType":"VariableDeclaration","scope":2900,"src":"4201:35:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2872,"name":"address","nodeType":"ElementaryTypeName","src":"4201:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4144:98:17"},"returnParameters":{"id":2877,"nodeType":"ParameterList","parameters":[],"src":"4264:0:17"},"scope":3794,"src":"4125:386:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2908,"nodeType":"Block","src":"4553:25:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2905,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"4563:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4563:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2907,"nodeType":"ExpressionStatement","src":"4563:8:17"}]},"functionSelector":"8456cb59","id":2909,"implemented":true,"kind":"function","modifiers":[{"id":2903,"kind":"modifierInvocation","modifierName":{"id":2902,"name":"onlyAdmin","nameLocations":["4543:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4543:9:17"},"nodeType":"ModifierInvocation","src":"4543:9:17"}],"name":"pause","nameLocation":"4526:5:17","nodeType":"FunctionDefinition","parameters":{"id":2901,"nodeType":"ParameterList","parameters":[],"src":"4531:2:17"},"returnParameters":{"id":2904,"nodeType":"ParameterList","parameters":[],"src":"4553:0:17"},"scope":3794,"src":"4517:61:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2917,"nodeType":"Block","src":"4622:27:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2914,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4632:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4632:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2916,"nodeType":"ExpressionStatement","src":"4632:10:17"}]},"functionSelector":"3f4ba83a","id":2918,"implemented":true,"kind":"function","modifiers":[{"id":2912,"kind":"modifierInvocation","modifierName":{"id":2911,"name":"onlyAdmin","nameLocations":["4612:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4612:9:17"},"nodeType":"ModifierInvocation","src":"4612:9:17"}],"name":"unpause","nameLocation":"4593:7:17","nodeType":"FunctionDefinition","parameters":{"id":2910,"nodeType":"ParameterList","parameters":[],"src":"4600:2:17"},"returnParameters":{"id":2913,"nodeType":"ParameterList","parameters":[],"src":"4622:0:17"},"scope":3794,"src":"4584:65:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2940,"nodeType":"Block","src":"4910:92:17","statements":[{"expression":{"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":2928,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"4920:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":2930,"indexExpression":{"id":2929,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"4927:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4920:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":2931,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4937:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"4920:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":2933,"indexExpression":{"id":2932,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"4948:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4920:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":2934,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4958:13:17","memberName":"votingEndTime","nodeType":"MemberAccess","referencedDeclaration":2810,"src":"4920:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2935,"name":"timeInHours","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"4974:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31","id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4988:7:17","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"src":"4974:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4920:75:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2939,"nodeType":"ExpressionStatement","src":"4920:75:17"}]},"documentation":{"id":2919,"nodeType":"StructuredDocumentation","src":"4655:140:17","text":"@dev in case if certain claim require additional time for DAO, \n for e.g., awaiting additional inputs to reserve their decisions "},"functionSelector":"8c33b395","id":2941,"implemented":true,"kind":"function","modifiers":[{"id":2926,"kind":"modifierInvocation","modifierName":{"id":2925,"name":"onlyAdmin","nameLocations":["4900:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"4900:9:17"},"nodeType":"ModifierInvocation","src":"4900:9:17"}],"name":"updateVotingEndTime","nameLocation":"4809:19:17","nodeType":"FunctionDefinition","parameters":{"id":2924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2921,"mutability":"mutable","name":"_claimID","nameLocation":"4846:8:17","nodeType":"VariableDeclaration","scope":2941,"src":"4838:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2920,"name":"uint256","nodeType":"ElementaryTypeName","src":"4838:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2923,"mutability":"mutable","name":"timeInHours","nameLocation":"4873:11:17","nodeType":"VariableDeclaration","scope":2941,"src":"4865:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2922,"name":"uint256","nodeType":"ElementaryTypeName","src":"4865:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4828:62:17"},"returnParameters":{"id":2927,"nodeType":"ParameterList","parameters":[],"src":"4910:0:17"},"scope":3794,"src":"4800:202:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2954,"nodeType":"Block","src":"5072:46:17","statements":[{"expression":{"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2948,"name":"isAdvisor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"5082:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2950,"indexExpression":{"id":2949,"name":"userAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"5092:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5082:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5107:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5082:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2953,"nodeType":"ExpressionStatement","src":"5082:29:17"}]},"functionSelector":"59405ed3","id":2955,"implemented":true,"kind":"function","modifiers":[{"id":2946,"kind":"modifierInvocation","modifierName":{"id":2945,"name":"onlyAdmin","nameLocations":["5062:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"5062:9:17"},"nodeType":"ModifierInvocation","src":"5062:9:17"}],"name":"updateAdvisors","nameLocation":"5017:14:17","nodeType":"FunctionDefinition","parameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"userAddress","nameLocation":"5040:11:17","nodeType":"VariableDeclaration","scope":2955,"src":"5032:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2942,"name":"address","nodeType":"ElementaryTypeName","src":"5032:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5031:21:17"},"returnParameters":{"id":2947,"nodeType":"ParameterList","parameters":[],"src":"5072:0:17"},"scope":3794,"src":"5008:110:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2966,"nodeType":"Block","src":"5191:44:17","statements":[{"expression":{"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2962,"name":"_stakedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"5201:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2963,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"5217:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:27:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2965,"nodeType":"ExpressionStatement","src":"5201:27:17"}]},"functionSelector":"c90054ee","id":2967,"implemented":true,"kind":"function","modifiers":[{"id":2960,"kind":"modifierInvocation","modifierName":{"id":2959,"name":"onlyAdmin","nameLocations":["5181:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2624,"src":"5181:9:17"},"nodeType":"ModifierInvocation","src":"5181:9:17"}],"name":"updateStakeAmount","nameLocation":"5133:17:17","nodeType":"FunctionDefinition","parameters":{"id":2958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2957,"mutability":"mutable","name":"stakeAmount","nameLocation":"5159:11:17","nodeType":"VariableDeclaration","scope":2967,"src":"5151:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2956,"name":"uint256","nodeType":"ElementaryTypeName","src":"5151:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5150:21:17"},"returnParameters":{"id":2961,"nodeType":"ParameterList","parameters":[],"src":"5191:0:17"},"scope":3794,"src":"5124:111:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3845],"body":{"id":3127,"nodeType":"Block","src":"5510:1079:17","statements":[{"expression":{"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5520:9:17","subExpression":{"id":2989,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"5522:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2991,"nodeType":"ExpressionStatement","src":"5520:9:17"},{"assignments":[2994],"declarations":[{"constant":false,"id":2994,"mutability":"mutable","name":"newClaim","nameLocation":"5553:8:17","nodeType":"VariableDeclaration","scope":3127,"src":"5539:22:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim"},"typeName":{"id":2993,"nodeType":"UserDefinedTypeName","pathNode":{"id":2992,"name":"Claim","nameLocations":["5539:5:17"],"nodeType":"IdentifierPath","referencedDeclaration":2806,"src":"5539:5:17"},"referencedDeclaration":2806,"src":"5539:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim"}},"visibility":"internal"}],"id":2998,"initialValue":{"baseExpression":{"id":2995,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"5564:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":2997,"indexExpression":{"id":2996,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"5571:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5564:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5539:40:17"},{"expression":{"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2999,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5589:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3001,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5598:10:17","memberName":"categoryID","nodeType":"MemberAccess","referencedDeclaration":2783,"src":"5589:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3002,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"5611:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5589:32:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3004,"nodeType":"ExpressionStatement","src":"5589:32:17"},{"expression":{"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3005,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5631:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5640:13:17","memberName":"subcategoryID","nodeType":"MemberAccess","referencedDeclaration":2785,"src":"5631:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3008,"name":"subcategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"5656:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5631:38:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3010,"nodeType":"ExpressionStatement","src":"5631:38:17"},{"expression":{"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3011,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5679:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5688:8:17","memberName":"_claimID","nodeType":"MemberAccess","referencedDeclaration":2781,"src":"5679:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3014,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"5699:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5679:27:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3016,"nodeType":"ExpressionStatement","src":"5679:27:17"},{"expression":{"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3017,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5716:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5725:7:17","memberName":"claimer","nodeType":"MemberAccess","referencedDeclaration":2779,"src":"5716:16:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":3020,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"5735:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5735:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5716:31:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3023,"nodeType":"ExpressionStatement","src":"5716:31:17"},{"expression":{"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3024,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5757:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3026,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5766:5:17","memberName":"proof","nodeType":"MemberAccess","referencedDeclaration":2789,"src":"5757:14:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3027,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"5774:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5757:22:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3029,"nodeType":"ExpressionStatement","src":"5757:22:17"},{"expression":{"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3030,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5789:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5798:20:17","memberName":"claimAmountRequested","nodeType":"MemberAccess","referencedDeclaration":2787,"src":"5789:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3033,"name":"requestedClaimAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"5821:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5789:52:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3035,"nodeType":"ExpressionStatement","src":"5789:52:17"},{"expression":{"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3036,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5851:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3039,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5860:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"5851:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3040,"indexExpression":{"id":3038,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"5871:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5851:28:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5880:15:17","memberName":"votingStartTime","nodeType":"MemberAccess","referencedDeclaration":2808,"src":"5851:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3042,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5898:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5904:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"5898:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3044,"name":"TIME_BEFORE_VOTING_START","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"5916:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5898:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5851:89:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3047,"nodeType":"ExpressionStatement","src":"5851:89:17"},{"expression":{"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3048,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5950:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5959:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"5950:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3052,"indexExpression":{"id":3050,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"5970:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5950:28:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5979:13:17","memberName":"votingEndTime","nodeType":"MemberAccess","referencedDeclaration":2810,"src":"5950:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"id":3054,"name":"newClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"5995:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage_ptr","typeString":"struct ClaimGovernance.Claim storage pointer"}},"id":3055,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6004:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"5995:19:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3057,"indexExpression":{"id":3056,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"6015:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5995:28:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3058,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6024:15:17","memberName":"votingStartTime","nodeType":"MemberAccess","referencedDeclaration":2808,"src":"5995:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3059,"name":"VOTING_END_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"6042:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5995:62:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5950:107:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3062,"nodeType":"ExpressionStatement","src":"5950:107:17"},{"expression":{"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6067:32:17","subExpression":{"baseExpression":{"id":3063,"name":"individualClaims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"6069:16:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3066,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3064,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6086:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6086:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6069:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3068,"nodeType":"ExpressionStatement","src":"6067:32:17"},{"expression":{"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6109:51:17","subExpression":{"baseExpression":{"baseExpression":{"id":3069,"name":"protocolSpecificClaims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"6111:22:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":3071,"indexExpression":{"id":3070,"name":"categoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"6134:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6111:34:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3073,"indexExpression":{"id":3072,"name":"subcategoryID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"6146:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6111:49:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3075,"nodeType":"ExpressionStatement","src":"6109:51:17"},{"expression":{"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6170:18:17","subExpression":{"id":3076,"name":"_openClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"6172:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3078,"nodeType":"ExpressionStatement","src":"6170:18:17"},{"assignments":[3080],"declarations":[{"constant":false,"id":3080,"mutability":"mutable","name":"success","nameLocation":"6203:7:17","nodeType":"VariableDeclaration","scope":3127,"src":"6198:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3079,"name":"bool","nodeType":"ElementaryTypeName","src":"6198:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3084,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3081,"name":"_globalPauseOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"6213:21:17","typeDescriptions":{"typeIdentifier":"t_contract$_IGlobalPauseOperation_$3940","typeString":"contract IGlobalPauseOperation"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6235:14:17","memberName":"pauseOperation","nodeType":"MemberAccess","referencedDeclaration":3929,"src":"6213:36:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$_t_bool_$","typeString":"function () external returns (bool)"}},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6213:38:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"6198:53:17"},{"condition":{"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6264:8:17","subExpression":{"id":3085,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"6265:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3091,"nodeType":"IfStatement","src":"6261:80:17","trueBody":{"id":3090,"nodeType":"Block","src":"6274:67:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3087,"name":"Claim__PausedOperationFailedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"6295:33:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6295:35:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3089,"nodeType":"RevertStatement","src":"6288:42:17"}]}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3095,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6377:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6377:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3099,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6399:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_ClaimGovernance_$3794","typeString":"contract ClaimGovernance"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ClaimGovernance_$3794","typeString":"contract ClaimGovernance"}],"id":3098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6391:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3097,"name":"address","nodeType":"ElementaryTypeName","src":"6391:7:17","typeDescriptions":{}}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6391:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3101,"name":"_stakedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"6406:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3102,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"6421:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3103,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"6431:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3104,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"6434:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3105,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"6437:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3092,"name":"_tokenPermitDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2771,"src":"6350:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$894","typeString":"contract IERC20PermitUpgradeable"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6366:10:17","memberName":"safePermit","nodeType":"MemberAccess","referencedDeclaration":1136,"src":"6350:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20PermitUpgradeable_$894_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$bound_to$_t_contract$_IERC20PermitUpgradeable_$894_$","typeString":"function (contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)"}},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6350:89:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3107,"nodeType":"ExpressionStatement","src":"6350:89:17"},{"expression":{"arguments":[{"arguments":[{"id":3113,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6480:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_ClaimGovernance_$3794","typeString":"contract ClaimGovernance"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ClaimGovernance_$3794","typeString":"contract ClaimGovernance"}],"id":3112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6472:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3111,"name":"address","nodeType":"ElementaryTypeName","src":"6472:7:17","typeDescriptions":{}}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6472:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3115,"name":"_stakedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"6487:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3108,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"6449:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6459:12:17","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":926,"src":"6449:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$858_$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6449:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3117,"nodeType":"ExpressionStatement","src":"6449:52:17"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3119,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6532:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6532:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3121,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"6546:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3122,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"6555:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3118,"name":"NewClaimCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3824,"src":"6516:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,string memory)"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6516:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3124,"nodeType":"EmitStatement","src":"6511:50:17"},{"expression":{"hexValue":"74727565","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6578:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2988,"id":3126,"nodeType":"Return","src":"6571:11:17"}]},"functionSelector":"55e5b444","id":3128,"implemented":true,"kind":"function","modifiers":[],"name":"createClaim","nameLocation":"5250:11:17","nodeType":"FunctionDefinition","overrides":{"id":2985,"nodeType":"OverrideSpecifier","overrides":[],"src":"5487:8:17"},"parameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"categoryID","nameLocation":"5279:10:17","nodeType":"VariableDeclaration","scope":3128,"src":"5271:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2968,"name":"uint256","nodeType":"ElementaryTypeName","src":"5271:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2971,"mutability":"mutable","name":"subcategoryID","nameLocation":"5307:13:17","nodeType":"VariableDeclaration","scope":3128,"src":"5299:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2970,"name":"uint256","nodeType":"ElementaryTypeName","src":"5299:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2973,"mutability":"mutable","name":"proof","nameLocation":"5345:5:17","nodeType":"VariableDeclaration","scope":3128,"src":"5331:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2972,"name":"string","nodeType":"ElementaryTypeName","src":"5331:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"requestedClaimAmount","nameLocation":"5369:20:17","nodeType":"VariableDeclaration","scope":3128,"src":"5361:28:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2974,"name":"uint256","nodeType":"ElementaryTypeName","src":"5361:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2977,"mutability":"mutable","name":"deadline","nameLocation":"5407:8:17","nodeType":"VariableDeclaration","scope":3128,"src":"5399:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"5399:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2979,"mutability":"mutable","name":"v","nameLocation":"5432:1:17","nodeType":"VariableDeclaration","scope":3128,"src":"5426:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2978,"name":"uint8","nodeType":"ElementaryTypeName","src":"5426:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2981,"mutability":"mutable","name":"r","nameLocation":"5452:1:17","nodeType":"VariableDeclaration","scope":3128,"src":"5444:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2980,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5444:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2983,"mutability":"mutable","name":"s","nameLocation":"5472:1:17","nodeType":"VariableDeclaration","scope":3128,"src":"5464:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5464:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5261:218:17"},"returnParameters":{"id":2988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2987,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3128,"src":"5504:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2986,"name":"bool","nodeType":"ElementaryTypeName","src":"5504:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5503:6:17"},"scope":3794,"src":"5241:1348:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3854],"body":{"id":3315,"nodeType":"Block","src":"6706:1641:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3138,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"6928:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3140,"indexExpression":{"id":3139,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"6935:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6928:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3141,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6945:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"6928:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3143,"indexExpression":{"id":3142,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"6956:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6928:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3144,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6966:15:17","memberName":"votingStartTime","nodeType":"MemberAccess","referencedDeclaration":2808,"src":"6928:53:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3145,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6984:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6990:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"6984:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6928:71:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"checks are made in order\n 1. making sure voting time has started\n 2. has the user voted or not\n 3. if not, whether the user is voting within the voting time limit","id":3152,"nodeType":"IfStatement","src":"6924:142:17","trueBody":{"id":3151,"nodeType":"Block","src":"7001:65:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3148,"name":"Claim__VotingNotYetStartedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3808,"src":"7022:31:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7022:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3150,"nodeType":"RevertStatement","src":"7015:40:17"}]}},{"condition":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3153,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7079:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3155,"indexExpression":{"id":3154,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7086:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7079:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3156,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7096:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"7079:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3159,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3157,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7105:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7105:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7079:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3160,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7119:8:17","memberName":"hasVoted","nodeType":"MemberAccess","referencedDeclaration":2823,"src":"7079:48:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3165,"nodeType":"IfStatement","src":"7075:116:17","trueBody":{"id":3164,"nodeType":"Block","src":"7129:62:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3161,"name":"Claim__UserAlreadyVotedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"7150:28:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7150:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3163,"nodeType":"RevertStatement","src":"7143:37:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3166,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7204:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3168,"indexExpression":{"id":3167,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7211:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7204:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3169,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7221:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"7204:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3171,"indexExpression":{"id":3170,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7232:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7204:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7242:13:17","memberName":"votingEndTime","nodeType":"MemberAccess","referencedDeclaration":2810,"src":"7204:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3173,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7258:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7264:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"7258:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7204:69:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3180,"nodeType":"IfStatement","src":"7200:136:17","trueBody":{"id":3179,"nodeType":"Block","src":"7275:61:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3176,"name":"Claim__VotingTimeEndedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"7296:27:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7296:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3178,"nodeType":"RevertStatement","src":"7289:36:17"}]}},{"expression":{"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3181,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7345:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3183,"indexExpression":{"id":3182,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7352:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7345:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3184,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7362:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"7345:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3187,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3185,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7371:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7371:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7345:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7385:7:17","memberName":"support","nodeType":"MemberAccess","referencedDeclaration":2825,"src":"7345:47:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3189,"name":"support","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"7395:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7345:57:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3191,"nodeType":"ExpressionStatement","src":"7345:57:17"},{"expression":{"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3192,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7412:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3194,"indexExpression":{"id":3193,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7419:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7412:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7429:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"7412:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3198,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3196,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7438:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7438:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7412:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3199,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7452:5:17","memberName":"votes","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"7412:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3202,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7481:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7481:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3200,"name":"_tokenGSZT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"7460:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7471:9:17","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":815,"src":"7460:20:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7460:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7412:82:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3206,"nodeType":"ExpressionStatement","src":"7412:82:17"},{"expression":{"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3207,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7504:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3209,"indexExpression":{"id":3208,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7511:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7504:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7521:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"7504:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3213,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3211,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7530:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7530:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7504:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7544:8:17","memberName":"hasVoted","nodeType":"MemberAccess","referencedDeclaration":2823,"src":"7504:48:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7555:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7504:55:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3217,"nodeType":"ExpressionStatement","src":"7504:55:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"baseExpression":{"id":3218,"name":"isAdvisor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"7575:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3221,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3219,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7585:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7585:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7575:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3222,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7574:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3223,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7604:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3225,"indexExpression":{"id":3224,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7611:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7604:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7621:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"7604:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3228,"indexExpression":{"id":3227,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7632:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7604:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7642:12:17","memberName":"votingCounts","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"7604:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":3230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7658:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"7604:55:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3232,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7603:57:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7574:86:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3311,"nodeType":"Block","src":"8005:315:17","statements":[{"condition":{"id":3273,"name":"support","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"8023:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3309,"nodeType":"Block","src":"8178:132:17","statements":[{"expression":{"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3292,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"8196:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3294,"indexExpression":{"id":3293,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"8203:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8196:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8213:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"8196:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3297,"indexExpression":{"id":3296,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"8224:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8196:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8234:12:17","memberName":"againstVotes","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"8196:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3299,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"8250:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3301,"indexExpression":{"id":3300,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"8257:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8250:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8267:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"8250:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3305,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3303,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"8276:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8276:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8250:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3306,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8290:5:17","memberName":"votes","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"8250:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8196:99:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3308,"nodeType":"ExpressionStatement","src":"8196:99:17"}]},"id":3310,"nodeType":"IfStatement","src":"8019:291:17","trueBody":{"id":3291,"nodeType":"Block","src":"8032:128:17","statements":[{"expression":{"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3274,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"8050:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3276,"indexExpression":{"id":3275,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"8057:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8050:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8067:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"8050:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3279,"indexExpression":{"id":3278,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"8078:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8050:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8088:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"8050:46:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3281,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"8100:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3283,"indexExpression":{"id":3282,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"8107:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8100:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8117:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"8100:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3287,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3285,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"8126:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8126:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8100:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8140:5:17","memberName":"votes","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"8100:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8050:95:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3290,"nodeType":"ExpressionStatement","src":"8050:95:17"}]}}]},"id":3312,"nodeType":"IfStatement","src":"7570:750:17","trueBody":{"id":3272,"nodeType":"Block","src":"7662:329:17","statements":[{"condition":{"id":3234,"name":"support","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"7680:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3270,"nodeType":"Block","src":"7842:139:17","statements":[{"expression":{"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3253,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7860:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3255,"indexExpression":{"id":3254,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7867:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7860:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7877:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"7860:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3258,"indexExpression":{"id":3257,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7888:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7860:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3259,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7898:19:17","memberName":"advisorAgainstVotes","nodeType":"MemberAccess","referencedDeclaration":2818,"src":"7860:57:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3260,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7921:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3262,"indexExpression":{"id":3261,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7928:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7921:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3263,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7938:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"7921:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3266,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3264,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7947:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7947:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7921:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7961:5:17","memberName":"votes","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"7921:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:106:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3269,"nodeType":"ExpressionStatement","src":"7860:106:17"}]},"id":3271,"nodeType":"IfStatement","src":"7676:305:17","trueBody":{"id":3252,"nodeType":"Block","src":"7689:135:17","statements":[{"expression":{"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3235,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7707:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3237,"indexExpression":{"id":3236,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7714:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7707:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3238,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7724:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"7707:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3240,"indexExpression":{"id":3239,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7735:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7707:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3241,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7745:15:17","memberName":"advisorForVotes","nodeType":"MemberAccess","referencedDeclaration":2816,"src":"7707:53:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3242,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"7764:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3244,"indexExpression":{"id":3243,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"7771:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7764:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7781:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"7764:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3248,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3246,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"7790:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7790:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7764:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3249,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7804:5:17","memberName":"votes","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"7764:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7707:102:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3251,"nodeType":"ExpressionStatement","src":"7707:102:17"}]}}]}},{"expression":{"hexValue":"74727565","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8336:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3137,"id":3314,"nodeType":"Return","src":"8329:11:17"}]},"functionSelector":"c9d27afe","id":3316,"implemented":true,"kind":"function","modifiers":[],"name":"vote","nameLocation":"6614:4:17","nodeType":"FunctionDefinition","overrides":{"id":3134,"nodeType":"OverrideSpecifier","overrides":[],"src":"6683:8:17"},"parameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3130,"mutability":"mutable","name":"_claimID","nameLocation":"6636:8:17","nodeType":"VariableDeclaration","scope":3316,"src":"6628:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3129,"name":"uint256","nodeType":"ElementaryTypeName","src":"6628:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"support","nameLocation":"6660:7:17","nodeType":"VariableDeclaration","scope":3316,"src":"6655:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3131,"name":"bool","nodeType":"ElementaryTypeName","src":"6655:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6618:55:17"},"returnParameters":{"id":3137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3316,"src":"6700:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3135,"name":"bool","nodeType":"ElementaryTypeName","src":"6700:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6699:6:17"},"scope":3794,"src":"6605:1742:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3861],"body":{"id":3609,"nodeType":"Block","src":"8567:3022:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3325,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"8595:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3327,"indexExpression":{"id":3326,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"8602:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8595:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3328,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8612:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"8595:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3330,"indexExpression":{"id":3329,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"8623:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8595:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8633:13:17","memberName":"votingEndTime","nodeType":"MemberAccess","referencedDeclaration":2810,"src":"8595:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3332,"name":"AFTER_VOTING_WAIT_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"8649:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8595:78:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3334,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8594:80:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3335,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8690:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8696:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"8690:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8594:111:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3342,"nodeType":"IfStatement","src":"8577:214:17","trueBody":{"id":3341,"nodeType":"Block","src":"8716:75:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3338,"name":"Claim__VotingDecisionNotYetFinalizedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"8737:41:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8737:43:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3340,"nodeType":"RevertStatement","src":"8730:50:17"}]}},{"condition":{"expression":{"baseExpression":{"id":3343,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"8804:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3345,"indexExpression":{"id":3344,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"8811:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8804:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8821:12:17","memberName":"isChallenged","nodeType":"MemberAccess","referencedDeclaration":2795,"src":"8804:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3351,"nodeType":"IfStatement","src":"8800:99:17","trueBody":{"id":3350,"nodeType":"Block","src":"8835:64:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3347,"name":"Claim__DecisionChallengedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"8856:30:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8856:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3349,"nodeType":"RevertStatement","src":"8849:39:17"}]}},{"assignments":[3353],"declarations":[{"constant":false,"id":3353,"mutability":"mutable","name":"totalCommunityVotes","nameLocation":"8916:19:17","nodeType":"VariableDeclaration","scope":3609,"src":"8908:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3352,"name":"uint256","nodeType":"ElementaryTypeName","src":"8908:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3370,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3354,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"8952:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3356,"indexExpression":{"id":3355,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"8959:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8952:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8969:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"8952:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3359,"indexExpression":{"id":3358,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"8980:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8952:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3360,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8990:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"8952:46:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3361,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"9014:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3363,"indexExpression":{"id":3362,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9021:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9014:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9031:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"9014:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3366,"indexExpression":{"id":3365,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9042:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9014:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9052:12:17","memberName":"againstVotes","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"9014:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8952:112:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3369,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8938:136:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8908:166:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3371,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"9088:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3373,"indexExpression":{"id":3372,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9095:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9088:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9105:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"9088:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3376,"indexExpression":{"id":3375,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9116:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9088:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3377,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9126:12:17","memberName":"votingCounts","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"9088:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":3378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9142:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9088:55:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3563,"nodeType":"Block","src":"10831:385:17","statements":[{"assignments":[3516],"declarations":[{"constant":false,"id":3516,"mutability":"mutable","name":"forVotesEligible","nameLocation":"10853:16:17","nodeType":"VariableDeclaration","scope":3563,"src":"10845:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3515,"name":"uint256","nodeType":"ElementaryTypeName","src":"10845:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3549,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3517,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"10891:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3519,"indexExpression":{"id":3518,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10898:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10891:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3520,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10908:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"10891:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3522,"indexExpression":{"id":3521,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10919:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10891:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3523,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10929:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"10891:46:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3524,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"10957:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3526,"indexExpression":{"id":3525,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10964:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10957:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10974:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"10957:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3529,"indexExpression":{"id":3528,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10985:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10957:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3530,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10995:12:17","memberName":"againstVotes","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"10957:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10891:116:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3532,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10890:118:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"31","id":3546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11109:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10890:220:17","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3533,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11030:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3535,"indexExpression":{"id":3534,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11037:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11030:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11047:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"11030:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3538,"indexExpression":{"id":3537,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11058:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11030:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11068:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"11030:46:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11079:3:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"11030:52:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11029:54:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3543,"name":"totalCommunityVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"11086:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11029:76:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3545,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11028:78:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10872:252:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10845:279:17"},{"expression":{"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3550,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11138:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3552,"indexExpression":{"id":3551,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11145:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11138:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11155:8:17","memberName":"accepted","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"11138:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3554,"name":"forVotesEligible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"11167:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3830","id":3555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11187:2:17","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},"src":"11167:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3557,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11166:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"66616c7365","id":3559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11200:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11166:39:17","trueExpression":{"hexValue":"74727565","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11193:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11138:67:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3562,"nodeType":"ExpressionStatement","src":"11138:67:17"}]},"id":3564,"nodeType":"IfStatement","src":"9084:2132:17","trueBody":{"id":3514,"nodeType":"Block","src":"9145:1672:17","statements":[{"assignments":[3381],"declarations":[{"constant":false,"id":3381,"mutability":"mutable","name":"totalAdvisorVotes","nameLocation":"9167:17:17","nodeType":"VariableDeclaration","scope":3514,"src":"9159:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3380,"name":"uint256","nodeType":"ElementaryTypeName","src":"9159:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3398,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3382,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"9205:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3384,"indexExpression":{"id":3383,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9212:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9205:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9222:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"9205:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3387,"indexExpression":{"id":3386,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9233:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9205:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9243:15:17","memberName":"advisorForVotes","nodeType":"MemberAccess","referencedDeclaration":2816,"src":"9205:53:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3389,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"9278:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3391,"indexExpression":{"id":3390,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9285:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9278:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3392,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9295:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"9278:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3394,"indexExpression":{"id":3393,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9306:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9278:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9316:19:17","memberName":"advisorAgainstVotes","nodeType":"MemberAccess","referencedDeclaration":2818,"src":"9278:57:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9205:130:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3397,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9187:162:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9159:190:17"},{"assignments":[3400],"declarations":[{"constant":false,"id":3400,"mutability":"mutable","name":"forAdvisorVotesEligible","nameLocation":"9371:23:17","nodeType":"VariableDeclaration","scope":3514,"src":"9363:31:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3399,"name":"uint256","nodeType":"ElementaryTypeName","src":"9363:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3433,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3401,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"9416:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3403,"indexExpression":{"id":3402,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9423:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9416:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9433:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"9416:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3406,"indexExpression":{"id":3405,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9444:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9416:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3407,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9454:15:17","memberName":"advisorForVotes","nodeType":"MemberAccess","referencedDeclaration":2816,"src":"9416:53:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3408,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"9490:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3410,"indexExpression":{"id":3409,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9497:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9490:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9507:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"9490:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3413,"indexExpression":{"id":3412,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"9518:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9490:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9528:19:17","memberName":"advisorAgainstVotes","nodeType":"MemberAccess","referencedDeclaration":2818,"src":"9490:57:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9416:131:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3416,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9415:133:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9645:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9415:231:17","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3417,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"9570:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3419,"indexExpression":{"id":3418,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"9577:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9570:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9586:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"9570:26:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3422,"indexExpression":{"id":3421,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"9597:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9570:35:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3423,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9606:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"9570:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":3424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9617:3:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"9570:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3426,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9569:52:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3427,"name":"totalAdvisorVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3381,"src":"9624:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9569:72:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3429,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9568:74:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3432,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9397:263:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9363:297:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3434,"name":"forAdvisorVotesEligible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"10105:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3539","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10132:2:17","typeDescriptions":{"typeIdentifier":"t_rational_59_by_1","typeString":"int_const 59"},"value":"59"},"src":"10105:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":"even if all the community votes are in favor, but, 49% of the voting power will be \n given to the advisors in the final claim decision round.\n Community --> (100 * 0.51) = 51%    Advisors -->  (60 * 0.49) = 29.4%\n Total  = 51% + 29.4% < 80% (needed to get approved)\n keeping >= 59% instead of 60% because of underflow value in forAdvisorVotesEligible","falseBody":{"id":3512,"nodeType":"Block","src":"10741:66:17","statements":[{"expression":{"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3505,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"10759:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3507,"indexExpression":{"id":3506,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10766:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10759:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3508,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10776:8:17","memberName":"accepted","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"10759:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10787:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"10759:33:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3511,"nodeType":"ExpressionStatement","src":"10759:33:17"}]},"id":3513,"nodeType":"IfStatement","src":"10101:706:17","trueBody":{"id":3504,"nodeType":"Block","src":"10136:587:17","statements":[{"assignments":[3438],"declarations":[{"constant":false,"id":3438,"mutability":"mutable","name":"forVotesEligible","nameLocation":"10162:16:17","nodeType":"VariableDeclaration","scope":3504,"src":"10154:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3437,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3471,"initialValue":{"components":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3439,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"10204:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3441,"indexExpression":{"id":3440,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10211:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10204:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10221:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"10204:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3444,"indexExpression":{"id":3443,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10232:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10204:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3445,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10242:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"10204:46:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3446,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"10274:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3448,"indexExpression":{"id":3447,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10281:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10274:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10291:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"10274:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3451,"indexExpression":{"id":3450,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10302:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10274:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3452,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10312:12:17","memberName":"againstVotes","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"10274:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10204:120:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3454,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10203:122:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"31","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10430:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10203:228:17","trueExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3455,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"10351:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3457,"indexExpression":{"id":3456,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10358:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10351:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10368:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"10351:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3460,"indexExpression":{"id":3459,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10379:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10351:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10389:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"10351:46:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":3462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:3:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"10351:52:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10350:54:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3465,"name":"totalCommunityVotes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"10407:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10350:76:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3467,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10349:78:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3470,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10181:268:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10154:295:17"},{"assignments":[3473],"declarations":[{"constant":false,"id":3473,"mutability":"mutable","name":"supportPercent","nameLocation":"10475:14:17","nodeType":"VariableDeclaration","scope":3504,"src":"10467:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"10467:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3490,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3474,"name":"forAdvisorVotesEligible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"10516:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3439","id":3475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10542:2:17","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"src":"10516:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10515:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":3478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10548:3:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"10515:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3480,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10514:38:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3481,"name":"forVotesEligible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"10578:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3531","id":3482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10597:2:17","typeDescriptions":{"typeIdentifier":"t_rational_51_by_1","typeString":"int_const 51"},"value":"51"},"src":"10578:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3484,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10577:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":3485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10603:3:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"10577:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3487,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10576:31:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10514:93:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10492:133:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10467:158:17"},{"expression":{"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3491,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"10643:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3493,"indexExpression":{"id":3492,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"10650:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10643:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3494,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10660:8:17","memberName":"accepted","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"10643:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3495,"name":"supportPercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"10672:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3830","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10690:2:17","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},"src":"10672:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3498,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10671:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"66616c7365","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10703:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10671:37:17","trueExpression":{"hexValue":"74727565","id":3499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10696:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10643:65:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3503,"nodeType":"ExpressionStatement","src":"10643:65:17"}]}}]}},{"expression":{"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3565,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11225:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3567,"indexExpression":{"id":3566,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11232:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11225:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3568,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11242:6:17","memberName":"closed","nodeType":"MemberAccess","referencedDeclaration":2791,"src":"11225:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11251:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"11225:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3571,"nodeType":"ExpressionStatement","src":"11225:30:17"},{"condition":{"expression":{"baseExpression":{"id":3572,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11269:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3574,"indexExpression":{"id":3573,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11276:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11269:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11286:8:17","memberName":"accepted","nodeType":"MemberAccess","referencedDeclaration":2793,"src":"11269:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3603,"nodeType":"IfStatement","src":"11265:269:17","trueBody":{"id":3602,"nodeType":"Block","src":"11296:238:17","statements":[{"assignments":[3577],"declarations":[{"constant":false,"id":3577,"mutability":"mutable","name":"totalAmountStaked","nameLocation":"11318:17:17","nodeType":"VariableDeclaration","scope":3602,"src":"11310:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3576,"name":"uint256","nodeType":"ElementaryTypeName","src":"11310:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3591,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3578,"name":"_stakedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"11356:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3579,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11373:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3581,"indexExpression":{"id":3580,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11380:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11373:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11390:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"11373:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3584,"indexExpression":{"id":3583,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11401:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11373:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3585,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11411:12:17","memberName":"votingCounts","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"11373:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11426:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11373:54:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3588,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11372:56:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11356:72:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3590,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11338:104:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11310:132:17"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3595,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11479:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3597,"indexExpression":{"id":3596,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"11486:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11479:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3598,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11496:7:17","memberName":"claimer","nodeType":"MemberAccess","referencedDeclaration":2779,"src":"11479:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3599,"name":"totalAmountStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3577,"src":"11505:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3592,"name":"_tokenDAI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11456:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$858","typeString":"contract IERC20Upgradeable"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11466:12:17","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":926,"src":"11456:22:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$858_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$858_$","typeString":"function (contract IERC20Upgradeable,address,uint256)"}},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11456:67:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3601,"nodeType":"ExpressionStatement","src":"11456:67:17"}]}},{"expression":{"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"11543:18:17","subExpression":{"id":3604,"name":"_openClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"11545:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3606,"nodeType":"ExpressionStatement","src":"11543:18:17"},{"expression":{"hexValue":"74727565","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11578:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3324,"id":3608,"nodeType":"Return","src":"11571:11:17"}]},"documentation":{"id":3317,"nodeType":"StructuredDocumentation","src":"8353:136:17","text":"@dev this function aims to finalize the claim decision, based on the claim voting\n @param _claimID: unique insurance claim ID"},"functionSelector":"d0c36092","id":3610,"implemented":true,"kind":"function","modifiers":[],"name":"claimDecision","nameLocation":"8503:13:17","nodeType":"FunctionDefinition","overrides":{"id":3321,"nodeType":"OverrideSpecifier","overrides":[],"src":"8544:8:17"},"parameters":{"id":3320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3319,"mutability":"mutable","name":"_claimID","nameLocation":"8525:8:17","nodeType":"VariableDeclaration","scope":3610,"src":"8517:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3318,"name":"uint256","nodeType":"ElementaryTypeName","src":"8517:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8516:18:17"},"returnParameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3610,"src":"8561:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3322,"name":"bool","nodeType":"ElementaryTypeName","src":"8561:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8560:6:17"},"scope":3794,"src":"8494:3095:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3874],"body":{"id":3697,"nodeType":"Block","src":"11761:766:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11776:24:17","subExpression":{"expression":{"baseExpression":{"id":3624,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11777:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3626,"indexExpression":{"id":3625,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"11784:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11777:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3627,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11794:6:17","memberName":"closed","nodeType":"MemberAccess","referencedDeclaration":2791,"src":"11777:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11775:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11806:30:17","subExpression":{"expression":{"baseExpression":{"id":3630,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11807:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3632,"indexExpression":{"id":3631,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"11814:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11807:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3633,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11824:12:17","memberName":"isChallenged","nodeType":"MemberAccess","referencedDeclaration":2795,"src":"11807:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3635,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11805:32:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11775:62:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3641,"nodeType":"IfStatement","src":"11771:133:17","trueBody":{"id":3640,"nodeType":"Block","src":"11839:65:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3637,"name":"Claim__DecisionNotYetTakenError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"11860:31:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11860:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3639,"nodeType":"RevertStatement","src":"11853:40:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3642,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"11917:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3644,"indexExpression":{"id":3643,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"11924:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11917:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11934:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"11917:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3647,"indexExpression":{"id":3646,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"11945:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11917:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3648,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11955:12:17","memberName":"votingCounts","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"11917:50:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":3649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11971:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11917:55:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3655,"nodeType":"IfStatement","src":"11913:138:17","trueBody":{"id":3654,"nodeType":"Block","src":"11974:77:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3651,"name":"Claim__DecisionNoLongerCanBeChallengedError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"11995:43:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11995:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3653,"nodeType":"RevertStatement","src":"11988:52:17"}]}},{"expression":{"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3656,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12060:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3658,"indexExpression":{"id":3657,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"12067:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12060:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3659,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12077:12:17","memberName":"isChallenged","nodeType":"MemberAccess","referencedDeclaration":2795,"src":"12060:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12092:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"12060:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3662,"nodeType":"ExpressionStatement","src":"12060:36:17"},{"expression":{"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12106:54:17","subExpression":{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3663,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12108:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3665,"indexExpression":{"id":3664,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"12115:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12108:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12124:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"12108:26:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3670,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3667,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"12135:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12145:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12135:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12108:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"id":3671,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12148:12:17","memberName":"votingCounts","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"12108:52:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3673,"nodeType":"ExpressionStatement","src":"12106:54:17"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3675,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12196:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3677,"indexExpression":{"id":3676,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"12203:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12196:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12213:10:17","memberName":"categoryID","nodeType":"MemberAccess","referencedDeclaration":2783,"src":"12196:27:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":3679,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12237:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3681,"indexExpression":{"id":3680,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"12244:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12237:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12254:13:17","memberName":"subcategoryID","nodeType":"MemberAccess","referencedDeclaration":2785,"src":"12237:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":3683,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12281:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3685,"indexExpression":{"id":3684,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"12288:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12281:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12298:5:17","memberName":"proof","nodeType":"MemberAccess","referencedDeclaration":2789,"src":"12281:22:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"expression":{"baseExpression":{"id":3687,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12317:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3689,"indexExpression":{"id":3688,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"12324:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12317:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3690,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12334:20:17","memberName":"claimAmountRequested","nodeType":"MemberAccess","referencedDeclaration":2787,"src":"12317:37:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3691,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"12368:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3692,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"12391:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3693,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"12407:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3694,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"12423:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3674,"name":"createClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"12171:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (uint256,uint256,string memory,uint256,uint256,uint8,bytes32,bytes32) returns (bool)"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12171:263:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3696,"nodeType":"ExpressionStatement","src":"12171:263:17"}]},"functionSelector":"602ce4c6","id":3698,"implemented":true,"kind":"function","modifiers":[],"name":"challengeDecision","nameLocation":"11609:17:17","nodeType":"FunctionDefinition","overrides":{"id":3622,"nodeType":"OverrideSpecifier","overrides":[],"src":"11752:8:17"},"parameters":{"id":3621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3612,"mutability":"mutable","name":"_claimID","nameLocation":"11644:8:17","nodeType":"VariableDeclaration","scope":3698,"src":"11636:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3611,"name":"uint256","nodeType":"ElementaryTypeName","src":"11636:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3614,"mutability":"mutable","name":"deadline","nameLocation":"11670:8:17","nodeType":"VariableDeclaration","scope":3698,"src":"11662:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3613,"name":"uint256","nodeType":"ElementaryTypeName","src":"11662:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"v","nameLocation":"11695:1:17","nodeType":"VariableDeclaration","scope":3698,"src":"11689:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3615,"name":"uint8","nodeType":"ElementaryTypeName","src":"11689:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"r","nameLocation":"11715:1:17","nodeType":"VariableDeclaration","scope":3698,"src":"11707:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11707:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3620,"mutability":"mutable","name":"s","nameLocation":"11735:1:17","nodeType":"VariableDeclaration","scope":3698,"src":"11727:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3619,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11727:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11626:116:17"},"returnParameters":{"id":3623,"nodeType":"ParameterList","parameters":[],"src":"11761:0:17"},"scope":3794,"src":"11600:927:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3885],"body":{"id":3736,"nodeType":"Block","src":"12642:216:17","statements":[{"expression":{"components":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3710,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12673:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3712,"indexExpression":{"id":3711,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"12680:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12673:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12690:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"12673:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3716,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3714,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"12699:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12673:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3717,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12713:8:17","memberName":"hasVoted","nodeType":"MemberAccess","referencedDeclaration":2823,"src":"12673:48:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3718,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12735:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3720,"indexExpression":{"id":3719,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"12742:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12735:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12752:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"12735:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3724,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3722,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"12761:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12761:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12735:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3725,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12775:7:17","memberName":"support","nodeType":"MemberAccess","referencedDeclaration":2825,"src":"12735:47:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3726,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12796:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3728,"indexExpression":{"id":3727,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"12803:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12796:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3729,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12813:8:17","memberName":"receipts","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"12796:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Receipt_$2828_storage_$","typeString":"mapping(address => struct ClaimGovernance.Receipt storage ref)"}},"id":3732,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3730,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"12822:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12822:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12796:39:17","typeDescriptions":{"typeIdentifier":"t_struct$_Receipt_$2828_storage","typeString":"struct ClaimGovernance.Receipt storage ref"}},"id":3733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12836:5:17","memberName":"votes","nodeType":"MemberAccess","referencedDeclaration":2827,"src":"12796:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3734,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12659:192:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bool_$_t_uint256_$","typeString":"tuple(bool,bool,uint256)"}},"functionReturnParameters":3709,"id":3735,"nodeType":"Return","src":"12652:199:17"}]},"functionSelector":"20849b07","id":3737,"implemented":true,"kind":"function","modifiers":[],"name":"viewVoteReceipt","nameLocation":"12542:15:17","nodeType":"FunctionDefinition","overrides":{"id":3702,"nodeType":"OverrideSpecifier","overrides":[],"src":"12604:8:17"},"parameters":{"id":3701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3700,"mutability":"mutable","name":"_claimID","nameLocation":"12575:8:17","nodeType":"VariableDeclaration","scope":3737,"src":"12567:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3699,"name":"uint256","nodeType":"ElementaryTypeName","src":"12567:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12557:32:17"},"returnParameters":{"id":3709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3737,"src":"12621:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3703,"name":"bool","nodeType":"ElementaryTypeName","src":"12621:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3737,"src":"12627:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3705,"name":"bool","nodeType":"ElementaryTypeName","src":"12627:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3737,"src":"12633:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3707,"name":"uint256","nodeType":"ElementaryTypeName","src":"12633:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12620:21:17"},"scope":3794,"src":"12533:325:17","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3890],"body":{"id":3745,"nodeType":"Block","src":"12926:31:17","statements":[{"expression":{"id":3743,"name":"claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"12943:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3742,"id":3744,"nodeType":"Return","src":"12936:14:17"}]},"functionSelector":"ef0c997a","id":3746,"implemented":true,"kind":"function","modifiers":[],"name":"getClaimID","nameLocation":"12873:10:17","nodeType":"FunctionDefinition","overrides":{"id":3739,"nodeType":"OverrideSpecifier","overrides":[],"src":"12900:8:17"},"parameters":{"id":3738,"nodeType":"ParameterList","parameters":[],"src":"12883:2:17"},"returnParameters":{"id":3742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3746,"src":"12917:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3740,"name":"uint256","nodeType":"ElementaryTypeName","src":"12917:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12916:9:17"},"scope":3794,"src":"12864:93:17","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3909],"body":{"id":3792,"nodeType":"Block","src":"13126:348:17","statements":[{"assignments":[3768],"declarations":[{"constant":false,"id":3768,"mutability":"mutable","name":"claim","nameLocation":"13155:5:17","nodeType":"VariableDeclaration","scope":3792,"src":"13136:24:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo"},"typeName":{"id":3767,"nodeType":"UserDefinedTypeName","pathNode":{"id":3766,"name":"VotingInfo","nameLocations":["13136:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":2821,"src":"13136:10:17"},"referencedDeclaration":2821,"src":"13136:10:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo"}},"visibility":"internal"}],"id":3775,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"id":3769,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"13163:6:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Claim_$2806_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.Claim storage ref)"}},"id":3771,"indexExpression":{"id":3770,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"13170:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13163:16:17","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$2806_storage","typeString":"struct ClaimGovernance.Claim storage ref"}},"id":3772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13180:10:17","memberName":"votingInfo","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"13163:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VotingInfo_$2821_storage_$","typeString":"mapping(uint256 => struct ClaimGovernance.VotingInfo storage ref)"}},"id":3774,"indexExpression":{"id":3773,"name":"_claimID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"13191:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13163:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage","typeString":"struct ClaimGovernance.VotingInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13136:64:17"},{"expression":{"components":[{"expression":{"id":3776,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"13231:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo storage pointer"}},"id":3777,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13237:15:17","memberName":"votingStartTime","nodeType":"MemberAccess","referencedDeclaration":2808,"src":"13231:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3778,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"13267:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo storage pointer"}},"id":3779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13273:13:17","memberName":"votingEndTime","nodeType":"MemberAccess","referencedDeclaration":2810,"src":"13267:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3780,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"13301:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo storage pointer"}},"id":3781,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13307:8:17","memberName":"forVotes","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"13301:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3782,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"13330:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo storage pointer"}},"id":3783,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13336:12:17","memberName":"againstVotes","nodeType":"MemberAccess","referencedDeclaration":2814,"src":"13330:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3784,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"13363:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo storage pointer"}},"id":3785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13369:15:17","memberName":"advisorForVotes","nodeType":"MemberAccess","referencedDeclaration":2816,"src":"13363:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3786,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"13399:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo storage pointer"}},"id":3787,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13405:19:17","memberName":"advisorAgainstVotes","nodeType":"MemberAccess","referencedDeclaration":2818,"src":"13399:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3788,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"13439:5:17","typeDescriptions":{"typeIdentifier":"t_struct$_VotingInfo_$2821_storage_ptr","typeString":"struct ClaimGovernance.VotingInfo storage pointer"}},"id":3789,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13445:12:17","memberName":"votingCounts","nodeType":"MemberAccess","referencedDeclaration":2820,"src":"13439:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3790,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13217:250:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256,uint256,uint256,uint256)"}},"functionReturnParameters":3765,"id":3791,"nodeType":"Return","src":"13210:257:17"}]},"functionSelector":"248a0634","id":3793,"implemented":true,"kind":"function","modifiers":[],"name":"getVotingInfo","nameLocation":"12972:13:17","nodeType":"FunctionDefinition","overrides":{"id":3750,"nodeType":"OverrideSpecifier","overrides":[],"src":"13032:8:17"},"parameters":{"id":3749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3748,"mutability":"mutable","name":"_claimID","nameLocation":"13003:8:17","nodeType":"VariableDeclaration","scope":3793,"src":"12995:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3747,"name":"uint256","nodeType":"ElementaryTypeName","src":"12995:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12985:32:17"},"returnParameters":{"id":3765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"13058:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"13058:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"13067:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3753,"name":"uint256","nodeType":"ElementaryTypeName","src":"13067:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3756,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"13076:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3755,"name":"uint256","nodeType":"ElementaryTypeName","src":"13076:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"13085:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3757,"name":"uint256","nodeType":"ElementaryTypeName","src":"13085:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"13094:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3759,"name":"uint256","nodeType":"ElementaryTypeName","src":"13094:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"13103:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3761,"name":"uint256","nodeType":"ElementaryTypeName","src":"13103:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3793,"src":"13112:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3763,"name":"uint256","nodeType":"ElementaryTypeName","src":"13112:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13048:77:17"},"scope":3794,"src":"12963:511:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3795,"src":"640:12836:17","usedErrors":[2606,3800,3802,3804,3806,3808,3810,3812,3814,3816]}],"src":"37:13439:17"},"id":17},"contracts/interfaces/IClaim.sol":{"ast":{"absolutePath":"contracts/interfaces/IClaim.sol","exportedSymbols":{"IClaim":[3910]},"id":3911,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":3796,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"37:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IClaim","contractDependencies":[],"contractKind":"interface","documentation":{"id":3797,"nodeType":"StructuredDocumentation","src":"62:85:18","text":"Report any bug or issues at:\n @custom:security-contact anshik@safezen.finance"},"fullyImplemented":false,"id":3910,"linearizedBaseContracts":[3910],"name":"IClaim","nameLocation":"158:6:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3798,"nodeType":"StructuredDocumentation","src":"172:22:18","text":"Custom Error Codes"},"errorSelector":"d6db1722","id":3800,"name":"Claim__VotingTimeEndedError","nameLocation":"205:27:18","nodeType":"ErrorDefinition","parameters":{"id":3799,"nodeType":"ParameterList","parameters":[],"src":"232:2:18"},"src":"199:36:18"},{"errorSelector":"e88a652b","id":3802,"name":"Claim__UserAlreadyVotedError","nameLocation":"246:28:18","nodeType":"ErrorDefinition","parameters":{"id":3801,"nodeType":"ParameterList","parameters":[],"src":"274:2:18"},"src":"240:37:18"},{"errorSelector":"6ea462eb","id":3804,"name":"Claim__ImmutableChangesError","nameLocation":"288:28:18","nodeType":"ErrorDefinition","parameters":{"id":3803,"nodeType":"ParameterList","parameters":[],"src":"316:2:18"},"src":"282:37:18"},{"errorSelector":"34e3808e","id":3806,"name":"Claim__DecisionChallengedError","nameLocation":"330:30:18","nodeType":"ErrorDefinition","parameters":{"id":3805,"nodeType":"ParameterList","parameters":[],"src":"360:2:18"},"src":"324:39:18"},{"errorSelector":"ee6c0e14","id":3808,"name":"Claim__VotingNotYetStartedError","nameLocation":"374:31:18","nodeType":"ErrorDefinition","parameters":{"id":3807,"nodeType":"ParameterList","parameters":[],"src":"405:2:18"},"src":"368:40:18"},{"errorSelector":"ed43432a","id":3810,"name":"Claim__DecisionNotYetTakenError","nameLocation":"419:31:18","nodeType":"ErrorDefinition","parameters":{"id":3809,"nodeType":"ParameterList","parameters":[],"src":"450:2:18"},"src":"413:40:18"},{"errorSelector":"0c7ef039","id":3812,"name":"Claim__PausedOperationFailedError","nameLocation":"464:33:18","nodeType":"ErrorDefinition","parameters":{"id":3811,"nodeType":"ParameterList","parameters":[],"src":"497:2:18"},"src":"458:42:18"},{"errorSelector":"449a56bc","id":3814,"name":"Claim__VotingDecisionNotYetFinalizedError","nameLocation":"511:41:18","nodeType":"ErrorDefinition","parameters":{"id":3813,"nodeType":"ParameterList","parameters":[],"src":"552:2:18"},"src":"505:50:18"},{"errorSelector":"4cf8bf00","id":3816,"name":"Claim__DecisionNoLongerCanBeChallengedError","nameLocation":"566:43:18","nodeType":"ErrorDefinition","parameters":{"id":3815,"nodeType":"ParameterList","parameters":[],"src":"609:2:18"},"src":"560:52:18"},{"anonymous":false,"eventSelector":"bb70aa717b6d2e0a9b9a1b647818482838fd0133dbdde6f6ff62d0dea579306d","id":3824,"name":"NewClaimCreated","nameLocation":"624:15:18","nodeType":"EventDefinition","parameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3818,"indexed":true,"mutability":"mutable","name":"userAddress","nameLocation":"656:11:18","nodeType":"VariableDeclaration","scope":3824,"src":"640:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3817,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3820,"indexed":true,"mutability":"mutable","name":"claimID","nameLocation":"685:7:18","nodeType":"VariableDeclaration","scope":3824,"src":"669:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3819,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3822,"indexed":true,"mutability":"mutable","name":"proof","nameLocation":"709:5:18","nodeType":"VariableDeclaration","scope":3824,"src":"694:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3821,"name":"string","nodeType":"ElementaryTypeName","src":"694:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"639:76:18"},"src":"618:98:18"},{"functionSelector":"55e5b444","id":3845,"implemented":false,"kind":"function","modifiers":[],"name":"createClaim","nameLocation":"731:11:18","nodeType":"FunctionDefinition","parameters":{"id":3841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3826,"mutability":"mutable","name":"categoryID","nameLocation":"760:10:18","nodeType":"VariableDeclaration","scope":3845,"src":"752:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3825,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3828,"mutability":"mutable","name":"subCategoryID","nameLocation":"788:13:18","nodeType":"VariableDeclaration","scope":3845,"src":"780:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"780:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3830,"mutability":"mutable","name":"proof","nameLocation":"826:5:18","nodeType":"VariableDeclaration","scope":3845,"src":"812:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3829,"name":"string","nodeType":"ElementaryTypeName","src":"812:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3832,"mutability":"mutable","name":"requestedClaimAmount","nameLocation":"850:20:18","nodeType":"VariableDeclaration","scope":3845,"src":"842:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3831,"name":"uint256","nodeType":"ElementaryTypeName","src":"842:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3834,"mutability":"mutable","name":"deadline","nameLocation":"888:8:18","nodeType":"VariableDeclaration","scope":3845,"src":"880:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint256","nodeType":"ElementaryTypeName","src":"880:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3836,"mutability":"mutable","name":"v","nameLocation":"913:1:18","nodeType":"VariableDeclaration","scope":3845,"src":"907:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3835,"name":"uint8","nodeType":"ElementaryTypeName","src":"907:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3838,"mutability":"mutable","name":"r","nameLocation":"933:1:18","nodeType":"VariableDeclaration","scope":3845,"src":"925:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3837,"name":"bytes32","nodeType":"ElementaryTypeName","src":"925:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3840,"mutability":"mutable","name":"s","nameLocation":"953:1:18","nodeType":"VariableDeclaration","scope":3845,"src":"945:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3839,"name":"bytes32","nodeType":"ElementaryTypeName","src":"945:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"742:218:18"},"returnParameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3845,"src":"978:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3842,"name":"bool","nodeType":"ElementaryTypeName","src":"978:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"977:6:18"},"scope":3910,"src":"722:262:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c9d27afe","id":3854,"implemented":false,"kind":"function","modifiers":[],"name":"vote","nameLocation":"1000:4:18","nodeType":"FunctionDefinition","parameters":{"id":3850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"claimID","nameLocation":"1022:7:18","nodeType":"VariableDeclaration","scope":3854,"src":"1014:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3846,"name":"uint256","nodeType":"ElementaryTypeName","src":"1014:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3849,"mutability":"mutable","name":"support","nameLocation":"1045:7:18","nodeType":"VariableDeclaration","scope":3854,"src":"1040:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3848,"name":"bool","nodeType":"ElementaryTypeName","src":"1040:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1004:54:18"},"returnParameters":{"id":3853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3854,"src":"1076:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3851,"name":"bool","nodeType":"ElementaryTypeName","src":"1076:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1075:6:18"},"scope":3910,"src":"991:91:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d0c36092","id":3861,"implemented":false,"kind":"function","modifiers":[],"name":"claimDecision","nameLocation":"1097:13:18","nodeType":"FunctionDefinition","parameters":{"id":3857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3856,"mutability":"mutable","name":"claimID","nameLocation":"1128:7:18","nodeType":"VariableDeclaration","scope":3861,"src":"1120:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1120:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1110:31:18"},"returnParameters":{"id":3860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3861,"src":"1159:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3858,"name":"bool","nodeType":"ElementaryTypeName","src":"1159:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1158:6:18"},"scope":3910,"src":"1088:77:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"602ce4c6","id":3874,"implemented":false,"kind":"function","modifiers":[],"name":"challengeDecision","nameLocation":"1180:17:18","nodeType":"FunctionDefinition","parameters":{"id":3872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3863,"mutability":"mutable","name":"claimID","nameLocation":"1215:7:18","nodeType":"VariableDeclaration","scope":3874,"src":"1207:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3862,"name":"uint256","nodeType":"ElementaryTypeName","src":"1207:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3865,"mutability":"mutable","name":"deadline","nameLocation":"1240:8:18","nodeType":"VariableDeclaration","scope":3874,"src":"1232:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3864,"name":"uint256","nodeType":"ElementaryTypeName","src":"1232:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3867,"mutability":"mutable","name":"v","nameLocation":"1265:1:18","nodeType":"VariableDeclaration","scope":3874,"src":"1259:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3866,"name":"uint8","nodeType":"ElementaryTypeName","src":"1259:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3869,"mutability":"mutable","name":"r","nameLocation":"1285:1:18","nodeType":"VariableDeclaration","scope":3874,"src":"1277:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3868,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1277:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3871,"mutability":"mutable","name":"s","nameLocation":"1305:1:18","nodeType":"VariableDeclaration","scope":3874,"src":"1297:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1297:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1197:115:18"},"returnParameters":{"id":3873,"nodeType":"ParameterList","parameters":[],"src":"1321:0:18"},"scope":3910,"src":"1171:151:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"20849b07","id":3885,"implemented":false,"kind":"function","modifiers":[],"name":"viewVoteReceipt","nameLocation":"1337:15:18","nodeType":"FunctionDefinition","parameters":{"id":3877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3876,"mutability":"mutable","name":"claimID","nameLocation":"1370:7:18","nodeType":"VariableDeclaration","scope":3885,"src":"1362:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1362:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1352:31:18"},"returnParameters":{"id":3884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3885,"src":"1406:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3878,"name":"bool","nodeType":"ElementaryTypeName","src":"1406:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3885,"src":"1412:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3880,"name":"bool","nodeType":"ElementaryTypeName","src":"1412:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3885,"src":"1418:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3882,"name":"uint256","nodeType":"ElementaryTypeName","src":"1418:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1405:21:18"},"scope":3910,"src":"1328:99:18","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ef0c997a","id":3890,"implemented":false,"kind":"function","modifiers":[],"name":"getClaimID","nameLocation":"1442:10:18","nodeType":"FunctionDefinition","parameters":{"id":3886,"nodeType":"ParameterList","parameters":[],"src":"1452:2:18"},"returnParameters":{"id":3889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3890,"src":"1477:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1477:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1476:9:18"},"scope":3910,"src":"1433:53:18","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"248a0634","id":3909,"implemented":false,"kind":"function","modifiers":[],"name":"getVotingInfo","nameLocation":"1501:13:18","nodeType":"FunctionDefinition","parameters":{"id":3893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"mutability":"mutable","name":"claimID","nameLocation":"1532:7:18","nodeType":"VariableDeclaration","scope":3909,"src":"1524:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3891,"name":"uint256","nodeType":"ElementaryTypeName","src":"1524:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1514:31:18"},"returnParameters":{"id":3908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"1577:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3894,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"1586:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3896,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"1595:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3898,"name":"uint256","nodeType":"ElementaryTypeName","src":"1595:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"1604:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1604:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"1613:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3902,"name":"uint256","nodeType":"ElementaryTypeName","src":"1613:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"1622:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3904,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"1631:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3906,"name":"uint256","nodeType":"ElementaryTypeName","src":"1631:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1567:77:18"},"scope":3910,"src":"1492:153:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3911,"src":"148:1499:18","usedErrors":[3800,3802,3804,3806,3808,3810,3812,3814,3816]}],"src":"37:1613:18"},"id":18},"contracts/interfaces/IGlobalPauseOperation.sol":{"ast":{"absolutePath":"contracts/interfaces/IGlobalPauseOperation.sol","exportedSymbols":{"IGlobalPauseOperation":[3940]},"id":3941,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3912,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IGlobalPauseOperation","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3940,"linearizedBaseContracts":[3940],"name":"IGlobalPauseOperation","nameLocation":"67:21:19","nodeType":"ContractDefinition","nodes":[{"errorSelector":"4806cc9f","id":3914,"name":"GlobalPauseOps__ZeroAddressInputError","nameLocation":"102:37:19","nodeType":"ErrorDefinition","parameters":{"id":3913,"nodeType":"ParameterList","parameters":[],"src":"139:2:19"},"src":"96:46:19"},{"errorSelector":"0dfbbf38","id":3916,"name":"GlobalPauseOperation__ImmutableChangesError","nameLocation":"154:43:19","nodeType":"ErrorDefinition","parameters":{"id":3915,"nodeType":"ParameterList","parameters":[],"src":"197:2:19"},"src":"148:52:19"},{"anonymous":false,"eventSelector":"ced598d6b2f70b0acf8f61670ecfc67f6a33a9615186db06b6f697da4236590c","id":3920,"name":"PausedOperation","nameLocation":"212:15:19","nodeType":"EventDefinition","parameters":{"id":3919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3918,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"236:7:19","nodeType":"VariableDeclaration","scope":3920,"src":"228:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3917,"name":"address","nodeType":"ElementaryTypeName","src":"228:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"227:17:19"},"src":"206:39:19"},{"anonymous":false,"eventSelector":"800fbe4f45115bec6578674f3cdb3bc672a34ec27719b3259f8ee19044904bfc","id":3924,"name":"UnpausedOperation","nameLocation":"257:17:19","nodeType":"EventDefinition","parameters":{"id":3923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3922,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"283:7:19","nodeType":"VariableDeclaration","scope":3924,"src":"275:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3921,"name":"address","nodeType":"ElementaryTypeName","src":"275:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"274:17:19"},"src":"251:41:19"},{"functionSelector":"c9d07020","id":3929,"implemented":false,"kind":"function","modifiers":[],"name":"pauseOperation","nameLocation":"307:14:19","nodeType":"FunctionDefinition","parameters":{"id":3925,"nodeType":"ParameterList","parameters":[],"src":"321:2:19"},"returnParameters":{"id":3928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3929,"src":"341:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3926,"name":"bool","nodeType":"ElementaryTypeName","src":"341:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"340:6:19"},"scope":3940,"src":"298:49:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"39511e99","id":3934,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseOperation","nameLocation":"362:16:19","nodeType":"FunctionDefinition","parameters":{"id":3930,"nodeType":"ParameterList","parameters":[],"src":"378:2:19"},"returnParameters":{"id":3933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3934,"src":"398:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3931,"name":"bool","nodeType":"ElementaryTypeName","src":"398:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"397:6:19"},"scope":3940,"src":"353:51:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b187bd26","id":3939,"implemented":false,"kind":"function","modifiers":[],"name":"isPaused","nameLocation":"423:8:19","nodeType":"FunctionDefinition","parameters":{"id":3935,"nodeType":"ParameterList","parameters":[],"src":"431:2:19"},"returnParameters":{"id":3938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3939,"src":"456:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3936,"name":"bool","nodeType":"ElementaryTypeName","src":"456:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"455:6:19"},"scope":3940,"src":"414:48:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3941,"src":"57:407:19","usedErrors":[3914,3916]}],"src":"32:432:19"},"id":19}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":1719,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"51","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"_roles","offset":0,"slot":"101","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol":{"IAccessControlUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":\"IAccessControlUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":721,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":779,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c25593687f1c52b5df7540c6c02680680cab80cdfffd44f43c0b5726c556f98464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 SSTORE SWAP4 PUSH9 0x7F1C52B5DF7540C6C0 0x26 DUP1 PUSH9 0xCAB80CDFFFD44F43C SIGNEXTEND JUMPI 0x26 0xC5 JUMP 0xF9 DUP5 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"740:3847:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ef4ddf34c8117976bb7512e118a70cfae645d22e067c884e07b9f28a5f13f4bd64736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4D 0xDF CALLVALUE 0xC8 GT PUSH26 0x76BB7512E118A70CFAE645D22E067C884E07B9F28A5F13F4BD64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"194:8087:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d411ff3ff8a932ddf1702f7c8afec6c5767ac01ad740838c2a8364077866f9e364736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 GT SELFDESTRUCT EXTCODEHASH 0xF8 0xA9 ORIGIN 0xDD CALL PUSH17 0x2F7C8AFEC6C5767AC01AD740838C2A8364 SMOD PUSH25 0x66F9E364736F6C634300081000330000000000000000000000 ","sourceMap":"199:2098:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1719,"contract":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"IERC165Upgradeable":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066f0cc9ea6df849ca2bbd31fcb6f2d12f06ccb50805015ff7ad82d2286763cb664736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xF0CC9EA6DF849C LOG2 0xBB 0xD3 0x1F 0xCB PUSH16 0x2D12F06CCB50805015FF7AD82D228676 EXTCODECOPY 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"202:12313:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BaseUpgradeablePausable.sol":{"BaseUpgradeablePausable":{"abi":[{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13BD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:15:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":1247,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":1992,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_2684":{"entryPoint":850,"id":2684,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":1903,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":2467,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":2073,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":2575,"id":740,"parameterSlots":0,"returnSlots":0},"@_checkRole_107":{"entryPoint":1424,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":2334,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":1444,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_1486":{"entryPoint":1669,"id":1486,"parameterSlots":0,"returnSlots":1},"@_revokeRole_329":{"entryPoint":1677,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":2242,"id":266,"parameterSlots":2,"returnSlots":0},"@getAdminRole_2719":{"entryPoint":2162,"id":2719,"parameterSlots":0,"returnSlots":1},"@getPauserRole_2727":{"entryPoint":2202,"id":2727,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":631,"id":161,"parameterSlots":1,"returnSlots":1},"@grantRole_181":{"entryPoint":663,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":1140,"id":94,"parameterSlots":2,"returnSlots":1},"@isAdmin_2698":{"entryPoint":1254,"id":2698,"parameterSlots":0,"returnSlots":1},"@paused_646":{"entryPoint":827,"id":646,"parameterSlots":0,"returnSlots":1},"@renounceRole_224":{"entryPoint":696,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":1285,"id":201,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1714":{"entryPoint":1318,"id":1714,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":509,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_1655":{"entryPoint":2709,"id":1655,"parameterSlots":2,"returnSlots":1},"@toHexString_1675":{"entryPoint":2664,"id":1675,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3687,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":3506,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":3353,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3527,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":3708,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3374,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3431,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3572,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":4466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":4932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":4059,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4178,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4356,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":3913,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4391,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3446,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4967,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4094,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3948,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":4213,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3817,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4126,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4704,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":4614,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3646,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3419,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":3473,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":3286,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3614,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4557,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4224,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":4850,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4567,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4803,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4756,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3281,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4449,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":4891,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":3980,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":4137,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":4315,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":3834,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3664,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":3483,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":3330,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12337:20","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:20","statements":[{"nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:20"},"nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:20"},"nodeType":"YulFunctionCall","src":"187:12:20"},"nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:20"},"nodeType":"YulFunctionCall","src":"310:12:20"},"nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nodeType":"YulBlock","src":"378:105:20","statements":[{"nodeType":"YulAssignment","src":"388:89:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:20","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:20"},"nodeType":"YulFunctionCall","src":"399:78:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:20"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:20","type":""}],"src":"334:149:20"},{"body":{"nodeType":"YulBlock","src":"531:78:20","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:20"},"nodeType":"YulFunctionCall","src":"589:12:20"},"nodeType":"YulExpressionStatement","src":"589:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:20"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:20"},"nodeType":"YulFunctionCall","src":"561:23:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:20"},"nodeType":"YulFunctionCall","src":"551:34:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:20"},"nodeType":"YulFunctionCall","src":"544:42:20"},"nodeType":"YulIf","src":"541:62:20"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:20","type":""}],"src":"489:120:20"},{"body":{"nodeType":"YulBlock","src":"666:86:20","statements":[{"nodeType":"YulAssignment","src":"676:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:20"},"nodeType":"YulFunctionCall","src":"685:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:20"},"nodeType":"YulFunctionCall","src":"714:32:20"},"nodeType":"YulExpressionStatement","src":"714:32:20"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:20","type":""}],"src":"615:137:20"},{"body":{"nodeType":"YulBlock","src":"823:262:20","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:20"},"nodeType":"YulFunctionCall","src":"871:79:20"},"nodeType":"YulExpressionStatement","src":"871:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:20"},"nodeType":"YulFunctionCall","src":"840:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:20"},"nodeType":"YulFunctionCall","src":"836:32:20"},"nodeType":"YulIf","src":"833:119:20"},{"nodeType":"YulBlock","src":"962:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:20"},"nodeType":"YulFunctionCall","src":"1036:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:20"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:20"},"nodeType":"YulFunctionCall","src":"1016:52:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:20","type":""}],"src":"758:327:20"},{"body":{"nodeType":"YulBlock","src":"1133:48:20","statements":[{"nodeType":"YulAssignment","src":"1143:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:20"},"nodeType":"YulFunctionCall","src":"1161:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:20"},"nodeType":"YulFunctionCall","src":"1154:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:20","type":""}],"src":"1091:90:20"},{"body":{"nodeType":"YulBlock","src":"1246:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:20"},"nodeType":"YulFunctionCall","src":"1268:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:20"},"nodeType":"YulFunctionCall","src":"1256:34:20"},"nodeType":"YulExpressionStatement","src":"1256:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:20","type":""}],"src":"1187:109:20"},{"body":{"nodeType":"YulBlock","src":"1394:118:20","statements":[{"nodeType":"YulAssignment","src":"1404:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:20"},"nodeType":"YulFunctionCall","src":"1412:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:20"},"nodeType":"YulFunctionCall","src":"1487:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:20"},"nodeType":"YulFunctionCall","src":"1440:65:20"},"nodeType":"YulExpressionStatement","src":"1440:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:20","type":""}],"src":"1302:210:20"},{"body":{"nodeType":"YulBlock","src":"1563:32:20","statements":[{"nodeType":"YulAssignment","src":"1573:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:20"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:20","type":""}],"src":"1518:77:20"},{"body":{"nodeType":"YulBlock","src":"1644:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:20"},"nodeType":"YulFunctionCall","src":"1703:12:20"},"nodeType":"YulExpressionStatement","src":"1703:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1674:17:20"},"nodeType":"YulFunctionCall","src":"1674:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:20"},"nodeType":"YulFunctionCall","src":"1664:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:20"},"nodeType":"YulFunctionCall","src":"1657:43:20"},"nodeType":"YulIf","src":"1654:63:20"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:20","type":""}],"src":"1601:122:20"},{"body":{"nodeType":"YulBlock","src":"1781:87:20","statements":[{"nodeType":"YulAssignment","src":"1791:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:20"},"nodeType":"YulFunctionCall","src":"1800:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:20"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1829:26:20"},"nodeType":"YulFunctionCall","src":"1829:33:20"},"nodeType":"YulExpressionStatement","src":"1829:33:20"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:20","type":""}],"src":"1729:139:20"},{"body":{"nodeType":"YulBlock","src":"1940:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:20"},"nodeType":"YulFunctionCall","src":"1988:79:20"},"nodeType":"YulExpressionStatement","src":"1988:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:20"},"nodeType":"YulFunctionCall","src":"1957:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:20"},"nodeType":"YulFunctionCall","src":"1953:32:20"},"nodeType":"YulIf","src":"1950:119:20"},{"nodeType":"YulBlock","src":"2079:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:20"},"nodeType":"YulFunctionCall","src":"2154:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2133:20:20"},"nodeType":"YulFunctionCall","src":"2133:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:20","type":""}],"src":"1874:329:20"},{"body":{"nodeType":"YulBlock","src":"2274:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2291:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2314:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2296:17:20"},"nodeType":"YulFunctionCall","src":"2296:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2284:6:20"},"nodeType":"YulFunctionCall","src":"2284:37:20"},"nodeType":"YulExpressionStatement","src":"2284:37:20"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2262:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2269:3:20","type":""}],"src":"2209:118:20"},{"body":{"nodeType":"YulBlock","src":"2431:124:20","statements":[{"nodeType":"YulAssignment","src":"2441:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2453:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2464:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2449:3:20"},"nodeType":"YulFunctionCall","src":"2449:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2441:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2521:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2534:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2545:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:20"},"nodeType":"YulFunctionCall","src":"2530:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"2477:43:20"},"nodeType":"YulFunctionCall","src":"2477:71:20"},"nodeType":"YulExpressionStatement","src":"2477:71:20"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2403:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2415:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2426:4:20","type":""}],"src":"2333:222:20"},{"body":{"nodeType":"YulBlock","src":"2606:81:20","statements":[{"nodeType":"YulAssignment","src":"2616:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2631:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"2638:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2627:3:20"},"nodeType":"YulFunctionCall","src":"2627:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2616:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2588:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2598:7:20","type":""}],"src":"2561:126:20"},{"body":{"nodeType":"YulBlock","src":"2738:51:20","statements":[{"nodeType":"YulAssignment","src":"2748:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2777:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2759:17:20"},"nodeType":"YulFunctionCall","src":"2759:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2748:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2720:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2730:7:20","type":""}],"src":"2693:96:20"},{"body":{"nodeType":"YulBlock","src":"2838:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"2895:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2904:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2907:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2897:6:20"},"nodeType":"YulFunctionCall","src":"2897:12:20"},"nodeType":"YulExpressionStatement","src":"2897:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2861:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2886:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2868:17:20"},"nodeType":"YulFunctionCall","src":"2868:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2858:2:20"},"nodeType":"YulFunctionCall","src":"2858:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2851:6:20"},"nodeType":"YulFunctionCall","src":"2851:43:20"},"nodeType":"YulIf","src":"2848:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2831:5:20","type":""}],"src":"2795:122:20"},{"body":{"nodeType":"YulBlock","src":"2975:87:20","statements":[{"nodeType":"YulAssignment","src":"2985:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3007:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2994:12:20"},"nodeType":"YulFunctionCall","src":"2994:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2985:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3050:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3023:26:20"},"nodeType":"YulFunctionCall","src":"3023:33:20"},"nodeType":"YulExpressionStatement","src":"3023:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2953:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"2961:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2969:5:20","type":""}],"src":"2923:139:20"},{"body":{"nodeType":"YulBlock","src":"3151:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"3197:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3199:77:20"},"nodeType":"YulFunctionCall","src":"3199:79:20"},"nodeType":"YulExpressionStatement","src":"3199:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3172:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3181:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3168:3:20"},"nodeType":"YulFunctionCall","src":"3168:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"3193:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3164:3:20"},"nodeType":"YulFunctionCall","src":"3164:32:20"},"nodeType":"YulIf","src":"3161:119:20"},{"nodeType":"YulBlock","src":"3290:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3305:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3319:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3309:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3334:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3369:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3380:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3365:3:20"},"nodeType":"YulFunctionCall","src":"3365:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3389:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3344:20:20"},"nodeType":"YulFunctionCall","src":"3344:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3334:6:20"}]}]},{"nodeType":"YulBlock","src":"3417:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3432:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3446:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3436:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3462:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3497:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3508:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3493:3:20"},"nodeType":"YulFunctionCall","src":"3493:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3517:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3472:20:20"},"nodeType":"YulFunctionCall","src":"3472:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3462:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3113:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3124:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3136:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3144:6:20","type":""}],"src":"3068:474:20"},{"body":{"nodeType":"YulBlock","src":"3614:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"3660:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3662:77:20"},"nodeType":"YulFunctionCall","src":"3662:79:20"},"nodeType":"YulExpressionStatement","src":"3662:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3635:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"3644:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3631:3:20"},"nodeType":"YulFunctionCall","src":"3631:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"3656:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3627:3:20"},"nodeType":"YulFunctionCall","src":"3627:32:20"},"nodeType":"YulIf","src":"3624:119:20"},{"nodeType":"YulBlock","src":"3753:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"3768:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"3782:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3772:6:20","type":""}]},{"nodeType":"YulAssignment","src":"3797:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3832:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"3843:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3828:3:20"},"nodeType":"YulFunctionCall","src":"3828:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3852:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3807:20:20"},"nodeType":"YulFunctionCall","src":"3807:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3797:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3584:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3595:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3607:6:20","type":""}],"src":"3548:329:20"},{"body":{"nodeType":"YulBlock","src":"3979:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3996:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"4001:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3989:6:20"},"nodeType":"YulFunctionCall","src":"3989:19:20"},"nodeType":"YulExpressionStatement","src":"3989:19:20"},{"nodeType":"YulAssignment","src":"4017:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4036:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"4041:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4032:3:20"},"nodeType":"YulFunctionCall","src":"4032:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4017:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3951:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"3956:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3967:11:20","type":""}],"src":"3883:169:20"},{"body":{"nodeType":"YulBlock","src":"4164:128:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4186:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4194:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:20"},"nodeType":"YulFunctionCall","src":"4182:14:20"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"4198:34:20","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4175:6:20"},"nodeType":"YulFunctionCall","src":"4175:58:20"},"nodeType":"YulExpressionStatement","src":"4175:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4254:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"4262:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4250:3:20"},"nodeType":"YulFunctionCall","src":"4250:15:20"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"4267:17:20","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4243:6:20"},"nodeType":"YulFunctionCall","src":"4243:42:20"},"nodeType":"YulExpressionStatement","src":"4243:42:20"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"4156:6:20","type":""}],"src":"4058:234:20"},{"body":{"nodeType":"YulBlock","src":"4444:220:20","statements":[{"nodeType":"YulAssignment","src":"4454:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4520:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"4525:2:20","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4461:58:20"},"nodeType":"YulFunctionCall","src":"4461:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4454:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4626:3:20"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"4537:88:20"},"nodeType":"YulFunctionCall","src":"4537:93:20"},"nodeType":"YulExpressionStatement","src":"4537:93:20"},{"nodeType":"YulAssignment","src":"4639:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4650:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"4655:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4646:3:20"},"nodeType":"YulFunctionCall","src":"4646:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4639:3:20"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4432:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4440:3:20","type":""}],"src":"4298:366:20"},{"body":{"nodeType":"YulBlock","src":"4841:248:20","statements":[{"nodeType":"YulAssignment","src":"4851:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4863:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4874:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4859:3:20"},"nodeType":"YulFunctionCall","src":"4859:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4851:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4909:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:20"},"nodeType":"YulFunctionCall","src":"4894:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4917:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4923:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4913:3:20"},"nodeType":"YulFunctionCall","src":"4913:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4887:6:20"},"nodeType":"YulFunctionCall","src":"4887:47:20"},"nodeType":"YulExpressionStatement","src":"4887:47:20"},{"nodeType":"YulAssignment","src":"4943:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5077:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4951:124:20"},"nodeType":"YulFunctionCall","src":"4951:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4943:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4821:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4836:4:20","type":""}],"src":"4670:419:20"},{"body":{"nodeType":"YulBlock","src":"5201:124:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5223:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"5231:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:20"},"nodeType":"YulFunctionCall","src":"5219:14:20"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"5235:34:20","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:20"},"nodeType":"YulFunctionCall","src":"5212:58:20"},"nodeType":"YulExpressionStatement","src":"5212:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5291:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"5299:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5287:3:20"},"nodeType":"YulFunctionCall","src":"5287:15:20"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"5304:13:20","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5280:6:20"},"nodeType":"YulFunctionCall","src":"5280:38:20"},"nodeType":"YulExpressionStatement","src":"5280:38:20"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5193:6:20","type":""}],"src":"5095:230:20"},{"body":{"nodeType":"YulBlock","src":"5477:220:20","statements":[{"nodeType":"YulAssignment","src":"5487:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5553:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"5558:2:20","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5494:58:20"},"nodeType":"YulFunctionCall","src":"5494:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5487:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5659:3:20"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"5570:88:20"},"nodeType":"YulFunctionCall","src":"5570:93:20"},"nodeType":"YulExpressionStatement","src":"5570:93:20"},{"nodeType":"YulAssignment","src":"5672:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5683:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"5688:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5679:3:20"},"nodeType":"YulFunctionCall","src":"5679:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5672:3:20"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5465:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5473:3:20","type":""}],"src":"5331:366:20"},{"body":{"nodeType":"YulBlock","src":"5874:248:20","statements":[{"nodeType":"YulAssignment","src":"5884:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5896:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"5907:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5892:3:20"},"nodeType":"YulFunctionCall","src":"5892:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5884:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5931:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5927:3:20"},"nodeType":"YulFunctionCall","src":"5927:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5950:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5956:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5946:3:20"},"nodeType":"YulFunctionCall","src":"5946:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5920:6:20"},"nodeType":"YulFunctionCall","src":"5920:47:20"},"nodeType":"YulExpressionStatement","src":"5920:47:20"},{"nodeType":"YulAssignment","src":"5976:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6110:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5984:124:20"},"nodeType":"YulFunctionCall","src":"5984:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5976:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5854:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5869:4:20","type":""}],"src":"5703:419:20"},{"body":{"nodeType":"YulBlock","src":"6242:34:20","statements":[{"nodeType":"YulAssignment","src":"6252:18:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"6267:3:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6252:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6214:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"6219:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6230:11:20","type":""}],"src":"6128:148:20"},{"body":{"nodeType":"YulBlock","src":"6388:67:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6410:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"6418:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6406:3:20"},"nodeType":"YulFunctionCall","src":"6406:14:20"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"6422:25:20","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6399:6:20"},"nodeType":"YulFunctionCall","src":"6399:49:20"},"nodeType":"YulExpressionStatement","src":"6399:49:20"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6380:6:20","type":""}],"src":"6282:173:20"},{"body":{"nodeType":"YulBlock","src":"6625:238:20","statements":[{"nodeType":"YulAssignment","src":"6635:92:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6719:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"6724:2:20","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6642:76:20"},"nodeType":"YulFunctionCall","src":"6642:85:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6635:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6825:3:20"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"6736:88:20"},"nodeType":"YulFunctionCall","src":"6736:93:20"},"nodeType":"YulExpressionStatement","src":"6736:93:20"},{"nodeType":"YulAssignment","src":"6838:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6849:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"6854:2:20","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6845:3:20"},"nodeType":"YulFunctionCall","src":"6845:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6838:3:20"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6613:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6621:3:20","type":""}],"src":"6461:402:20"},{"body":{"nodeType":"YulBlock","src":"6928:40:20","statements":[{"nodeType":"YulAssignment","src":"6939:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6955:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6949:5:20"},"nodeType":"YulFunctionCall","src":"6949:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6939:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6911:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6921:6:20","type":""}],"src":"6869:99:20"},{"body":{"nodeType":"YulBlock","src":"7036:184:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7046:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"7055:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7050:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"7115:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7140:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"7145:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7136:3:20"},"nodeType":"YulFunctionCall","src":"7136:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7159:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"7164:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7155:3:20"},"nodeType":"YulFunctionCall","src":"7155:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7149:5:20"},"nodeType":"YulFunctionCall","src":"7149:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7129:6:20"},"nodeType":"YulFunctionCall","src":"7129:39:20"},"nodeType":"YulExpressionStatement","src":"7129:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7076:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"7079:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7073:2:20"},"nodeType":"YulFunctionCall","src":"7073:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7087:19:20","statements":[{"nodeType":"YulAssignment","src":"7089:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7098:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"7101:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7094:3:20"},"nodeType":"YulFunctionCall","src":"7094:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7089:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"7069:3:20","statements":[]},"src":"7065:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7198:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7203:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7194:3:20"},"nodeType":"YulFunctionCall","src":"7194:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"7212:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7187:6:20"},"nodeType":"YulFunctionCall","src":"7187:27:20"},"nodeType":"YulExpressionStatement","src":"7187:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7018:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7023:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"7028:6:20","type":""}],"src":"6974:246:20"},{"body":{"nodeType":"YulBlock","src":"7336:280:20","statements":[{"nodeType":"YulVariableDeclaration","src":"7346:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7393:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7360:32:20"},"nodeType":"YulFunctionCall","src":"7360:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7350:6:20","type":""}]},{"nodeType":"YulAssignment","src":"7408:96:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7492:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7497:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7415:76:20"},"nodeType":"YulFunctionCall","src":"7415:89:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7408:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7552:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"7559:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7548:3:20"},"nodeType":"YulFunctionCall","src":"7548:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"7566:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7571:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7513:34:20"},"nodeType":"YulFunctionCall","src":"7513:65:20"},"nodeType":"YulExpressionStatement","src":"7513:65:20"},{"nodeType":"YulAssignment","src":"7587:23:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7598:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7603:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7594:3:20"},"nodeType":"YulFunctionCall","src":"7594:16:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7587:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7317:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7324:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7332:3:20","type":""}],"src":"7226:390:20"},{"body":{"nodeType":"YulBlock","src":"7728:61:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7750:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7758:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7746:3:20"},"nodeType":"YulFunctionCall","src":"7746:14:20"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"7762:19:20","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7739:6:20"},"nodeType":"YulFunctionCall","src":"7739:43:20"},"nodeType":"YulExpressionStatement","src":"7739:43:20"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7720:6:20","type":""}],"src":"7622:167:20"},{"body":{"nodeType":"YulBlock","src":"7959:238:20","statements":[{"nodeType":"YulAssignment","src":"7969:92:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8053:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:20","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7976:76:20"},"nodeType":"YulFunctionCall","src":"7976:85:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7969:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8159:3:20"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"8070:88:20"},"nodeType":"YulFunctionCall","src":"8070:93:20"},"nodeType":"YulExpressionStatement","src":"8070:93:20"},{"nodeType":"YulAssignment","src":"8172:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8183:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"8188:2:20","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8179:3:20"},"nodeType":"YulFunctionCall","src":"8179:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8172:3:20"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7947:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7955:3:20","type":""}],"src":"7795:402:20"},{"body":{"nodeType":"YulBlock","src":"8589:581:20","statements":[{"nodeType":"YulAssignment","src":"8600:155:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8751:3:20"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8607:142:20"},"nodeType":"YulFunctionCall","src":"8607:148:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8600:3:20"}]},{"nodeType":"YulAssignment","src":"8765:102:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8854:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"8863:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8772:81:20"},"nodeType":"YulFunctionCall","src":"8772:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8765:3:20"}]},{"nodeType":"YulAssignment","src":"8877:155:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9028:3:20"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8884:142:20"},"nodeType":"YulFunctionCall","src":"8884:148:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8877:3:20"}]},{"nodeType":"YulAssignment","src":"9042:102:20","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9131:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"9140:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9049:81:20"},"nodeType":"YulFunctionCall","src":"9049:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9042:3:20"}]},{"nodeType":"YulAssignment","src":"9154:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"9161:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9154:3:20"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8560:3:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8566:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8574:6:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8585:3:20","type":""}],"src":"8203:967:20"},{"body":{"nodeType":"YulBlock","src":"9224:54:20","statements":[{"nodeType":"YulAssignment","src":"9234:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9252:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"9259:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9248:3:20"},"nodeType":"YulFunctionCall","src":"9248:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9268:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9264:3:20"},"nodeType":"YulFunctionCall","src":"9264:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9244:3:20"},"nodeType":"YulFunctionCall","src":"9244:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9234:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9207:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"9217:6:20","type":""}],"src":"9176:102:20"},{"body":{"nodeType":"YulBlock","src":"9376:285:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9386:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9433:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9400:32:20"},"nodeType":"YulFunctionCall","src":"9400:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9390:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9448:78:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9514:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"9519:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9455:58:20"},"nodeType":"YulFunctionCall","src":"9455:71:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9448:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9574:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"9581:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9570:3:20"},"nodeType":"YulFunctionCall","src":"9570:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"9588:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"9593:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9535:34:20"},"nodeType":"YulFunctionCall","src":"9535:65:20"},"nodeType":"YulExpressionStatement","src":"9535:65:20"},{"nodeType":"YulAssignment","src":"9609:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9620:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9647:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9625:21:20"},"nodeType":"YulFunctionCall","src":"9625:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9616:3:20"},"nodeType":"YulFunctionCall","src":"9616:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9609:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9357:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9364:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9372:3:20","type":""}],"src":"9284:377:20"},{"body":{"nodeType":"YulBlock","src":"9785:195:20","statements":[{"nodeType":"YulAssignment","src":"9795:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9807:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"9818:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:20"},"nodeType":"YulFunctionCall","src":"9803:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9795:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9842:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"9853:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9838:3:20"},"nodeType":"YulFunctionCall","src":"9838:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9861:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"9867:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9857:3:20"},"nodeType":"YulFunctionCall","src":"9857:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9831:6:20"},"nodeType":"YulFunctionCall","src":"9831:47:20"},"nodeType":"YulExpressionStatement","src":"9831:47:20"},{"nodeType":"YulAssignment","src":"9887:86:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9959:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"9968:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9895:63:20"},"nodeType":"YulFunctionCall","src":"9895:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9887:4:20"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9757:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9769:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9780:4:20","type":""}],"src":"9667:313:20"},{"body":{"nodeType":"YulBlock","src":"10031:32:20","statements":[{"nodeType":"YulAssignment","src":"10041:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"10052:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10041:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10013:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10023:7:20","type":""}],"src":"9986:77:20"},{"body":{"nodeType":"YulBlock","src":"10097:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10114:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10117:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10107:6:20"},"nodeType":"YulFunctionCall","src":"10107:88:20"},"nodeType":"YulExpressionStatement","src":"10107:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10211:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10214:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10204:6:20"},"nodeType":"YulFunctionCall","src":"10204:15:20"},"nodeType":"YulExpressionStatement","src":"10204:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10235:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10238:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10228:6:20"},"nodeType":"YulFunctionCall","src":"10228:15:20"},"nodeType":"YulExpressionStatement","src":"10228:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10069:180:20"},{"body":{"nodeType":"YulBlock","src":"10303:300:20","statements":[{"nodeType":"YulAssignment","src":"10313:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10336:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10318:17:20"},"nodeType":"YulFunctionCall","src":"10318:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10313:1:20"}]},{"nodeType":"YulAssignment","src":"10347:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10370:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10352:17:20"},"nodeType":"YulFunctionCall","src":"10352:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10347:1:20"}]},{"body":{"nodeType":"YulBlock","src":"10545:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10547:16:20"},"nodeType":"YulFunctionCall","src":"10547:18:20"},"nodeType":"YulExpressionStatement","src":"10547:18:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10457:1:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10450:6:20"},"nodeType":"YulFunctionCall","src":"10450:9:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10443:6:20"},"nodeType":"YulFunctionCall","src":"10443:17:20"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10465:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10472:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"10540:1:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10468:3:20"},"nodeType":"YulFunctionCall","src":"10468:74:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10462:2:20"},"nodeType":"YulFunctionCall","src":"10462:81:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10439:3:20"},"nodeType":"YulFunctionCall","src":"10439:105:20"},"nodeType":"YulIf","src":"10436:131:20"},{"nodeType":"YulAssignment","src":"10577:20:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10592:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"10595:1:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10588:3:20"},"nodeType":"YulFunctionCall","src":"10588:9:20"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"10577:7:20"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10286:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"10289:1:20","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"10295:7:20","type":""}],"src":"10255:348:20"},{"body":{"nodeType":"YulBlock","src":"10653:147:20","statements":[{"nodeType":"YulAssignment","src":"10663:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10686:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10668:17:20"},"nodeType":"YulFunctionCall","src":"10668:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10663:1:20"}]},{"nodeType":"YulAssignment","src":"10697:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10720:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10702:17:20"},"nodeType":"YulFunctionCall","src":"10702:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10697:1:20"}]},{"nodeType":"YulAssignment","src":"10731:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10742:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"10745:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10738:3:20"},"nodeType":"YulFunctionCall","src":"10738:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"10731:3:20"}]},{"body":{"nodeType":"YulBlock","src":"10771:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10773:16:20"},"nodeType":"YulFunctionCall","src":"10773:18:20"},"nodeType":"YulExpressionStatement","src":"10773:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10763:1:20"},{"name":"sum","nodeType":"YulIdentifier","src":"10766:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10760:2:20"},"nodeType":"YulFunctionCall","src":"10760:10:20"},"nodeType":"YulIf","src":"10757:36:20"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10640:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"10643:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"10649:3:20","type":""}],"src":"10609:191:20"},{"body":{"nodeType":"YulBlock","src":"10834:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10851:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10854:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10844:6:20"},"nodeType":"YulFunctionCall","src":"10844:88:20"},"nodeType":"YulExpressionStatement","src":"10844:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10948:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10951:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10941:6:20"},"nodeType":"YulFunctionCall","src":"10941:15:20"},"nodeType":"YulExpressionStatement","src":"10941:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10972:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10975:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10965:6:20"},"nodeType":"YulFunctionCall","src":"10965:15:20"},"nodeType":"YulExpressionStatement","src":"10965:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10806:180:20"},{"body":{"nodeType":"YulBlock","src":"11020:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11037:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11040:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11030:6:20"},"nodeType":"YulFunctionCall","src":"11030:88:20"},"nodeType":"YulExpressionStatement","src":"11030:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11134:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11137:4:20","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11127:6:20"},"nodeType":"YulFunctionCall","src":"11127:15:20"},"nodeType":"YulExpressionStatement","src":"11127:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11158:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11161:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11151:6:20"},"nodeType":"YulFunctionCall","src":"11151:15:20"},"nodeType":"YulExpressionStatement","src":"11151:15:20"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"10992:180:20"},{"body":{"nodeType":"YulBlock","src":"11221:128:20","statements":[{"nodeType":"YulAssignment","src":"11231:33:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11258:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11240:17:20"},"nodeType":"YulFunctionCall","src":"11240:24:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11231:5:20"}]},{"body":{"nodeType":"YulBlock","src":"11292:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11294:16:20"},"nodeType":"YulFunctionCall","src":"11294:18:20"},"nodeType":"YulExpressionStatement","src":"11294:18:20"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11279:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"11286:4:20","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11276:2:20"},"nodeType":"YulFunctionCall","src":"11276:15:20"},"nodeType":"YulIf","src":"11273:41:20"},{"nodeType":"YulAssignment","src":"11323:20:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11334:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"11341:1:20","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11330:3:20"},"nodeType":"YulFunctionCall","src":"11330:13:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11323:3:20"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11207:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11217:3:20","type":""}],"src":"11178:171:20"},{"body":{"nodeType":"YulBlock","src":"11461:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11483:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"11491:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11479:3:20"},"nodeType":"YulFunctionCall","src":"11479:14:20"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"11495:34:20","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11472:6:20"},"nodeType":"YulFunctionCall","src":"11472:58:20"},"nodeType":"YulExpressionStatement","src":"11472:58:20"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11453:6:20","type":""}],"src":"11355:182:20"},{"body":{"nodeType":"YulBlock","src":"11689:220:20","statements":[{"nodeType":"YulAssignment","src":"11699:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11765:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11770:2:20","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11706:58:20"},"nodeType":"YulFunctionCall","src":"11706:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11699:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11871:3:20"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"11782:88:20"},"nodeType":"YulFunctionCall","src":"11782:93:20"},"nodeType":"YulExpressionStatement","src":"11782:93:20"},{"nodeType":"YulAssignment","src":"11884:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11895:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"11900:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11891:3:20"},"nodeType":"YulFunctionCall","src":"11891:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11884:3:20"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11677:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11685:3:20","type":""}],"src":"11543:366:20"},{"body":{"nodeType":"YulBlock","src":"12086:248:20","statements":[{"nodeType":"YulAssignment","src":"12096:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12108:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12119:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12104:3:20"},"nodeType":"YulFunctionCall","src":"12104:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12096:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12143:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"12154:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12139:3:20"},"nodeType":"YulFunctionCall","src":"12139:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12162:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"12168:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12158:3:20"},"nodeType":"YulFunctionCall","src":"12158:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12132:6:20"},"nodeType":"YulFunctionCall","src":"12132:47:20"},"nodeType":"YulExpressionStatement","src":"12132:47:20"},{"nodeType":"YulAssignment","src":"12188:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12322:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12196:124:20"},"nodeType":"YulFunctionCall","src":"12196:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12188:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12066:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12081:4:20","type":""}],"src":"11915:419:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061009e5760003560e01c80636e810b1a116100665780636e810b1a1461015957806391d1485414610175578063a217fddf146101a5578063b6db75a0146101c3578063d547741f146101e15761009e565b806301ffc9a7146100a3578063248a9ca3146100d35780632f2ff15d1461010357806336568abe1461011f5780635c975abb1461013b575b600080fd5b6100bd60048036038101906100b89190610d2e565b6101fd565b6040516100ca9190610d76565b60405180910390f35b6100ed60048036038101906100e89190610dc7565b610277565b6040516100fa9190610e03565b60405180910390f35b61011d60048036038101906101189190610e7c565b610297565b005b61013960048036038101906101349190610e7c565b6102b8565b005b61014361033b565b6040516101509190610d76565b60405180910390f35b610173600480360381019061016e9190610ebc565b610352565b005b61018f600480360381019061018a9190610e7c565b610474565b60405161019c9190610d76565b60405180910390f35b6101ad6104df565b6040516101ba9190610e03565b60405180910390f35b6101cb6104e6565b6040516101d89190610d76565b60405180910390f35b6101fb60048036038101906101f69190610e7c565b610505565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610270575061026f82610526565b5b9050919050565b600060976000838152602001908152602001600020600101549050919050565b6102a082610277565b6102a981610590565b6102b383836105a4565b505050565b6102c0610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461032d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032490610f6c565b60405180910390fd5b610337828261068d565b5050565b6000603360009054906101000a900460ff16905090565b600060019054906101000a900460ff166103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039890610ffe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610407576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61040f61076f565b6104176107c8565b61041f610819565b61043061042a610872565b826105a4565b61044161043b61089a565b826105a4565b61045961044c61089a565b610454610872565b6108c2565b610471610464610872565b61046c610872565b6108c2565b50565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006105006104f3610872565b6104fb610685565b610474565b905090565b61050e82610277565b61051781610590565b610521838361068d565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6105a18161059c610685565b61091e565b50565b6105ae8282610474565b6106815760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610626610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6106978282610474565b1561076b5760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610710610685565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600060019054906101000a900460ff166107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b590610ffe565b60405180910390fd5b6107c66109a3565b565b600060019054906101000a900460ff16610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e90610ffe565b60405180910390fd5b565b600060019054906101000a900460ff16610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90610ffe565b60405180910390fd5b610870610a0f565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b60006108cd83610277565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6109288282610474565b61099f5761093581610a68565b6109438360001c6020610a95565b604051602001610954929190611127565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099691906111ab565b60405180910390fd5b5050565b600060019054906101000a900460ff166109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990610ffe565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16610a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5590610ffe565b60405180910390fd5b600160c981905550565b6060610a8e8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610a95565b9050919050565b606060006002836002610aa89190611206565b610ab29190611260565b67ffffffffffffffff811115610acb57610aca611294565b5b6040519080825280601f01601f191660200182016040528015610afd5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b3557610b346112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610b9957610b986112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610bd99190611206565b610be39190611260565b90505b6001811115610c83577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610c2557610c246112c3565b5b1a60f81b828281518110610c3c57610c3b6112c3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610c7c906112f2565b9050610be6565b5060008414610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611367565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d0b81610cd6565b8114610d1657600080fd5b50565b600081359050610d2881610d02565b92915050565b600060208284031215610d4457610d43610cd1565b5b6000610d5284828501610d19565b91505092915050565b60008115159050919050565b610d7081610d5b565b82525050565b6000602082019050610d8b6000830184610d67565b92915050565b6000819050919050565b610da481610d91565b8114610daf57600080fd5b50565b600081359050610dc181610d9b565b92915050565b600060208284031215610ddd57610ddc610cd1565b5b6000610deb84828501610db2565b91505092915050565b610dfd81610d91565b82525050565b6000602082019050610e186000830184610df4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4982610e1e565b9050919050565b610e5981610e3e565b8114610e6457600080fd5b50565b600081359050610e7681610e50565b92915050565b60008060408385031215610e9357610e92610cd1565b5b6000610ea185828601610db2565b9250506020610eb285828601610e67565b9150509250929050565b600060208284031215610ed257610ed1610cd1565b5b6000610ee084828501610e67565b91505092915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000610f56602f83610ee9565b9150610f6182610efa565b604082019050919050565b60006020820190508181036000830152610f8581610f49565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610fe8602b83610ee9565b9150610ff382610f8c565b604082019050919050565b6000602082019050818103600083015261101781610fdb565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061105f60178361101e565b915061106a82611029565b601782019050919050565b600081519050919050565b60005b8381101561109e578082015181840152602081019050611083565b60008484015250505050565b60006110b582611075565b6110bf818561101e565b93506110cf818560208601611080565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061111160118361101e565b915061111c826110db565b601182019050919050565b600061113282611052565b915061113e82856110aa565b915061114982611104565b915061115582846110aa565b91508190509392505050565b6000601f19601f8301169050919050565b600061117d82611075565b6111878185610ee9565b9350611197818560208601611080565b6111a081611161565b840191505092915050565b600060208201905081810360008301526111c58184611172565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611211826111cd565b915061121c836111cd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611255576112546111d7565b5b828202905092915050565b600061126b826111cd565b9150611276836111cd565b925082820190508082111561128e5761128d6111d7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006112fd826111cd565b9150600082036113105761130f6111d7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611351602083610ee9565b915061135c8261131b565b602082019050919050565b6000602082019050818103600083015261138081611344565b905091905056fea2646970667358221220b74f206dcdcdebf392d7459b2ab1515c54cd9fe4808a3e861b805703bc1e9a2864736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E810B1A GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1E1 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xD2E JUMP JUMPDEST PUSH2 0x1FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x139 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x134 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x143 PUSH2 0x33B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x16E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19C SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AD PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CB PUSH2 0x4E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8 SWAP2 SWAP1 PUSH2 0xD76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x270 JUMPI POP PUSH2 0x26F DUP3 PUSH2 0x526 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A0 DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x2A9 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x2B3 DUP4 DUP4 PUSH2 0x5A4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2C0 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x324 SWAP1 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x337 DUP3 DUP3 PUSH2 0x68D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x407 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x40F PUSH2 0x76F JUMP JUMPDEST PUSH2 0x417 PUSH2 0x7C8 JUMP JUMPDEST PUSH2 0x41F PUSH2 0x819 JUMP JUMPDEST PUSH2 0x430 PUSH2 0x42A PUSH2 0x872 JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x43B PUSH2 0x89A JUMP JUMPDEST DUP3 PUSH2 0x5A4 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x44C PUSH2 0x89A JUMP JUMPDEST PUSH2 0x454 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH2 0x471 PUSH2 0x464 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x46C PUSH2 0x872 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 PUSH2 0x4F3 PUSH2 0x872 JUMP JUMPDEST PUSH2 0x4FB PUSH2 0x685 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50E DUP3 PUSH2 0x277 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x590 JUMP JUMPDEST PUSH2 0x521 DUP4 DUP4 PUSH2 0x68D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 DUP2 PUSH2 0x59C PUSH2 0x685 JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5AE DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x681 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x626 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x697 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x710 PUSH2 0x685 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B5 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7C6 PUSH2 0x9A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x817 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80E SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x868 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x85F SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x870 PUSH2 0xA0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CD DUP4 PUSH2 0x277 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x928 DUP3 DUP3 PUSH2 0x474 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH2 0x935 DUP2 PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x943 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0xA95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x954 SWAP3 SWAP2 SWAP1 PUSH2 0x1127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x996 SWAP2 SWAP1 PUSH2 0x11AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9E9 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8E DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xA95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xAA8 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xACB JUMPI PUSH2 0xACA PUSH2 0x1294 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAFD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB35 JUMPI PUSH2 0xB34 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB99 JUMPI PUSH2 0xB98 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xBD9 SWAP2 SWAP1 PUSH2 0x1206 JUMP JUMPDEST PUSH2 0xBE3 SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xC83 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xC25 JUMPI PUSH2 0xC24 PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC3C JUMPI PUSH2 0xC3B PUSH2 0x12C3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xC7C SWAP1 PUSH2 0x12F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xBE6 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD0B DUP2 PUSH2 0xCD6 JUMP JUMPDEST DUP2 EQ PUSH2 0xD16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD28 DUP2 PUSH2 0xD02 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD44 JUMPI PUSH2 0xD43 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD52 DUP5 DUP3 DUP6 ADD PUSH2 0xD19 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD70 DUP2 PUSH2 0xD5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD8B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA4 DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP2 EQ PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDC1 DUP2 PUSH2 0xD9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDDD JUMPI PUSH2 0xDDC PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDEB DUP5 DUP3 DUP6 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xD91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE49 DUP3 PUSH2 0xE1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE59 DUP2 PUSH2 0xE3E JUMP JUMPDEST DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE76 DUP2 PUSH2 0xE50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE93 JUMPI PUSH2 0xE92 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA1 DUP6 DUP3 DUP7 ADD PUSH2 0xDB2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEB2 DUP6 DUP3 DUP7 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH2 0xED1 PUSH2 0xCD1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEE0 DUP5 DUP3 DUP6 ADD PUSH2 0xE67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF56 PUSH1 0x2F DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xF61 DUP3 PUSH2 0xEFA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF85 DUP2 PUSH2 0xF49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFE8 PUSH1 0x2B DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0xFF3 DUP3 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1017 DUP2 PUSH2 0xFDB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x105F PUSH1 0x17 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x106A DUP3 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x109E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B5 DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x10BF DUP2 DUP6 PUSH2 0x101E JUMP JUMPDEST SWAP4 POP PUSH2 0x10CF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 PUSH1 0x11 DUP4 PUSH2 0x101E JUMP JUMPDEST SWAP2 POP PUSH2 0x111C DUP3 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1132 DUP3 PUSH2 0x1052 JUMP JUMPDEST SWAP2 POP PUSH2 0x113E DUP3 DUP6 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP PUSH2 0x1149 DUP3 PUSH2 0x1104 JUMP JUMPDEST SWAP2 POP PUSH2 0x1155 DUP3 DUP5 PUSH2 0x10AA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117D DUP3 PUSH2 0x1075 JUMP JUMPDEST PUSH2 0x1187 DUP2 DUP6 PUSH2 0xEE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x1197 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1080 JUMP JUMPDEST PUSH2 0x11A0 DUP2 PUSH2 0x1161 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C5 DUP2 DUP5 PUSH2 0x1172 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1211 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x121C DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1255 JUMPI PUSH2 0x1254 PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x126B DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1276 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12FD DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x1310 JUMPI PUSH2 0x130F PUSH2 0x11D7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1351 PUSH1 0x20 DUP4 PUSH2 0xEE9 JUMP JUMPDEST SWAP2 POP PUSH2 0x135C DUP3 PUSH2 0x131B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1380 DUP2 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4F KECCAK256 PUSH14 0xCDCDEBF392D7459B2AB1515C54CD SWAP16 0xE4 DUP1 DUP11 RETURNDATACOPY DUP7 SHL DUP1 JUMPI SUB 0xBC 0x1E SWAP11 0x28 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"461:951:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4708:129;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;734:549:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1289:117:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2903:213;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;4708:129::-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;734:549:15:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:15::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;1289:117:15:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;1060:166:12:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;850:96:10:-;903:7;929:10;922:17;;850:96;:::o;8195:234:0:-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;1063:97:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:16:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;4026:501::-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;1166:95:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2146:149:11:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;88:117:20:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:118::-;2296:24;2314:5;2296:24;:::i;:::-;2291:3;2284:37;2209:118;;:::o;2333:222::-;2426:4;2464:2;2453:9;2449:18;2441:26;;2477:71;2545:1;2534:9;2530:17;2521:6;2477:71;:::i;:::-;2333:222;;;;:::o;2561:126::-;2598:7;2638:42;2631:5;2627:54;2616:65;;2561:126;;;:::o;2693:96::-;2730:7;2759:24;2777:5;2759:24;:::i;:::-;2748:35;;2693:96;;;:::o;2795:122::-;2868:24;2886:5;2868:24;:::i;:::-;2861:5;2858:35;2848:63;;2907:1;2904;2897:12;2848:63;2795:122;:::o;2923:139::-;2969:5;3007:6;2994:20;2985:29;;3023:33;3050:5;3023:33;:::i;:::-;2923:139;;;;:::o;3068:474::-;3136:6;3144;3193:2;3181:9;3172:7;3168:23;3164:32;3161:119;;;3199:79;;:::i;:::-;3161:119;3319:1;3344:53;3389:7;3380:6;3369:9;3365:22;3344:53;:::i;:::-;3334:63;;3290:117;3446:2;3472:53;3517:7;3508:6;3497:9;3493:22;3472:53;:::i;:::-;3462:63;;3417:118;3068:474;;;;;:::o;3548:329::-;3607:6;3656:2;3644:9;3635:7;3631:23;3627:32;3624:119;;;3662:79;;:::i;:::-;3624:119;3782:1;3807:53;3852:7;3843:6;3832:9;3828:22;3807:53;:::i;:::-;3797:63;;3753:117;3548:329;;;;:::o;3883:169::-;3967:11;4001:6;3996:3;3989:19;4041:4;4036:3;4032:14;4017:29;;3883:169;;;;:::o;4058:234::-;4198:34;4194:1;4186:6;4182:14;4175:58;4267:17;4262:2;4254:6;4250:15;4243:42;4058:234;:::o;4298:366::-;4440:3;4461:67;4525:2;4520:3;4461:67;:::i;:::-;4454:74;;4537:93;4626:3;4537:93;:::i;:::-;4655:2;4650:3;4646:12;4639:19;;4298:366;;;:::o;4670:419::-;4836:4;4874:2;4863:9;4859:18;4851:26;;4923:9;4917:4;4913:20;4909:1;4898:9;4894:17;4887:47;4951:131;5077:4;4951:131;:::i;:::-;4943:139;;4670:419;;;:::o;5095:230::-;5235:34;5231:1;5223:6;5219:14;5212:58;5304:13;5299:2;5291:6;5287:15;5280:38;5095:230;:::o;5331:366::-;5473:3;5494:67;5558:2;5553:3;5494:67;:::i;:::-;5487:74;;5570:93;5659:3;5570:93;:::i;:::-;5688:2;5683:3;5679:12;5672:19;;5331:366;;;:::o;5703:419::-;5869:4;5907:2;5896:9;5892:18;5884:26;;5956:9;5950:4;5946:20;5942:1;5931:9;5927:17;5920:47;5984:131;6110:4;5984:131;:::i;:::-;5976:139;;5703:419;;;:::o;6128:148::-;6230:11;6267:3;6252:18;;6128:148;;;;:::o;6282:173::-;6422:25;6418:1;6410:6;6406:14;6399:49;6282:173;:::o;6461:402::-;6621:3;6642:85;6724:2;6719:3;6642:85;:::i;:::-;6635:92;;6736:93;6825:3;6736:93;:::i;:::-;6854:2;6849:3;6845:12;6838:19;;6461:402;;;:::o;6869:99::-;6921:6;6955:5;6949:12;6939:22;;6869:99;;;:::o;6974:246::-;7055:1;7065:113;7079:6;7076:1;7073:13;7065:113;;;7164:1;7159:3;7155:11;7149:18;7145:1;7140:3;7136:11;7129:39;7101:2;7098:1;7094:10;7089:15;;7065:113;;;7212:1;7203:6;7198:3;7194:16;7187:27;7036:184;6974:246;;;:::o;7226:390::-;7332:3;7360:39;7393:5;7360:39;:::i;:::-;7415:89;7497:6;7492:3;7415:89;:::i;:::-;7408:96;;7513:65;7571:6;7566:3;7559:4;7552:5;7548:16;7513:65;:::i;:::-;7603:6;7598:3;7594:16;7587:23;;7336:280;7226:390;;;;:::o;7622:167::-;7762:19;7758:1;7750:6;7746:14;7739:43;7622:167;:::o;7795:402::-;7955:3;7976:85;8058:2;8053:3;7976:85;:::i;:::-;7969:92;;8070:93;8159:3;8070:93;:::i;:::-;8188:2;8183:3;8179:12;8172:19;;7795:402;;;:::o;8203:967::-;8585:3;8607:148;8751:3;8607:148;:::i;:::-;8600:155;;8772:95;8863:3;8854:6;8772:95;:::i;:::-;8765:102;;8884:148;9028:3;8884:148;:::i;:::-;8877:155;;9049:95;9140:3;9131:6;9049:95;:::i;:::-;9042:102;;9161:3;9154:10;;8203:967;;;;;:::o;9176:102::-;9217:6;9268:2;9264:7;9259:2;9252:5;9248:14;9244:28;9234:38;;9176:102;;;:::o;9284:377::-;9372:3;9400:39;9433:5;9400:39;:::i;:::-;9455:71;9519:6;9514:3;9455:71;:::i;:::-;9448:78;;9535:65;9593:6;9588:3;9581:4;9574:5;9570:16;9535:65;:::i;:::-;9625:29;9647:6;9625:29;:::i;:::-;9620:3;9616:39;9609:46;;9376:285;9284:377;;;;:::o;9667:313::-;9780:4;9818:2;9807:9;9803:18;9795:26;;9867:9;9861:4;9857:20;9853:1;9842:9;9838:17;9831:47;9895:78;9968:4;9959:6;9895:78;:::i;:::-;9887:86;;9667:313;;;;:::o;9986:77::-;10023:7;10052:5;10041:16;;9986:77;;;:::o;10069:180::-;10117:77;10114:1;10107:88;10214:4;10211:1;10204:15;10238:4;10235:1;10228:15;10255:348;10295:7;10318:20;10336:1;10318:20;:::i;:::-;10313:25;;10352:20;10370:1;10352:20;:::i;:::-;10347:25;;10540:1;10472:66;10468:74;10465:1;10462:81;10457:1;10450:9;10443:17;10439:105;10436:131;;;10547:18;;:::i;:::-;10436:131;10595:1;10592;10588:9;10577:20;;10255:348;;;;:::o;10609:191::-;10649:3;10668:20;10686:1;10668:20;:::i;:::-;10663:25;;10702:20;10720:1;10702:20;:::i;:::-;10697:25;;10745:1;10742;10738:9;10731:16;;10766:3;10763:1;10760:10;10757:36;;;10773:18;;:::i;:::-;10757:36;10609:191;;;;:::o;10806:180::-;10854:77;10851:1;10844:88;10951:4;10948:1;10941:15;10975:4;10972:1;10965:15;10992:180;11040:77;11037:1;11030:88;11137:4;11134:1;11127:15;11161:4;11158:1;11151:15;11178:171;11217:3;11240:24;11258:5;11240:24;:::i;:::-;11231:33;;11286:4;11279:5;11276:15;11273:41;;11294:18;;:::i;:::-;11273:41;11341:1;11334:5;11330:13;11323:20;;11178:171;;;:::o;11355:182::-;11495:34;11491:1;11483:6;11479:14;11472:58;11355:182;:::o;11543:366::-;11685:3;11706:67;11770:2;11765:3;11706:67;:::i;:::-;11699:74;;11782:93;11871:3;11782:93;:::i;:::-;11900:2;11895:3;11891:12;11884:19;;11543:366;;;:::o;11915:419::-;12081:4;12119:2;12108:9;12104:18;12096:26;;12168:9;12162:4;12158:20;12154:1;12143:9;12139:17;12132:47;12196:131;12322:4;12196:131;:::i;:::-;12188:139;;11915:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1010600","executionCost":"1047","totalCost":"1011647"},"external":{"DEFAULT_ADMIN_ROLE()":"379","__BaseUpgradeablePausable_init(address)":"infinite","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3162","isAdmin()":"2836","paused()":"2568","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"728"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isAdmin()":"b6db75a0","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseUpgradeablePausable.sol\":\"BaseUpgradeablePausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1719,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/BaseUpgradeablePausable.sol:BaseUpgradeablePausable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Constants.sol":{"Constants":{"abi":[{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"610124610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH2 0x124 PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_2706":{"entryPoint":118,"id":2706,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_2711":{"entryPoint":154,"id":2711,"parameterSlots":0,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack_library":{"entryPoint":200,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed":{"entryPoint":213,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":190,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:463:20","statements":[{"body":{"nodeType":"YulBlock","src":"52:32:20","statements":[{"nodeType":"YulAssignment","src":"62:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"73:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:20"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:20","type":""}],"src":"7:77:20"},{"body":{"nodeType":"YulBlock","src":"163:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"180:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"203:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"185:17:20"},"nodeType":"YulFunctionCall","src":"185:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"173:6:20"},"nodeType":"YulFunctionCall","src":"173:37:20"},"nodeType":"YulExpressionStatement","src":"173:37:20"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"151:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"158:3:20","type":""}],"src":"90:126:20"},{"body":{"nodeType":"YulBlock","src":"328:132:20","statements":[{"nodeType":"YulAssignment","src":"338:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"361:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"346:3:20"},"nodeType":"YulFunctionCall","src":"346:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"338:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"426:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"439:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"450:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"435:3:20"},"nodeType":"YulFunctionCall","src":"435:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack_library","nodeType":"YulIdentifier","src":"374:51:20"},"nodeType":"YulFunctionCall","src":"374:79:20"},"nodeType":"YulExpressionStatement","src":"374:79:20"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"300:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"312:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"323:4:20","type":""}],"src":"222:238:20"}]},"contents":"{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c806375b238fc146042578063e63ab1e914605c575b600080fd5b60486076565b6040516053919060d5565b60405180910390f35b6062609a565b604051606d919060d5565b60405180910390f35b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000819050919050565b60cf8160be565b82525050565b600060208201905060e8600083018460c8565b9291505056fea2646970667358221220d17a2a816b9d6983dde5a1c6dcea24af5ac80304920f481a985b01122e3fa2a464736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC EQ PUSH1 0x42 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH1 0x5C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x48 PUSH1 0x76 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x53 SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x62 PUSH1 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x6D SWAP2 SWAP1 PUSH1 0xD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xCF DUP2 PUSH1 0xBE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH27 0x2A816B9D6983DDE5A1C6DCEA24AF5AC80304920F481A985B01122E EXTCODEHASH LOG2 LOG4 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"62:350:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;87:60;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;153:62;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;87:60;124:23;87:60;:::o;153:62::-;191:24;153:62;:::o;7:77:20:-;44:7;73:5;62:16;;7:77;;;:::o;90:126::-;185:24;203:5;185:24;:::i;:::-;180:3;173:37;90:126;;:::o;222:238::-;323:4;361:2;350:9;346:18;338:26;;374:79;450:1;439:9;435:17;426:6;374:79;:::i;:::-;222:238;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"58400","executionCost":"136","totalCost":"58536"},"external":{"ADMIN_ROLE()":"291","PAUSER_ROLE()":"313"},"internal":{"getAdminRole()":"infinite","getPauserRole()":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","PAUSER_ROLE()":"e63ab1e9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Constants.sol\":\"Constants\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/core/payAsYouGo/Claim.sol":{"ClaimGovernance":{"abi":[{"inputs":[{"internalType":"address","name":"tokenDAI","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BaseUpgradeablePausable__ZeroAddressError","type":"error"},{"inputs":[],"name":"Claim__DecisionChallengedError","type":"error"},{"inputs":[],"name":"Claim__DecisionNoLongerCanBeChallengedError","type":"error"},{"inputs":[],"name":"Claim__DecisionNotYetTakenError","type":"error"},{"inputs":[],"name":"Claim__ImmutableChangesError","type":"error"},{"inputs":[],"name":"Claim__PausedOperationFailedError","type":"error"},{"inputs":[],"name":"Claim__UserAlreadyVotedError","type":"error"},{"inputs":[],"name":"Claim__VotingDecisionNotYetFinalizedError","type":"error"},{"inputs":[],"name":"Claim__VotingNotYetStartedError","type":"error"},{"inputs":[],"name":"Claim__VotingTimeEndedError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"claimID","type":"uint256"},{"indexed":true,"internalType":"string","name":"proof","type":"string"}],"name":"NewClaimCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"__BaseUpgradeablePausable_init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_claimID","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"challengeDecision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_claimID","type":"uint256"}],"name":"claimDecision","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"claimID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"claims","outputs":[{"internalType":"address","name":"claimer","type":"address"},{"internalType":"uint256","name":"_claimID","type":"uint256"},{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subcategoryID","type":"uint256"},{"internalType":"uint256","name":"claimAmountRequested","type":"uint256"},{"internalType":"string","name":"proof","type":"string"},{"internalType":"bool","name":"closed","type":"bool"},{"internalType":"bool","name":"accepted","type":"bool"},{"internalType":"bool","name":"isChallenged","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subcategoryID","type":"uint256"},{"internalType":"string","name":"proof","type":"string"},{"internalType":"uint256","name":"requestedClaimAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"createClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_claimID","type":"uint256"}],"name":"getVotingInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"individualClaims","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"safezenGovernanceTokenAddress","type":"address"},{"internalType":"address","name":"globalPauseOperationAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isAdvisor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"protocolSpecificClaims","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"updateAdvisors","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakeAmount","type":"uint256"}],"name":"updateStakeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_claimID","type":"uint256"},{"internalType":"uint256","name":"timeInHours","type":"uint256"}],"name":"updateVotingEndTime","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_claimID","type":"uint256"}],"name":"viewVoteReceipt","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_claimID","type":"uint256"},{"internalType":"bool","name":"support","type":"bool"}],"name":"vote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{"claimDecision(uint256)":{"details":"this function aims to finalize the claim decision, based on the claim voting","params":{"_claimID":": unique insurance claim ID"}},"constructor":{"custom:oz-upgrades-unsafe-allow-constructor":""},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"updateVotingEndTime(uint256,uint256)":{"details":"in case if certain claim require additional time for DAO,  for e.g., awaiting additional inputs to reserve their decisions "}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2869":{"entryPoint":null,"id":2869,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":275,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":298,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":229,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":197,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":192,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":249,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1199:20","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:20","statements":[{"nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:20"},"nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:20"},"nodeType":"YulFunctionCall","src":"187:12:20"},"nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:20"},"nodeType":"YulFunctionCall","src":"310:12:20"},"nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nodeType":"YulBlock","src":"379:81:20","statements":[{"nodeType":"YulAssignment","src":"389:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:20"},"nodeType":"YulFunctionCall","src":"400:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:20","type":""}],"src":"334:126:20"},{"body":{"nodeType":"YulBlock","src":"511:51:20","statements":[{"nodeType":"YulAssignment","src":"521:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:20"},"nodeType":"YulFunctionCall","src":"532:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:20","type":""}],"src":"466:96:20"},{"body":{"nodeType":"YulBlock","src":"611:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:20"},"nodeType":"YulFunctionCall","src":"670:12:20"},"nodeType":"YulExpressionStatement","src":"670:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:20"},"nodeType":"YulFunctionCall","src":"641:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:20"},"nodeType":"YulFunctionCall","src":"631:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:20"},"nodeType":"YulFunctionCall","src":"624:43:20"},"nodeType":"YulIf","src":"621:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:20","type":""}],"src":"568:122:20"},{"body":{"nodeType":"YulBlock","src":"759:80:20","statements":[{"nodeType":"YulAssignment","src":"769:22:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:20"},"nodeType":"YulFunctionCall","src":"778:13:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:20"},"nodeType":"YulFunctionCall","src":"800:33:20"},"nodeType":"YulExpressionStatement","src":"800:33:20"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:20","type":""}],"src":"696:143:20"},{"body":{"nodeType":"YulBlock","src":"922:274:20","statements":[{"body":{"nodeType":"YulBlock","src":"968:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"970:77:20"},"nodeType":"YulFunctionCall","src":"970:79:20"},"nodeType":"YulExpressionStatement","src":"970:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"943:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"952:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"939:3:20"},"nodeType":"YulFunctionCall","src":"939:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"964:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"935:3:20"},"nodeType":"YulFunctionCall","src":"935:32:20"},"nodeType":"YulIf","src":"932:119:20"},{"nodeType":"YulBlock","src":"1061:128:20","statements":[{"nodeType":"YulVariableDeclaration","src":"1076:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"1090:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1080:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1105:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1151:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1162:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1147:3:20"},"nodeType":"YulFunctionCall","src":"1147:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1171:7:20"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1115:31:20"},"nodeType":"YulFunctionCall","src":"1115:64:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1105:6:20"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"892:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"903:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"915:6:20","type":""}],"src":"845:351:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4868 CODESIZE SUB DUP1 PUSH3 0x4868 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x12A JUMP JUMPDEST DUP1 PUSH1 0xFE PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0xFF PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH3 0x15C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF2 DUP3 PUSH3 0xC5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x104 DUP2 PUSH3 0xE5 JUMP JUMPDEST DUP2 EQ PUSH3 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x124 DUP2 PUSH3 0xF9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x143 JUMPI PUSH3 0x142 PUSH3 0xC0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x153 DUP5 DUP3 DUP6 ADD PUSH3 0x113 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x46FC DUP1 PUSH3 0x16C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xC661FED3 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC9D27AFE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC9D27AFE EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0xD0C36092 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x585 JUMPI DUP1 PUSH4 0xEF0C997A EQ PUSH2 0x5A1 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0xC661FED3 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0xC90054EE EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0xC95BEE81 EQ PUSH2 0x4F5 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0xA888C2CD EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x45B JUMPI DUP1 PUSH4 0xC4993140 EQ PUSH2 0x479 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x8C33B395 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3D5 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x485CC955 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x5DF6F2EE EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0x602CE4C6 EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x393 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x485CC955 EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0x55E5B444 EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0x59405ED3 EQ PUSH2 0x31F JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2C9 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x20849B07 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x248A0634 EQ PUSH2 0x22B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x3174 JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x213 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x222 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3249 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x258 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x276 SWAP2 SWAP1 PUSH2 0x3325 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x288 SWAP2 SWAP1 PUSH2 0x3361 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x815 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x836 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D1 PUSH2 0x8B9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0x341A JUMP JUMPDEST PUSH2 0x90A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x35D9 JUMP JUMPDEST PUSH2 0xAE5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x339 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x343 PUSH2 0xF4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x391 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38C SWAP2 SWAP1 PUSH2 0x36F3 JUMP JUMPDEST PUSH2 0xF67 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3AD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A8 SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0x11D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3B7 PUSH2 0x12F3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CE SWAP2 SWAP1 PUSH2 0x376E JUMP JUMPDEST PUSH2 0x1344 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EA SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x13CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x40D PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x3361 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x43D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x438 SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x143E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x452 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x383C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x463 PUSH2 0x155C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x470 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x493 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0x157B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BE SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x15B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x50F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50A SWAP2 SWAP1 PUSH2 0x376E JUMP JUMPDEST PUSH2 0x1606 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x53F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x38FC JUMP JUMPDEST PUSH2 0x162C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54C SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x56F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56A SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x1CC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x59F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x59A SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x22F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5A9 PUSH2 0x2313 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B6 SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x632 JUMPI POP PUSH2 0x631 DUP3 PUSH2 0x231D JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x65F PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x6CB PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x737 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x103 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x3 ADD SLOAD DUP5 PUSH1 0x4 ADD SLOAD DUP6 PUSH1 0x5 ADD SLOAD DUP7 PUSH1 0x6 ADD SLOAD SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP1 SWAP3 SWAP5 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x81E DUP3 PUSH2 0x7F5 JUMP JUMPDEST PUSH2 0x827 DUP2 PUSH2 0x238F JUMP JUMPDEST PUSH2 0x831 DUP4 DUP4 PUSH2 0x23A3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x83E PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A2 SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8B5 DUP3 DUP3 PUSH2 0x2484 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x8C1 PUSH2 0x155C JUMP JUMPDEST PUSH2 0x900 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F7 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x908 PUSH2 0x2566 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x93B JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x968 JUMPI POP PUSH2 0x94A ADDRESS PUSH2 0x25C9 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x967 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x9A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x99E SWAP1 PUSH2 0x3AD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x9E4 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH8 0x8AC7230489E80000 PUSH1 0xFC DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH2 0x101 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xA87 PUSH2 0xA82 PUSH2 0x2387 JUMP JUMPDEST PUSH2 0x11D1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xAD7 SWAP2 SWAP1 PUSH2 0x3B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0xAF6 SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP10 DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP9 DUP2 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFB SLOAD DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xB3C PUSH2 0x2387 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP8 DUP2 PUSH1 0x5 ADD SWAP1 DUP2 PUSH2 0xB8F SWAP2 SWAP1 PUSH2 0x3DCB JUMP JUMPDEST POP DUP7 DUP2 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x3C TIMESTAMP PUSH2 0xBA6 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x12C DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xBEC SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x104 PUSH1 0x0 PUSH2 0xC17 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD PUSH2 0xC5E SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH2 0x105 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD PUSH2 0xC97 SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0xFD PUSH1 0x0 DUP2 SLOAD PUSH2 0xCAD SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC9D07020 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD4A SWAP2 SWAP1 PUSH2 0x3EE6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7EF03900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE3 PUSH2 0xD8E PUSH2 0x2387 JUMP JUMPDEST ADDRESS PUSH1 0xFC SLOAD DUP11 DUP11 DUP11 DUP11 PUSH1 0xFF PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x25EC SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xE32 ADDRESS PUSH1 0xFC SLOAD PUSH1 0xFE PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x27B9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP9 PUSH1 0x40 MLOAD PUSH2 0xE40 SWAP2 SWAP1 PUSH2 0x3F4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0xFB SLOAD PUSH2 0xE53 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBB70AA717B6D2E0A9B9A1B647818482838FD0133DBDDE6F6FF62D0DEA579306D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP3 POP POP POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xEAF PUSH2 0x155C JUMP JUMPDEST PUSH2 0xEEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE5 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x102 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xFB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0xFBA JUMPI POP PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0xFF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED43432A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD LT PUSH2 0x1056 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CF8BF0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x103 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0xFB SLOAD PUSH2 0x10B0 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 DUP2 SLOAD PUSH2 0x10CE SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH2 0x11C9 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0x112A SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1156 SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11A3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1178 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11A3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1186 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x103 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD DUP9 DUP9 DUP9 DUP9 PUSH2 0xAE5 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1220 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1217 SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x128E PUSH2 0x283F JUMP JUMPDEST PUSH2 0x1296 PUSH2 0x2898 JUMP JUMPDEST PUSH2 0x129E PUSH2 0x28E9 JUMP JUMPDEST PUSH2 0x12AF PUSH2 0x12A9 PUSH2 0x2942 JUMP JUMPDEST DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH2 0x12C0 PUSH2 0x12BA PUSH2 0x296A JUMP JUMPDEST DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH2 0x12D8 PUSH2 0x12CB PUSH2 0x296A JUMP JUMPDEST PUSH2 0x12D3 PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x2992 JUMP JUMPDEST PUSH2 0x12F0 PUSH2 0x12E3 PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x12EB PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x2992 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x12FB PUSH2 0x155C JUMP JUMPDEST PUSH2 0x133A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1331 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1342 PUSH2 0x29EE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x134C PUSH2 0x155C JUMP JUMPDEST PUSH2 0x138B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1382 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 PUSH2 0x1399 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0x14A0 SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x14CC SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1519 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x14EE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1519 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14FC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x6 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x6 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1576 PUSH2 0x1569 PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x1571 PUSH2 0x2387 JUMP JUMPDEST PUSH2 0x13CC JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x104 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x102 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x15BD PUSH2 0x155C JUMP JUMPDEST PUSH2 0x15FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15F3 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFC DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x105 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x1693 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEE6C0E1400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x16B4 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1736 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE88A652B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD LT ISZERO PUSH2 0x179B JUMPI PUSH1 0x40 MLOAD PUSH32 0xD6DB172200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x17BD PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x1858 PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1874 SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1891 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18B5 SWAP2 SWAP1 PUSH2 0x4082 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x18D6 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x193A PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x102 PUSH1 0x0 PUSH2 0x199B PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1A1A JUMPI POP PUSH1 0x2 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x1B70 JUMPI DUP2 ISZERO PUSH2 0x1ACA JUMPI PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1A46 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1ABE SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1B6B JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1AEB PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1B63 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x1CBD JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1C1B JUMPI PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1B97 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1C0F SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1CBC JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1C3C PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1CB4 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x3C PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1D02 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST GT ISZERO PUSH2 0x1D3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x449A56BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1D96 JUMPI PUSH1 0x40 MLOAD PUSH32 0x34E3808E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1DFA SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SUB PUSH2 0x20BA JUMPI PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x1E93 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD LT ISZERO PUSH2 0x1EFC JUMPI PUSH1 0x0 PUSH2 0x1F44 JUMP JUMPDEST DUP2 PUSH1 0x64 PUSH2 0x103 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1F39 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x1F43 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x3B DUP2 LT PUSH2 0x2082 JUMPI PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT PUSH2 0x1FB4 JUMPI PUSH1 0x1 PUSH2 0x1FF8 JUMP JUMPDEST DUP4 PUSH1 0x64 PUSH2 0x103 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FED SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x1FF7 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x33 DUP4 PUSH2 0x200B SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2015 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST PUSH1 0x64 PUSH1 0x31 DUP6 PUSH2 0x2024 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x202E SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST PUSH2 0x2038 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP PUSH1 0x50 DUP2 LT ISZERO PUSH2 0x204A JUMPI PUSH1 0x0 PUSH2 0x204D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP PUSH2 0x21A9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT PUSH2 0x2120 JUMPI PUSH1 0x1 PUSH2 0x2164 JUMP JUMPDEST DUP2 PUSH1 0x64 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2159 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2163 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x50 DUP2 LT ISZERO PUSH2 0x2176 JUMPI PUSH1 0x0 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x22D2 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH2 0x223D SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH2 0x224A SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST SWAP1 POP PUSH2 0x22D0 PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0xFE PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x27B9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST PUSH1 0xFD PUSH1 0x0 DUP2 SLOAD PUSH2 0x22E1 SWAP1 PUSH2 0x410F JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22FB DUP3 PUSH2 0x7F5 JUMP JUMPDEST PUSH2 0x2304 DUP2 PUSH2 0x238F JUMP JUMPDEST PUSH2 0x230E DUP4 DUP4 PUSH2 0x2484 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x23A0 DUP2 PUSH2 0x239B PUSH2 0x2387 JUMP JUMPDEST PUSH2 0x2A51 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x23AD DUP3 DUP3 PUSH2 0x13CC JUMP JUMPDEST PUSH2 0x2480 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x2425 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x248E DUP3 DUP3 PUSH2 0x13CC JUMP JUMPDEST ISZERO PUSH2 0x2562 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x2507 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x256E PUSH2 0x2AD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x25B2 PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25BF SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2627 SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2644 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2668 SWAP2 SWAP1 PUSH2 0x4082 JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26AF SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4147 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x26DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271C SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2739 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x275D SWAP2 SWAP1 PUSH2 0x4082 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x276C SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 EQ PUSH2 0x27AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A4 SWAP1 PUSH2 0x4228 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x283A DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x27D8 SWAP3 SWAP2 SWAP1 PUSH2 0x4248 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x2B1F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x288E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2885 SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2896 PUSH2 0x2BE6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x28E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28DE SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2938 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x292F SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2940 PUSH2 0x2C52 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x299D DUP4 PUSH2 0x7F5 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x29F6 PUSH2 0x2CAB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2A3A PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A47 SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x2A5B DUP3 DUP3 PUSH2 0x13CC JUMP JUMPDEST PUSH2 0x2AD2 JUMPI PUSH2 0x2A68 DUP2 PUSH2 0x2CF5 JUMP JUMPDEST PUSH2 0x2A76 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2D22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A87 SWAP3 SWAP2 SWAP1 PUSH2 0x4309 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC9 SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2ADE PUSH2 0xF4A JUMP JUMPDEST PUSH2 0x2B1D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B14 SWAP1 PUSH2 0x43B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B81 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2F5E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x2BE1 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2BA1 SWAP2 SWAP1 PUSH2 0x3EE6 JUMP JUMPDEST PUSH2 0x2BE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BD7 SWAP1 PUSH2 0x4443 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C2C SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2CA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C98 SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2CB3 PUSH2 0xF4A JUMP JUMPDEST ISZERO PUSH2 0x2CF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CEA SWAP1 PUSH2 0x44AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D1B DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2D22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2D35 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2D3F SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D58 JUMPI PUSH2 0x2D57 PUSH2 0x3475 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D8A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2DC2 JUMPI PUSH2 0x2DC1 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2E26 JUMPI PUSH2 0x2E25 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x2E66 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2E70 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2F10 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x2EB2 JUMPI PUSH2 0x2EB1 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2EC9 JUMPI PUSH2 0x2EC8 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2F09 SWAP1 PUSH2 0x410F JUMP JUMPDEST SWAP1 POP PUSH2 0x2E73 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x2F54 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F4B SWAP1 PUSH2 0x454A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2F6D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2F76 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2FBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2FB2 SWAP1 PUSH2 0x45DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2FE4 SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3021 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3026 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3037 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3043 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x30A5 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x309D JUMPI PUSH2 0x305D DUP6 PUSH2 0x25C9 JUMP JUMPDEST PUSH2 0x309C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3093 SWAP1 PUSH2 0x46A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x30B0 JUMP JUMPDEST PUSH2 0x30AF DUP4 DUP4 PUSH2 0x30B8 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x30CB JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30FF SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3151 DUP2 PUSH2 0x311C JUMP JUMPDEST DUP2 EQ PUSH2 0x315C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x316E DUP2 PUSH2 0x3148 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x318A JUMPI PUSH2 0x3189 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3198 DUP5 DUP3 DUP6 ADD PUSH2 0x315F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31B6 DUP2 PUSH2 0x31A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x31D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x31AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31EA DUP2 PUSH2 0x31D7 JUMP JUMPDEST DUP2 EQ PUSH2 0x31F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3207 DUP2 PUSH2 0x31E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3223 JUMPI PUSH2 0x3222 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3231 DUP5 DUP3 DUP6 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3243 DUP2 PUSH2 0x31D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x325E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x326B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x3278 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x3295 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32A2 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32AF PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32BC PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32C9 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32D6 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32E3 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3302 DUP2 PUSH2 0x32EF JUMP JUMPDEST DUP2 EQ PUSH2 0x330D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x331F DUP2 PUSH2 0x32F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x333B JUMPI PUSH2 0x333A PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3349 DUP5 DUP3 DUP6 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x335B DUP2 PUSH2 0x32EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3376 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3352 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A7 DUP3 PUSH2 0x337C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33B7 DUP2 PUSH2 0x339C JUMP JUMPDEST DUP2 EQ PUSH2 0x33C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x33D4 DUP2 PUSH2 0x33AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33F1 JUMPI PUSH2 0x33F0 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33FF DUP6 DUP3 DUP7 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3410 DUP6 DUP3 DUP7 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3431 JUMPI PUSH2 0x3430 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x343F DUP6 DUP3 DUP7 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3450 DUP6 DUP3 DUP7 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x34AD DUP3 PUSH2 0x3464 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x34CC JUMPI PUSH2 0x34CB PUSH2 0x3475 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34DF PUSH2 0x3108 JUMP JUMPDEST SWAP1 POP PUSH2 0x34EB DUP3 DUP3 PUSH2 0x34A4 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x350B JUMPI PUSH2 0x350A PUSH2 0x3475 JUMP JUMPDEST JUMPDEST PUSH2 0x3514 DUP3 PUSH2 0x3464 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3543 PUSH2 0x353E DUP5 PUSH2 0x34F0 JUMP JUMPDEST PUSH2 0x34D5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x355F JUMPI PUSH2 0x355E PUSH2 0x345F JUMP JUMPDEST JUMPDEST PUSH2 0x356A DUP5 DUP3 DUP6 PUSH2 0x3521 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3587 JUMPI PUSH2 0x3586 PUSH2 0x345A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3597 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35B6 DUP2 PUSH2 0x35A0 JUMP JUMPDEST DUP2 EQ PUSH2 0x35C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x35D3 DUP2 PUSH2 0x35AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x35FA JUMPI PUSH2 0x35F9 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3608 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x3619 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x363A JUMPI PUSH2 0x3639 PUSH2 0x3117 JUMP JUMPDEST JUMPDEST PUSH2 0x3646 DUP12 DUP3 DUP13 ADD PUSH2 0x3572 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x60 PUSH2 0x3657 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x80 PUSH2 0x3668 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xA0 PUSH2 0x3679 DUP12 DUP3 DUP13 ADD PUSH2 0x35C4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xC0 PUSH2 0x368A DUP12 DUP3 DUP13 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xE0 PUSH2 0x369B DUP12 DUP3 DUP13 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36C1 JUMPI PUSH2 0x36C0 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36CF DUP5 DUP3 DUP6 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x370F JUMPI PUSH2 0x370E PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x371D DUP9 DUP3 DUP10 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x372E DUP9 DUP3 DUP10 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x373F DUP9 DUP3 DUP10 ADD PUSH2 0x35C4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x3750 DUP9 DUP3 DUP10 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x3761 DUP9 DUP3 DUP10 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3785 JUMPI PUSH2 0x3784 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3793 DUP6 DUP3 DUP7 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x37A4 DUP6 DUP3 DUP7 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x37B7 DUP2 PUSH2 0x339C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37F7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x37DC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x380E DUP3 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x3818 DUP2 DUP6 PUSH2 0x37C8 JUMP JUMPDEST SWAP4 POP PUSH2 0x3828 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37D9 JUMP JUMPDEST PUSH2 0x3831 DUP2 PUSH2 0x3464 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x3852 PUSH1 0x0 DUP4 ADD DUP13 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x385F PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x386C PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x3879 PUSH1 0x60 DUP4 ADD DUP10 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x3886 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x323A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3898 DUP2 DUP8 PUSH2 0x3803 JUMP JUMPDEST SWAP1 POP PUSH2 0x38A7 PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x38B4 PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x38C2 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x31AD JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x38D9 DUP2 PUSH2 0x31A1 JUMP JUMPDEST DUP2 EQ PUSH2 0x38E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x38F6 DUP2 PUSH2 0x38D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3913 JUMPI PUSH2 0x3912 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3921 DUP6 DUP3 DUP7 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3932 DUP6 DUP3 DUP7 ADD PUSH2 0x38E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3998 PUSH1 0x2F DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x39A3 DUP3 PUSH2 0x393C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39C7 DUP2 PUSH2 0x398B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A2A PUSH1 0x2C DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A35 DUP3 PUSH2 0x39CE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A59 DUP2 PUSH2 0x3A1D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ABC PUSH1 0x2E DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AC7 DUP3 PUSH2 0x3A60 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AEB DUP2 PUSH2 0x3AAF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B21 PUSH2 0x3B1C PUSH2 0x3B17 DUP5 PUSH2 0x3AF2 JUMP JUMPDEST PUSH2 0x3AFC JUMP JUMPDEST PUSH2 0x35A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3B31 DUP2 PUSH2 0x3B06 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3B4C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3B28 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B8C DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3BBE JUMPI PUSH2 0x3BBD PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3C10 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3C23 JUMPI PUSH2 0x3C22 PUSH2 0x3BC9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3C8B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3C4E JUMP JUMPDEST PUSH2 0x3C95 DUP7 DUP4 PUSH2 0x3C4E JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC8 PUSH2 0x3CC3 PUSH2 0x3CBE DUP5 PUSH2 0x31D7 JUMP JUMPDEST PUSH2 0x3AFC JUMP JUMPDEST PUSH2 0x31D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CE2 DUP4 PUSH2 0x3CAD JUMP JUMPDEST PUSH2 0x3CF6 PUSH2 0x3CEE DUP3 PUSH2 0x3CCF JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3C5B JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3D0B PUSH2 0x3CFE JUMP JUMPDEST PUSH2 0x3D16 DUP2 DUP5 DUP5 PUSH2 0x3CD9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D3A JUMPI PUSH2 0x3D2F PUSH1 0x0 DUP3 PUSH2 0x3D03 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3D1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3D7F JUMPI PUSH2 0x3D50 DUP2 PUSH2 0x3C29 JUMP JUMPDEST PUSH2 0x3D59 DUP5 PUSH2 0x3C3E JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3D68 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3D7C PUSH2 0x3D74 DUP6 PUSH2 0x3C3E JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3D1B JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DA2 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3D84 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DBB DUP4 DUP4 PUSH2 0x3D91 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3DD4 DUP3 PUSH2 0x37BD JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DED JUMPI PUSH2 0x3DEC PUSH2 0x3475 JUMP JUMPDEST JUMPDEST PUSH2 0x3DF7 DUP3 SLOAD PUSH2 0x3BF8 JUMP JUMPDEST PUSH2 0x3E02 DUP3 DUP3 DUP6 PUSH2 0x3D3E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3E35 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3E23 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3E2D DUP6 DUP3 PUSH2 0x3DAF JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3E95 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3E43 DUP7 PUSH2 0x3C29 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3E6B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3E46 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3E88 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3E84 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3D91 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EA8 DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x3EB3 DUP4 PUSH2 0x31D7 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3ECB JUMPI PUSH2 0x3ECA PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3EE0 DUP2 PUSH2 0x38D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EFC JUMPI PUSH2 0x3EFB PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F0A DUP5 DUP3 DUP6 ADD PUSH2 0x3ED1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F29 DUP3 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x3F33 DUP2 DUP6 PUSH2 0x3F13 JUMP JUMPDEST SWAP4 POP PUSH2 0x3F43 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37D9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F5B DUP3 DUP5 PUSH2 0x3F1E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC2 PUSH1 0x2B DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FCD DUP3 PUSH2 0x3F66 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FF1 DUP2 PUSH2 0x3FB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4003 DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x400E DUP4 PUSH2 0x31D7 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4047 JUMPI PUSH2 0x4046 PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4067 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x37AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x407C DUP2 PUSH2 0x31E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4098 JUMPI PUSH2 0x4097 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x40A6 DUP5 DUP3 DUP6 ADD PUSH2 0x406D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x40E9 DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x40F4 DUP4 PUSH2 0x31D7 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4104 JUMPI PUSH2 0x4103 PUSH2 0x40AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x411A DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x412D JUMPI PUSH2 0x412C PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4141 DUP2 PUSH2 0x35A0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x415C PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x4169 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x4176 PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x4183 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x4190 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4138 JUMP JUMPDEST PUSH2 0x419D PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x3352 JUMP JUMPDEST PUSH2 0x41AA PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x3352 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4212 PUSH1 0x21 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x421D DUP3 PUSH2 0x41B6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4241 DUP2 PUSH2 0x4205 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x425D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x426A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A7 PUSH1 0x17 DUP4 PUSH2 0x3F13 JUMP JUMPDEST SWAP2 POP PUSH2 0x42B2 DUP3 PUSH2 0x4271 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F3 PUSH1 0x11 DUP4 PUSH2 0x3F13 JUMP JUMPDEST SWAP2 POP PUSH2 0x42FE DUP3 PUSH2 0x42BD JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4314 DUP3 PUSH2 0x429A JUMP JUMPDEST SWAP2 POP PUSH2 0x4320 DUP3 DUP6 PUSH2 0x3F1E JUMP JUMPDEST SWAP2 POP PUSH2 0x432B DUP3 PUSH2 0x42E6 JUMP JUMPDEST SWAP2 POP PUSH2 0x4337 DUP3 DUP5 PUSH2 0x3F1E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x435D DUP2 DUP5 PUSH2 0x3803 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x439B PUSH1 0x14 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x43A6 DUP3 PUSH2 0x4365 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43CA DUP2 PUSH2 0x438E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x442D PUSH1 0x2A DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x4438 DUP3 PUSH2 0x43D1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x445C DUP2 PUSH2 0x4420 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4499 PUSH1 0x10 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x44A4 DUP3 PUSH2 0x4463 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44C8 DUP2 PUSH2 0x448C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4534 PUSH1 0x20 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x453F DUP3 PUSH2 0x44FE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4563 DUP2 PUSH2 0x4527 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45C6 PUSH1 0x26 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x45D1 DUP3 PUSH2 0x456A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x45F5 DUP2 PUSH2 0x45B9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x461D DUP3 PUSH2 0x45FC JUMP JUMPDEST PUSH2 0x4627 DUP2 DUP6 PUSH2 0x4607 JUMP JUMPDEST SWAP4 POP PUSH2 0x4637 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37D9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x464F DUP3 DUP5 PUSH2 0x4612 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4690 PUSH1 0x1D DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x469B DUP3 PUSH2 0x465A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x46BF DUP2 PUSH2 0x4683 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x34133160 0xFC 0xF8 GAS GASPRICE 0xDB 0xD2 0xE8 SWAP11 SWAP4 0xC3 LOG3 0xC9 SWAP5 0xB2 0xBA MUL DUP8 0xBE LOG2 PUSH8 0xED61C6B90AA9F64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"640:12836:17:-:0;;;3947:172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4017:8;3987:9;;:39;;;;;;;;;;;;;;;;;;4091:8;4049:15;;:51;;;;;;;;;;;;;;;;;;3947:172;640:12836;;88:117:20;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;640:12836:17:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_42":{"entryPoint":5175,"id":42,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_21":{"entryPoint":10392,"id":21,"parameterSlots":0,"returnSlots":0},"@__BaseUpgradeablePausable_init_2684":{"entryPoint":4561,"id":2684,"parameterSlots":1,"returnSlots":0},"@__Pausable_init_611":{"entryPoint":10303,"id":611,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_621":{"entryPoint":11238,"id":621,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_730":{"entryPoint":10473,"id":730,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_740":{"entryPoint":11346,"id":740,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1174":{"entryPoint":11039,"id":1174,"parameterSlots":2,"returnSlots":0},"@_checkRole_107":{"entryPoint":9103,"id":107,"parameterSlots":1,"returnSlots":0},"@_checkRole_146":{"entryPoint":10833,"id":146,"parameterSlots":2,"returnSlots":0},"@_grantRole_298":{"entryPoint":9123,"id":298,"parameterSlots":2,"returnSlots":0},"@_msgSender_1486":{"entryPoint":9095,"id":1486,"parameterSlots":0,"returnSlots":1},"@_pause_685":{"entryPoint":10734,"id":685,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_658":{"entryPoint":11435,"id":658,"parameterSlots":0,"returnSlots":0},"@_requirePaused_669":{"entryPoint":10966,"id":669,"parameterSlots":0,"returnSlots":0},"@_revert_1458":{"entryPoint":12472,"id":1458,"parameterSlots":2,"returnSlots":0},"@_revokeRole_329":{"entryPoint":9348,"id":329,"parameterSlots":2,"returnSlots":0},"@_setRoleAdmin_266":{"entryPoint":10642,"id":266,"parameterSlots":2,"returnSlots":0},"@_unpause_701":{"entryPoint":9574,"id":701,"parameterSlots":0,"returnSlots":0},"@challengeDecision_3698":{"entryPoint":3943,"id":3698,"parameterSlots":5,"returnSlots":0},"@claimDecision_3610":{"entryPoint":7367,"id":3610,"parameterSlots":1,"returnSlots":1},"@claimID_2743":{"entryPoint":3937,"id":2743,"parameterSlots":0,"returnSlots":0},"@claims_2838":{"entryPoint":5182,"id":2838,"parameterSlots":0,"returnSlots":0},"@createClaim_3128":{"entryPoint":2789,"id":3128,"parameterSlots":8,"returnSlots":1},"@functionCallWithValue_1329":{"entryPoint":12150,"id":1329,"parameterSlots":4,"returnSlots":1},"@functionCall_1265":{"entryPoint":12126,"id":1265,"parameterSlots":3,"returnSlots":1},"@getAdminRole_2719":{"entryPoint":10562,"id":2719,"parameterSlots":0,"returnSlots":1},"@getClaimID_3746":{"entryPoint":8979,"id":3746,"parameterSlots":0,"returnSlots":1},"@getPauserRole_2727":{"entryPoint":10602,"id":2727,"parameterSlots":0,"returnSlots":1},"@getRoleAdmin_161":{"entryPoint":2037,"id":161,"parameterSlots":1,"returnSlots":1},"@getVotingInfo_3793":{"entryPoint":1922,"id":3793,"parameterSlots":1,"returnSlots":7},"@grantRole_181":{"entryPoint":2069,"id":181,"parameterSlots":2,"returnSlots":0},"@hasRole_94":{"entryPoint":5068,"id":94,"parameterSlots":2,"returnSlots":1},"@individualClaims_2843":{"entryPoint":5499,"id":2843,"parameterSlots":0,"returnSlots":0},"@initialize_2900":{"entryPoint":2314,"id":2900,"parameterSlots":2,"returnSlots":0},"@isAdmin_2698":{"entryPoint":5468,"id":2698,"parameterSlots":0,"returnSlots":1},"@isAdvisor_2832":{"entryPoint":5524,"id":2832,"parameterSlots":0,"returnSlots":0},"@isContract_1193":{"entryPoint":9673,"id":1193,"parameterSlots":1,"returnSlots":1},"@pause_2909":{"entryPoint":4851,"id":2909,"parameterSlots":0,"returnSlots":0},"@paused_646":{"entryPoint":3914,"id":646,"parameterSlots":0,"returnSlots":1},"@protocolSpecificClaims_2850":{"entryPoint":5638,"id":2850,"parameterSlots":0,"returnSlots":0},"@renounceRole_224":{"entryPoint":2102,"id":224,"parameterSlots":2,"returnSlots":0},"@revokeRole_201":{"entryPoint":8946,"id":201,"parameterSlots":2,"returnSlots":0},"@safePermit_1136":{"entryPoint":9708,"id":1136,"parameterSlots":8,"returnSlots":0},"@safeTransfer_926":{"entryPoint":10169,"id":926,"parameterSlots":3,"returnSlots":0},"@supportsInterface_1714":{"entryPoint":8989,"id":1714,"parameterSlots":1,"returnSlots":1},"@supportsInterface_75":{"entryPoint":1471,"id":75,"parameterSlots":1,"returnSlots":1},"@toHexString_1655":{"entryPoint":11554,"id":1655,"parameterSlots":2,"returnSlots":1},"@toHexString_1675":{"entryPoint":11509,"id":1675,"parameterSlots":1,"returnSlots":1},"@unpause_2918":{"entryPoint":2233,"id":2918,"parameterSlots":0,"returnSlots":0},"@updateAdvisors_2955":{"entryPoint":3751,"id":2955,"parameterSlots":1,"returnSlots":0},"@updateStakeAmount_2967":{"entryPoint":5557,"id":2967,"parameterSlots":1,"returnSlots":0},"@updateVotingEndTime_2941":{"entryPoint":4932,"id":2941,"parameterSlots":2,"returnSlots":0},"@verifyCallResultFromTarget_1414":{"entryPoint":12355,"id":1414,"parameterSlots":4,"returnSlots":1},"@viewVoteReceipt_3737":{"entryPoint":1593,"id":3737,"parameterSlots":1,"returnSlots":3},"@vote_3316":{"entryPoint":5676,"id":3316,"parameterSlots":2,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":13616,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":13253,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":14567,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":16081,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":13072,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":12639,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":13682,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":12792,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":16493,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":13764,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":13995,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":13338,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":16102,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":13093,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":13274,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":12660,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":12813,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":16514,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_bool":{"entryPoint":14588,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":14190,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_string_memory_ptrt_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":13785,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":14067,"id":null,"parameterSlots":2,"returnSlots":5},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":14254,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":12717,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":13138,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":17938,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":15144,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":14339,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16158,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":17703,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":17294,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":17849,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":17548,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":15023,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack":{"entryPoint":14877,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":18051,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack":{"entryPoint":16901,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":16309,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":17050,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":17440,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":17126,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack":{"entryPoint":14731,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":12858,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":16696,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17987,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":16207,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":17161,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":16466,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":16711,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":16968,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_bool_t_bool_t_bool__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_bool_t_bool_t_bool__fromStack_reversed":{"entryPoint":14396,"id":null,"parameterSlots":10,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":12732,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool_t_uint256__to_t_bool_t_bool_t_uint256__fromStack_reversed":{"entryPoint":12873,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":13153,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":15159,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17219,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17738,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17329,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17884,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17583,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15058,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14912,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":18086,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16936,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16344,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17475,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14766,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":14040,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":12928,"id":null,"parameterSlots":8,"returnSlots":1},"allocate_memory":{"entryPoint":13525,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":12552,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":13552,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":15401,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":17916,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":14269,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":17927,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":14280,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":16147,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":16029,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":16606,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":16376,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":15678,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":13212,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":12705,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":13039,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":12572,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":15090,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":13180,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":12759,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":13728,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":15643,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":15110,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":15533,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":15819,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13601,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":14297,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":16655,"id":null,"parameterSlots":1,"returnSlots":1},"divide_by_32_ceil":{"entryPoint":15422,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":15352,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":15791,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":13476,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":15100,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":15233,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":15761,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":15186,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":16559,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":15305,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":17615,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13429,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":15567,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":13402,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":13407,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":12567,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":12562,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":13412,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":15438,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":15748,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":15619,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":17662,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":17253,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":17770,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":17507,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":14944,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513":{"entryPoint":14798,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":18010,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d":{"entryPoint":16822,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":16230,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874":{"entryPoint":17009,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":17361,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69":{"entryPoint":17085,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b":{"entryPoint":14652,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":15451,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":15577,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":13230,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":14544,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":13049,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":12616,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":12769,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":13741,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":15614,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:40288:20","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:20","statements":[{"nodeType":"YulAssignment","src":"57:19:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:20","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:20"},"nodeType":"YulFunctionCall","src":"67:9:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:20"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:20","type":""}],"src":"7:75:20"},{"body":{"nodeType":"YulBlock","src":"177:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:20"},"nodeType":"YulFunctionCall","src":"187:12:20"},"nodeType":"YulExpressionStatement","src":"187:12:20"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:20"},{"body":{"nodeType":"YulBlock","src":"300:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:20"},"nodeType":"YulFunctionCall","src":"310:12:20"},"nodeType":"YulExpressionStatement","src":"310:12:20"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:20"},{"body":{"nodeType":"YulBlock","src":"378:105:20","statements":[{"nodeType":"YulAssignment","src":"388:89:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:20","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:20"},"nodeType":"YulFunctionCall","src":"399:78:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:20"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:20","type":""}],"src":"334:149:20"},{"body":{"nodeType":"YulBlock","src":"531:78:20","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:20"},"nodeType":"YulFunctionCall","src":"589:12:20"},"nodeType":"YulExpressionStatement","src":"589:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:20"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:20"},"nodeType":"YulFunctionCall","src":"561:23:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:20"},"nodeType":"YulFunctionCall","src":"551:34:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:20"},"nodeType":"YulFunctionCall","src":"544:42:20"},"nodeType":"YulIf","src":"541:62:20"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:20","type":""}],"src":"489:120:20"},{"body":{"nodeType":"YulBlock","src":"666:86:20","statements":[{"nodeType":"YulAssignment","src":"676:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:20"},"nodeType":"YulFunctionCall","src":"685:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:20"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:20"},"nodeType":"YulFunctionCall","src":"714:32:20"},"nodeType":"YulExpressionStatement","src":"714:32:20"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:20","type":""}],"src":"615:137:20"},{"body":{"nodeType":"YulBlock","src":"823:262:20","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:20"},"nodeType":"YulFunctionCall","src":"871:79:20"},"nodeType":"YulExpressionStatement","src":"871:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:20"},"nodeType":"YulFunctionCall","src":"840:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:20"},"nodeType":"YulFunctionCall","src":"836:32:20"},"nodeType":"YulIf","src":"833:119:20"},{"nodeType":"YulBlock","src":"962:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:20","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:20"},"nodeType":"YulFunctionCall","src":"1036:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:20"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:20"},"nodeType":"YulFunctionCall","src":"1016:52:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:20","type":""}],"src":"758:327:20"},{"body":{"nodeType":"YulBlock","src":"1133:48:20","statements":[{"nodeType":"YulAssignment","src":"1143:32:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:20"},"nodeType":"YulFunctionCall","src":"1161:13:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:20"},"nodeType":"YulFunctionCall","src":"1154:21:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:20"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:20","type":""}],"src":"1091:90:20"},{"body":{"nodeType":"YulBlock","src":"1246:50:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:20"},"nodeType":"YulFunctionCall","src":"1268:21:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:20"},"nodeType":"YulFunctionCall","src":"1256:34:20"},"nodeType":"YulExpressionStatement","src":"1256:34:20"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:20","type":""}],"src":"1187:109:20"},{"body":{"nodeType":"YulBlock","src":"1394:118:20","statements":[{"nodeType":"YulAssignment","src":"1404:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:20"},"nodeType":"YulFunctionCall","src":"1412:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:20"},"nodeType":"YulFunctionCall","src":"1487:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:20"},"nodeType":"YulFunctionCall","src":"1440:65:20"},"nodeType":"YulExpressionStatement","src":"1440:65:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:20","type":""}],"src":"1302:210:20"},{"body":{"nodeType":"YulBlock","src":"1563:32:20","statements":[{"nodeType":"YulAssignment","src":"1573:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:20"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:20","type":""}],"src":"1518:77:20"},{"body":{"nodeType":"YulBlock","src":"1644:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"1701:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1710:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1713:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1703:6:20"},"nodeType":"YulFunctionCall","src":"1703:12:20"},"nodeType":"YulExpressionStatement","src":"1703:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1667:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1692:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1674:17:20"},"nodeType":"YulFunctionCall","src":"1674:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1664:2:20"},"nodeType":"YulFunctionCall","src":"1664:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1657:6:20"},"nodeType":"YulFunctionCall","src":"1657:43:20"},"nodeType":"YulIf","src":"1654:63:20"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1637:5:20","type":""}],"src":"1601:122:20"},{"body":{"nodeType":"YulBlock","src":"1781:87:20","statements":[{"nodeType":"YulAssignment","src":"1791:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1813:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1800:12:20"},"nodeType":"YulFunctionCall","src":"1800:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1856:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1829:26:20"},"nodeType":"YulFunctionCall","src":"1829:33:20"},"nodeType":"YulExpressionStatement","src":"1829:33:20"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:20","type":""}],"src":"1729:139:20"},{"body":{"nodeType":"YulBlock","src":"1940:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"1986:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1988:77:20"},"nodeType":"YulFunctionCall","src":"1988:79:20"},"nodeType":"YulExpressionStatement","src":"1988:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1961:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1957:3:20"},"nodeType":"YulFunctionCall","src":"1957:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1953:3:20"},"nodeType":"YulFunctionCall","src":"1953:32:20"},"nodeType":"YulIf","src":"1950:119:20"},{"nodeType":"YulBlock","src":"2079:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"2094:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"2108:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2098:6:20","type":""}]},{"nodeType":"YulAssignment","src":"2123:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2158:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"2169:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:20"},"nodeType":"YulFunctionCall","src":"2154:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2178:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2133:20:20"},"nodeType":"YulFunctionCall","src":"2133:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2123:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1910:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1921:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1933:6:20","type":""}],"src":"1874:329:20"},{"body":{"nodeType":"YulBlock","src":"2274:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2291:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2314:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2296:17:20"},"nodeType":"YulFunctionCall","src":"2296:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2284:6:20"},"nodeType":"YulFunctionCall","src":"2284:37:20"},"nodeType":"YulExpressionStatement","src":"2284:37:20"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2262:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2269:3:20","type":""}],"src":"2209:118:20"},{"body":{"nodeType":"YulBlock","src":"2475:276:20","statements":[{"nodeType":"YulAssignment","src":"2485:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2497:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2508:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2493:3:20"},"nodeType":"YulFunctionCall","src":"2493:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2485:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2559:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2572:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2583:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2568:3:20"},"nodeType":"YulFunctionCall","src":"2568:17:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"2521:37:20"},"nodeType":"YulFunctionCall","src":"2521:65:20"},"nodeType":"YulExpressionStatement","src":"2521:65:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2634:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2647:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2658:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2643:3:20"},"nodeType":"YulFunctionCall","src":"2643:18:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"2596:37:20"},"nodeType":"YulFunctionCall","src":"2596:66:20"},"nodeType":"YulExpressionStatement","src":"2596:66:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2716:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:20"},"nodeType":"YulFunctionCall","src":"2725:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"2672:43:20"},"nodeType":"YulFunctionCall","src":"2672:72:20"},"nodeType":"YulExpressionStatement","src":"2672:72:20"}]},"name":"abi_encode_tuple_t_bool_t_bool_t_uint256__to_t_bool_t_bool_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2431:9:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2443:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2451:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2459:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2470:4:20","type":""}],"src":"2333:418:20"},{"body":{"nodeType":"YulBlock","src":"3023:620:20","statements":[{"nodeType":"YulAssignment","src":"3033:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3045:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3056:3:20","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3041:3:20"},"nodeType":"YulFunctionCall","src":"3041:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3033:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3114:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3127:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3138:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3123:3:20"},"nodeType":"YulFunctionCall","src":"3123:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3070:43:20"},"nodeType":"YulFunctionCall","src":"3070:71:20"},"nodeType":"YulExpressionStatement","src":"3070:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3195:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3208:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3219:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3204:3:20"},"nodeType":"YulFunctionCall","src":"3204:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3151:43:20"},"nodeType":"YulFunctionCall","src":"3151:72:20"},"nodeType":"YulExpressionStatement","src":"3151:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3277:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3290:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3301:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3286:3:20"},"nodeType":"YulFunctionCall","src":"3286:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3233:43:20"},"nodeType":"YulFunctionCall","src":"3233:72:20"},"nodeType":"YulExpressionStatement","src":"3233:72:20"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"3359:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3372:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3383:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3368:3:20"},"nodeType":"YulFunctionCall","src":"3368:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3315:43:20"},"nodeType":"YulFunctionCall","src":"3315:72:20"},"nodeType":"YulExpressionStatement","src":"3315:72:20"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"3441:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3454:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3465:3:20","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3450:3:20"},"nodeType":"YulFunctionCall","src":"3450:19:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3397:43:20"},"nodeType":"YulFunctionCall","src":"3397:73:20"},"nodeType":"YulExpressionStatement","src":"3397:73:20"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"3524:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3537:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3548:3:20","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3533:3:20"},"nodeType":"YulFunctionCall","src":"3533:19:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3480:43:20"},"nodeType":"YulFunctionCall","src":"3480:73:20"},"nodeType":"YulExpressionStatement","src":"3480:73:20"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"3607:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3620:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"3631:3:20","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3616:3:20"},"nodeType":"YulFunctionCall","src":"3616:19:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3563:43:20"},"nodeType":"YulFunctionCall","src":"3563:73:20"},"nodeType":"YulExpressionStatement","src":"3563:73:20"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2947:9:20","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2959:6:20","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2967:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2975:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2983:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2991:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2999:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3007:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3018:4:20","type":""}],"src":"2757:886:20"},{"body":{"nodeType":"YulBlock","src":"3694:32:20","statements":[{"nodeType":"YulAssignment","src":"3704:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"3715:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3704:7:20"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3676:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3686:7:20","type":""}],"src":"3649:77:20"},{"body":{"nodeType":"YulBlock","src":"3775:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"3832:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3841:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3844:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3834:6:20"},"nodeType":"YulFunctionCall","src":"3834:12:20"},"nodeType":"YulExpressionStatement","src":"3834:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3798:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3823:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3805:17:20"},"nodeType":"YulFunctionCall","src":"3805:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3795:2:20"},"nodeType":"YulFunctionCall","src":"3795:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3788:6:20"},"nodeType":"YulFunctionCall","src":"3788:43:20"},"nodeType":"YulIf","src":"3785:63:20"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3768:5:20","type":""}],"src":"3732:122:20"},{"body":{"nodeType":"YulBlock","src":"3912:87:20","statements":[{"nodeType":"YulAssignment","src":"3922:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3944:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3931:12:20"},"nodeType":"YulFunctionCall","src":"3931:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3922:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3987:5:20"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"3960:26:20"},"nodeType":"YulFunctionCall","src":"3960:33:20"},"nodeType":"YulExpressionStatement","src":"3960:33:20"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3890:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"3898:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3906:5:20","type":""}],"src":"3860:139:20"},{"body":{"nodeType":"YulBlock","src":"4071:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"4117:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4119:77:20"},"nodeType":"YulFunctionCall","src":"4119:79:20"},"nodeType":"YulExpressionStatement","src":"4119:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4092:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"4101:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4088:3:20"},"nodeType":"YulFunctionCall","src":"4088:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"4113:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4084:3:20"},"nodeType":"YulFunctionCall","src":"4084:32:20"},"nodeType":"YulIf","src":"4081:119:20"},{"nodeType":"YulBlock","src":"4210:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"4225:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"4239:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4229:6:20","type":""}]},{"nodeType":"YulAssignment","src":"4254:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4289:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"4300:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4285:3:20"},"nodeType":"YulFunctionCall","src":"4285:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4309:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4264:20:20"},"nodeType":"YulFunctionCall","src":"4264:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4254:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4041:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4052:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4064:6:20","type":""}],"src":"4005:329:20"},{"body":{"nodeType":"YulBlock","src":"4405:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4422:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4445:5:20"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"4427:17:20"},"nodeType":"YulFunctionCall","src":"4427:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4415:6:20"},"nodeType":"YulFunctionCall","src":"4415:37:20"},"nodeType":"YulExpressionStatement","src":"4415:37:20"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4393:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4400:3:20","type":""}],"src":"4340:118:20"},{"body":{"nodeType":"YulBlock","src":"4562:124:20","statements":[{"nodeType":"YulAssignment","src":"4572:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4584:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4595:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4580:3:20"},"nodeType":"YulFunctionCall","src":"4580:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4572:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4652:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"4676:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4661:3:20"},"nodeType":"YulFunctionCall","src":"4661:17:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"4608:43:20"},"nodeType":"YulFunctionCall","src":"4608:71:20"},"nodeType":"YulExpressionStatement","src":"4608:71:20"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4534:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4546:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4557:4:20","type":""}],"src":"4464:222:20"},{"body":{"nodeType":"YulBlock","src":"4737:81:20","statements":[{"nodeType":"YulAssignment","src":"4747:65:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4762:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"4769:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4758:3:20"},"nodeType":"YulFunctionCall","src":"4758:54:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4747:7:20"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4719:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4729:7:20","type":""}],"src":"4692:126:20"},{"body":{"nodeType":"YulBlock","src":"4869:51:20","statements":[{"nodeType":"YulAssignment","src":"4879:35:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4908:5:20"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4890:17:20"},"nodeType":"YulFunctionCall","src":"4890:24:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4879:7:20"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4851:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4861:7:20","type":""}],"src":"4824:96:20"},{"body":{"nodeType":"YulBlock","src":"4969:79:20","statements":[{"body":{"nodeType":"YulBlock","src":"5026:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5035:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5038:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5028:6:20"},"nodeType":"YulFunctionCall","src":"5028:12:20"},"nodeType":"YulExpressionStatement","src":"5028:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4992:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5017:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4999:17:20"},"nodeType":"YulFunctionCall","src":"4999:24:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4989:2:20"},"nodeType":"YulFunctionCall","src":"4989:35:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4982:6:20"},"nodeType":"YulFunctionCall","src":"4982:43:20"},"nodeType":"YulIf","src":"4979:63:20"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4962:5:20","type":""}],"src":"4926:122:20"},{"body":{"nodeType":"YulBlock","src":"5106:87:20","statements":[{"nodeType":"YulAssignment","src":"5116:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5138:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5125:12:20"},"nodeType":"YulFunctionCall","src":"5125:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5116:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5181:5:20"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5154:26:20"},"nodeType":"YulFunctionCall","src":"5154:33:20"},"nodeType":"YulExpressionStatement","src":"5154:33:20"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5084:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"5092:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5100:5:20","type":""}],"src":"5054:139:20"},{"body":{"nodeType":"YulBlock","src":"5282:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"5328:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5330:77:20"},"nodeType":"YulFunctionCall","src":"5330:79:20"},"nodeType":"YulExpressionStatement","src":"5330:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5303:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5312:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5299:3:20"},"nodeType":"YulFunctionCall","src":"5299:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5324:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5295:3:20"},"nodeType":"YulFunctionCall","src":"5295:32:20"},"nodeType":"YulIf","src":"5292:119:20"},{"nodeType":"YulBlock","src":"5421:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5436:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5450:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5440:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5465:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5500:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5511:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5496:3:20"},"nodeType":"YulFunctionCall","src":"5496:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5520:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5475:20:20"},"nodeType":"YulFunctionCall","src":"5475:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5465:6:20"}]}]},{"nodeType":"YulBlock","src":"5548:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5563:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5577:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5567:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5593:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5628:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5639:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5624:3:20"},"nodeType":"YulFunctionCall","src":"5624:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5648:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5603:20:20"},"nodeType":"YulFunctionCall","src":"5603:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5593:6:20"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5244:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5255:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5267:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5275:6:20","type":""}],"src":"5199:474:20"},{"body":{"nodeType":"YulBlock","src":"5762:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"5808:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5810:77:20"},"nodeType":"YulFunctionCall","src":"5810:79:20"},"nodeType":"YulExpressionStatement","src":"5810:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5783:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"5792:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5779:3:20"},"nodeType":"YulFunctionCall","src":"5779:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"5804:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5775:3:20"},"nodeType":"YulFunctionCall","src":"5775:32:20"},"nodeType":"YulIf","src":"5772:119:20"},{"nodeType":"YulBlock","src":"5901:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5916:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"5930:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5920:6:20","type":""}]},{"nodeType":"YulAssignment","src":"5945:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5980:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"5991:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5976:3:20"},"nodeType":"YulFunctionCall","src":"5976:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6000:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5955:20:20"},"nodeType":"YulFunctionCall","src":"5955:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5945:6:20"}]}]},{"nodeType":"YulBlock","src":"6028:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6043:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"6057:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6047:6:20","type":""}]},{"nodeType":"YulAssignment","src":"6073:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6108:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"6119:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6104:3:20"},"nodeType":"YulFunctionCall","src":"6104:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6128:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6083:20:20"},"nodeType":"YulFunctionCall","src":"6083:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6073:6:20"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5724:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5735:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5747:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5755:6:20","type":""}],"src":"5679:474:20"},{"body":{"nodeType":"YulBlock","src":"6248:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6265:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6268:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6258:6:20"},"nodeType":"YulFunctionCall","src":"6258:12:20"},"nodeType":"YulExpressionStatement","src":"6258:12:20"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6159:117:20"},{"body":{"nodeType":"YulBlock","src":"6371:28:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6388:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6391:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6381:6:20"},"nodeType":"YulFunctionCall","src":"6381:12:20"},"nodeType":"YulExpressionStatement","src":"6381:12:20"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"6282:117:20"},{"body":{"nodeType":"YulBlock","src":"6453:54:20","statements":[{"nodeType":"YulAssignment","src":"6463:38:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6481:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"6488:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6477:3:20"},"nodeType":"YulFunctionCall","src":"6477:14:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6497:2:20","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6493:3:20"},"nodeType":"YulFunctionCall","src":"6493:7:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6473:3:20"},"nodeType":"YulFunctionCall","src":"6473:28:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6463:6:20"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6436:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"6446:6:20","type":""}],"src":"6405:102:20"},{"body":{"nodeType":"YulBlock","src":"6541:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6558:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6561:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6551:6:20"},"nodeType":"YulFunctionCall","src":"6551:88:20"},"nodeType":"YulExpressionStatement","src":"6551:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6655:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6658:4:20","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6648:6:20"},"nodeType":"YulFunctionCall","src":"6648:15:20"},"nodeType":"YulExpressionStatement","src":"6648:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6679:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6682:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6672:6:20"},"nodeType":"YulFunctionCall","src":"6672:15:20"},"nodeType":"YulExpressionStatement","src":"6672:15:20"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"6513:180:20"},{"body":{"nodeType":"YulBlock","src":"6742:238:20","statements":[{"nodeType":"YulVariableDeclaration","src":"6752:58:20","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6774:6:20"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6804:4:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6782:21:20"},"nodeType":"YulFunctionCall","src":"6782:27:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6770:3:20"},"nodeType":"YulFunctionCall","src":"6770:40:20"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"6756:10:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"6921:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6923:16:20"},"nodeType":"YulFunctionCall","src":"6923:18:20"},"nodeType":"YulExpressionStatement","src":"6923:18:20"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6864:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"6876:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6861:2:20"},"nodeType":"YulFunctionCall","src":"6861:34:20"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6900:10:20"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6912:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6897:2:20"},"nodeType":"YulFunctionCall","src":"6897:22:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6858:2:20"},"nodeType":"YulFunctionCall","src":"6858:62:20"},"nodeType":"YulIf","src":"6855:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6959:2:20","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6963:10:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6952:6:20"},"nodeType":"YulFunctionCall","src":"6952:22:20"},"nodeType":"YulExpressionStatement","src":"6952:22:20"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6728:6:20","type":""},{"name":"size","nodeType":"YulTypedName","src":"6736:4:20","type":""}],"src":"6699:281:20"},{"body":{"nodeType":"YulBlock","src":"7027:88:20","statements":[{"nodeType":"YulAssignment","src":"7037:30:20","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7047:18:20"},"nodeType":"YulFunctionCall","src":"7047:20:20"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7037:6:20"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7096:6:20"},{"name":"size","nodeType":"YulIdentifier","src":"7104:4:20"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7076:19:20"},"nodeType":"YulFunctionCall","src":"7076:33:20"},"nodeType":"YulExpressionStatement","src":"7076:33:20"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7011:4:20","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7020:6:20","type":""}],"src":"6986:129:20"},{"body":{"nodeType":"YulBlock","src":"7188:241:20","statements":[{"body":{"nodeType":"YulBlock","src":"7293:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7295:16:20"},"nodeType":"YulFunctionCall","src":"7295:18:20"},"nodeType":"YulExpressionStatement","src":"7295:18:20"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7265:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"7273:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7262:2:20"},"nodeType":"YulFunctionCall","src":"7262:30:20"},"nodeType":"YulIf","src":"7259:56:20"},{"nodeType":"YulAssignment","src":"7325:37:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7355:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7333:21:20"},"nodeType":"YulFunctionCall","src":"7333:29:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7325:4:20"}]},{"nodeType":"YulAssignment","src":"7399:23:20","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7411:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"7417:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7407:3:20"},"nodeType":"YulFunctionCall","src":"7407:15:20"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7399:4:20"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7172:6:20","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7183:4:20","type":""}],"src":"7121:308:20"},{"body":{"nodeType":"YulBlock","src":"7499:82:20","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7522:3:20"},{"name":"src","nodeType":"YulIdentifier","src":"7527:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7532:6:20"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"7509:12:20"},"nodeType":"YulFunctionCall","src":"7509:30:20"},"nodeType":"YulExpressionStatement","src":"7509:30:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7559:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7564:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7555:3:20"},"nodeType":"YulFunctionCall","src":"7555:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"7573:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7548:6:20"},"nodeType":"YulFunctionCall","src":"7548:27:20"},"nodeType":"YulExpressionStatement","src":"7548:27:20"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7481:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7486:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"7491:6:20","type":""}],"src":"7435:146:20"},{"body":{"nodeType":"YulBlock","src":"7671:341:20","statements":[{"nodeType":"YulAssignment","src":"7681:75:20","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7748:6:20"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7706:41:20"},"nodeType":"YulFunctionCall","src":"7706:49:20"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7690:15:20"},"nodeType":"YulFunctionCall","src":"7690:66:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7681:5:20"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7772:5:20"},{"name":"length","nodeType":"YulIdentifier","src":"7779:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7765:6:20"},"nodeType":"YulFunctionCall","src":"7765:21:20"},"nodeType":"YulExpressionStatement","src":"7765:21:20"},{"nodeType":"YulVariableDeclaration","src":"7795:27:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7810:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"7817:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7806:3:20"},"nodeType":"YulFunctionCall","src":"7806:16:20"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7799:3:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"7860:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"7862:77:20"},"nodeType":"YulFunctionCall","src":"7862:79:20"},"nodeType":"YulExpressionStatement","src":"7862:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7841:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7846:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7837:3:20"},"nodeType":"YulFunctionCall","src":"7837:16:20"},{"name":"end","nodeType":"YulIdentifier","src":"7855:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7834:2:20"},"nodeType":"YulFunctionCall","src":"7834:25:20"},"nodeType":"YulIf","src":"7831:112:20"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7989:3:20"},{"name":"dst","nodeType":"YulIdentifier","src":"7994:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"7999:6:20"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7952:36:20"},"nodeType":"YulFunctionCall","src":"7952:54:20"},"nodeType":"YulExpressionStatement","src":"7952:54:20"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7644:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"7649:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"7657:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7665:5:20","type":""}],"src":"7587:425:20"},{"body":{"nodeType":"YulBlock","src":"8094:278:20","statements":[{"body":{"nodeType":"YulBlock","src":"8143:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8145:77:20"},"nodeType":"YulFunctionCall","src":"8145:79:20"},"nodeType":"YulExpressionStatement","src":"8145:79:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8122:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8130:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8118:3:20"},"nodeType":"YulFunctionCall","src":"8118:17:20"},{"name":"end","nodeType":"YulIdentifier","src":"8137:3:20"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8114:3:20"},"nodeType":"YulFunctionCall","src":"8114:27:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8107:6:20"},"nodeType":"YulFunctionCall","src":"8107:35:20"},"nodeType":"YulIf","src":"8104:122:20"},{"nodeType":"YulVariableDeclaration","src":"8235:34:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8262:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8249:12:20"},"nodeType":"YulFunctionCall","src":"8249:20:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8239:6:20","type":""}]},{"nodeType":"YulAssignment","src":"8278:88:20","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8339:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"8347:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8335:3:20"},"nodeType":"YulFunctionCall","src":"8335:17:20"},{"name":"length","nodeType":"YulIdentifier","src":"8354:6:20"},{"name":"end","nodeType":"YulIdentifier","src":"8362:3:20"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8287:47:20"},"nodeType":"YulFunctionCall","src":"8287:79:20"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8278:5:20"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8072:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"8080:3:20","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8088:5:20","type":""}],"src":"8032:340:20"},{"body":{"nodeType":"YulBlock","src":"8421:43:20","statements":[{"nodeType":"YulAssignment","src":"8431:27:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8446:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"8453:4:20","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8442:3:20"},"nodeType":"YulFunctionCall","src":"8442:16:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8431:7:20"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8403:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8413:7:20","type":""}],"src":"8378:86:20"},{"body":{"nodeType":"YulBlock","src":"8511:77:20","statements":[{"body":{"nodeType":"YulBlock","src":"8566:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8575:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8578:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8568:6:20"},"nodeType":"YulFunctionCall","src":"8568:12:20"},"nodeType":"YulExpressionStatement","src":"8568:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8534:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8557:5:20"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"8541:15:20"},"nodeType":"YulFunctionCall","src":"8541:22:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8531:2:20"},"nodeType":"YulFunctionCall","src":"8531:33:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8524:6:20"},"nodeType":"YulFunctionCall","src":"8524:41:20"},"nodeType":"YulIf","src":"8521:61:20"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8504:5:20","type":""}],"src":"8470:118:20"},{"body":{"nodeType":"YulBlock","src":"8644:85:20","statements":[{"nodeType":"YulAssignment","src":"8654:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8676:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8663:12:20"},"nodeType":"YulFunctionCall","src":"8663:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8654:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8717:5:20"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"8692:24:20"},"nodeType":"YulFunctionCall","src":"8692:31:20"},"nodeType":"YulExpressionStatement","src":"8692:31:20"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8622:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"8630:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8638:5:20","type":""}],"src":"8594:135:20"},{"body":{"nodeType":"YulBlock","src":"8928:1332:20","statements":[{"body":{"nodeType":"YulBlock","src":"8975:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8977:77:20"},"nodeType":"YulFunctionCall","src":"8977:79:20"},"nodeType":"YulExpressionStatement","src":"8977:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8949:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"8958:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8945:3:20"},"nodeType":"YulFunctionCall","src":"8945:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"8970:3:20","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8941:3:20"},"nodeType":"YulFunctionCall","src":"8941:33:20"},"nodeType":"YulIf","src":"8938:120:20"},{"nodeType":"YulBlock","src":"9068:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9083:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9097:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9087:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9112:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9147:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9158:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9143:3:20"},"nodeType":"YulFunctionCall","src":"9143:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9167:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9122:20:20"},"nodeType":"YulFunctionCall","src":"9122:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9112:6:20"}]}]},{"nodeType":"YulBlock","src":"9195:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9210:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9224:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9214:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9240:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9275:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9286:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9271:3:20"},"nodeType":"YulFunctionCall","src":"9271:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9295:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9250:20:20"},"nodeType":"YulFunctionCall","src":"9250:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9240:6:20"}]}]},{"nodeType":"YulBlock","src":"9323:288:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9338:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9369:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"9380:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9365:3:20"},"nodeType":"YulFunctionCall","src":"9365:18:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9352:12:20"},"nodeType":"YulFunctionCall","src":"9352:32:20"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9342:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"9431:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9433:77:20"},"nodeType":"YulFunctionCall","src":"9433:79:20"},"nodeType":"YulExpressionStatement","src":"9433:79:20"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9403:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"9411:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9400:2:20"},"nodeType":"YulFunctionCall","src":"9400:30:20"},"nodeType":"YulIf","src":"9397:117:20"},{"nodeType":"YulAssignment","src":"9528:73:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9573:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9584:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9569:3:20"},"nodeType":"YulFunctionCall","src":"9569:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9593:7:20"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"9538:30:20"},"nodeType":"YulFunctionCall","src":"9538:63:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9528:6:20"}]}]},{"nodeType":"YulBlock","src":"9621:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9636:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9650:2:20","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9640:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9666:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9701:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9712:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9697:3:20"},"nodeType":"YulFunctionCall","src":"9697:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9721:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9676:20:20"},"nodeType":"YulFunctionCall","src":"9676:53:20"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9666:6:20"}]}]},{"nodeType":"YulBlock","src":"9749:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9764:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9778:3:20","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9768:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9795:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9830:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9841:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9826:3:20"},"nodeType":"YulFunctionCall","src":"9826:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9850:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9805:20:20"},"nodeType":"YulFunctionCall","src":"9805:53:20"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"9795:6:20"}]}]},{"nodeType":"YulBlock","src":"9878:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"9893:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"9907:3:20","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9897:6:20","type":""}]},{"nodeType":"YulAssignment","src":"9924:61:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9957:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"9968:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9953:3:20"},"nodeType":"YulFunctionCall","src":"9953:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9977:7:20"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"9934:18:20"},"nodeType":"YulFunctionCall","src":"9934:51:20"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9924:6:20"}]}]},{"nodeType":"YulBlock","src":"10005:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10020:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10034:3:20","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10024:6:20","type":""}]},{"nodeType":"YulAssignment","src":"10051:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10086:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10097:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10082:3:20"},"nodeType":"YulFunctionCall","src":"10082:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10106:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10061:20:20"},"nodeType":"YulFunctionCall","src":"10061:53:20"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"10051:6:20"}]}]},{"nodeType":"YulBlock","src":"10134:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10149:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10163:3:20","type":"","value":"224"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10153:6:20","type":""}]},{"nodeType":"YulAssignment","src":"10180:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10215:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10226:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10211:3:20"},"nodeType":"YulFunctionCall","src":"10211:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10235:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10190:20:20"},"nodeType":"YulFunctionCall","src":"10190:53:20"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"10180:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_string_memory_ptrt_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8842:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8853:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8865:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8873:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8881:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8889:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8897:6:20","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8905:6:20","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8913:6:20","type":""},{"name":"value7","nodeType":"YulTypedName","src":"8921:6:20","type":""}],"src":"8735:1525:20"},{"body":{"nodeType":"YulBlock","src":"10332:263:20","statements":[{"body":{"nodeType":"YulBlock","src":"10378:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10380:77:20"},"nodeType":"YulFunctionCall","src":"10380:79:20"},"nodeType":"YulExpressionStatement","src":"10380:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10353:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"10362:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10349:3:20"},"nodeType":"YulFunctionCall","src":"10349:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"10374:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10345:3:20"},"nodeType":"YulFunctionCall","src":"10345:32:20"},"nodeType":"YulIf","src":"10342:119:20"},{"nodeType":"YulBlock","src":"10471:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"10486:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"10500:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10490:6:20","type":""}]},{"nodeType":"YulAssignment","src":"10515:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10550:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"10561:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10546:3:20"},"nodeType":"YulFunctionCall","src":"10546:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10570:7:20"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10525:20:20"},"nodeType":"YulFunctionCall","src":"10525:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10515:6:20"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10302:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10313:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10325:6:20","type":""}],"src":"10266:329:20"},{"body":{"nodeType":"YulBlock","src":"10699:124:20","statements":[{"nodeType":"YulAssignment","src":"10709:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10721:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10732:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10717:3:20"},"nodeType":"YulFunctionCall","src":"10717:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10709:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10789:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10802:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"10813:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10798:3:20"},"nodeType":"YulFunctionCall","src":"10798:17:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10745:43:20"},"nodeType":"YulFunctionCall","src":"10745:71:20"},"nodeType":"YulExpressionStatement","src":"10745:71:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10671:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10683:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10694:4:20","type":""}],"src":"10601:222:20"},{"body":{"nodeType":"YulBlock","src":"10961:775:20","statements":[{"body":{"nodeType":"YulBlock","src":"11008:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11010:77:20"},"nodeType":"YulFunctionCall","src":"11010:79:20"},"nodeType":"YulExpressionStatement","src":"11010:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10982:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"10991:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10978:3:20"},"nodeType":"YulFunctionCall","src":"10978:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"11003:3:20","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10974:3:20"},"nodeType":"YulFunctionCall","src":"10974:33:20"},"nodeType":"YulIf","src":"10971:120:20"},{"nodeType":"YulBlock","src":"11101:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11116:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"11130:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11120:6:20","type":""}]},{"nodeType":"YulAssignment","src":"11145:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11180:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"11191:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11176:3:20"},"nodeType":"YulFunctionCall","src":"11176:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11200:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11155:20:20"},"nodeType":"YulFunctionCall","src":"11155:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11145:6:20"}]}]},{"nodeType":"YulBlock","src":"11228:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11243:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"11257:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11247:6:20","type":""}]},{"nodeType":"YulAssignment","src":"11273:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11308:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"11319:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11304:3:20"},"nodeType":"YulFunctionCall","src":"11304:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11328:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11283:20:20"},"nodeType":"YulFunctionCall","src":"11283:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11273:6:20"}]}]},{"nodeType":"YulBlock","src":"11356:116:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11371:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"11385:2:20","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11375:6:20","type":""}]},{"nodeType":"YulAssignment","src":"11401:61:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11434:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"11445:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11430:3:20"},"nodeType":"YulFunctionCall","src":"11430:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11454:7:20"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"11411:18:20"},"nodeType":"YulFunctionCall","src":"11411:51:20"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11401:6:20"}]}]},{"nodeType":"YulBlock","src":"11482:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11497:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"11511:2:20","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11501:6:20","type":""}]},{"nodeType":"YulAssignment","src":"11527:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11562:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"11573:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11558:3:20"},"nodeType":"YulFunctionCall","src":"11558:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11582:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"11537:20:20"},"nodeType":"YulFunctionCall","src":"11537:53:20"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11527:6:20"}]}]},{"nodeType":"YulBlock","src":"11610:119:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11625:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"11639:3:20","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11629:6:20","type":""}]},{"nodeType":"YulAssignment","src":"11656:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11691:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"11702:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11687:3:20"},"nodeType":"YulFunctionCall","src":"11687:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11711:7:20"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"11666:20:20"},"nodeType":"YulFunctionCall","src":"11666:53:20"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11656:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10899:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10910:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10922:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10930:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10938:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10946:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"10954:6:20","type":""}],"src":"10829:907:20"},{"body":{"nodeType":"YulBlock","src":"11825:391:20","statements":[{"body":{"nodeType":"YulBlock","src":"11871:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11873:77:20"},"nodeType":"YulFunctionCall","src":"11873:79:20"},"nodeType":"YulExpressionStatement","src":"11873:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11846:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"11855:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11842:3:20"},"nodeType":"YulFunctionCall","src":"11842:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"11867:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11838:3:20"},"nodeType":"YulFunctionCall","src":"11838:32:20"},"nodeType":"YulIf","src":"11835:119:20"},{"nodeType":"YulBlock","src":"11964:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"11979:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"11993:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11983:6:20","type":""}]},{"nodeType":"YulAssignment","src":"12008:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12043:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"12054:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12039:3:20"},"nodeType":"YulFunctionCall","src":"12039:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12063:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12018:20:20"},"nodeType":"YulFunctionCall","src":"12018:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12008:6:20"}]}]},{"nodeType":"YulBlock","src":"12091:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12106:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"12120:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12110:6:20","type":""}]},{"nodeType":"YulAssignment","src":"12136:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12171:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"12182:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12167:3:20"},"nodeType":"YulFunctionCall","src":"12167:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12191:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12146:20:20"},"nodeType":"YulFunctionCall","src":"12146:53:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12136:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11787:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11798:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11810:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11818:6:20","type":""}],"src":"11742:474:20"},{"body":{"nodeType":"YulBlock","src":"12287:53:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12304:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12327:5:20"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"12309:17:20"},"nodeType":"YulFunctionCall","src":"12309:24:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12297:6:20"},"nodeType":"YulFunctionCall","src":"12297:37:20"},"nodeType":"YulExpressionStatement","src":"12297:37:20"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12275:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12282:3:20","type":""}],"src":"12222:118:20"},{"body":{"nodeType":"YulBlock","src":"12405:40:20","statements":[{"nodeType":"YulAssignment","src":"12416:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12432:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12426:5:20"},"nodeType":"YulFunctionCall","src":"12426:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12416:6:20"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12388:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12398:6:20","type":""}],"src":"12346:99:20"},{"body":{"nodeType":"YulBlock","src":"12547:73:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12564:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"12569:6:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12557:6:20"},"nodeType":"YulFunctionCall","src":"12557:19:20"},"nodeType":"YulExpressionStatement","src":"12557:19:20"},{"nodeType":"YulAssignment","src":"12585:29:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12604:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"12609:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12600:3:20"},"nodeType":"YulFunctionCall","src":"12600:14:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"12585:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12519:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"12524:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"12535:11:20","type":""}],"src":"12451:169:20"},{"body":{"nodeType":"YulBlock","src":"12688:184:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12698:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"12707:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12702:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"12767:63:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12792:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"12797:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12788:3:20"},"nodeType":"YulFunctionCall","src":"12788:11:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12811:3:20"},{"name":"i","nodeType":"YulIdentifier","src":"12816:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12807:3:20"},"nodeType":"YulFunctionCall","src":"12807:11:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12801:5:20"},"nodeType":"YulFunctionCall","src":"12801:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12781:6:20"},"nodeType":"YulFunctionCall","src":"12781:39:20"},"nodeType":"YulExpressionStatement","src":"12781:39:20"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12728:1:20"},{"name":"length","nodeType":"YulIdentifier","src":"12731:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12725:2:20"},"nodeType":"YulFunctionCall","src":"12725:13:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12739:19:20","statements":[{"nodeType":"YulAssignment","src":"12741:15:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12750:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"12753:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12746:3:20"},"nodeType":"YulFunctionCall","src":"12746:10:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12741:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"12721:3:20","statements":[]},"src":"12717:113:20"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12850:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"12855:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12846:3:20"},"nodeType":"YulFunctionCall","src":"12846:16:20"},{"kind":"number","nodeType":"YulLiteral","src":"12864:1:20","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12839:6:20"},"nodeType":"YulFunctionCall","src":"12839:27:20"},"nodeType":"YulExpressionStatement","src":"12839:27:20"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12670:3:20","type":""},{"name":"dst","nodeType":"YulTypedName","src":"12675:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"12680:6:20","type":""}],"src":"12626:246:20"},{"body":{"nodeType":"YulBlock","src":"12970:285:20","statements":[{"nodeType":"YulVariableDeclaration","src":"12980:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13027:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"12994:32:20"},"nodeType":"YulFunctionCall","src":"12994:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12984:6:20","type":""}]},{"nodeType":"YulAssignment","src":"13042:78:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13108:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"13113:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13049:58:20"},"nodeType":"YulFunctionCall","src":"13049:71:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13042:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13168:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"13175:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13164:3:20"},"nodeType":"YulFunctionCall","src":"13164:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"13182:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"13187:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13129:34:20"},"nodeType":"YulFunctionCall","src":"13129:65:20"},"nodeType":"YulExpressionStatement","src":"13129:65:20"},{"nodeType":"YulAssignment","src":"13203:46:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13214:3:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13241:6:20"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13219:21:20"},"nodeType":"YulFunctionCall","src":"13219:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13210:3:20"},"nodeType":"YulFunctionCall","src":"13210:39:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13203:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12951:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12958:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12966:3:20","type":""}],"src":"12878:377:20"},{"body":{"nodeType":"YulBlock","src":"13585:839:20","statements":[{"nodeType":"YulAssignment","src":"13595:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13607:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13618:3:20","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13603:3:20"},"nodeType":"YulFunctionCall","src":"13603:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13595:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13676:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13689:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13700:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13685:3:20"},"nodeType":"YulFunctionCall","src":"13685:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13632:43:20"},"nodeType":"YulFunctionCall","src":"13632:71:20"},"nodeType":"YulExpressionStatement","src":"13632:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13757:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13770:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13781:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13766:3:20"},"nodeType":"YulFunctionCall","src":"13766:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13713:43:20"},"nodeType":"YulFunctionCall","src":"13713:72:20"},"nodeType":"YulExpressionStatement","src":"13713:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13839:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13852:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13863:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13848:3:20"},"nodeType":"YulFunctionCall","src":"13848:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13795:43:20"},"nodeType":"YulFunctionCall","src":"13795:72:20"},"nodeType":"YulExpressionStatement","src":"13795:72:20"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13921:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13934:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"13945:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13930:3:20"},"nodeType":"YulFunctionCall","src":"13930:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13877:43:20"},"nodeType":"YulFunctionCall","src":"13877:72:20"},"nodeType":"YulExpressionStatement","src":"13877:72:20"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"14003:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14016:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14027:3:20","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14012:3:20"},"nodeType":"YulFunctionCall","src":"14012:19:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13959:43:20"},"nodeType":"YulFunctionCall","src":"13959:73:20"},"nodeType":"YulExpressionStatement","src":"13959:73:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14053:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14064:3:20","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14049:3:20"},"nodeType":"YulFunctionCall","src":"14049:19:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14074:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"14080:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14070:3:20"},"nodeType":"YulFunctionCall","src":"14070:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14042:6:20"},"nodeType":"YulFunctionCall","src":"14042:49:20"},"nodeType":"YulExpressionStatement","src":"14042:49:20"},{"nodeType":"YulAssignment","src":"14100:86:20","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"14172:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"14181:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14108:63:20"},"nodeType":"YulFunctionCall","src":"14108:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14100:4:20"}]},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"14234:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14247:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14258:3:20","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14243:3:20"},"nodeType":"YulFunctionCall","src":"14243:19:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"14196:37:20"},"nodeType":"YulFunctionCall","src":"14196:67:20"},"nodeType":"YulExpressionStatement","src":"14196:67:20"},{"expression":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"14311:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14324:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14335:3:20","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14320:3:20"},"nodeType":"YulFunctionCall","src":"14320:19:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"14273:37:20"},"nodeType":"YulFunctionCall","src":"14273:67:20"},"nodeType":"YulExpressionStatement","src":"14273:67:20"},{"expression":{"arguments":[{"name":"value8","nodeType":"YulIdentifier","src":"14388:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14401:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"14412:3:20","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14397:3:20"},"nodeType":"YulFunctionCall","src":"14397:19:20"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"14350:37:20"},"nodeType":"YulFunctionCall","src":"14350:67:20"},"nodeType":"YulExpressionStatement","src":"14350:67:20"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_bool_t_bool_t_bool__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_bool_t_bool_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13493:9:20","type":""},{"name":"value8","nodeType":"YulTypedName","src":"13505:6:20","type":""},{"name":"value7","nodeType":"YulTypedName","src":"13513:6:20","type":""},{"name":"value6","nodeType":"YulTypedName","src":"13521:6:20","type":""},{"name":"value5","nodeType":"YulTypedName","src":"13529:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13537:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13545:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13553:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13561:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13569:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13580:4:20","type":""}],"src":"13261:1163:20"},{"body":{"nodeType":"YulBlock","src":"14470:76:20","statements":[{"body":{"nodeType":"YulBlock","src":"14524:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14533:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14536:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14526:6:20"},"nodeType":"YulFunctionCall","src":"14526:12:20"},"nodeType":"YulExpressionStatement","src":"14526:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14493:5:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14515:5:20"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"14500:14:20"},"nodeType":"YulFunctionCall","src":"14500:21:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14490:2:20"},"nodeType":"YulFunctionCall","src":"14490:32:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14483:6:20"},"nodeType":"YulFunctionCall","src":"14483:40:20"},"nodeType":"YulIf","src":"14480:60:20"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14463:5:20","type":""}],"src":"14430:116:20"},{"body":{"nodeType":"YulBlock","src":"14601:84:20","statements":[{"nodeType":"YulAssignment","src":"14611:29:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14633:6:20"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14620:12:20"},"nodeType":"YulFunctionCall","src":"14620:20:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14611:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14673:5:20"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"14649:23:20"},"nodeType":"YulFunctionCall","src":"14649:30:20"},"nodeType":"YulExpressionStatement","src":"14649:30:20"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14579:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"14587:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"14595:5:20","type":""}],"src":"14552:133:20"},{"body":{"nodeType":"YulBlock","src":"14771:388:20","statements":[{"body":{"nodeType":"YulBlock","src":"14817:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14819:77:20"},"nodeType":"YulFunctionCall","src":"14819:79:20"},"nodeType":"YulExpressionStatement","src":"14819:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14792:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"14801:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14788:3:20"},"nodeType":"YulFunctionCall","src":"14788:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"14813:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14784:3:20"},"nodeType":"YulFunctionCall","src":"14784:32:20"},"nodeType":"YulIf","src":"14781:119:20"},{"nodeType":"YulBlock","src":"14910:117:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14925:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"14939:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14929:6:20","type":""}]},{"nodeType":"YulAssignment","src":"14954:63:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14989:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"15000:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14985:3:20"},"nodeType":"YulFunctionCall","src":"14985:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15009:7:20"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"14964:20:20"},"nodeType":"YulFunctionCall","src":"14964:53:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14954:6:20"}]}]},{"nodeType":"YulBlock","src":"15037:115:20","statements":[{"nodeType":"YulVariableDeclaration","src":"15052:16:20","value":{"kind":"number","nodeType":"YulLiteral","src":"15066:2:20","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15056:6:20","type":""}]},{"nodeType":"YulAssignment","src":"15082:60:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15114:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"15125:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15110:3:20"},"nodeType":"YulFunctionCall","src":"15110:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15134:7:20"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"15092:17:20"},"nodeType":"YulFunctionCall","src":"15092:50:20"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15082:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14733:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14744:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14756:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14764:6:20","type":""}],"src":"14691:468:20"},{"body":{"nodeType":"YulBlock","src":"15271:128:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15293:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"15301:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15289:3:20"},"nodeType":"YulFunctionCall","src":"15289:14:20"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"15305:34:20","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15282:6:20"},"nodeType":"YulFunctionCall","src":"15282:58:20"},"nodeType":"YulExpressionStatement","src":"15282:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15361:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"15369:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15357:3:20"},"nodeType":"YulFunctionCall","src":"15357:15:20"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"15374:17:20","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15350:6:20"},"nodeType":"YulFunctionCall","src":"15350:42:20"},"nodeType":"YulExpressionStatement","src":"15350:42:20"}]},"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15263:6:20","type":""}],"src":"15165:234:20"},{"body":{"nodeType":"YulBlock","src":"15551:220:20","statements":[{"nodeType":"YulAssignment","src":"15561:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15627:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15632:2:20","type":"","value":"47"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15568:58:20"},"nodeType":"YulFunctionCall","src":"15568:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15561:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15733:3:20"}],"functionName":{"name":"store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","nodeType":"YulIdentifier","src":"15644:88:20"},"nodeType":"YulFunctionCall","src":"15644:93:20"},"nodeType":"YulExpressionStatement","src":"15644:93:20"},{"nodeType":"YulAssignment","src":"15746:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15757:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15762:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15753:3:20"},"nodeType":"YulFunctionCall","src":"15753:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15746:3:20"}]}]},"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15539:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15547:3:20","type":""}],"src":"15405:366:20"},{"body":{"nodeType":"YulBlock","src":"15948:248:20","statements":[{"nodeType":"YulAssignment","src":"15958:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15970:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"15981:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15966:3:20"},"nodeType":"YulFunctionCall","src":"15966:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15958:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16005:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"16016:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16001:3:20"},"nodeType":"YulFunctionCall","src":"16001:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16024:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"16030:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16020:3:20"},"nodeType":"YulFunctionCall","src":"16020:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15994:6:20"},"nodeType":"YulFunctionCall","src":"15994:47:20"},"nodeType":"YulExpressionStatement","src":"15994:47:20"},{"nodeType":"YulAssignment","src":"16050:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16184:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16058:124:20"},"nodeType":"YulFunctionCall","src":"16058:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16050:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15928:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15943:4:20","type":""}],"src":"15777:419:20"},{"body":{"nodeType":"YulBlock","src":"16308:125:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16330:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16338:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16326:3:20"},"nodeType":"YulFunctionCall","src":"16326:14:20"},{"hexValue":"4d75737420686176652061646d696e20726f6c6520746f20706572666f726d20","kind":"string","nodeType":"YulLiteral","src":"16342:34:20","type":"","value":"Must have admin role to perform "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16319:6:20"},"nodeType":"YulFunctionCall","src":"16319:58:20"},"nodeType":"YulExpressionStatement","src":"16319:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16398:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16406:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16394:3:20"},"nodeType":"YulFunctionCall","src":"16394:15:20"},{"hexValue":"7468697320616374696f6e2e","kind":"string","nodeType":"YulLiteral","src":"16411:14:20","type":"","value":"this action."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16387:6:20"},"nodeType":"YulFunctionCall","src":"16387:39:20"},"nodeType":"YulExpressionStatement","src":"16387:39:20"}]},"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16300:6:20","type":""}],"src":"16202:231:20"},{"body":{"nodeType":"YulBlock","src":"16585:220:20","statements":[{"nodeType":"YulAssignment","src":"16595:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16661:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16666:2:20","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16602:58:20"},"nodeType":"YulFunctionCall","src":"16602:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16595:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16767:3:20"}],"functionName":{"name":"store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513","nodeType":"YulIdentifier","src":"16678:88:20"},"nodeType":"YulFunctionCall","src":"16678:93:20"},"nodeType":"YulExpressionStatement","src":"16678:93:20"},{"nodeType":"YulAssignment","src":"16780:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16791:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"16796:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16787:3:20"},"nodeType":"YulFunctionCall","src":"16787:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16780:3:20"}]}]},"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16573:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16581:3:20","type":""}],"src":"16439:366:20"},{"body":{"nodeType":"YulBlock","src":"16982:248:20","statements":[{"nodeType":"YulAssignment","src":"16992:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17004:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"17015:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17000:3:20"},"nodeType":"YulFunctionCall","src":"17000:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16992:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17039:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"17050:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17035:3:20"},"nodeType":"YulFunctionCall","src":"17035:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17058:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"17064:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17054:3:20"},"nodeType":"YulFunctionCall","src":"17054:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17028:6:20"},"nodeType":"YulFunctionCall","src":"17028:47:20"},"nodeType":"YulExpressionStatement","src":"17028:47:20"},{"nodeType":"YulAssignment","src":"17084:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17218:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17092:124:20"},"nodeType":"YulFunctionCall","src":"17092:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17084:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16962:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16977:4:20","type":""}],"src":"16811:419:20"},{"body":{"nodeType":"YulBlock","src":"17342:127:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17364:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"17372:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17360:3:20"},"nodeType":"YulFunctionCall","src":"17360:14:20"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"17376:34:20","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17353:6:20"},"nodeType":"YulFunctionCall","src":"17353:58:20"},"nodeType":"YulExpressionStatement","src":"17353:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17432:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"17440:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17428:3:20"},"nodeType":"YulFunctionCall","src":"17428:15:20"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"17445:16:20","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17421:6:20"},"nodeType":"YulFunctionCall","src":"17421:41:20"},"nodeType":"YulExpressionStatement","src":"17421:41:20"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17334:6:20","type":""}],"src":"17236:233:20"},{"body":{"nodeType":"YulBlock","src":"17621:220:20","statements":[{"nodeType":"YulAssignment","src":"17631:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17697:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17702:2:20","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17638:58:20"},"nodeType":"YulFunctionCall","src":"17638:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17631:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17803:3:20"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"17714:88:20"},"nodeType":"YulFunctionCall","src":"17714:93:20"},"nodeType":"YulExpressionStatement","src":"17714:93:20"},{"nodeType":"YulAssignment","src":"17816:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17827:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"17832:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17823:3:20"},"nodeType":"YulFunctionCall","src":"17823:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17816:3:20"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17609:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17617:3:20","type":""}],"src":"17475:366:20"},{"body":{"nodeType":"YulBlock","src":"18018:248:20","statements":[{"nodeType":"YulAssignment","src":"18028:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18040:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"18051:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18036:3:20"},"nodeType":"YulFunctionCall","src":"18036:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18028:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18075:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"18086:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18071:3:20"},"nodeType":"YulFunctionCall","src":"18071:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18094:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"18100:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18090:3:20"},"nodeType":"YulFunctionCall","src":"18090:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18064:6:20"},"nodeType":"YulFunctionCall","src":"18064:47:20"},"nodeType":"YulExpressionStatement","src":"18064:47:20"},{"nodeType":"YulAssignment","src":"18120:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18254:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18128:124:20"},"nodeType":"YulFunctionCall","src":"18128:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18120:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17998:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18013:4:20","type":""}],"src":"17847:419:20"},{"body":{"nodeType":"YulBlock","src":"18325:32:20","statements":[{"nodeType":"YulAssignment","src":"18335:16:20","value":{"name":"value","nodeType":"YulIdentifier","src":"18346:5:20"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18335:7:20"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18307:5:20","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18317:7:20","type":""}],"src":"18272:85:20"},{"body":{"nodeType":"YulBlock","src":"18395:28:20","statements":[{"nodeType":"YulAssignment","src":"18405:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"18412:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"18405:3:20"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18381:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"18391:3:20","type":""}],"src":"18363:60:20"},{"body":{"nodeType":"YulBlock","src":"18495:88:20","statements":[{"nodeType":"YulAssignment","src":"18505:72:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18569:5:20"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"18543:25:20"},"nodeType":"YulFunctionCall","src":"18543:32:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"18534:8:20"},"nodeType":"YulFunctionCall","src":"18534:42:20"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"18518:15:20"},"nodeType":"YulFunctionCall","src":"18518:59:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"18505:9:20"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18475:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"18485:9:20","type":""}],"src":"18429:154:20"},{"body":{"nodeType":"YulBlock","src":"18660:72:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18677:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18719:5:20"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"18682:36:20"},"nodeType":"YulFunctionCall","src":"18682:43:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18670:6:20"},"nodeType":"YulFunctionCall","src":"18670:56:20"},"nodeType":"YulExpressionStatement","src":"18670:56:20"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18648:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18655:3:20","type":""}],"src":"18589:143:20"},{"body":{"nodeType":"YulBlock","src":"18842:130:20","statements":[{"nodeType":"YulAssignment","src":"18852:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18864:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"18875:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18860:3:20"},"nodeType":"YulFunctionCall","src":"18860:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18852:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18938:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18951:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"18962:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18947:3:20"},"nodeType":"YulFunctionCall","src":"18947:17:20"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"18888:49:20"},"nodeType":"YulFunctionCall","src":"18888:77:20"},"nodeType":"YulExpressionStatement","src":"18888:77:20"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18814:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18826:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18837:4:20","type":""}],"src":"18738:234:20"},{"body":{"nodeType":"YulBlock","src":"19006:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19023:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19026:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19016:6:20"},"nodeType":"YulFunctionCall","src":"19016:88:20"},"nodeType":"YulExpressionStatement","src":"19016:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19120:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19123:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19113:6:20"},"nodeType":"YulFunctionCall","src":"19113:15:20"},"nodeType":"YulExpressionStatement","src":"19113:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19144:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19147:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19137:6:20"},"nodeType":"YulFunctionCall","src":"19137:15:20"},"nodeType":"YulExpressionStatement","src":"19137:15:20"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"18978:180:20"},{"body":{"nodeType":"YulBlock","src":"19207:190:20","statements":[{"nodeType":"YulAssignment","src":"19217:33:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19244:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19226:17:20"},"nodeType":"YulFunctionCall","src":"19226:24:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19217:5:20"}]},{"body":{"nodeType":"YulBlock","src":"19340:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19342:16:20"},"nodeType":"YulFunctionCall","src":"19342:18:20"},"nodeType":"YulExpressionStatement","src":"19342:18:20"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19265:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"19272:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19262:2:20"},"nodeType":"YulFunctionCall","src":"19262:77:20"},"nodeType":"YulIf","src":"19259:103:20"},{"nodeType":"YulAssignment","src":"19371:20:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19382:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"19389:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19378:3:20"},"nodeType":"YulFunctionCall","src":"19378:13:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19371:3:20"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19193:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19203:3:20","type":""}],"src":"19164:233:20"},{"body":{"nodeType":"YulBlock","src":"19431:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19448:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19451:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19441:6:20"},"nodeType":"YulFunctionCall","src":"19441:88:20"},"nodeType":"YulExpressionStatement","src":"19441:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19545:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19548:4:20","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19538:6:20"},"nodeType":"YulFunctionCall","src":"19538:15:20"},"nodeType":"YulExpressionStatement","src":"19538:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19569:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19572:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19562:6:20"},"nodeType":"YulFunctionCall","src":"19562:15:20"},"nodeType":"YulExpressionStatement","src":"19562:15:20"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"19403:180:20"},{"body":{"nodeType":"YulBlock","src":"19640:269:20","statements":[{"nodeType":"YulAssignment","src":"19650:22:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19664:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"19670:1:20","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"19660:3:20"},"nodeType":"YulFunctionCall","src":"19660:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19650:6:20"}]},{"nodeType":"YulVariableDeclaration","src":"19681:38:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19711:4:20"},{"kind":"number","nodeType":"YulLiteral","src":"19717:1:20","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19707:3:20"},"nodeType":"YulFunctionCall","src":"19707:12:20"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"19685:18:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"19758:51:20","statements":[{"nodeType":"YulAssignment","src":"19772:27:20","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19786:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"19794:4:20","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19782:3:20"},"nodeType":"YulFunctionCall","src":"19782:17:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19772:6:20"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19738:18:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19731:6:20"},"nodeType":"YulFunctionCall","src":"19731:26:20"},"nodeType":"YulIf","src":"19728:81:20"},{"body":{"nodeType":"YulBlock","src":"19861:42:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"19875:16:20"},"nodeType":"YulFunctionCall","src":"19875:18:20"},"nodeType":"YulExpressionStatement","src":"19875:18:20"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19825:18:20"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19848:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"19856:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19845:2:20"},"nodeType":"YulFunctionCall","src":"19845:14:20"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19822:2:20"},"nodeType":"YulFunctionCall","src":"19822:38:20"},"nodeType":"YulIf","src":"19819:84:20"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"19624:4:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"19633:6:20","type":""}],"src":"19589:320:20"},{"body":{"nodeType":"YulBlock","src":"19969:87:20","statements":[{"nodeType":"YulAssignment","src":"19979:11:20","value":{"name":"ptr","nodeType":"YulIdentifier","src":"19987:3:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"19979:4:20"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20007:1:20","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"20010:3:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20000:6:20"},"nodeType":"YulFunctionCall","src":"20000:14:20"},"nodeType":"YulExpressionStatement","src":"20000:14:20"},{"nodeType":"YulAssignment","src":"20023:26:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20041:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20044:4:20","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"20031:9:20"},"nodeType":"YulFunctionCall","src":"20031:18:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"20023:4:20"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"19956:3:20","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"19964:4:20","type":""}],"src":"19915:141:20"},{"body":{"nodeType":"YulBlock","src":"20106:49:20","statements":[{"nodeType":"YulAssignment","src":"20116:33:20","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20134:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"20141:2:20","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20130:3:20"},"nodeType":"YulFunctionCall","src":"20130:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"20146:2:20","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"20126:3:20"},"nodeType":"YulFunctionCall","src":"20126:23:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"20116:6:20"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20089:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"20099:6:20","type":""}],"src":"20062:93:20"},{"body":{"nodeType":"YulBlock","src":"20214:54:20","statements":[{"nodeType":"YulAssignment","src":"20224:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"20249:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"20255:5:20"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20245:3:20"},"nodeType":"YulFunctionCall","src":"20245:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"20224:8:20"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"20189:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"20195:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"20205:8:20","type":""}],"src":"20161:107:20"},{"body":{"nodeType":"YulBlock","src":"20350:317:20","statements":[{"nodeType":"YulVariableDeclaration","src":"20360:35:20","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"20381:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"20393:1:20","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"20377:3:20"},"nodeType":"YulFunctionCall","src":"20377:18:20"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"20364:9:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20404:109:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"20435:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"20446:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"20416:18:20"},"nodeType":"YulFunctionCall","src":"20416:97:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"20408:4:20","type":""}]},{"nodeType":"YulAssignment","src":"20522:51:20","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"20553:9:20"},{"name":"toInsert","nodeType":"YulIdentifier","src":"20564:8:20"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"20534:18:20"},"nodeType":"YulFunctionCall","src":"20534:39:20"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"20522:8:20"}]},{"nodeType":"YulAssignment","src":"20582:30:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20595:5:20"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"20606:4:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20602:3:20"},"nodeType":"YulFunctionCall","src":"20602:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20591:3:20"},"nodeType":"YulFunctionCall","src":"20591:21:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20582:5:20"}]},{"nodeType":"YulAssignment","src":"20621:40:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20634:5:20"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"20645:8:20"},{"name":"mask","nodeType":"YulIdentifier","src":"20655:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20641:3:20"},"nodeType":"YulFunctionCall","src":"20641:19:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"20631:2:20"},"nodeType":"YulFunctionCall","src":"20631:30:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"20621:6:20"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20311:5:20","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"20318:10:20","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"20330:8:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"20343:6:20","type":""}],"src":"20274:393:20"},{"body":{"nodeType":"YulBlock","src":"20733:82:20","statements":[{"nodeType":"YulAssignment","src":"20743:66:20","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20801:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20783:17:20"},"nodeType":"YulFunctionCall","src":"20783:24:20"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"20774:8:20"},"nodeType":"YulFunctionCall","src":"20774:34:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20756:17:20"},"nodeType":"YulFunctionCall","src":"20756:53:20"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"20743:9:20"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20713:5:20","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"20723:9:20","type":""}],"src":"20673:142:20"},{"body":{"nodeType":"YulBlock","src":"20868:28:20","statements":[{"nodeType":"YulAssignment","src":"20878:12:20","value":{"name":"value","nodeType":"YulIdentifier","src":"20885:5:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"20878:3:20"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20854:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"20864:3:20","type":""}],"src":"20821:75:20"},{"body":{"nodeType":"YulBlock","src":"20978:193:20","statements":[{"nodeType":"YulVariableDeclaration","src":"20988:63:20","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"21043:7:20"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"21012:30:20"},"nodeType":"YulFunctionCall","src":"21012:39:20"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"20992:16:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"21067:4:20"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"21107:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"21101:5:20"},"nodeType":"YulFunctionCall","src":"21101:11:20"},{"name":"offset","nodeType":"YulIdentifier","src":"21114:6:20"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"21146:16:20"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"21122:23:20"},"nodeType":"YulFunctionCall","src":"21122:41:20"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"21073:27:20"},"nodeType":"YulFunctionCall","src":"21073:91:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"21060:6:20"},"nodeType":"YulFunctionCall","src":"21060:105:20"},"nodeType":"YulExpressionStatement","src":"21060:105:20"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"20955:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"20961:6:20","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"20969:7:20","type":""}],"src":"20902:269:20"},{"body":{"nodeType":"YulBlock","src":"21226:24:20","statements":[{"nodeType":"YulAssignment","src":"21236:8:20","value":{"kind":"number","nodeType":"YulLiteral","src":"21243:1:20","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"21236:3:20"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"21222:3:20","type":""}],"src":"21177:73:20"},{"body":{"nodeType":"YulBlock","src":"21309:136:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21319:46:20","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"21333:30:20"},"nodeType":"YulFunctionCall","src":"21333:32:20"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"21323:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"21418:4:20"},{"name":"offset","nodeType":"YulIdentifier","src":"21424:6:20"},{"name":"zero_0","nodeType":"YulIdentifier","src":"21432:6:20"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"21374:43:20"},"nodeType":"YulFunctionCall","src":"21374:65:20"},"nodeType":"YulExpressionStatement","src":"21374:65:20"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"21295:4:20","type":""},{"name":"offset","nodeType":"YulTypedName","src":"21301:6:20","type":""}],"src":"21256:189:20"},{"body":{"nodeType":"YulBlock","src":"21501:136:20","statements":[{"body":{"nodeType":"YulBlock","src":"21568:63:20","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"21612:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"21619:1:20","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"21582:29:20"},"nodeType":"YulFunctionCall","src":"21582:39:20"},"nodeType":"YulExpressionStatement","src":"21582:39:20"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"21521:5:20"},{"name":"end","nodeType":"YulIdentifier","src":"21528:3:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21518:2:20"},"nodeType":"YulFunctionCall","src":"21518:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"21533:26:20","statements":[{"nodeType":"YulAssignment","src":"21535:22:20","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"21548:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"21555:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21544:3:20"},"nodeType":"YulFunctionCall","src":"21544:13:20"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"21535:5:20"}]}]},"pre":{"nodeType":"YulBlock","src":"21515:2:20","statements":[]},"src":"21511:120:20"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"21489:5:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"21496:3:20","type":""}],"src":"21451:186:20"},{"body":{"nodeType":"YulBlock","src":"21722:464:20","statements":[{"body":{"nodeType":"YulBlock","src":"21748:431:20","statements":[{"nodeType":"YulVariableDeclaration","src":"21762:54:20","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"21810:5:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"21778:31:20"},"nodeType":"YulFunctionCall","src":"21778:38:20"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"21766:8:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21829:63:20","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"21852:8:20"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"21880:10:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"21862:17:20"},"nodeType":"YulFunctionCall","src":"21862:29:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21848:3:20"},"nodeType":"YulFunctionCall","src":"21848:44:20"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"21833:11:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"22049:27:20","statements":[{"nodeType":"YulAssignment","src":"22051:23:20","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"22066:8:20"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"22051:11:20"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"22033:10:20"},{"kind":"number","nodeType":"YulLiteral","src":"22045:2:20","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22030:2:20"},"nodeType":"YulFunctionCall","src":"22030:18:20"},"nodeType":"YulIf","src":"22027:49:20"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"22118:11:20"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"22135:8:20"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"22163:3:20"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"22145:17:20"},"nodeType":"YulFunctionCall","src":"22145:22:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22131:3:20"},"nodeType":"YulFunctionCall","src":"22131:37:20"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"22089:28:20"},"nodeType":"YulFunctionCall","src":"22089:80:20"},"nodeType":"YulExpressionStatement","src":"22089:80:20"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"21739:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"21744:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21736:2:20"},"nodeType":"YulFunctionCall","src":"21736:11:20"},"nodeType":"YulIf","src":"21733:446:20"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"21698:5:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"21705:3:20","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"21710:10:20","type":""}],"src":"21643:543:20"},{"body":{"nodeType":"YulBlock","src":"22255:54:20","statements":[{"nodeType":"YulAssignment","src":"22265:37:20","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"22290:4:20"},{"name":"value","nodeType":"YulIdentifier","src":"22296:5:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"22286:3:20"},"nodeType":"YulFunctionCall","src":"22286:16:20"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"22265:8:20"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"22230:4:20","type":""},{"name":"value","nodeType":"YulTypedName","src":"22236:5:20","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"22246:8:20","type":""}],"src":"22192:117:20"},{"body":{"nodeType":"YulBlock","src":"22366:118:20","statements":[{"nodeType":"YulVariableDeclaration","src":"22376:68:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22425:1:20","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"22428:5:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22421:3:20"},"nodeType":"YulFunctionCall","src":"22421:13:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22440:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22436:3:20"},"nodeType":"YulFunctionCall","src":"22436:6:20"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"22392:28:20"},"nodeType":"YulFunctionCall","src":"22392:51:20"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22388:3:20"},"nodeType":"YulFunctionCall","src":"22388:56:20"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"22380:4:20","type":""}]},{"nodeType":"YulAssignment","src":"22453:25:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22467:4:20"},{"name":"mask","nodeType":"YulIdentifier","src":"22473:4:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22463:3:20"},"nodeType":"YulFunctionCall","src":"22463:15:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"22453:6:20"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"22343:4:20","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"22349:5:20","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"22359:6:20","type":""}],"src":"22315:169:20"},{"body":{"nodeType":"YulBlock","src":"22570:214:20","statements":[{"nodeType":"YulAssignment","src":"22703:37:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22730:4:20"},{"name":"len","nodeType":"YulIdentifier","src":"22736:3:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"22711:18:20"},"nodeType":"YulFunctionCall","src":"22711:29:20"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"22703:4:20"}]},{"nodeType":"YulAssignment","src":"22749:29:20","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22760:4:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22770:1:20","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"22773:3:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"22766:3:20"},"nodeType":"YulFunctionCall","src":"22766:11:20"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22757:2:20"},"nodeType":"YulFunctionCall","src":"22757:21:20"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"22749:4:20"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"22551:4:20","type":""},{"name":"len","nodeType":"YulTypedName","src":"22557:3:20","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"22565:4:20","type":""}],"src":"22489:295:20"},{"body":{"nodeType":"YulBlock","src":"22881:1303:20","statements":[{"nodeType":"YulVariableDeclaration","src":"22892:51:20","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22939:3:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"22906:32:20"},"nodeType":"YulFunctionCall","src":"22906:37:20"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"22896:6:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"23028:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"23030:16:20"},"nodeType":"YulFunctionCall","src":"23030:18:20"},"nodeType":"YulExpressionStatement","src":"23030:18:20"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23000:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23008:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22997:2:20"},"nodeType":"YulFunctionCall","src":"22997:30:20"},"nodeType":"YulIf","src":"22994:56:20"},{"nodeType":"YulVariableDeclaration","src":"23060:52:20","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23106:4:20"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"23100:5:20"},"nodeType":"YulFunctionCall","src":"23100:11:20"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"23074:25:20"},"nodeType":"YulFunctionCall","src":"23074:38:20"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"23064:6:20","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23205:4:20"},{"name":"oldLen","nodeType":"YulIdentifier","src":"23211:6:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"23219:6:20"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"23159:45:20"},"nodeType":"YulFunctionCall","src":"23159:67:20"},"nodeType":"YulExpressionStatement","src":"23159:67:20"},{"nodeType":"YulVariableDeclaration","src":"23236:18:20","value":{"kind":"number","nodeType":"YulLiteral","src":"23253:1:20","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"23240:9:20","type":""}]},{"nodeType":"YulAssignment","src":"23264:17:20","value":{"kind":"number","nodeType":"YulLiteral","src":"23277:4:20","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"23264:9:20"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"23328:611:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23342:37:20","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23361:6:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23373:4:20","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23369:3:20"},"nodeType":"YulFunctionCall","src":"23369:9:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23357:3:20"},"nodeType":"YulFunctionCall","src":"23357:22:20"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"23346:7:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23393:51:20","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23439:4:20"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"23407:31:20"},"nodeType":"YulFunctionCall","src":"23407:37:20"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"23397:6:20","type":""}]},{"nodeType":"YulVariableDeclaration","src":"23457:10:20","value":{"kind":"number","nodeType":"YulLiteral","src":"23466:1:20","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"23461:1:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"23525:163:20","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23550:6:20"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23568:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"23573:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23564:3:20"},"nodeType":"YulFunctionCall","src":"23564:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23558:5:20"},"nodeType":"YulFunctionCall","src":"23558:26:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23543:6:20"},"nodeType":"YulFunctionCall","src":"23543:42:20"},"nodeType":"YulExpressionStatement","src":"23543:42:20"},{"nodeType":"YulAssignment","src":"23602:24:20","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23616:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23624:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23612:3:20"},"nodeType":"YulFunctionCall","src":"23612:14:20"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23602:6:20"}]},{"nodeType":"YulAssignment","src":"23643:31:20","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"23660:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"23671:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23656:3:20"},"nodeType":"YulFunctionCall","src":"23656:18:20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"23643:9:20"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23491:1:20"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"23494:7:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23488:2:20"},"nodeType":"YulFunctionCall","src":"23488:14:20"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23503:21:20","statements":[{"nodeType":"YulAssignment","src":"23505:17:20","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23514:1:20"},{"kind":"number","nodeType":"YulLiteral","src":"23517:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23510:3:20"},"nodeType":"YulFunctionCall","src":"23510:12:20"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"23505:1:20"}]}]},"pre":{"nodeType":"YulBlock","src":"23484:3:20","statements":[]},"src":"23480:208:20"},{"body":{"nodeType":"YulBlock","src":"23724:156:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23742:43:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23769:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"23774:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23765:3:20"},"nodeType":"YulFunctionCall","src":"23765:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23759:5:20"},"nodeType":"YulFunctionCall","src":"23759:26:20"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"23746:9:20","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23809:6:20"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"23836:9:20"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23851:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23859:4:20","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23847:3:20"},"nodeType":"YulFunctionCall","src":"23847:17:20"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"23817:18:20"},"nodeType":"YulFunctionCall","src":"23817:48:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23802:6:20"},"nodeType":"YulFunctionCall","src":"23802:64:20"},"nodeType":"YulExpressionStatement","src":"23802:64:20"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"23707:7:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"23716:6:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23704:2:20"},"nodeType":"YulFunctionCall","src":"23704:19:20"},"nodeType":"YulIf","src":"23701:179:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23900:4:20"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23914:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23922:1:20","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"23910:3:20"},"nodeType":"YulFunctionCall","src":"23910:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"23926:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23906:3:20"},"nodeType":"YulFunctionCall","src":"23906:22:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23893:6:20"},"nodeType":"YulFunctionCall","src":"23893:36:20"},"nodeType":"YulExpressionStatement","src":"23893:36:20"}]},"nodeType":"YulCase","src":"23321:618:20","value":{"kind":"number","nodeType":"YulLiteral","src":"23326:1:20","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"23956:222:20","statements":[{"nodeType":"YulVariableDeclaration","src":"23970:14:20","value":{"kind":"number","nodeType":"YulLiteral","src":"23983:1:20","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"23974:5:20","type":""}]},{"body":{"nodeType":"YulBlock","src":"24007:67:20","statements":[{"nodeType":"YulAssignment","src":"24025:35:20","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24044:3:20"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"24049:9:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24040:3:20"},"nodeType":"YulFunctionCall","src":"24040:19:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24034:5:20"},"nodeType":"YulFunctionCall","src":"24034:26:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24025:5:20"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"24000:6:20"},"nodeType":"YulIf","src":"23997:77:20"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24094:4:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24153:5:20"},{"name":"newLen","nodeType":"YulIdentifier","src":"24160:6:20"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"24100:52:20"},"nodeType":"YulFunctionCall","src":"24100:67:20"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24087:6:20"},"nodeType":"YulFunctionCall","src":"24087:81:20"},"nodeType":"YulExpressionStatement","src":"24087:81:20"}]},"nodeType":"YulCase","src":"23948:230:20","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"23301:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"23309:2:20","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23298:2:20"},"nodeType":"YulFunctionCall","src":"23298:14:20"},"nodeType":"YulSwitch","src":"23291:887:20"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"22870:4:20","type":""},{"name":"src","nodeType":"YulTypedName","src":"22876:3:20","type":""}],"src":"22789:1395:20"},{"body":{"nodeType":"YulBlock","src":"24234:147:20","statements":[{"nodeType":"YulAssignment","src":"24244:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24267:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24249:17:20"},"nodeType":"YulFunctionCall","src":"24249:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"24244:1:20"}]},{"nodeType":"YulAssignment","src":"24278:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"24301:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24283:17:20"},"nodeType":"YulFunctionCall","src":"24283:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"24278:1:20"}]},{"nodeType":"YulAssignment","src":"24312:16:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24323:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"24326:1:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24319:3:20"},"nodeType":"YulFunctionCall","src":"24319:9:20"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"24312:3:20"}]},{"body":{"nodeType":"YulBlock","src":"24352:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"24354:16:20"},"nodeType":"YulFunctionCall","src":"24354:18:20"},"nodeType":"YulExpressionStatement","src":"24354:18:20"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24344:1:20"},{"name":"sum","nodeType":"YulIdentifier","src":"24347:3:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24341:2:20"},"nodeType":"YulFunctionCall","src":"24341:10:20"},"nodeType":"YulIf","src":"24338:36:20"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"24221:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"24224:1:20","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"24230:3:20","type":""}],"src":"24190:191:20"},{"body":{"nodeType":"YulBlock","src":"24447:77:20","statements":[{"nodeType":"YulAssignment","src":"24457:22:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24472:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24466:5:20"},"nodeType":"YulFunctionCall","src":"24466:13:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24457:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24512:5:20"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"24488:23:20"},"nodeType":"YulFunctionCall","src":"24488:30:20"},"nodeType":"YulExpressionStatement","src":"24488:30:20"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24425:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"24433:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24441:5:20","type":""}],"src":"24387:137:20"},{"body":{"nodeType":"YulBlock","src":"24604:271:20","statements":[{"body":{"nodeType":"YulBlock","src":"24650:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"24652:77:20"},"nodeType":"YulFunctionCall","src":"24652:79:20"},"nodeType":"YulExpressionStatement","src":"24652:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24625:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"24634:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24621:3:20"},"nodeType":"YulFunctionCall","src":"24621:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"24646:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24617:3:20"},"nodeType":"YulFunctionCall","src":"24617:32:20"},"nodeType":"YulIf","src":"24614:119:20"},{"nodeType":"YulBlock","src":"24743:125:20","statements":[{"nodeType":"YulVariableDeclaration","src":"24758:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"24772:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24762:6:20","type":""}]},{"nodeType":"YulAssignment","src":"24787:71:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24830:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"24841:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24826:3:20"},"nodeType":"YulFunctionCall","src":"24826:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24850:7:20"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"24797:28:20"},"nodeType":"YulFunctionCall","src":"24797:61:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24787:6:20"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24574:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24585:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24597:6:20","type":""}],"src":"24530:345:20"},{"body":{"nodeType":"YulBlock","src":"24995:34:20","statements":[{"nodeType":"YulAssignment","src":"25005:18:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"25020:3:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"25005:11:20"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24967:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"24972:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"24983:11:20","type":""}],"src":"24881:148:20"},{"body":{"nodeType":"YulBlock","src":"25145:280:20","statements":[{"nodeType":"YulVariableDeclaration","src":"25155:53:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25202:5:20"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"25169:32:20"},"nodeType":"YulFunctionCall","src":"25169:39:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"25159:6:20","type":""}]},{"nodeType":"YulAssignment","src":"25217:96:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25301:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"25306:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25224:76:20"},"nodeType":"YulFunctionCall","src":"25224:89:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25217:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25361:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"25368:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25357:3:20"},"nodeType":"YulFunctionCall","src":"25357:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"25375:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"25380:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"25322:34:20"},"nodeType":"YulFunctionCall","src":"25322:65:20"},"nodeType":"YulExpressionStatement","src":"25322:65:20"},{"nodeType":"YulAssignment","src":"25396:23:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25407:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"25412:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25403:3:20"},"nodeType":"YulFunctionCall","src":"25403:16:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25396:3:20"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25126:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"25133:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25141:3:20","type":""}],"src":"25035:390:20"},{"body":{"nodeType":"YulBlock","src":"25567:139:20","statements":[{"nodeType":"YulAssignment","src":"25578:102:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25667:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"25676:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25585:81:20"},"nodeType":"YulFunctionCall","src":"25585:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25578:3:20"}]},{"nodeType":"YulAssignment","src":"25690:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"25697:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25690:3:20"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25546:3:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25552:6:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25563:3:20","type":""}],"src":"25431:275:20"},{"body":{"nodeType":"YulBlock","src":"25818:124:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25840:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"25848:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25836:3:20"},"nodeType":"YulFunctionCall","src":"25836:14:20"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"25852:34:20","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25829:6:20"},"nodeType":"YulFunctionCall","src":"25829:58:20"},"nodeType":"YulExpressionStatement","src":"25829:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25908:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"25916:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25904:3:20"},"nodeType":"YulFunctionCall","src":"25904:15:20"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"25921:13:20","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25897:6:20"},"nodeType":"YulFunctionCall","src":"25897:38:20"},"nodeType":"YulExpressionStatement","src":"25897:38:20"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25810:6:20","type":""}],"src":"25712:230:20"},{"body":{"nodeType":"YulBlock","src":"26094:220:20","statements":[{"nodeType":"YulAssignment","src":"26104:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26170:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"26175:2:20","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26111:58:20"},"nodeType":"YulFunctionCall","src":"26111:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26104:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26276:3:20"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"26187:88:20"},"nodeType":"YulFunctionCall","src":"26187:93:20"},"nodeType":"YulExpressionStatement","src":"26187:93:20"},{"nodeType":"YulAssignment","src":"26289:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26300:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"26305:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26296:3:20"},"nodeType":"YulFunctionCall","src":"26296:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26289:3:20"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26082:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26090:3:20","type":""}],"src":"25948:366:20"},{"body":{"nodeType":"YulBlock","src":"26491:248:20","statements":[{"nodeType":"YulAssignment","src":"26501:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26513:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26524:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26509:3:20"},"nodeType":"YulFunctionCall","src":"26509:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26501:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26548:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"26559:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26544:3:20"},"nodeType":"YulFunctionCall","src":"26544:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26567:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"26573:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26563:3:20"},"nodeType":"YulFunctionCall","src":"26563:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26537:6:20"},"nodeType":"YulFunctionCall","src":"26537:47:20"},"nodeType":"YulExpressionStatement","src":"26537:47:20"},{"nodeType":"YulAssignment","src":"26593:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26727:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26601:124:20"},"nodeType":"YulFunctionCall","src":"26601:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26593:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26471:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26486:4:20","type":""}],"src":"26320:419:20"},{"body":{"nodeType":"YulBlock","src":"26793:300:20","statements":[{"nodeType":"YulAssignment","src":"26803:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26826:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26808:17:20"},"nodeType":"YulFunctionCall","src":"26808:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"26803:1:20"}]},{"nodeType":"YulAssignment","src":"26837:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"26860:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26842:17:20"},"nodeType":"YulFunctionCall","src":"26842:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"26837:1:20"}]},{"body":{"nodeType":"YulBlock","src":"27035:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"27037:16:20"},"nodeType":"YulFunctionCall","src":"27037:18:20"},"nodeType":"YulExpressionStatement","src":"27037:18:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26947:1:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26940:6:20"},"nodeType":"YulFunctionCall","src":"26940:9:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"26933:6:20"},"nodeType":"YulFunctionCall","src":"26933:17:20"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"26955:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26962:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"27030:1:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"26958:3:20"},"nodeType":"YulFunctionCall","src":"26958:74:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26952:2:20"},"nodeType":"YulFunctionCall","src":"26952:81:20"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26929:3:20"},"nodeType":"YulFunctionCall","src":"26929:105:20"},"nodeType":"YulIf","src":"26926:131:20"},{"nodeType":"YulAssignment","src":"27067:20:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"27082:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"27085:1:20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"27078:3:20"},"nodeType":"YulFunctionCall","src":"27078:9:20"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"27067:7:20"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"26776:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"26779:1:20","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"26785:7:20","type":""}],"src":"26745:348:20"},{"body":{"nodeType":"YulBlock","src":"27197:124:20","statements":[{"nodeType":"YulAssignment","src":"27207:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27219:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27230:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27215:3:20"},"nodeType":"YulFunctionCall","src":"27215:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27207:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27287:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27300:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"27311:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27296:3:20"},"nodeType":"YulFunctionCall","src":"27296:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"27243:43:20"},"nodeType":"YulFunctionCall","src":"27243:71:20"},"nodeType":"YulExpressionStatement","src":"27243:71:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27169:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27181:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27192:4:20","type":""}],"src":"27099:222:20"},{"body":{"nodeType":"YulBlock","src":"27390:80:20","statements":[{"nodeType":"YulAssignment","src":"27400:22:20","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27415:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27409:5:20"},"nodeType":"YulFunctionCall","src":"27409:13:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27400:5:20"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27458:5:20"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"27431:26:20"},"nodeType":"YulFunctionCall","src":"27431:33:20"},"nodeType":"YulExpressionStatement","src":"27431:33:20"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"27368:6:20","type":""},{"name":"end","nodeType":"YulTypedName","src":"27376:3:20","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27384:5:20","type":""}],"src":"27327:143:20"},{"body":{"nodeType":"YulBlock","src":"27553:274:20","statements":[{"body":{"nodeType":"YulBlock","src":"27599:83:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"27601:77:20"},"nodeType":"YulFunctionCall","src":"27601:79:20"},"nodeType":"YulExpressionStatement","src":"27601:79:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27574:7:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"27583:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27570:3:20"},"nodeType":"YulFunctionCall","src":"27570:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"27595:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27566:3:20"},"nodeType":"YulFunctionCall","src":"27566:32:20"},"nodeType":"YulIf","src":"27563:119:20"},{"nodeType":"YulBlock","src":"27692:128:20","statements":[{"nodeType":"YulVariableDeclaration","src":"27707:15:20","value":{"kind":"number","nodeType":"YulLiteral","src":"27721:1:20","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27711:6:20","type":""}]},{"nodeType":"YulAssignment","src":"27736:74:20","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27782:9:20"},{"name":"offset","nodeType":"YulIdentifier","src":"27793:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27778:3:20"},"nodeType":"YulFunctionCall","src":"27778:22:20"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27802:7:20"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"27746:31:20"},"nodeType":"YulFunctionCall","src":"27746:64:20"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27736:6:20"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27523:9:20","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27534:7:20","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27546:6:20","type":""}],"src":"27476:351:20"},{"body":{"nodeType":"YulBlock","src":"27861:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27878:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27881:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27871:6:20"},"nodeType":"YulFunctionCall","src":"27871:88:20"},"nodeType":"YulExpressionStatement","src":"27871:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27975:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"27978:4:20","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27968:6:20"},"nodeType":"YulFunctionCall","src":"27968:15:20"},"nodeType":"YulExpressionStatement","src":"27968:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27999:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28002:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27992:6:20"},"nodeType":"YulFunctionCall","src":"27992:15:20"},"nodeType":"YulExpressionStatement","src":"27992:15:20"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"27833:180:20"},{"body":{"nodeType":"YulBlock","src":"28061:143:20","statements":[{"nodeType":"YulAssignment","src":"28071:25:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28094:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28076:17:20"},"nodeType":"YulFunctionCall","src":"28076:20:20"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28071:1:20"}]},{"nodeType":"YulAssignment","src":"28105:25:20","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28128:1:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28110:17:20"},"nodeType":"YulFunctionCall","src":"28110:20:20"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28105:1:20"}]},{"body":{"nodeType":"YulBlock","src":"28152:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"28154:16:20"},"nodeType":"YulFunctionCall","src":"28154:18:20"},"nodeType":"YulExpressionStatement","src":"28154:18:20"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28149:1:20"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28142:6:20"},"nodeType":"YulFunctionCall","src":"28142:9:20"},"nodeType":"YulIf","src":"28139:35:20"},{"nodeType":"YulAssignment","src":"28184:14:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28193:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"28196:1:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"28189:3:20"},"nodeType":"YulFunctionCall","src":"28189:9:20"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"28184:1:20"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28050:1:20","type":""},{"name":"y","nodeType":"YulTypedName","src":"28053:1:20","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"28059:1:20","type":""}],"src":"28019:185:20"},{"body":{"nodeType":"YulBlock","src":"28253:128:20","statements":[{"nodeType":"YulAssignment","src":"28263:33:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28290:5:20"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28272:17:20"},"nodeType":"YulFunctionCall","src":"28272:24:20"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28263:5:20"}]},{"body":{"nodeType":"YulBlock","src":"28324:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28326:16:20"},"nodeType":"YulFunctionCall","src":"28326:18:20"},"nodeType":"YulExpressionStatement","src":"28326:18:20"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28311:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"28318:4:20","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28308:2:20"},"nodeType":"YulFunctionCall","src":"28308:15:20"},"nodeType":"YulIf","src":"28305:41:20"},{"nodeType":"YulAssignment","src":"28355:20:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28366:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"28373:1:20","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28362:3:20"},"nodeType":"YulFunctionCall","src":"28362:13:20"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28355:3:20"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28239:5:20","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28249:3:20","type":""}],"src":"28210:171:20"},{"body":{"nodeType":"YulBlock","src":"28448:51:20","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28465:3:20"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28486:5:20"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"28470:15:20"},"nodeType":"YulFunctionCall","src":"28470:22:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28458:6:20"},"nodeType":"YulFunctionCall","src":"28458:35:20"},"nodeType":"YulExpressionStatement","src":"28458:35:20"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28436:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28443:3:20","type":""}],"src":"28387:112:20"},{"body":{"nodeType":"YulBlock","src":"28767:616:20","statements":[{"nodeType":"YulAssignment","src":"28777:27:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28789:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28800:3:20","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28785:3:20"},"nodeType":"YulFunctionCall","src":"28785:19:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28777:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28858:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28871:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28882:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28867:3:20"},"nodeType":"YulFunctionCall","src":"28867:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28814:43:20"},"nodeType":"YulFunctionCall","src":"28814:71:20"},"nodeType":"YulExpressionStatement","src":"28814:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28939:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28952:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"28963:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28948:3:20"},"nodeType":"YulFunctionCall","src":"28948:18:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28895:43:20"},"nodeType":"YulFunctionCall","src":"28895:72:20"},"nodeType":"YulExpressionStatement","src":"28895:72:20"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29021:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29034:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29045:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29030:3:20"},"nodeType":"YulFunctionCall","src":"29030:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28977:43:20"},"nodeType":"YulFunctionCall","src":"28977:72:20"},"nodeType":"YulExpressionStatement","src":"28977:72:20"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"29103:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29116:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29127:2:20","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29112:3:20"},"nodeType":"YulFunctionCall","src":"29112:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29059:43:20"},"nodeType":"YulFunctionCall","src":"29059:72:20"},"nodeType":"YulExpressionStatement","src":"29059:72:20"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"29181:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29194:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29205:3:20","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29190:3:20"},"nodeType":"YulFunctionCall","src":"29190:19:20"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"29141:39:20"},"nodeType":"YulFunctionCall","src":"29141:69:20"},"nodeType":"YulExpressionStatement","src":"29141:69:20"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"29264:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29277:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29288:3:20","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29273:3:20"},"nodeType":"YulFunctionCall","src":"29273:19:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29220:43:20"},"nodeType":"YulFunctionCall","src":"29220:73:20"},"nodeType":"YulExpressionStatement","src":"29220:73:20"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"29347:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29360:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"29371:3:20","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29356:3:20"},"nodeType":"YulFunctionCall","src":"29356:19:20"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29303:43:20"},"nodeType":"YulFunctionCall","src":"29303:73:20"},"nodeType":"YulExpressionStatement","src":"29303:73:20"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28691:9:20","type":""},{"name":"value6","nodeType":"YulTypedName","src":"28703:6:20","type":""},{"name":"value5","nodeType":"YulTypedName","src":"28711:6:20","type":""},{"name":"value4","nodeType":"YulTypedName","src":"28719:6:20","type":""},{"name":"value3","nodeType":"YulTypedName","src":"28727:6:20","type":""},{"name":"value2","nodeType":"YulTypedName","src":"28735:6:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28743:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28751:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28762:4:20","type":""}],"src":"28505:878:20"},{"body":{"nodeType":"YulBlock","src":"29495:114:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29517:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"29525:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29513:3:20"},"nodeType":"YulFunctionCall","src":"29513:14:20"},{"hexValue":"5361666545524332303a207065726d697420646964206e6f7420737563636565","kind":"string","nodeType":"YulLiteral","src":"29529:34:20","type":"","value":"SafeERC20: permit did not succee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29506:6:20"},"nodeType":"YulFunctionCall","src":"29506:58:20"},"nodeType":"YulExpressionStatement","src":"29506:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29585:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"29593:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29581:3:20"},"nodeType":"YulFunctionCall","src":"29581:15:20"},{"hexValue":"64","kind":"string","nodeType":"YulLiteral","src":"29598:3:20","type":"","value":"d"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29574:6:20"},"nodeType":"YulFunctionCall","src":"29574:28:20"},"nodeType":"YulExpressionStatement","src":"29574:28:20"}]},"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29487:6:20","type":""}],"src":"29389:220:20"},{"body":{"nodeType":"YulBlock","src":"29761:220:20","statements":[{"nodeType":"YulAssignment","src":"29771:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29837:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"29842:2:20","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29778:58:20"},"nodeType":"YulFunctionCall","src":"29778:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29771:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29943:3:20"}],"functionName":{"name":"store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","nodeType":"YulIdentifier","src":"29854:88:20"},"nodeType":"YulFunctionCall","src":"29854:93:20"},"nodeType":"YulExpressionStatement","src":"29854:93:20"},{"nodeType":"YulAssignment","src":"29956:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29967:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"29972:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29963:3:20"},"nodeType":"YulFunctionCall","src":"29963:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29956:3:20"}]}]},"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29749:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29757:3:20","type":""}],"src":"29615:366:20"},{"body":{"nodeType":"YulBlock","src":"30158:248:20","statements":[{"nodeType":"YulAssignment","src":"30168:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30180:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30191:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30176:3:20"},"nodeType":"YulFunctionCall","src":"30176:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30168:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30215:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30226:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30211:3:20"},"nodeType":"YulFunctionCall","src":"30211:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30234:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"30240:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30230:3:20"},"nodeType":"YulFunctionCall","src":"30230:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30204:6:20"},"nodeType":"YulFunctionCall","src":"30204:47:20"},"nodeType":"YulExpressionStatement","src":"30204:47:20"},{"nodeType":"YulAssignment","src":"30260:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30394:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30268:124:20"},"nodeType":"YulFunctionCall","src":"30268:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30260:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30138:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30153:4:20","type":""}],"src":"29987:419:20"},{"body":{"nodeType":"YulBlock","src":"30538:206:20","statements":[{"nodeType":"YulAssignment","src":"30548:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30560:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30571:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30556:3:20"},"nodeType":"YulFunctionCall","src":"30556:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30548:4:20"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30628:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30641:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30652:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30637:3:20"},"nodeType":"YulFunctionCall","src":"30637:17:20"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"30584:43:20"},"nodeType":"YulFunctionCall","src":"30584:71:20"},"nodeType":"YulExpressionStatement","src":"30584:71:20"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30709:6:20"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30722:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"30733:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30718:3:20"},"nodeType":"YulFunctionCall","src":"30718:18:20"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"30665:43:20"},"nodeType":"YulFunctionCall","src":"30665:72:20"},"nodeType":"YulExpressionStatement","src":"30665:72:20"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30502:9:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30514:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30522:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30533:4:20","type":""}],"src":"30412:332:20"},{"body":{"nodeType":"YulBlock","src":"30856:67:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30878:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"30886:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30874:3:20"},"nodeType":"YulFunctionCall","src":"30874:14:20"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"30890:25:20","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30867:6:20"},"nodeType":"YulFunctionCall","src":"30867:49:20"},"nodeType":"YulExpressionStatement","src":"30867:49:20"}]},"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30848:6:20","type":""}],"src":"30750:173:20"},{"body":{"nodeType":"YulBlock","src":"31093:238:20","statements":[{"nodeType":"YulAssignment","src":"31103:92:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31187:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"31192:2:20","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31110:76:20"},"nodeType":"YulFunctionCall","src":"31110:85:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31103:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31293:3:20"}],"functionName":{"name":"store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","nodeType":"YulIdentifier","src":"31204:88:20"},"nodeType":"YulFunctionCall","src":"31204:93:20"},"nodeType":"YulExpressionStatement","src":"31204:93:20"},{"nodeType":"YulAssignment","src":"31306:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31317:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"31322:2:20","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31313:3:20"},"nodeType":"YulFunctionCall","src":"31313:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31306:3:20"}]}]},"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31081:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31089:3:20","type":""}],"src":"30929:402:20"},{"body":{"nodeType":"YulBlock","src":"31443:61:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31465:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"31473:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31461:3:20"},"nodeType":"YulFunctionCall","src":"31461:14:20"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"31477:19:20","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31454:6:20"},"nodeType":"YulFunctionCall","src":"31454:43:20"},"nodeType":"YulExpressionStatement","src":"31454:43:20"}]},"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31435:6:20","type":""}],"src":"31337:167:20"},{"body":{"nodeType":"YulBlock","src":"31674:238:20","statements":[{"nodeType":"YulAssignment","src":"31684:92:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31768:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"31773:2:20","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31691:76:20"},"nodeType":"YulFunctionCall","src":"31691:85:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31684:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31874:3:20"}],"functionName":{"name":"store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","nodeType":"YulIdentifier","src":"31785:88:20"},"nodeType":"YulFunctionCall","src":"31785:93:20"},"nodeType":"YulExpressionStatement","src":"31785:93:20"},{"nodeType":"YulAssignment","src":"31887:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31898:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"31903:2:20","type":"","value":"17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31894:3:20"},"nodeType":"YulFunctionCall","src":"31894:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31887:3:20"}]}]},"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31662:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31670:3:20","type":""}],"src":"31510:402:20"},{"body":{"nodeType":"YulBlock","src":"32304:581:20","statements":[{"nodeType":"YulAssignment","src":"32315:155:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32466:3:20"}],"functionName":{"name":"abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"32322:142:20"},"nodeType":"YulFunctionCall","src":"32322:148:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32315:3:20"}]},{"nodeType":"YulAssignment","src":"32480:102:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"32569:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"32578:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"32487:81:20"},"nodeType":"YulFunctionCall","src":"32487:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32480:3:20"}]},{"nodeType":"YulAssignment","src":"32592:155:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32743:3:20"}],"functionName":{"name":"abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"32599:142:20"},"nodeType":"YulFunctionCall","src":"32599:148:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32592:3:20"}]},{"nodeType":"YulAssignment","src":"32757:102:20","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"32846:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"32855:3:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"32764:81:20"},"nodeType":"YulFunctionCall","src":"32764:95:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32757:3:20"}]},{"nodeType":"YulAssignment","src":"32869:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"32876:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32869:3:20"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32275:3:20","type":""},{"name":"value1","nodeType":"YulTypedName","src":"32281:6:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"32289:6:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32300:3:20","type":""}],"src":"31918:967:20"},{"body":{"nodeType":"YulBlock","src":"33009:195:20","statements":[{"nodeType":"YulAssignment","src":"33019:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33031:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33042:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33027:3:20"},"nodeType":"YulFunctionCall","src":"33027:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33019:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33066:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33077:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33062:3:20"},"nodeType":"YulFunctionCall","src":"33062:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33085:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"33091:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33081:3:20"},"nodeType":"YulFunctionCall","src":"33081:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33055:6:20"},"nodeType":"YulFunctionCall","src":"33055:47:20"},"nodeType":"YulExpressionStatement","src":"33055:47:20"},{"nodeType":"YulAssignment","src":"33111:86:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33183:6:20"},{"name":"tail","nodeType":"YulIdentifier","src":"33192:4:20"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33119:63:20"},"nodeType":"YulFunctionCall","src":"33119:78:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33111:4:20"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32981:9:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"32993:6:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33004:4:20","type":""}],"src":"32891:313:20"},{"body":{"nodeType":"YulBlock","src":"33316:64:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33338:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"33346:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33334:3:20"},"nodeType":"YulFunctionCall","src":"33334:14:20"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"33350:22:20","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33327:6:20"},"nodeType":"YulFunctionCall","src":"33327:46:20"},"nodeType":"YulExpressionStatement","src":"33327:46:20"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33308:6:20","type":""}],"src":"33210:170:20"},{"body":{"nodeType":"YulBlock","src":"33532:220:20","statements":[{"nodeType":"YulAssignment","src":"33542:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33608:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"33613:2:20","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33549:58:20"},"nodeType":"YulFunctionCall","src":"33549:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33542:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33714:3:20"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"33625:88:20"},"nodeType":"YulFunctionCall","src":"33625:93:20"},"nodeType":"YulExpressionStatement","src":"33625:93:20"},{"nodeType":"YulAssignment","src":"33727:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33738:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"33743:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33734:3:20"},"nodeType":"YulFunctionCall","src":"33734:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33727:3:20"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33520:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33528:3:20","type":""}],"src":"33386:366:20"},{"body":{"nodeType":"YulBlock","src":"33929:248:20","statements":[{"nodeType":"YulAssignment","src":"33939:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33951:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33962:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33947:3:20"},"nodeType":"YulFunctionCall","src":"33947:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33939:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33986:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"33997:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33982:3:20"},"nodeType":"YulFunctionCall","src":"33982:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34005:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"34011:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34001:3:20"},"nodeType":"YulFunctionCall","src":"34001:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33975:6:20"},"nodeType":"YulFunctionCall","src":"33975:47:20"},"nodeType":"YulExpressionStatement","src":"33975:47:20"},{"nodeType":"YulAssignment","src":"34031:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34165:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34039:124:20"},"nodeType":"YulFunctionCall","src":"34039:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34031:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33909:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33924:4:20","type":""}],"src":"33758:419:20"},{"body":{"nodeType":"YulBlock","src":"34289:123:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34311:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"34319:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34307:3:20"},"nodeType":"YulFunctionCall","src":"34307:14:20"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"34323:34:20","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34300:6:20"},"nodeType":"YulFunctionCall","src":"34300:58:20"},"nodeType":"YulExpressionStatement","src":"34300:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34379:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"34387:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34375:3:20"},"nodeType":"YulFunctionCall","src":"34375:15:20"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"34392:12:20","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34368:6:20"},"nodeType":"YulFunctionCall","src":"34368:37:20"},"nodeType":"YulExpressionStatement","src":"34368:37:20"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34281:6:20","type":""}],"src":"34183:229:20"},{"body":{"nodeType":"YulBlock","src":"34564:220:20","statements":[{"nodeType":"YulAssignment","src":"34574:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34640:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"34645:2:20","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34581:58:20"},"nodeType":"YulFunctionCall","src":"34581:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34574:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34746:3:20"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"34657:88:20"},"nodeType":"YulFunctionCall","src":"34657:93:20"},"nodeType":"YulExpressionStatement","src":"34657:93:20"},{"nodeType":"YulAssignment","src":"34759:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34770:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"34775:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34766:3:20"},"nodeType":"YulFunctionCall","src":"34766:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34759:3:20"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34552:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34560:3:20","type":""}],"src":"34418:366:20"},{"body":{"nodeType":"YulBlock","src":"34961:248:20","statements":[{"nodeType":"YulAssignment","src":"34971:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34983:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"34994:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34979:3:20"},"nodeType":"YulFunctionCall","src":"34979:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34971:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35018:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35029:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35014:3:20"},"nodeType":"YulFunctionCall","src":"35014:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35037:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"35043:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35033:3:20"},"nodeType":"YulFunctionCall","src":"35033:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35007:6:20"},"nodeType":"YulFunctionCall","src":"35007:47:20"},"nodeType":"YulExpressionStatement","src":"35007:47:20"},{"nodeType":"YulAssignment","src":"35063:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35197:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35071:124:20"},"nodeType":"YulFunctionCall","src":"35071:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35063:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34941:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34956:4:20","type":""}],"src":"34790:419:20"},{"body":{"nodeType":"YulBlock","src":"35321:60:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35343:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"35351:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35339:3:20"},"nodeType":"YulFunctionCall","src":"35339:14:20"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"35355:18:20","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35332:6:20"},"nodeType":"YulFunctionCall","src":"35332:42:20"},"nodeType":"YulExpressionStatement","src":"35332:42:20"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35313:6:20","type":""}],"src":"35215:166:20"},{"body":{"nodeType":"YulBlock","src":"35533:220:20","statements":[{"nodeType":"YulAssignment","src":"35543:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35609:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"35614:2:20","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35550:58:20"},"nodeType":"YulFunctionCall","src":"35550:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35543:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35715:3:20"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"35626:88:20"},"nodeType":"YulFunctionCall","src":"35626:93:20"},"nodeType":"YulExpressionStatement","src":"35626:93:20"},{"nodeType":"YulAssignment","src":"35728:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35739:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"35744:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35735:3:20"},"nodeType":"YulFunctionCall","src":"35735:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35728:3:20"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35521:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35529:3:20","type":""}],"src":"35387:366:20"},{"body":{"nodeType":"YulBlock","src":"35930:248:20","statements":[{"nodeType":"YulAssignment","src":"35940:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35952:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35963:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35948:3:20"},"nodeType":"YulFunctionCall","src":"35948:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35940:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35987:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"35998:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35983:3:20"},"nodeType":"YulFunctionCall","src":"35983:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36006:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"36012:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36002:3:20"},"nodeType":"YulFunctionCall","src":"36002:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35976:6:20"},"nodeType":"YulFunctionCall","src":"35976:47:20"},"nodeType":"YulExpressionStatement","src":"35976:47:20"},{"nodeType":"YulAssignment","src":"36032:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36166:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36040:124:20"},"nodeType":"YulFunctionCall","src":"36040:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36032:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35910:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35925:4:20","type":""}],"src":"35759:419:20"},{"body":{"nodeType":"YulBlock","src":"36212:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36229:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36232:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36222:6:20"},"nodeType":"YulFunctionCall","src":"36222:88:20"},"nodeType":"YulExpressionStatement","src":"36222:88:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36326:1:20","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"36329:4:20","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36319:6:20"},"nodeType":"YulFunctionCall","src":"36319:15:20"},"nodeType":"YulExpressionStatement","src":"36319:15:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36350:1:20","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36353:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"36343:6:20"},"nodeType":"YulFunctionCall","src":"36343:15:20"},"nodeType":"YulExpressionStatement","src":"36343:15:20"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"36184:180:20"},{"body":{"nodeType":"YulBlock","src":"36476:76:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36498:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"36506:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36494:3:20"},"nodeType":"YulFunctionCall","src":"36494:14:20"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"36510:34:20","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36487:6:20"},"nodeType":"YulFunctionCall","src":"36487:58:20"},"nodeType":"YulExpressionStatement","src":"36487:58:20"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36468:6:20","type":""}],"src":"36370:182:20"},{"body":{"nodeType":"YulBlock","src":"36704:220:20","statements":[{"nodeType":"YulAssignment","src":"36714:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36780:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"36785:2:20","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36721:58:20"},"nodeType":"YulFunctionCall","src":"36721:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36714:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36886:3:20"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"36797:88:20"},"nodeType":"YulFunctionCall","src":"36797:93:20"},"nodeType":"YulExpressionStatement","src":"36797:93:20"},{"nodeType":"YulAssignment","src":"36899:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36910:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"36915:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36906:3:20"},"nodeType":"YulFunctionCall","src":"36906:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36899:3:20"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36692:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36700:3:20","type":""}],"src":"36558:366:20"},{"body":{"nodeType":"YulBlock","src":"37101:248:20","statements":[{"nodeType":"YulAssignment","src":"37111:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37123:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"37134:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37119:3:20"},"nodeType":"YulFunctionCall","src":"37119:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37111:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37158:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"37169:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37154:3:20"},"nodeType":"YulFunctionCall","src":"37154:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37177:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"37183:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37173:3:20"},"nodeType":"YulFunctionCall","src":"37173:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37147:6:20"},"nodeType":"YulFunctionCall","src":"37147:47:20"},"nodeType":"YulExpressionStatement","src":"37147:47:20"},{"nodeType":"YulAssignment","src":"37203:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37337:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37211:124:20"},"nodeType":"YulFunctionCall","src":"37211:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37203:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37081:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37096:4:20","type":""}],"src":"36930:419:20"},{"body":{"nodeType":"YulBlock","src":"37461:119:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37483:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"37491:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37479:3:20"},"nodeType":"YulFunctionCall","src":"37479:14:20"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"37495:34:20","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37472:6:20"},"nodeType":"YulFunctionCall","src":"37472:58:20"},"nodeType":"YulExpressionStatement","src":"37472:58:20"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37551:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"37559:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37547:3:20"},"nodeType":"YulFunctionCall","src":"37547:15:20"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"37564:8:20","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37540:6:20"},"nodeType":"YulFunctionCall","src":"37540:33:20"},"nodeType":"YulExpressionStatement","src":"37540:33:20"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37453:6:20","type":""}],"src":"37355:225:20"},{"body":{"nodeType":"YulBlock","src":"37732:220:20","statements":[{"nodeType":"YulAssignment","src":"37742:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37808:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"37813:2:20","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37749:58:20"},"nodeType":"YulFunctionCall","src":"37749:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37742:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37914:3:20"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"37825:88:20"},"nodeType":"YulFunctionCall","src":"37825:93:20"},"nodeType":"YulExpressionStatement","src":"37825:93:20"},{"nodeType":"YulAssignment","src":"37927:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37938:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"37943:2:20","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37934:3:20"},"nodeType":"YulFunctionCall","src":"37934:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37927:3:20"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37720:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37728:3:20","type":""}],"src":"37586:366:20"},{"body":{"nodeType":"YulBlock","src":"38129:248:20","statements":[{"nodeType":"YulAssignment","src":"38139:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38151:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"38162:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38147:3:20"},"nodeType":"YulFunctionCall","src":"38147:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38139:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38186:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"38197:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38182:3:20"},"nodeType":"YulFunctionCall","src":"38182:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38205:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"38211:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38201:3:20"},"nodeType":"YulFunctionCall","src":"38201:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38175:6:20"},"nodeType":"YulFunctionCall","src":"38175:47:20"},"nodeType":"YulExpressionStatement","src":"38175:47:20"},{"nodeType":"YulAssignment","src":"38231:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38365:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38239:124:20"},"nodeType":"YulFunctionCall","src":"38239:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38231:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38109:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38124:4:20","type":""}],"src":"37958:419:20"},{"body":{"nodeType":"YulBlock","src":"38441:40:20","statements":[{"nodeType":"YulAssignment","src":"38452:22:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38468:5:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38462:5:20"},"nodeType":"YulFunctionCall","src":"38462:12:20"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"38452:6:20"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38424:5:20","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"38434:6:20","type":""}],"src":"38383:98:20"},{"body":{"nodeType":"YulBlock","src":"38600:34:20","statements":[{"nodeType":"YulAssignment","src":"38610:18:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"38625:3:20"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"38610:11:20"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38572:3:20","type":""},{"name":"length","nodeType":"YulTypedName","src":"38577:6:20","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"38588:11:20","type":""}],"src":"38487:147:20"},{"body":{"nodeType":"YulBlock","src":"38748:278:20","statements":[{"nodeType":"YulVariableDeclaration","src":"38758:52:20","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38804:5:20"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"38772:31:20"},"nodeType":"YulFunctionCall","src":"38772:38:20"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"38762:6:20","type":""}]},{"nodeType":"YulAssignment","src":"38819:95:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38902:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"38907:6:20"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"38826:75:20"},"nodeType":"YulFunctionCall","src":"38826:88:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38819:3:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38962:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"38969:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38958:3:20"},"nodeType":"YulFunctionCall","src":"38958:16:20"},{"name":"pos","nodeType":"YulIdentifier","src":"38976:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"38981:6:20"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"38923:34:20"},"nodeType":"YulFunctionCall","src":"38923:65:20"},"nodeType":"YulExpressionStatement","src":"38923:65:20"},{"nodeType":"YulAssignment","src":"38997:23:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39008:3:20"},{"name":"length","nodeType":"YulIdentifier","src":"39013:6:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39004:3:20"},"nodeType":"YulFunctionCall","src":"39004:16:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38997:3:20"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38729:5:20","type":""},{"name":"pos","nodeType":"YulTypedName","src":"38736:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38744:3:20","type":""}],"src":"38640:386:20"},{"body":{"nodeType":"YulBlock","src":"39166:137:20","statements":[{"nodeType":"YulAssignment","src":"39177:100:20","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"39264:6:20"},{"name":"pos","nodeType":"YulIdentifier","src":"39273:3:20"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"39184:79:20"},"nodeType":"YulFunctionCall","src":"39184:93:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39177:3:20"}]},{"nodeType":"YulAssignment","src":"39287:10:20","value":{"name":"pos","nodeType":"YulIdentifier","src":"39294:3:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"39287:3:20"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39145:3:20","type":""},{"name":"value0","nodeType":"YulTypedName","src":"39151:6:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39162:3:20","type":""}],"src":"39032:271:20"},{"body":{"nodeType":"YulBlock","src":"39415:73:20","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"39437:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"39445:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39433:3:20"},"nodeType":"YulFunctionCall","src":"39433:14:20"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"39449:31:20","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39426:6:20"},"nodeType":"YulFunctionCall","src":"39426:55:20"},"nodeType":"YulExpressionStatement","src":"39426:55:20"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"39407:6:20","type":""}],"src":"39309:179:20"},{"body":{"nodeType":"YulBlock","src":"39640:220:20","statements":[{"nodeType":"YulAssignment","src":"39650:74:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39716:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"39721:2:20","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39657:58:20"},"nodeType":"YulFunctionCall","src":"39657:67:20"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39650:3:20"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39822:3:20"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"39733:88:20"},"nodeType":"YulFunctionCall","src":"39733:93:20"},"nodeType":"YulExpressionStatement","src":"39733:93:20"},{"nodeType":"YulAssignment","src":"39835:19:20","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39846:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"39851:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39842:3:20"},"nodeType":"YulFunctionCall","src":"39842:12:20"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"39835:3:20"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39628:3:20","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39636:3:20","type":""}],"src":"39494:366:20"},{"body":{"nodeType":"YulBlock","src":"40037:248:20","statements":[{"nodeType":"YulAssignment","src":"40047:26:20","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40059:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"40070:2:20","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40055:3:20"},"nodeType":"YulFunctionCall","src":"40055:18:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40047:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40094:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"40105:1:20","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40090:3:20"},"nodeType":"YulFunctionCall","src":"40090:17:20"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40113:4:20"},{"name":"headStart","nodeType":"YulIdentifier","src":"40119:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40109:3:20"},"nodeType":"YulFunctionCall","src":"40109:20:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40083:6:20"},"nodeType":"YulFunctionCall","src":"40083:47:20"},"nodeType":"YulExpressionStatement","src":"40083:47:20"},{"nodeType":"YulAssignment","src":"40139:139:20","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40273:4:20"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40147:124:20"},"nodeType":"YulFunctionCall","src":"40147:131:20"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40139:4:20"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40017:9:20","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40032:4:20","type":""}],"src":"39866:419:20"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bool_t_bool_t_uint256__to_t_bool_t_bool_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value6,  add(headStart, 192))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_string_memory_ptrt_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7 {\n        if slt(sub(dataEnd, headStart), 256) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 224\n\n            value7 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_bool_t_bool_t_bool__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_bool_t_bool_t_bool__fromStack_reversed(headStart , value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        mstore(add(headStart, 160), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value5,  tail)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value6,  add(headStart, 192))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value7,  add(headStart, 224))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value8,  add(headStart, 256))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must have admin role to perform \")\n\n        mstore(add(memPtr, 32), \"this action.\")\n\n    }\n\n    function abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a1a4cd5d8c0c0951b484ae64da309567bf010a81c6158a49cccabe78da2c4513_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value6,  add(headStart, 192))\n\n    }\n\n    function store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: permit did not succee\")\n\n        mstore(add(memPtr, 32), \"d\")\n\n    }\n\n    function abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101c45760003560e01c80638456cb59116100f9578063c661fed311610097578063c9d27afe11610071578063c9d27afe14610525578063d0c3609214610555578063d547741f14610585578063ef0c997a146105a1576101c4565b8063c661fed3146104a9578063c90054ee146104d9578063c95bee81146104f5576101c4565b8063a217fddf116100d3578063a217fddf14610405578063a888c2cd14610423578063b6db75a01461045b578063c499314014610479576101c4565b80638456cb59146103af5780638c33b395146103b957806391d14854146103d5576101c4565b8063485cc955116101665780635c975abb116101405780635c975abb1461033b5780635df6f2ee14610359578063602ce4c6146103775780636e810b1a14610393576101c4565b8063485cc955146102d357806355e5b444146102ef57806359405ed31461031f576101c4565b8063248a9ca3116101a2578063248a9ca3146102615780632f2ff15d1461029157806336568abe146102ad5780633f4ba83a146102c9576101c4565b806301ffc9a7146101c957806320849b07146101f9578063248a06341461022b575b600080fd5b6101e360048036038101906101de9190613174565b6105bf565b6040516101f091906131bc565b60405180910390f35b610213600480360381019061020e919061320d565b610639565b60405161022293929190613249565b60405180910390f35b6102456004803603810190610240919061320d565b610782565b6040516102589796959493929190613280565b60405180910390f35b61027b60048036038101906102769190613325565b6107f5565b6040516102889190613361565b60405180910390f35b6102ab60048036038101906102a691906133da565b610815565b005b6102c760048036038101906102c291906133da565b610836565b005b6102d16108b9565b005b6102ed60048036038101906102e8919061341a565b61090a565b005b610309600480360381019061030491906135d9565b610ae5565b60405161031691906131bc565b60405180910390f35b610339600480360381019061033491906136ab565b610ea7565b005b610343610f4a565b60405161035091906131bc565b60405180910390f35b610361610f61565b60405161036e91906136d8565b60405180910390f35b610391600480360381019061038c91906136f3565b610f67565b005b6103ad60048036038101906103a891906136ab565b6111d1565b005b6103b76112f3565b005b6103d360048036038101906103ce919061376e565b611344565b005b6103ef60048036038101906103ea91906133da565b6113cc565b6040516103fc91906131bc565b60405180910390f35b61040d611437565b60405161041a9190613361565b60405180910390f35b61043d6004803603810190610438919061320d565b61143e565b6040516104529998979695949392919061383c565b60405180910390f35b61046361155c565b60405161047091906131bc565b60405180910390f35b610493600480360381019061048e91906136ab565b61157b565b6040516104a091906136d8565b60405180910390f35b6104c360048036038101906104be91906136ab565b611594565b6040516104d091906131bc565b60405180910390f35b6104f360048036038101906104ee919061320d565b6115b5565b005b61050f600480360381019061050a919061376e565b611606565b60405161051c91906136d8565b60405180910390f35b61053f600480360381019061053a91906138fc565b61162c565b60405161054c91906131bc565b60405180910390f35b61056f600480360381019061056a919061320d565b611cc7565b60405161057c91906131bc565b60405180910390f35b61059f600480360381019061059a91906133da565b6122f2565b005b6105a9612313565b6040516105b691906136d8565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061063257506106318261231d565b5b9050919050565b60008060006101036000858152602001908152602001600020600801600061065f612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610103600086815260200190815260200160002060080160006106cb612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1661010360008781526020019081526020016000206008016000610737612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549250925092509193909250565b60008060008060008060008061010360008a815260200190815260200160002060070160008a815260200190815260200160002090508060000154816001015482600201548360030154846004015485600501548660060154975097509750975097509750975050919395979092949650565b600060976000838152602001908152602001600020600101549050919050565b61081e826107f5565b6108278161238f565b61083183836123a3565b505050565b61083e612387565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a2906139ae565b60405180910390fd5b6108b58282612484565b5050565b6108c161155c565b610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790613a40565b60405180910390fd5b610908612566565b565b60008060019054906101000a900460ff1615905080801561093b5750600160008054906101000a900460ff1660ff16105b80610968575061094a306125c9565b1580156109675750600160008054906101000a900460ff1660ff16145b5b6109a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099e90613ad2565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156109e4576001600060016101000a81548160ff0219169083151502179055505b678ac7230489e8000060fc819055508261010060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a87610a82612387565b6111d1565b8015610ae05760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ad79190613b37565b60405180910390a15b505050565b600060fb60008154610af690613b81565b919050819055506000610103600060fb548152602001908152602001600020905089816002018190555088816003018190555060fb548160010181905550610b3c612387565b8160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087816005019081610b8f9190613dcb565b50868160040181905550603c42610ba69190613e9d565b81600701600060fb5481526020019081526020016000206000018190555061012c81600701600060fb54815260200190815260200160002060000154610bec9190613e9d565b81600701600060fb548152602001908152602001600020600101819055506101046000610c17612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154610c5e90613b81565b9190508190555061010560008b815260200190815260200160002060008a815260200190815260200160002060008154610c9790613b81565b9190508190555060fd60008154610cad90613b81565b91905081905550600061010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9d070206040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190613ee6565b905080610d83576040517f0c7ef03900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610de3610d8e612387565b3060fc548a8a8a8a60ff60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125ec90979695949392919063ffffffff16565b610e323060fc5460fe60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127b99092919063ffffffff16565b88604051610e409190613f4f565b604051809103902060fb54610e53612387565b73ffffffffffffffffffffffffffffffffffffffff167fbb70aa717b6d2e0a9b9a1b647818482838fd0133dbdde6f6ff62d0dea579306d60405160405180910390a460019250505098975050505050505050565b610eaf61155c565b610eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee590613a40565b60405180910390fd5b600161010260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000603360009054906101000a900460ff16905090565b60fb5481565b610103600086815260200190815260200160002060060160009054906101000a900460ff161580610fba5750610103600086815260200190815260200160002060060160029054906101000a900460ff16155b15610ff1576040517fed43432a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002610103600087815260200190815260200160002060070160008781526020019081526020016000206006015410611056576040517f4cf8bf0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001610103600087815260200190815260200160002060060160026101000a81548160ff021916908315150217905550610103600060fb5481526020019081526020016000206007016000600160fb546110b09190613e9d565b8152602001908152602001600020600601600081546110ce90613b81565b919050819055506111c96101036000878152602001908152602001600020600201546101036000888152602001908152602001600020600301546101036000898152602001908152602001600020600501805461112a90613bf8565b80601f016020809104026020016040519081016040528092919081815260200182805461115690613bf8565b80156111a35780601f10611178576101008083540402835291602001916111a3565b820191906000526020600020905b81548152906001019060200180831161118657829003601f168201915b505050505061010360008a81526020019081526020016000206004015488888888610ae5565b505050505050565b600060019054906101000a900460ff16611220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121790613fd8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611286576040517f5415139400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61128e61283f565b611296612898565b61129e6128e9565b6112af6112a9612942565b826123a3565b6112c06112ba61296a565b826123a3565b6112d86112cb61296a565b6112d3612942565b612992565b6112f06112e3612942565b6112eb612942565b612992565b50565b6112fb61155c565b61133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190613a40565b60405180910390fd5b6113426129ee565b565b61134c61155c565b61138b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138290613a40565b60405180910390fd5b610e10816113999190613ff8565b61010360008481526020019081526020016000206007016000848152602001908152602001600020600101819055505050565b60006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6101036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050180546114a090613bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546114cc90613bf8565b80156115195780601f106114ee57610100808354040283529160200191611519565b820191906000526020600020905b8154815290600101906020018083116114fc57829003601f168201915b5050505050908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16905089565b6000611576611569612942565b611571612387565b6113cc565b905090565b6101046020528060005260406000206000915090505481565b6101026020528060005260406000206000915054906101000a900460ff1681565b6115bd61155c565b6115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f390613a40565b60405180910390fd5b8060fc8190555050565b610105602052816000526040600020602052806000526040600020600091509150505481565b60004261010360008581526020019081526020016000206007016000858152602001908152602001600020600001541115611693576040517fee6c0e1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610103600084815260200190815260200160002060080160006116b4612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615611736576040517fe88a652b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426101036000858152602001908152602001600020600701600085815260200190815260200160002060010154101561179b576040517fd6db172200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81610103600085815260200190815260200160002060080160006117bd612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff02191690831515021790555061010060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231611858612387565b6040518263ffffffff1660e01b81526004016118749190614052565b602060405180830381865afa158015611891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b59190614082565b610103600085815260200190815260200160002060080160006118d6612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060016101036000858152602001908152602001600020600801600061193a612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550610102600061199b612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168015611a1a575060026101036000858152602001908152602001600020600701600085815260200190815260200160002060060154145b15611b70578115611aca5761010360008481526020019081526020016000206008016000611a46612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610103600085815260200190815260200160002060070160008581526020019081526020016000206004016000828254611abe9190613e9d565b92505081905550611b6b565b61010360008481526020019081526020016000206008016000611aeb612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610103600085815260200190815260200160002060070160008581526020019081526020016000206005016000828254611b639190613e9d565b925050819055505b611cbd565b8115611c1b5761010360008481526020019081526020016000206008016000611b97612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610103600085815260200190815260200160002060070160008581526020019081526020016000206002016000828254611c0f9190613e9d565b92505081905550611cbc565b61010360008481526020019081526020016000206008016000611c3c612387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610103600085815260200190815260200160002060070160008581526020019081526020016000206003016000828254611cb49190613e9d565b925050819055505b5b6001905092915050565b600042603c6101036000858152602001908152602001600020600701600085815260200190815260200160002060010154611d029190613e9d565b1115611d3a576040517f449a56bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610103600083815260200190815260200160002060060160029054906101000a900460ff1615611d96576040517f34e3808e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061010360008481526020019081526020016000206007016000848152602001908152602001600020600301546101036000858152602001908152602001600020600701600085815260200190815260200160002060020154611dfa9190613e9d565b905060026101036000858152602001908152602001600020600701600085815260200190815260200160002060060154036120ba57600061010360008581526020019081526020016000206007016000858152602001908152602001600020600501546101036000868152602001908152602001600020600701600086815260200190815260200160002060040154611e939190613e9d565b90506000610103600086815260200190815260200160002060070160008681526020019081526020016000206005015461010360008781526020019081526020016000206007016000878152602001908152602001600020600401541015611efc576000611f44565b816064610103600060fb548152602001908152602001600020600701600060fb54815260200190815260200160002060020154611f399190613ff8565b611f4391906140de565b5b9050603b81106120825760006101036000878152602001908152602001600020600701600087815260200190815260200160002060030154610103600088815260200190815260200160002060070160008881526020019081526020016000206002015411611fb4576001611ff8565b8360646101036000898152602001908152602001600020600701600089815260200190815260200160002060020154611fed9190613ff8565b611ff791906140de565b5b90506000606460338361200b9190613ff8565b61201591906140de565b60646031856120249190613ff8565b61202e91906140de565b6120389190613e9d565b9050605081101561204a57600061204d565b60015b610103600089815260200190815260200160002060060160016101000a81548160ff02191690831515021790555050506120b3565b6000610103600087815260200190815260200160002060060160016101000a81548160ff0219169083151502179055505b50506121a9565b60006101036000858152602001908152602001600020600701600085815260200190815260200160002060030154610103600086815260200190815260200160002060070160008681526020019081526020016000206002015411612120576001612164565b81606461010360008781526020019081526020016000206007016000878152602001908152602001600020600201546121599190613ff8565b61216391906140de565b5b90506050811015612176576000612179565b60015b610103600086815260200190815260200160002060060160016101000a81548160ff021916908315150217905550505b6001610103600085815260200190815260200160002060060160006101000a81548160ff021916908315150217905550610103600084815260200190815260200160002060060160019054906101000a900460ff16156122d25760006001610103600086815260200190815260200160002060070160008681526020019081526020016000206006015461223d9190613e9d565b60fc5461224a9190613ff8565b90506122d0610103600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260fe60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127b99092919063ffffffff16565b505b60fd600081546122e19061410f565b919050819055506001915050919050565b6122fb826107f5565b6123048161238f565b61230e8383612484565b505050565b600060fb54905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b6123a08161239b612387565b612a51565b50565b6123ad82826113cc565b6124805760016097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612425612387565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61248e82826113cc565b156125625760006097600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612507612387565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61256e612ad6565b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6125b2612387565b6040516125bf9190614052565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008873ffffffffffffffffffffffffffffffffffffffff16637ecebe00896040518263ffffffff1660e01b81526004016126279190614052565b602060405180830381865afa158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126689190614082565b90508873ffffffffffffffffffffffffffffffffffffffff1663d505accf898989898989896040518863ffffffff1660e01b81526004016126af9796959493929190614147565b600060405180830381600087803b1580156126c957600080fd5b505af11580156126dd573d6000803e3d6000fd5b5050505060008973ffffffffffffffffffffffffffffffffffffffff16637ecebe008a6040518263ffffffff1660e01b815260040161271c9190614052565b602060405180830381865afa158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d9190614082565b905060018261276c9190613e9d565b81146127ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a490614228565b60405180910390fd5b50505050505050505050565b61283a8363a9059cbb60e01b84846040516024016127d8929190614248565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b1f565b505050565b600060019054906101000a900460ff1661288e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288590613fd8565b60405180910390fd5b612896612be6565b565b600060019054906101000a900460ff166128e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128de90613fd8565b60405180910390fd5b565b600060019054906101000a900460ff16612938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292f90613fd8565b60405180910390fd5b612940612c52565b565b60007fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775905090565b60007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905090565b600061299d836107f5565b90508160976000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6129f6612cab565b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a3a612387565b604051612a479190614052565b60405180910390a1565b612a5b82826113cc565b612ad257612a6881612cf5565b612a768360001c6020612d22565b604051602001612a87929190614309565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac99190614343565b60405180910390fd5b5050565b612ade610f4a565b612b1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b14906143b1565b60405180910390fd5b565b6000612b81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612f5e9092919063ffffffff16565b9050600081511115612be15780806020019051810190612ba19190613ee6565b612be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd790614443565b60405180910390fd5b5b505050565b600060019054906101000a900460ff16612c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2c90613fd8565b60405180910390fd5b6000603360006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16612ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9890613fd8565b60405180910390fd5b600160c981905550565b612cb3610f4a565b15612cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cea906144af565b60405180910390fd5b565b6060612d1b8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612d22565b9050919050565b606060006002836002612d359190613ff8565b612d3f9190613e9d565b67ffffffffffffffff811115612d5857612d57613475565b5b6040519080825280601f01601f191660200182016040528015612d8a5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612dc257612dc16144cf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612e2657612e256144cf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612e669190613ff8565b612e709190613e9d565b90505b6001811115612f10577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612eb257612eb16144cf565b5b1a60f81b828281518110612ec957612ec86144cf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612f099061410f565b9050612e73565b5060008414612f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4b9061454a565b60405180910390fd5b8091505092915050565b6060612f6d8484600085612f76565b90509392505050565b606082471015612fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb2906145dc565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612fe49190614643565b60006040518083038185875af1925050503d8060008114613021576040519150601f19603f3d011682016040523d82523d6000602084013e613026565b606091505b509150915061303787838387613043565b92505050949350505050565b606083156130a557600083510361309d5761305d856125c9565b61309c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613093906146a6565b60405180910390fd5b5b8290506130b0565b6130af83836130b8565b5b949350505050565b6000825111156130cb5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ff9190614343565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131518161311c565b811461315c57600080fd5b50565b60008135905061316e81613148565b92915050565b60006020828403121561318a57613189613112565b5b60006131988482850161315f565b91505092915050565b60008115159050919050565b6131b6816131a1565b82525050565b60006020820190506131d160008301846131ad565b92915050565b6000819050919050565b6131ea816131d7565b81146131f557600080fd5b50565b600081359050613207816131e1565b92915050565b60006020828403121561322357613222613112565b5b6000613231848285016131f8565b91505092915050565b613243816131d7565b82525050565b600060608201905061325e60008301866131ad565b61326b60208301856131ad565b613278604083018461323a565b949350505050565b600060e082019050613295600083018a61323a565b6132a2602083018961323a565b6132af604083018861323a565b6132bc606083018761323a565b6132c9608083018661323a565b6132d660a083018561323a565b6132e360c083018461323a565b98975050505050505050565b6000819050919050565b613302816132ef565b811461330d57600080fd5b50565b60008135905061331f816132f9565b92915050565b60006020828403121561333b5761333a613112565b5b600061334984828501613310565b91505092915050565b61335b816132ef565b82525050565b60006020820190506133766000830184613352565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133a78261337c565b9050919050565b6133b78161339c565b81146133c257600080fd5b50565b6000813590506133d4816133ae565b92915050565b600080604083850312156133f1576133f0613112565b5b60006133ff85828601613310565b9250506020613410858286016133c5565b9150509250929050565b6000806040838503121561343157613430613112565b5b600061343f858286016133c5565b9250506020613450858286016133c5565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134ad82613464565b810181811067ffffffffffffffff821117156134cc576134cb613475565b5b80604052505050565b60006134df613108565b90506134eb82826134a4565b919050565b600067ffffffffffffffff82111561350b5761350a613475565b5b61351482613464565b9050602081019050919050565b82818337600083830152505050565b600061354361353e846134f0565b6134d5565b90508281526020810184848401111561355f5761355e61345f565b5b61356a848285613521565b509392505050565b600082601f8301126135875761358661345a565b5b8135613597848260208601613530565b91505092915050565b600060ff82169050919050565b6135b6816135a0565b81146135c157600080fd5b50565b6000813590506135d3816135ad565b92915050565b600080600080600080600080610100898b0312156135fa576135f9613112565b5b60006136088b828c016131f8565b98505060206136198b828c016131f8565b975050604089013567ffffffffffffffff81111561363a57613639613117565b5b6136468b828c01613572565b96505060606136578b828c016131f8565b95505060806136688b828c016131f8565b94505060a06136798b828c016135c4565b93505060c061368a8b828c01613310565b92505060e061369b8b828c01613310565b9150509295985092959890939650565b6000602082840312156136c1576136c0613112565b5b60006136cf848285016133c5565b91505092915050565b60006020820190506136ed600083018461323a565b92915050565b600080600080600060a0868803121561370f5761370e613112565b5b600061371d888289016131f8565b955050602061372e888289016131f8565b945050604061373f888289016135c4565b935050606061375088828901613310565b925050608061376188828901613310565b9150509295509295909350565b6000806040838503121561378557613784613112565b5b6000613793858286016131f8565b92505060206137a4858286016131f8565b9150509250929050565b6137b78161339c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156137f75780820151818401526020810190506137dc565b60008484015250505050565b600061380e826137bd565b61381881856137c8565b93506138288185602086016137d9565b61383181613464565b840191505092915050565b600061012082019050613852600083018c6137ae565b61385f602083018b61323a565b61386c604083018a61323a565b613879606083018961323a565b613886608083018861323a565b81810360a08301526138988187613803565b90506138a760c08301866131ad565b6138b460e08301856131ad565b6138c26101008301846131ad565b9a9950505050505050505050565b6138d9816131a1565b81146138e457600080fd5b50565b6000813590506138f6816138d0565b92915050565b6000806040838503121561391357613912613112565b5b6000613921858286016131f8565b9250506020613932858286016138e7565b9150509250929050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613998602f836137c8565b91506139a38261393c565b604082019050919050565b600060208201905081810360008301526139c78161398b565b9050919050565b7f4d75737420686176652061646d696e20726f6c6520746f20706572666f726d2060008201527f7468697320616374696f6e2e0000000000000000000000000000000000000000602082015250565b6000613a2a602c836137c8565b9150613a35826139ce565b604082019050919050565b60006020820190508181036000830152613a5981613a1d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613abc602e836137c8565b9150613ac782613a60565b604082019050919050565b60006020820190508181036000830152613aeb81613aaf565b9050919050565b6000819050919050565b6000819050919050565b6000613b21613b1c613b1784613af2565b613afc565b6135a0565b9050919050565b613b3181613b06565b82525050565b6000602082019050613b4c6000830184613b28565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b8c826131d7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bbe57613bbd613b52565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613c1057607f821691505b602082108103613c2357613c22613bc9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613c8b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c4e565b613c958683613c4e565b95508019841693508086168417925050509392505050565b6000613cc8613cc3613cbe846131d7565b613afc565b6131d7565b9050919050565b6000819050919050565b613ce283613cad565b613cf6613cee82613ccf565b848454613c5b565b825550505050565b600090565b613d0b613cfe565b613d16818484613cd9565b505050565b5b81811015613d3a57613d2f600082613d03565b600181019050613d1c565b5050565b601f821115613d7f57613d5081613c29565b613d5984613c3e565b81016020851015613d68578190505b613d7c613d7485613c3e565b830182613d1b565b50505b505050565b600082821c905092915050565b6000613da260001984600802613d84565b1980831691505092915050565b6000613dbb8383613d91565b9150826002028217905092915050565b613dd4826137bd565b67ffffffffffffffff811115613ded57613dec613475565b5b613df78254613bf8565b613e02828285613d3e565b600060209050601f831160018114613e355760008415613e23578287015190505b613e2d8582613daf565b865550613e95565b601f198416613e4386613c29565b60005b82811015613e6b57848901518255600182019150602085019450602081019050613e46565b86831015613e885784890151613e84601f891682613d91565b8355505b6001600288020188555050505b505050505050565b6000613ea8826131d7565b9150613eb3836131d7565b9250828201905080821115613ecb57613eca613b52565b5b92915050565b600081519050613ee0816138d0565b92915050565b600060208284031215613efc57613efb613112565b5b6000613f0a84828501613ed1565b91505092915050565b600081905092915050565b6000613f29826137bd565b613f338185613f13565b9350613f438185602086016137d9565b80840191505092915050565b6000613f5b8284613f1e565b915081905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613fc2602b836137c8565b9150613fcd82613f66565b604082019050919050565b60006020820190508181036000830152613ff181613fb5565b9050919050565b6000614003826131d7565b915061400e836131d7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561404757614046613b52565b5b828202905092915050565b600060208201905061406760008301846137ae565b92915050565b60008151905061407c816131e1565b92915050565b60006020828403121561409857614097613112565b5b60006140a68482850161406d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006140e9826131d7565b91506140f4836131d7565b925082614104576141036140af565b5b828204905092915050565b600061411a826131d7565b91506000820361412d5761412c613b52565b5b600182039050919050565b614141816135a0565b82525050565b600060e08201905061415c600083018a6137ae565b61416960208301896137ae565b614176604083018861323a565b614183606083018761323a565b6141906080830186614138565b61419d60a0830185613352565b6141aa60c0830184613352565b98975050505050505050565b7f5361666545524332303a207065726d697420646964206e6f742073756363656560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006142126021836137c8565b915061421d826141b6565b604082019050919050565b6000602082019050818103600083015261424181614205565b9050919050565b600060408201905061425d60008301856137ae565b61426a602083018461323a565b9392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006142a7601783613f13565b91506142b282614271565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006142f3601183613f13565b91506142fe826142bd565b601182019050919050565b60006143148261429a565b91506143208285613f1e565b915061432b826142e6565b91506143378284613f1e565b91508190509392505050565b6000602082019050818103600083015261435d8184613803565b905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061439b6014836137c8565b91506143a682614365565b602082019050919050565b600060208201905081810360008301526143ca8161438e565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061442d602a836137c8565b9150614438826143d1565b604082019050919050565b6000602082019050818103600083015261445c81614420565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006144996010836137c8565b91506144a482614463565b602082019050919050565b600060208201905081810360008301526144c88161448c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006145346020836137c8565b915061453f826144fe565b602082019050919050565b6000602082019050818103600083015261456381614527565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006145c66026836137c8565b91506145d18261456a565b604082019050919050565b600060208201905081810360008301526145f5816145b9565b9050919050565b600081519050919050565b600081905092915050565b600061461d826145fc565b6146278185614607565b93506146378185602086016137d9565b80840191505092915050565b600061464f8284614612565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614690601d836137c8565b915061469b8261465a565b602082019050919050565b600060208201905081810360008301526146bf81614683565b905091905056fea26469706673582212206334133160fcf85a3adbd2e89a93c3a3c994b2ba0287bea2670ed61c6b90aa9f64736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xC661FED3 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC9D27AFE GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC9D27AFE EQ PUSH2 0x525 JUMPI DUP1 PUSH4 0xD0C36092 EQ PUSH2 0x555 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x585 JUMPI DUP1 PUSH4 0xEF0C997A EQ PUSH2 0x5A1 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0xC661FED3 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0xC90054EE EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0xC95BEE81 EQ PUSH2 0x4F5 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x405 JUMPI DUP1 PUSH4 0xA888C2CD EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0xB6DB75A0 EQ PUSH2 0x45B JUMPI DUP1 PUSH4 0xC4993140 EQ PUSH2 0x479 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x8C33B395 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3D5 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x485CC955 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0x5DF6F2EE EQ PUSH2 0x359 JUMPI DUP1 PUSH4 0x602CE4C6 EQ PUSH2 0x377 JUMPI DUP1 PUSH4 0x6E810B1A EQ PUSH2 0x393 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x485CC955 EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0x55E5B444 EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0x59405ED3 EQ PUSH2 0x31F JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2C9 JUMPI PUSH2 0x1C4 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x20849B07 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x248A0634 EQ PUSH2 0x22B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x3174 JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x213 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x222 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3249 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x782 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x258 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x276 SWAP2 SWAP1 PUSH2 0x3325 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x288 SWAP2 SWAP1 PUSH2 0x3361 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x815 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x836 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D1 PUSH2 0x8B9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0x341A JUMP JUMPDEST PUSH2 0x90A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x35D9 JUMP JUMPDEST PUSH2 0xAE5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x339 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x343 PUSH2 0xF4A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x361 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x391 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38C SWAP2 SWAP1 PUSH2 0x36F3 JUMP JUMPDEST PUSH2 0xF67 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3AD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A8 SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0x11D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3B7 PUSH2 0x12F3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CE SWAP2 SWAP1 PUSH2 0x376E JUMP JUMPDEST PUSH2 0x1344 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EA SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x13CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x40D PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x41A SWAP2 SWAP1 PUSH2 0x3361 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x43D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x438 SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x143E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x452 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x383C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x463 PUSH2 0x155C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x470 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x493 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0x157B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BE SWAP2 SWAP1 PUSH2 0x36AB JUMP JUMPDEST PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4EE SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x15B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x50F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x50A SWAP2 SWAP1 PUSH2 0x376E JUMP JUMPDEST PUSH2 0x1606 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51C SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x53F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x38FC JUMP JUMPDEST PUSH2 0x162C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x54C SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x56F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56A SWAP2 SWAP1 PUSH2 0x320D JUMP JUMPDEST PUSH2 0x1CC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x31BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x59F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x59A SWAP2 SWAP1 PUSH2 0x33DA JUMP JUMPDEST PUSH2 0x22F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5A9 PUSH2 0x2313 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B6 SWAP2 SWAP1 PUSH2 0x36D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x632 JUMPI POP PUSH2 0x631 DUP3 PUSH2 0x231D JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x65F PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x6CB PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x737 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x103 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x3 ADD SLOAD DUP5 PUSH1 0x4 ADD SLOAD DUP6 PUSH1 0x5 ADD SLOAD DUP7 PUSH1 0x6 ADD SLOAD SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP SWAP8 POP POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP1 SWAP3 SWAP5 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x81E DUP3 PUSH2 0x7F5 JUMP JUMPDEST PUSH2 0x827 DUP2 PUSH2 0x238F JUMP JUMPDEST PUSH2 0x831 DUP4 DUP4 PUSH2 0x23A3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x83E PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8AB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A2 SWAP1 PUSH2 0x39AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8B5 DUP3 DUP3 PUSH2 0x2484 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x8C1 PUSH2 0x155C JUMP JUMPDEST PUSH2 0x900 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F7 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x908 PUSH2 0x2566 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x93B JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x968 JUMPI POP PUSH2 0x94A ADDRESS PUSH2 0x25C9 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x967 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x9A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x99E SWAP1 PUSH2 0x3AD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x9E4 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH8 0x8AC7230489E80000 PUSH1 0xFC DUP2 SWAP1 SSTORE POP DUP3 PUSH2 0x100 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH2 0x101 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0xA87 PUSH2 0xA82 PUSH2 0x2387 JUMP JUMPDEST PUSH2 0x11D1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAE0 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xAD7 SWAP2 SWAP1 PUSH2 0x3B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB PUSH1 0x0 DUP2 SLOAD PUSH2 0xAF6 SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP10 DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP9 DUP2 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0xFB SLOAD DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xB3C PUSH2 0x2387 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP8 DUP2 PUSH1 0x5 ADD SWAP1 DUP2 PUSH2 0xB8F SWAP2 SWAP1 PUSH2 0x3DCB JUMP JUMPDEST POP DUP7 DUP2 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x3C TIMESTAMP PUSH2 0xBA6 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x12C DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xBEC SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x104 PUSH1 0x0 PUSH2 0xC17 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD PUSH2 0xC5E SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH2 0x105 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD PUSH2 0xC97 SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0xFD PUSH1 0x0 DUP2 SLOAD PUSH2 0xCAD SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x101 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC9D07020 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD4A SWAP2 SWAP1 PUSH2 0x3EE6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC7EF03900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDE3 PUSH2 0xD8E PUSH2 0x2387 JUMP JUMPDEST ADDRESS PUSH1 0xFC SLOAD DUP11 DUP11 DUP11 DUP11 PUSH1 0xFF PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x25EC SWAP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xE32 ADDRESS PUSH1 0xFC SLOAD PUSH1 0xFE PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x27B9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP9 PUSH1 0x40 MLOAD PUSH2 0xE40 SWAP2 SWAP1 PUSH2 0x3F4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0xFB SLOAD PUSH2 0xE53 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBB70AA717B6D2E0A9B9A1B647818482838FD0133DBDDE6F6FF62D0DEA579306D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP3 POP POP POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xEAF PUSH2 0x155C JUMP JUMPDEST PUSH2 0xEEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE5 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x102 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xFB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0xFBA JUMPI POP PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0xFF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED43432A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD LT PUSH2 0x1056 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4CF8BF0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x103 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0xFB SLOAD PUSH2 0x10B0 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 DUP2 SLOAD PUSH2 0x10CE SWAP1 PUSH2 0x3B81 JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH2 0x11C9 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0x112A SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1156 SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11A3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1178 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11A3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1186 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x103 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD DUP9 DUP9 DUP9 DUP9 PUSH2 0xAE5 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1220 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1217 SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1286 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5415139400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x128E PUSH2 0x283F JUMP JUMPDEST PUSH2 0x1296 PUSH2 0x2898 JUMP JUMPDEST PUSH2 0x129E PUSH2 0x28E9 JUMP JUMPDEST PUSH2 0x12AF PUSH2 0x12A9 PUSH2 0x2942 JUMP JUMPDEST DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH2 0x12C0 PUSH2 0x12BA PUSH2 0x296A JUMP JUMPDEST DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH2 0x12D8 PUSH2 0x12CB PUSH2 0x296A JUMP JUMPDEST PUSH2 0x12D3 PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x2992 JUMP JUMPDEST PUSH2 0x12F0 PUSH2 0x12E3 PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x12EB PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x2992 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x12FB PUSH2 0x155C JUMP JUMPDEST PUSH2 0x133A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1331 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1342 PUSH2 0x29EE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x134C PUSH2 0x155C JUMP JUMPDEST PUSH2 0x138B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1382 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE10 DUP2 PUSH2 0x1399 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0x14A0 SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x14CC SWAP1 PUSH2 0x3BF8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1519 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x14EE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1519 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x14FC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x6 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x6 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x6 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP10 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1576 PUSH2 0x1569 PUSH2 0x2942 JUMP JUMPDEST PUSH2 0x1571 PUSH2 0x2387 JUMP JUMPDEST PUSH2 0x13CC JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x104 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x102 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x15BD PUSH2 0x155C JUMP JUMPDEST PUSH2 0x15FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15F3 SWAP1 PUSH2 0x3A40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xFC DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x105 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x1693 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEE6C0E1400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x16B4 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1736 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE88A652B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD LT ISZERO PUSH2 0x179B JUMPI PUSH1 0x40 MLOAD PUSH32 0xD6DB172200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x17BD PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x100 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x1858 PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1874 SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1891 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18B5 SWAP2 SWAP1 PUSH2 0x4082 JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x18D6 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x193A PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x102 PUSH1 0x0 PUSH2 0x199B PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1A1A JUMPI POP PUSH1 0x2 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x1B70 JUMPI DUP2 ISZERO PUSH2 0x1ACA JUMPI PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1A46 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1ABE SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1B6B JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1AEB PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1B63 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x1CBD JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1C1B JUMPI PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1B97 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1C0F SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1CBC JUMP JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 PUSH2 0x1C3C PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1CB4 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH1 0x3C PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1D02 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST GT ISZERO PUSH2 0x1D3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x449A56BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1D96 JUMPI PUSH1 0x40 MLOAD PUSH32 0x34E3808E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1DFA SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SUB PUSH2 0x20BA JUMPI PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH2 0x1E93 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD LT ISZERO PUSH2 0x1EFC JUMPI PUSH1 0x0 PUSH2 0x1F44 JUMP JUMPDEST DUP2 PUSH1 0x64 PUSH2 0x103 PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 PUSH1 0xFB SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1F39 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x1F43 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x3B DUP2 LT PUSH2 0x2082 JUMPI PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT PUSH2 0x1FB4 JUMPI PUSH1 0x1 PUSH2 0x1FF8 JUMP JUMPDEST DUP4 PUSH1 0x64 PUSH2 0x103 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x1FED SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x1FF7 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x33 DUP4 PUSH2 0x200B SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2015 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST PUSH1 0x64 PUSH1 0x31 DUP6 PUSH2 0x2024 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x202E SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST PUSH2 0x2038 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP PUSH1 0x50 DUP2 LT ISZERO PUSH2 0x204A JUMPI PUSH1 0x0 PUSH2 0x204D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP PUSH2 0x21A9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD GT PUSH2 0x2120 JUMPI PUSH1 0x1 PUSH2 0x2164 JUMP JUMPDEST DUP2 PUSH1 0x64 PUSH2 0x103 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x2159 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2163 SWAP2 SWAP1 PUSH2 0x40DE JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x50 DUP2 LT ISZERO PUSH2 0x2176 JUMPI PUSH1 0x0 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x103 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x22D2 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH2 0x223D SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST PUSH1 0xFC SLOAD PUSH2 0x224A SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST SWAP1 POP PUSH2 0x22D0 PUSH2 0x103 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0xFE PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x27B9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP JUMPDEST PUSH1 0xFD PUSH1 0x0 DUP2 SLOAD PUSH2 0x22E1 SWAP1 PUSH2 0x410F JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22FB DUP3 PUSH2 0x7F5 JUMP JUMPDEST PUSH2 0x2304 DUP2 PUSH2 0x238F JUMP JUMPDEST PUSH2 0x230E DUP4 DUP4 PUSH2 0x2484 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFB SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x23A0 DUP2 PUSH2 0x239B PUSH2 0x2387 JUMP JUMPDEST PUSH2 0x2A51 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x23AD DUP3 DUP3 PUSH2 0x13CC JUMP JUMPDEST PUSH2 0x2480 JUMPI PUSH1 0x1 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x2425 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x248E DUP3 DUP3 PUSH2 0x13CC JUMP JUMPDEST ISZERO PUSH2 0x2562 JUMPI PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x2507 PUSH2 0x2387 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x256E PUSH2 0x2AD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0x25B2 PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25BF SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP10 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2627 SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2644 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2668 SWAP2 SWAP1 PUSH2 0x4082 JUMP JUMPDEST SWAP1 POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD505ACCF DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26AF SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4147 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x26DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7ECEBE00 DUP11 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x271C SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2739 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x275D SWAP2 SWAP1 PUSH2 0x4082 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x276C SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST DUP2 EQ PUSH2 0x27AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A4 SWAP1 PUSH2 0x4228 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x283A DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x27D8 SWAP3 SWAP2 SWAP1 PUSH2 0x4248 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x2B1F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x288E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2885 SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2896 PUSH2 0x2BE6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x28E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28DE SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2938 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x292F SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2940 PUSH2 0x2C52 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x299D DUP4 PUSH2 0x7F5 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x97 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP5 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x29F6 PUSH2 0x2CAB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2A3A PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A47 SWAP2 SWAP1 PUSH2 0x4052 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x2A5B DUP3 DUP3 PUSH2 0x13CC JUMP JUMPDEST PUSH2 0x2AD2 JUMPI PUSH2 0x2A68 DUP2 PUSH2 0x2CF5 JUMP JUMPDEST PUSH2 0x2A76 DUP4 PUSH1 0x0 SHR PUSH1 0x20 PUSH2 0x2D22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A87 SWAP3 SWAP2 SWAP1 PUSH2 0x4309 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AC9 SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2ADE PUSH2 0xF4A JUMP JUMPDEST PUSH2 0x2B1D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B14 SWAP1 PUSH2 0x43B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B81 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2F5E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x2BE1 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2BA1 SWAP2 SWAP1 PUSH2 0x3EE6 JUMP JUMPDEST PUSH2 0x2BE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BD7 SWAP1 PUSH2 0x4443 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2C35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C2C SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2CA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C98 SWAP1 PUSH2 0x3FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xC9 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2CB3 PUSH2 0xF4A JUMP JUMPDEST ISZERO PUSH2 0x2CF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CEA SWAP1 PUSH2 0x44AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D1B DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x2D22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x2D35 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2D3F SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D58 JUMPI PUSH2 0x2D57 PUSH2 0x3475 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D8A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2DC2 JUMPI PUSH2 0x2DC1 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2E26 JUMPI PUSH2 0x2E25 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x2E66 SWAP2 SWAP1 PUSH2 0x3FF8 JUMP JUMPDEST PUSH2 0x2E70 SWAP2 SWAP1 PUSH2 0x3E9D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2F10 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x2EB2 JUMPI PUSH2 0x2EB1 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2EC9 JUMPI PUSH2 0x2EC8 PUSH2 0x44CF JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x2F09 SWAP1 PUSH2 0x410F JUMP JUMPDEST SWAP1 POP PUSH2 0x2E73 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x2F54 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F4B SWAP1 PUSH2 0x454A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2F6D DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2F76 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2FBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2FB2 SWAP1 PUSH2 0x45DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2FE4 SWAP2 SWAP1 PUSH2 0x4643 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3021 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3026 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3037 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3043 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x30A5 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x309D JUMPI PUSH2 0x305D DUP6 PUSH2 0x25C9 JUMP JUMPDEST PUSH2 0x309C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3093 SWAP1 PUSH2 0x46A6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x30B0 JUMP JUMPDEST PUSH2 0x30AF DUP4 DUP4 PUSH2 0x30B8 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x30CB JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30FF SWAP2 SWAP1 PUSH2 0x4343 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3151 DUP2 PUSH2 0x311C JUMP JUMPDEST DUP2 EQ PUSH2 0x315C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x316E DUP2 PUSH2 0x3148 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x318A JUMPI PUSH2 0x3189 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3198 DUP5 DUP3 DUP6 ADD PUSH2 0x315F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31B6 DUP2 PUSH2 0x31A1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x31D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x31AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31EA DUP2 PUSH2 0x31D7 JUMP JUMPDEST DUP2 EQ PUSH2 0x31F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3207 DUP2 PUSH2 0x31E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3223 JUMPI PUSH2 0x3222 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3231 DUP5 DUP3 DUP6 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3243 DUP2 PUSH2 0x31D7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x325E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x326B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x3278 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x3295 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32A2 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32AF PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32BC PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32C9 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32D6 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x32E3 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3302 DUP2 PUSH2 0x32EF JUMP JUMPDEST DUP2 EQ PUSH2 0x330D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x331F DUP2 PUSH2 0x32F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x333B JUMPI PUSH2 0x333A PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3349 DUP5 DUP3 DUP6 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x335B DUP2 PUSH2 0x32EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3376 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3352 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A7 DUP3 PUSH2 0x337C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33B7 DUP2 PUSH2 0x339C JUMP JUMPDEST DUP2 EQ PUSH2 0x33C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x33D4 DUP2 PUSH2 0x33AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x33F1 JUMPI PUSH2 0x33F0 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33FF DUP6 DUP3 DUP7 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3410 DUP6 DUP3 DUP7 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3431 JUMPI PUSH2 0x3430 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x343F DUP6 DUP3 DUP7 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3450 DUP6 DUP3 DUP7 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x34AD DUP3 PUSH2 0x3464 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x34CC JUMPI PUSH2 0x34CB PUSH2 0x3475 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34DF PUSH2 0x3108 JUMP JUMPDEST SWAP1 POP PUSH2 0x34EB DUP3 DUP3 PUSH2 0x34A4 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x350B JUMPI PUSH2 0x350A PUSH2 0x3475 JUMP JUMPDEST JUMPDEST PUSH2 0x3514 DUP3 PUSH2 0x3464 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3543 PUSH2 0x353E DUP5 PUSH2 0x34F0 JUMP JUMPDEST PUSH2 0x34D5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x355F JUMPI PUSH2 0x355E PUSH2 0x345F JUMP JUMPDEST JUMPDEST PUSH2 0x356A DUP5 DUP3 DUP6 PUSH2 0x3521 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3587 JUMPI PUSH2 0x3586 PUSH2 0x345A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3597 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x35B6 DUP2 PUSH2 0x35A0 JUMP JUMPDEST DUP2 EQ PUSH2 0x35C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x35D3 DUP2 PUSH2 0x35AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x35FA JUMPI PUSH2 0x35F9 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3608 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x3619 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x363A JUMPI PUSH2 0x3639 PUSH2 0x3117 JUMP JUMPDEST JUMPDEST PUSH2 0x3646 DUP12 DUP3 DUP13 ADD PUSH2 0x3572 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x60 PUSH2 0x3657 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x80 PUSH2 0x3668 DUP12 DUP3 DUP13 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xA0 PUSH2 0x3679 DUP12 DUP3 DUP13 ADD PUSH2 0x35C4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xC0 PUSH2 0x368A DUP12 DUP3 DUP13 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xE0 PUSH2 0x369B DUP12 DUP3 DUP13 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36C1 JUMPI PUSH2 0x36C0 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36CF DUP5 DUP3 DUP6 ADD PUSH2 0x33C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x36ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x370F JUMPI PUSH2 0x370E PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x371D DUP9 DUP3 DUP10 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x372E DUP9 DUP3 DUP10 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x373F DUP9 DUP3 DUP10 ADD PUSH2 0x35C4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x3750 DUP9 DUP3 DUP10 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x3761 DUP9 DUP3 DUP10 ADD PUSH2 0x3310 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3785 JUMPI PUSH2 0x3784 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3793 DUP6 DUP3 DUP7 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x37A4 DUP6 DUP3 DUP7 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x37B7 DUP2 PUSH2 0x339C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37F7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x37DC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x380E DUP3 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x3818 DUP2 DUP6 PUSH2 0x37C8 JUMP JUMPDEST SWAP4 POP PUSH2 0x3828 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37D9 JUMP JUMPDEST PUSH2 0x3831 DUP2 PUSH2 0x3464 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x3852 PUSH1 0x0 DUP4 ADD DUP13 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x385F PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x386C PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x3879 PUSH1 0x60 DUP4 ADD DUP10 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x3886 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x323A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x3898 DUP2 DUP8 PUSH2 0x3803 JUMP JUMPDEST SWAP1 POP PUSH2 0x38A7 PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x38B4 PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x31AD JUMP JUMPDEST PUSH2 0x38C2 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x31AD JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x38D9 DUP2 PUSH2 0x31A1 JUMP JUMPDEST DUP2 EQ PUSH2 0x38E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x38F6 DUP2 PUSH2 0x38D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3913 JUMPI PUSH2 0x3912 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3921 DUP6 DUP3 DUP7 ADD PUSH2 0x31F8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3932 DUP6 DUP3 DUP7 ADD PUSH2 0x38E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3998 PUSH1 0x2F DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x39A3 DUP3 PUSH2 0x393C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39C7 DUP2 PUSH2 0x398B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4D75737420686176652061646D696E20726F6C6520746F20706572666F726D20 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7468697320616374696F6E2E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A2A PUSH1 0x2C DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A35 DUP3 PUSH2 0x39CE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A59 DUP2 PUSH2 0x3A1D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3ABC PUSH1 0x2E DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AC7 DUP3 PUSH2 0x3A60 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AEB DUP2 PUSH2 0x3AAF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B21 PUSH2 0x3B1C PUSH2 0x3B17 DUP5 PUSH2 0x3AF2 JUMP JUMPDEST PUSH2 0x3AFC JUMP JUMPDEST PUSH2 0x35A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3B31 DUP2 PUSH2 0x3B06 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3B4C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3B28 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3B8C DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3BBE JUMPI PUSH2 0x3BBD PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3C10 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3C23 JUMPI PUSH2 0x3C22 PUSH2 0x3BC9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3C8B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3C4E JUMP JUMPDEST PUSH2 0x3C95 DUP7 DUP4 PUSH2 0x3C4E JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC8 PUSH2 0x3CC3 PUSH2 0x3CBE DUP5 PUSH2 0x31D7 JUMP JUMPDEST PUSH2 0x3AFC JUMP JUMPDEST PUSH2 0x31D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CE2 DUP4 PUSH2 0x3CAD JUMP JUMPDEST PUSH2 0x3CF6 PUSH2 0x3CEE DUP3 PUSH2 0x3CCF JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3C5B JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3D0B PUSH2 0x3CFE JUMP JUMPDEST PUSH2 0x3D16 DUP2 DUP5 DUP5 PUSH2 0x3CD9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D3A JUMPI PUSH2 0x3D2F PUSH1 0x0 DUP3 PUSH2 0x3D03 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3D1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3D7F JUMPI PUSH2 0x3D50 DUP2 PUSH2 0x3C29 JUMP JUMPDEST PUSH2 0x3D59 DUP5 PUSH2 0x3C3E JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3D68 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3D7C PUSH2 0x3D74 DUP6 PUSH2 0x3C3E JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3D1B JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DA2 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3D84 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DBB DUP4 DUP4 PUSH2 0x3D91 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3DD4 DUP3 PUSH2 0x37BD JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DED JUMPI PUSH2 0x3DEC PUSH2 0x3475 JUMP JUMPDEST JUMPDEST PUSH2 0x3DF7 DUP3 SLOAD PUSH2 0x3BF8 JUMP JUMPDEST PUSH2 0x3E02 DUP3 DUP3 DUP6 PUSH2 0x3D3E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3E35 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3E23 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3E2D DUP6 DUP3 PUSH2 0x3DAF JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3E95 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3E43 DUP7 PUSH2 0x3C29 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3E6B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3E46 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3E88 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3E84 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3D91 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EA8 DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x3EB3 DUP4 PUSH2 0x31D7 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3ECB JUMPI PUSH2 0x3ECA PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3EE0 DUP2 PUSH2 0x38D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EFC JUMPI PUSH2 0x3EFB PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F0A DUP5 DUP3 DUP6 ADD PUSH2 0x3ED1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F29 DUP3 PUSH2 0x37BD JUMP JUMPDEST PUSH2 0x3F33 DUP2 DUP6 PUSH2 0x3F13 JUMP JUMPDEST SWAP4 POP PUSH2 0x3F43 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37D9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F5B DUP3 DUP5 PUSH2 0x3F1E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FC2 PUSH1 0x2B DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3FCD DUP3 PUSH2 0x3F66 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FF1 DUP2 PUSH2 0x3FB5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4003 DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x400E DUP4 PUSH2 0x31D7 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4047 JUMPI PUSH2 0x4046 PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4067 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x37AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x407C DUP2 PUSH2 0x31E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4098 JUMPI PUSH2 0x4097 PUSH2 0x3112 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x40A6 DUP5 DUP3 DUP6 ADD PUSH2 0x406D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x40E9 DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH2 0x40F4 DUP4 PUSH2 0x31D7 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x4104 JUMPI PUSH2 0x4103 PUSH2 0x40AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x411A DUP3 PUSH2 0x31D7 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x412D JUMPI PUSH2 0x412C PUSH2 0x3B52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4141 DUP2 PUSH2 0x35A0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x415C PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x4169 PUSH1 0x20 DUP4 ADD DUP10 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x4176 PUSH1 0x40 DUP4 ADD DUP9 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x4183 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x323A JUMP JUMPDEST PUSH2 0x4190 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x4138 JUMP JUMPDEST PUSH2 0x419D PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x3352 JUMP JUMPDEST PUSH2 0x41AA PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x3352 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A207065726D697420646964206E6F7420737563636565 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4212 PUSH1 0x21 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x421D DUP3 PUSH2 0x41B6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4241 DUP2 PUSH2 0x4205 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x425D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x37AE JUMP JUMPDEST PUSH2 0x426A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x323A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42A7 PUSH1 0x17 DUP4 PUSH2 0x3F13 JUMP JUMPDEST SWAP2 POP PUSH2 0x42B2 DUP3 PUSH2 0x4271 JUMP JUMPDEST PUSH1 0x17 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F3 PUSH1 0x11 DUP4 PUSH2 0x3F13 JUMP JUMPDEST SWAP2 POP PUSH2 0x42FE DUP3 PUSH2 0x42BD JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4314 DUP3 PUSH2 0x429A JUMP JUMPDEST SWAP2 POP PUSH2 0x4320 DUP3 DUP6 PUSH2 0x3F1E JUMP JUMPDEST SWAP2 POP PUSH2 0x432B DUP3 PUSH2 0x42E6 JUMP JUMPDEST SWAP2 POP PUSH2 0x4337 DUP3 DUP5 PUSH2 0x3F1E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x435D DUP2 DUP5 PUSH2 0x3803 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x439B PUSH1 0x14 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x43A6 DUP3 PUSH2 0x4365 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x43CA DUP2 PUSH2 0x438E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x442D PUSH1 0x2A DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x4438 DUP3 PUSH2 0x43D1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x445C DUP2 PUSH2 0x4420 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4499 PUSH1 0x10 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x44A4 DUP3 PUSH2 0x4463 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x44C8 DUP2 PUSH2 0x448C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4534 PUSH1 0x20 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x453F DUP3 PUSH2 0x44FE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4563 DUP2 PUSH2 0x4527 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x45C6 PUSH1 0x26 DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x45D1 DUP3 PUSH2 0x456A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x45F5 DUP2 PUSH2 0x45B9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x461D DUP3 PUSH2 0x45FC JUMP JUMPDEST PUSH2 0x4627 DUP2 DUP6 PUSH2 0x4607 JUMP JUMPDEST SWAP4 POP PUSH2 0x4637 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37D9 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x464F DUP3 DUP5 PUSH2 0x4612 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4690 PUSH1 0x1D DUP4 PUSH2 0x37C8 JUMP JUMPDEST SWAP2 POP PUSH2 0x469B DUP3 PUSH2 0x465A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x46BF DUP2 PUSH2 0x4683 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x34133160 0xFC 0xF8 GAS GASPRICE 0xDB 0xD2 0xE8 SWAP11 SWAP4 0xC3 LOG3 0xC9 SWAP5 0xB2 0xBA MUL DUP8 0xBE LOG2 PUSH8 0xED61C6B90AA9F64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"640:12836:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2903:213:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;12533:325:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;12963:511;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;4708:129:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5133:145;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6242:214;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4584:65:17;;;:::i;:::-;;4125:386;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5241:1348;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5008:110;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1858:84:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1017:22:17;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;11600:927;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;734:549:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4517:61:17;;;:::i;:::-;;4800:202;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3203:145:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2324:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3419:39:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;1289:117:15;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3624:51:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3311:41;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5124:111;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3810:77;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6605:1742;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8494:3095;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5558:147:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;12864:93:17;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2903:213:0;2988:4;3026:43;3011:58;;;:11;:58;;;;:98;;;;3073:36;3097:11;3073:23;:36::i;:::-;3011:98;3004:105;;2903:213;;;:::o;12533:325:17:-;12621:4;12627;12633:7;12673:6;:16;12680:8;12673:16;;;;;;;;;;;:25;;:39;12699:12;:10;:12::i;:::-;12673:39;;;;;;;;;;;;;;;:48;;;;;;;;;;;;12735:6;:16;12742:8;12735:16;;;;;;;;;;;:25;;:39;12761:12;:10;:12::i;:::-;12735:39;;;;;;;;;;;;;;;:47;;;;;;;;;;;;12796:6;:16;12803:8;12796:16;;;;;;;;;;;:25;;:39;12822:12;:10;:12::i;:::-;12796:39;;;;;;;;;;;;;;;:45;;;12652:199;;;;;;12533:325;;;;;:::o;12963:511::-;13058:7;13067;13076;13085;13094;13103;13112;13136:24;13163:6;:16;13170:8;13163:16;;;;;;;;;;;:27;;:37;13191:8;13163:37;;;;;;;;;;;13136:64;;13231:5;:21;;;13267:5;:19;;;13301:5;:14;;;13330:5;:18;;;13363:5;:21;;;13399:5;:25;;;13439:5;:18;;;13210:257;;;;;;;;;;;;;;;12963:511;;;;;;;;;:::o;4708:129:0:-;4782:7;4808:6;:12;4815:4;4808:12;;;;;;;;;;;:22;;;4801:29;;4708:129;;;:::o;5133:145::-;5216:18;5229:4;5216:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5246:25:::1;5257:4;5263:7;5246:10;:25::i;:::-;5133:145:::0;;;:::o;6242:214::-;6348:12;:10;:12::i;:::-;6337:23;;:7;:23;;;6329:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;6423:26;6435:4;6441:7;6423:11;:26::i;:::-;6242:214;;:::o;4584:65:17:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4632:10:17::1;:8;:10::i;:::-;4584:65::o:0;4125:386::-;3268:19:3;3291:13;;;;;;;;;;;3290:14;3268:36;;3336:14;:34;;;;;3369:1;3354:12;;;;;;;;;;:16;;;3336:34;3335:108;;;;3377:44;3415:4;3377:29;:44::i;:::-;3376:45;:66;;;;;3441:1;3425:12;;;;;;;;;;:17;;;3376:66;3335:108;3314:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3540:1;3525:12;;:16;;;;;;;;;;;;;;;;;;3555:14;3551:65;;;3601:4;3585:13;;:20;;;;;;;;;;;;;;;;;;3551:65;4290:5:17::1;4274:13;:21;;;;4336:29;4305:10;;:61;;;;;;;;;;;;;;;;;;4422:27;4376:21;;:74;;;;;;;;;;;;;;;;;;4460:44;4491:12;:10;:12::i;:::-;4460:30;:44::i;:::-;3640:14:3::0;3636:99;;;3686:5;3670:13;;:21;;;;;;;;;;;;;;;;;;3710:14;3722:1;3710:14;;;;;;:::i;:::-;;;;;;;;3636:99;3258:483;4125:386:17;;:::o;5241:1348::-;5504:4;5522:7;;5520:9;;;;;:::i;:::-;;;;;;;;5539:22;5564:6;:15;5571:7;;5564:15;;;;;;;;;;;5539:40;;5611:10;5589:8;:19;;:32;;;;5656:13;5631:8;:22;;:38;;;;5699:7;;5679:8;:17;;:27;;;;5735:12;:10;:12::i;:::-;5716:8;:16;;;:31;;;;;;;;;;;;;;;;;;5774:5;5757:8;:14;;:22;;;;;;:::i;:::-;;5821:20;5789:8;:29;;:52;;;;1228:9;5898:15;:42;;;;:::i;:::-;5851:8;:19;;:28;5871:7;;5851:28;;;;;;;;;;;:44;;:89;;;;1161:9;5995:8;:19;;:28;6015:7;;5995:28;;;;;;;;;;;:44;;;:62;;;;:::i;:::-;5950:8;:19;;:28;5970:7;;5950:28;;;;;;;;;;;:42;;:107;;;;6069:16;:30;6086:12;:10;:12::i;:::-;6069:30;;;;;;;;;;;;;;;;6067:32;;;;;:::i;:::-;;;;;;;;6111:22;:34;6134:10;6111:34;;;;;;;;;;;:49;6146:13;6111:49;;;;;;;;;;;;6109:51;;;;;:::i;:::-;;;;;;;;6172:16;;6170:18;;;;;:::i;:::-;;;;;;;;6198:12;6213:21;;;;;;;;;;;:36;;;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6198:53;;6265:7;6261:80;;6295:35;;;;;;;;;;;;;;6261:80;6350:89;6377:12;:10;:12::i;:::-;6399:4;6406:13;;6421:8;6431:1;6434;6437;6350:15;;;;;;;;;;;:26;;;;:89;;;;;;;;;;:::i;:::-;6449:52;6480:4;6487:13;;6449:9;;;;;;;;;;;:22;;;;:52;;;;;:::i;:::-;6555:5;6516:45;;;;;;:::i;:::-;;;;;;;;6546:7;;6532:12;:10;:12::i;:::-;6516:45;;;;;;;;;;;;6578:4;6571:11;;;;5241:1348;;;;;;;;;;:::o;5008:110::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5107:4:17::1;5082:9;:22;5092:11;5082:22;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;5008:110:::0;:::o;1858:84:4:-;1905:4;1928:7;;;;;;;;;;;1921:14;;1858:84;:::o;1017:22:17:-;;;;:::o;11600:927::-;11777:6;:16;11784:8;11777:16;;;;;;;;;;;:23;;;;;;;;;;;;11776:24;11775:62;;;;11807:6;:16;11814:8;11807:16;;;;;;;;;;;:29;;;;;;;;;;;;11806:30;11775:62;11771:133;;;11860:33;;;;;;;;;;;;;;11771:133;11971:1;11917:6;:16;11924:8;11917:16;;;;;;;;;;;:27;;:37;11945:8;11917:37;;;;;;;;;;;:50;;;:55;11913:138;;11995:45;;;;;;;;;;;;;;11913:138;12092:4;12060:6;:16;12067:8;12060:16;;;;;;;;;;;:29;;;:36;;;;;;;;;;;;;;;;;;12108:6;:15;12115:7;;12108:15;;;;;;;;;;;:26;;:39;12145:1;12135:7;;:11;;;;:::i;:::-;12108:39;;;;;;;;;;;:52;;;12106:54;;;;;:::i;:::-;;;;;;;;12171:263;12196:6;:16;12203:8;12196:16;;;;;;;;;;;:27;;;12237:6;:16;12244:8;12237:16;;;;;;;;;;;:30;;;12281:6;:16;12288:8;12281:16;;;;;;;;;;;:22;;12171:263;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12317:6;:16;12324:8;12317:16;;;;;;;;;;;:37;;;12368:8;12391:1;12407;12423;12171:11;:263::i;:::-;;11600:927;;;;;:::o;734:549:15:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;845:1:15::1;828:19;;:5;:19;;::::0;825:99:::1;;870:43;;;;;;;;;;;;;;825:99;933:17;:15;:17::i;:::-;960:22;:20;:22::i;:::-;992:24;:22;:24::i;:::-;1027:43;1038:24;:22;:24::i;:::-;1064:5;1027:10;:43::i;:::-;1080:44;1091:25;:23;:25::i;:::-;1118:5;1080:10;:44::i;:::-;1135:66;1149:25;:23;:25::i;:::-;1176:24;:22;:24::i;:::-;1135:13;:66::i;:::-;1211:65;1225:24;:22;:24::i;:::-;1251;:22;:24::i;:::-;1211:13;:65::i;:::-;734:549:::0;:::o;4517:61:17:-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4563:8:17::1;:6;:8::i;:::-;4517:61::o:0;4800:202::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;4988:7:17::1;4974:11;:21;;;;:::i;:::-;4920:6;:16;4927:8;4920:16;;;;;;;;;;;:27;;:37;4948:8;4920:37;;;;;;;;;;;:51;;:75;;;;4800:202:::0;;:::o;3203:145:0:-;3289:4;3312:6;:12;3319:4;3312:12;;;;;;;;;;;:20;;:29;3333:7;3312:29;;;;;;;;;;;;;;;;;;;;;;;;;3305:36;;3203:145;;;;:::o;2324:49::-;2369:4;2324:49;;;:::o;3419:39:17:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1289:117:15:-;1329:4;1352:47;1360:24;:22;:24::i;:::-;1386:12;:10;:12::i;:::-;1352:7;:47::i;:::-;1345:54;;1289:117;:::o;3624:51:17:-;;;;;;;;;;;;;;;;;:::o;3311:41::-;;;;;;;;;;;;;;;;;;;;;;:::o;5124:111::-;652:9:15;:7;:9::i;:::-;644:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5217:11:17::1;5201:13;:27;;;;5124:111:::0;:::o;3810:77::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6605:1742::-;6700:4;6984:15;6928:6;:16;6935:8;6928:16;;;;;;;;;;;:27;;:37;6956:8;6928:37;;;;;;;;;;;:53;;;:71;6924:142;;;7022:33;;;;;;;;;;;;;;6924:142;7079:6;:16;7086:8;7079:16;;;;;;;;;;;:25;;:39;7105:12;:10;:12::i;:::-;7079:39;;;;;;;;;;;;;;;:48;;;;;;;;;;;;7075:116;;;7150:30;;;;;;;;;;;;;;7075:116;7258:15;7204:6;:16;7211:8;7204:16;;;;;;;;;;;:27;;:37;7232:8;7204:37;;;;;;;;;;;:51;;;:69;7200:136;;;7296:29;;;;;;;;;;;;;;7200:136;7395:7;7345:6;:16;7352:8;7345:16;;;;;;;;;;;:25;;:39;7371:12;:10;:12::i;:::-;7345:39;;;;;;;;;;;;;;;:47;;;:57;;;;;;;;;;;;;;;;;;7460:10;;;;;;;;;;;:20;;;7481:12;:10;:12::i;:::-;7460:34;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7412:6;:16;7419:8;7412:16;;;;;;;;;;;:25;;:39;7438:12;:10;:12::i;:::-;7412:39;;;;;;;;;;;;;;;:45;;:82;;;;7555:4;7504:6;:16;7511:8;7504:16;;;;;;;;;;;:25;;:39;7530:12;:10;:12::i;:::-;7504:39;;;;;;;;;;;;;;;:48;;;:55;;;;;;;;;;;;;;;;;;7575:9;:23;7585:12;:10;:12::i;:::-;7575:23;;;;;;;;;;;;;;;;;;;;;;;;;7574:86;;;;;7658:1;7604:6;:16;7611:8;7604:16;;;;;;;;;;;:27;;:37;7632:8;7604:37;;;;;;;;;;;:50;;;:55;7574:86;7570:750;;;7680:7;7676:305;;;7764:6;:16;7771:8;7764:16;;;;;;;;;;;:25;;:39;7790:12;:10;:12::i;:::-;7764:39;;;;;;;;;;;;;;;:45;;;7707:6;:16;7714:8;7707:16;;;;;;;;;;;:27;;:37;7735:8;7707:37;;;;;;;;;;;:53;;;:102;;;;;;;:::i;:::-;;;;;;;;7676:305;;;7921:6;:16;7928:8;7921:16;;;;;;;;;;;:25;;:39;7947:12;:10;:12::i;:::-;7921:39;;;;;;;;;;;;;;;:45;;;7860:6;:16;7867:8;7860:16;;;;;;;;;;;:27;;:37;7888:8;7860:37;;;;;;;;;;;:57;;;:106;;;;;;;:::i;:::-;;;;;;;;7676:305;7570:750;;;8023:7;8019:291;;;8100:6;:16;8107:8;8100:16;;;;;;;;;;;:25;;:39;8126:12;:10;:12::i;:::-;8100:39;;;;;;;;;;;;;;;:45;;;8050:6;:16;8057:8;8050:16;;;;;;;;;;;:27;;:37;8078:8;8050:37;;;;;;;;;;;:46;;;:95;;;;;;;:::i;:::-;;;;;;;;8019:291;;;8250:6;:16;8257:8;8250:16;;;;;;;;;;;:25;;:39;8276:12;:10;:12::i;:::-;8250:39;;;;;;;;;;;;;;;:45;;;8196:6;:16;8203:8;8196:16;;;;;;;;;;;:27;;:37;8224:8;8196:37;;;;;;;;;;;:50;;;:99;;;;;;;:::i;:::-;;;;;;;;8019:291;7570:750;8336:4;8329:11;;6605:1742;;;;:::o;8494:3095::-;8561:4;8690:15;1295:9;8595:6;:16;8602:8;8595:16;;;;;;;;;;;:27;;:37;8623:8;8595:37;;;;;;;;;;;:51;;;:78;;;;:::i;:::-;8594:111;8577:214;;;8737:43;;;;;;;;;;;;;;8577:214;8804:6;:16;8811:8;8804:16;;;;;;;;;;;:29;;;;;;;;;;;;8800:99;;;8856:32;;;;;;;;;;;;;;8800:99;8908:27;9014:6;:16;9021:8;9014:16;;;;;;;;;;;:27;;:37;9042:8;9014:37;;;;;;;;;;;:50;;;8952:6;:16;8959:8;8952:16;;;;;;;;;;;:27;;:37;8980:8;8952:37;;;;;;;;;;;:46;;;:112;;;;:::i;:::-;8908:166;;9142:1;9088:6;:16;9095:8;9088:16;;;;;;;;;;;:27;;:37;9116:8;9088:37;;;;;;;;;;;:50;;;:55;9084:2132;;9159:25;9278:6;:16;9285:8;9278:16;;;;;;;;;;;:27;;:37;9306:8;9278:37;;;;;;;;;;;:57;;;9205:6;:16;9212:8;9205:16;;;;;;;;;;;:27;;:37;9233:8;9205:37;;;;;;;;;;;:53;;;:130;;;;:::i;:::-;9159:190;;9363:31;9490:6;:16;9497:8;9490:16;;;;;;;;;;;:27;;:37;9518:8;9490:37;;;;;;;;;;;:57;;;9416:6;:16;9423:8;9416:16;;;;;;;;;;;:27;;:37;9444:8;9416:37;;;;;;;;;;;:53;;;:131;;9415:231;;9645:1;9415:231;;;9624:17;9617:3;9570:6;:15;9577:7;;9570:15;;;;;;;;;;;:26;;:35;9597:7;;9570:35;;;;;;;;;;;:44;;;:50;;;;:::i;:::-;9569:72;;;;:::i;:::-;9415:231;9363:297;;10132:2;10105:23;:29;10101:706;;10154:24;10274:6;:16;10281:8;10274:16;;;;;;;;;;;:27;;:37;10302:8;10274:37;;;;;;;;;;;:50;;;10204:6;:16;10211:8;10204:16;;;;;;;;;;;:27;;:37;10232:8;10204:37;;;;;;;;;;;:46;;;:120;10203:228;;10430:1;10203:228;;;10407:19;10400:3;10351:6;:16;10358:8;10351:16;;;;;;;;;;;:27;;:37;10379:8;10351:37;;;;;;;;;;;:46;;;:52;;;;:::i;:::-;10350:76;;;;:::i;:::-;10203:228;10154:295;;10467:22;10603:3;10597:2;10578:16;:21;;;;:::i;:::-;10577:29;;;;:::i;:::-;10548:3;10542:2;10516:23;:28;;;;:::i;:::-;10515:36;;;;:::i;:::-;10514:93;;;;:::i;:::-;10467:158;;10690:2;10672:14;:20;;10671:37;;10703:5;10671:37;;;10696:4;10671:37;10643:6;:16;10650:8;10643:16;;;;;;;;;;;:25;;;:65;;;;;;;;;;;;;;;;;;10136:587;;10101:706;;;10787:5;10759:6;:16;10766:8;10759:16;;;;;;;;;;;:25;;;:33;;;;;;;;;;;;;;;;;;10101:706;9145:1672;;9084:2132;;;10845:24;10957:6;:16;10964:8;10957:16;;;;;;;;;;;:27;;:37;10985:8;10957:37;;;;;;;;;;;:50;;;10891:6;:16;10898:8;10891:16;;;;;;;;;;;:27;;:37;10919:8;10891:37;;;;;;;;;;;:46;;;:116;10890:220;;11109:1;10890:220;;;11086:19;11079:3;11030:6;:16;11037:8;11030:16;;;;;;;;;;;:27;;:37;11058:8;11030:37;;;;;;;;;;;:46;;;:52;;;;:::i;:::-;11029:76;;;;:::i;:::-;10890:220;10845:279;;11187:2;11167:16;:22;;11166:39;;11200:5;11166:39;;;11193:4;11166:39;11138:6;:16;11145:8;11138:16;;;;;;;;;;;:25;;;:67;;;;;;;;;;;;;;;;;;10831:385;9084:2132;11251:4;11225:6;:16;11232:8;11225:16;;;;;;;;;;;:23;;;:30;;;;;;;;;;;;;;;;;;11269:6;:16;11276:8;11269:16;;;;;;;;;;;:25;;;;;;;;;;;;11265:269;;;11310:25;11426:1;11373:6;:16;11380:8;11373:16;;;;;;;;;;;:27;;:37;11401:8;11373:37;;;;;;;;;;;:50;;;:54;;;;:::i;:::-;11356:13;;:72;;;;:::i;:::-;11310:132;;11456:67;11479:6;:16;11486:8;11479:16;;;;;;;;;;;:24;;;;;;;;;;;;11505:17;11456:9;;;;;;;;;;;:22;;;;:67;;;;;:::i;:::-;11296:238;11265:269;11545:16;;11543:18;;;;;:::i;:::-;;;;;;;;11578:4;11571:11;;;8494:3095;;;:::o;5558:147:0:-;5642:18;5655:4;5642:12;:18::i;:::-;2802:16;2813:4;2802:10;:16::i;:::-;5672:26:::1;5684:4;5690:7;5672:11;:26::i;:::-;5558:147:::0;;;:::o;12864:93:17:-;12917:7;12943;;12936:14;;12864:93;:::o;1060:166:12:-;1145:4;1183:36;1168:51;;;:11;:51;;;;1161:58;;1060:166;;;:::o;850:96:10:-;903:7;929:10;922:17;;850:96;:::o;3642:103:0:-;3708:30;3719:4;3725:12;:10;:12::i;:::-;3708:10;:30::i;:::-;3642:103;:::o;7791:233::-;7874:22;7882:4;7888:7;7874;:22::i;:::-;7869:149;;7944:4;7912:6;:12;7919:4;7912:12;;;;;;;;;;;:20;;:29;7933:7;7912:29;;;;;;;;;;;;;;;;:36;;;;;;;;;;;;;;;;;;7994:12;:10;:12::i;:::-;7967:40;;7985:7;7967:40;;7979:4;7967:40;;;;;;;;;;7869:149;7791:233;;:::o;8195:234::-;8278:22;8286:4;8292:7;8278;:22::i;:::-;8274:149;;;8348:5;8316:6;:12;8323:4;8316:12;;;;;;;;;;;:20;;:29;8337:7;8316:29;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;8399:12;:10;:12::i;:::-;8372:40;;8390:7;8372:40;;8384:4;8372:40;;;;;;;;;;8274:149;8195:234;;:::o;2676:117:4:-;1729:16;:14;:16::i;:::-;2744:5:::1;2734:7;;:15;;;;;;;;;;;;;;;;;;2764:22;2773:12;:10;:12::i;:::-;2764:22;;;;;;:::i;:::-;;;;;;;;2676:117::o:0;1186:320:9:-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;3002:483:8:-;3238:19;3260:5;:12;;;3273:5;3260:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3238:41;;3289:5;:12;;;3302:5;3309:7;3318:5;3325:8;3335:1;3338;3341;3289:54;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3353:18;3374:5;:12;;;3387:5;3374:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3353:40;;3439:1;3425:11;:15;;;;:::i;:::-;3411:10;:29;3403:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;3228:257;;3002:483;;;;;;;;:::o;818:216::-;941:86;961:5;991:23;;;1016:2;1020:5;968:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:19;:86::i;:::-;818:216;;;:::o;1063:97:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:27:4::1;:25;:27::i;:::-;1063:97::o:0;2025:65:0:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2025:65:0:o;1868:111:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:5::1;:32;:34::i;:::-;1868:111::o:0;222:90:16:-;269:7;124:23;288:17;;222:90;:::o;318:92::-;366:7;191:24;385:18;;318:92;:::o;7376:247:0:-;7459:25;7487:18;7500:4;7487:12;:18::i;:::-;7459:46;;7540:9;7515:6;:12;7522:4;7515:12;;;;;;;;;;;:22;;:34;;;;7606:9;7587:17;7581:4;7564:52;;;;;;;;;;7449:174;7376:247;;:::o;2429:115:4:-;1482:19;:17;:19::i;:::-;2498:4:::1;2488:7;;:14;;;;;;;;;;;;;;;;;;2517:20;2524:12;:10;:12::i;:::-;2517:20;;;;;;:::i;:::-;;;;;;;;2429:115::o:0;4026:501:0:-;4114:22;4122:4;4128:7;4114;:22::i;:::-;4109:412;;4297:39;4328:7;4297:30;:39::i;:::-;4407:49;4446:4;4438:13;;4453:2;4407:30;:49::i;:::-;4204:274;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4152:358;;;;;;;;;;;:::i;:::-;;;;;;;;4109:412;4026:501;;:::o;2188:106:4:-;2254:8;:6;:8::i;:::-;2246:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:106::o;3868:717:8:-;4298:23;4324:69;4352:4;4324:69;;;;;;;;;;;;;;;;;4332:5;4324:27;;;;:69;;;;;:::i;:::-;4298:95;;4427:1;4407:10;:17;:21;4403:176;;;4502:10;4491:30;;;;;;;;;;;;:::i;:::-;4483:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;4403:176;3949:636;3868:717;;:::o;1166:95:4:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1249:5:4::1;1239:7;;:15;;;;;;;;;;;;;;;;;;1166:95::o:0;1985:109:5:-;5363:13:3;;;;;;;;;;;5355:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:5::1;2065:7;:22;;;;1985:109::o:0;2010:106:4:-;2080:8;:6;:8::i;:::-;2079:9;2071:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;2010:106::o;2146:149:11:-;2204:13;2236:52;2264:4;2248:22;;333:2;2236:52;;:11;:52::i;:::-;2229:59;;2146:149;;;:::o;1557:437::-;1632:13;1657:19;1702:1;1693:6;1689:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1679:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1657:47;;1714:15;:6;1721:1;1714:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1739;:6;1746:1;1739:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1769:9;1794:1;1785:6;1781:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1769:26;;1764:128;1801:1;1797;:5;1764:128;;;1835:8;1852:3;1844:5;:11;1835:21;;;;;;;:::i;:::-;;;;;1823:6;1830:1;1823:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1880:1;1870:11;;;;;1804:3;;;;:::i;:::-;;;1764:128;;;;1918:1;1909:5;:10;1901:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1980:6;1966:21;;;1557:437;;;;:::o;3884:223:9:-;4017:12;4048:52;4070:6;4078:4;4084:1;4087:12;4048:21;:52::i;:::-;4041:59;;3884:223;;;;;:::o;4971:446::-;5136:12;5193:5;5168:21;:30;;5160:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5252:12;5266:23;5293:6;:11;;5312:5;5319:4;5293:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5251:73;;;;5341:69;5368:6;5376:7;5385:10;5397:12;5341:26;:69::i;:::-;5334:76;;;;4971:446;;;;;;:::o;6589:628::-;6769:12;6797:7;6793:418;;;6845:1;6824:10;:17;:22;6820:286;;7039:18;7050:6;7039:10;:18::i;:::-;7031:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;6820:286;7126:10;7119:17;;;;6793:418;7167:33;7175:10;7187:12;7167:7;:33::i;:::-;6589:628;;;;;;;:::o;7739:540::-;7918:1;7898:10;:17;:21;7894:379;;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;;;;;;;;;;:::i;:::-;;;;;;;;7:75:20;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:118::-;2296:24;2314:5;2296:24;:::i;:::-;2291:3;2284:37;2209:118;;:::o;2333:418::-;2470:4;2508:2;2497:9;2493:18;2485:26;;2521:65;2583:1;2572:9;2568:17;2559:6;2521:65;:::i;:::-;2596:66;2658:2;2647:9;2643:18;2634:6;2596:66;:::i;:::-;2672:72;2740:2;2729:9;2725:18;2716:6;2672:72;:::i;:::-;2333:418;;;;;;:::o;2757:886::-;3018:4;3056:3;3045:9;3041:19;3033:27;;3070:71;3138:1;3127:9;3123:17;3114:6;3070:71;:::i;:::-;3151:72;3219:2;3208:9;3204:18;3195:6;3151:72;:::i;:::-;3233;3301:2;3290:9;3286:18;3277:6;3233:72;:::i;:::-;3315;3383:2;3372:9;3368:18;3359:6;3315:72;:::i;:::-;3397:73;3465:3;3454:9;3450:19;3441:6;3397:73;:::i;:::-;3480;3548:3;3537:9;3533:19;3524:6;3480:73;:::i;:::-;3563;3631:3;3620:9;3616:19;3607:6;3563:73;:::i;:::-;2757:886;;;;;;;;;;:::o;3649:77::-;3686:7;3715:5;3704:16;;3649:77;;;:::o;3732:122::-;3805:24;3823:5;3805:24;:::i;:::-;3798:5;3795:35;3785:63;;3844:1;3841;3834:12;3785:63;3732:122;:::o;3860:139::-;3906:5;3944:6;3931:20;3922:29;;3960:33;3987:5;3960:33;:::i;:::-;3860:139;;;;:::o;4005:329::-;4064:6;4113:2;4101:9;4092:7;4088:23;4084:32;4081:119;;;4119:79;;:::i;:::-;4081:119;4239:1;4264:53;4309:7;4300:6;4289:9;4285:22;4264:53;:::i;:::-;4254:63;;4210:117;4005:329;;;;:::o;4340:118::-;4427:24;4445:5;4427:24;:::i;:::-;4422:3;4415:37;4340:118;;:::o;4464:222::-;4557:4;4595:2;4584:9;4580:18;4572:26;;4608:71;4676:1;4665:9;4661:17;4652:6;4608:71;:::i;:::-;4464:222;;;;:::o;4692:126::-;4729:7;4769:42;4762:5;4758:54;4747:65;;4692:126;;;:::o;4824:96::-;4861:7;4890:24;4908:5;4890:24;:::i;:::-;4879:35;;4824:96;;;:::o;4926:122::-;4999:24;5017:5;4999:24;:::i;:::-;4992:5;4989:35;4979:63;;5038:1;5035;5028:12;4979:63;4926:122;:::o;5054:139::-;5100:5;5138:6;5125:20;5116:29;;5154:33;5181:5;5154:33;:::i;:::-;5054:139;;;;:::o;5199:474::-;5267:6;5275;5324:2;5312:9;5303:7;5299:23;5295:32;5292:119;;;5330:79;;:::i;:::-;5292:119;5450:1;5475:53;5520:7;5511:6;5500:9;5496:22;5475:53;:::i;:::-;5465:63;;5421:117;5577:2;5603:53;5648:7;5639:6;5628:9;5624:22;5603:53;:::i;:::-;5593:63;;5548:118;5199:474;;;;;:::o;5679:::-;5747:6;5755;5804:2;5792:9;5783:7;5779:23;5775:32;5772:119;;;5810:79;;:::i;:::-;5772:119;5930:1;5955:53;6000:7;5991:6;5980:9;5976:22;5955:53;:::i;:::-;5945:63;;5901:117;6057:2;6083:53;6128:7;6119:6;6108:9;6104:22;6083:53;:::i;:::-;6073:63;;6028:118;5679:474;;;;;:::o;6159:117::-;6268:1;6265;6258:12;6282:117;6391:1;6388;6381:12;6405:102;6446:6;6497:2;6493:7;6488:2;6481:5;6477:14;6473:28;6463:38;;6405:102;;;:::o;6513:180::-;6561:77;6558:1;6551:88;6658:4;6655:1;6648:15;6682:4;6679:1;6672:15;6699:281;6782:27;6804:4;6782:27;:::i;:::-;6774:6;6770:40;6912:6;6900:10;6897:22;6876:18;6864:10;6861:34;6858:62;6855:88;;;6923:18;;:::i;:::-;6855:88;6963:10;6959:2;6952:22;6742:238;6699:281;;:::o;6986:129::-;7020:6;7047:20;;:::i;:::-;7037:30;;7076:33;7104:4;7096:6;7076:33;:::i;:::-;6986:129;;;:::o;7121:308::-;7183:4;7273:18;7265:6;7262:30;7259:56;;;7295:18;;:::i;:::-;7259:56;7333:29;7355:6;7333:29;:::i;:::-;7325:37;;7417:4;7411;7407:15;7399:23;;7121:308;;;:::o;7435:146::-;7532:6;7527:3;7522;7509:30;7573:1;7564:6;7559:3;7555:16;7548:27;7435:146;;;:::o;7587:425::-;7665:5;7690:66;7706:49;7748:6;7706:49;:::i;:::-;7690:66;:::i;:::-;7681:75;;7779:6;7772:5;7765:21;7817:4;7810:5;7806:16;7855:3;7846:6;7841:3;7837:16;7834:25;7831:112;;;7862:79;;:::i;:::-;7831:112;7952:54;7999:6;7994:3;7989;7952:54;:::i;:::-;7671:341;7587:425;;;;;:::o;8032:340::-;8088:5;8137:3;8130:4;8122:6;8118:17;8114:27;8104:122;;8145:79;;:::i;:::-;8104:122;8262:6;8249:20;8287:79;8362:3;8354:6;8347:4;8339:6;8335:17;8287:79;:::i;:::-;8278:88;;8094:278;8032:340;;;;:::o;8378:86::-;8413:7;8453:4;8446:5;8442:16;8431:27;;8378:86;;;:::o;8470:118::-;8541:22;8557:5;8541:22;:::i;:::-;8534:5;8531:33;8521:61;;8578:1;8575;8568:12;8521:61;8470:118;:::o;8594:135::-;8638:5;8676:6;8663:20;8654:29;;8692:31;8717:5;8692:31;:::i;:::-;8594:135;;;;:::o;8735:1525::-;8865:6;8873;8881;8889;8897;8905;8913;8921;8970:3;8958:9;8949:7;8945:23;8941:33;8938:120;;;8977:79;;:::i;:::-;8938:120;9097:1;9122:53;9167:7;9158:6;9147:9;9143:22;9122:53;:::i;:::-;9112:63;;9068:117;9224:2;9250:53;9295:7;9286:6;9275:9;9271:22;9250:53;:::i;:::-;9240:63;;9195:118;9380:2;9369:9;9365:18;9352:32;9411:18;9403:6;9400:30;9397:117;;;9433:79;;:::i;:::-;9397:117;9538:63;9593:7;9584:6;9573:9;9569:22;9538:63;:::i;:::-;9528:73;;9323:288;9650:2;9676:53;9721:7;9712:6;9701:9;9697:22;9676:53;:::i;:::-;9666:63;;9621:118;9778:3;9805:53;9850:7;9841:6;9830:9;9826:22;9805:53;:::i;:::-;9795:63;;9749:119;9907:3;9934:51;9977:7;9968:6;9957:9;9953:22;9934:51;:::i;:::-;9924:61;;9878:117;10034:3;10061:53;10106:7;10097:6;10086:9;10082:22;10061:53;:::i;:::-;10051:63;;10005:119;10163:3;10190:53;10235:7;10226:6;10215:9;10211:22;10190:53;:::i;:::-;10180:63;;10134:119;8735:1525;;;;;;;;;;;:::o;10266:329::-;10325:6;10374:2;10362:9;10353:7;10349:23;10345:32;10342:119;;;10380:79;;:::i;:::-;10342:119;10500:1;10525:53;10570:7;10561:6;10550:9;10546:22;10525:53;:::i;:::-;10515:63;;10471:117;10266:329;;;;:::o;10601:222::-;10694:4;10732:2;10721:9;10717:18;10709:26;;10745:71;10813:1;10802:9;10798:17;10789:6;10745:71;:::i;:::-;10601:222;;;;:::o;10829:907::-;10922:6;10930;10938;10946;10954;11003:3;10991:9;10982:7;10978:23;10974:33;10971:120;;;11010:79;;:::i;:::-;10971:120;11130:1;11155:53;11200:7;11191:6;11180:9;11176:22;11155:53;:::i;:::-;11145:63;;11101:117;11257:2;11283:53;11328:7;11319:6;11308:9;11304:22;11283:53;:::i;:::-;11273:63;;11228:118;11385:2;11411:51;11454:7;11445:6;11434:9;11430:22;11411:51;:::i;:::-;11401:61;;11356:116;11511:2;11537:53;11582:7;11573:6;11562:9;11558:22;11537:53;:::i;:::-;11527:63;;11482:118;11639:3;11666:53;11711:7;11702:6;11691:9;11687:22;11666:53;:::i;:::-;11656:63;;11610:119;10829:907;;;;;;;;:::o;11742:474::-;11810:6;11818;11867:2;11855:9;11846:7;11842:23;11838:32;11835:119;;;11873:79;;:::i;:::-;11835:119;11993:1;12018:53;12063:7;12054:6;12043:9;12039:22;12018:53;:::i;:::-;12008:63;;11964:117;12120:2;12146:53;12191:7;12182:6;12171:9;12167:22;12146:53;:::i;:::-;12136:63;;12091:118;11742:474;;;;;:::o;12222:118::-;12309:24;12327:5;12309:24;:::i;:::-;12304:3;12297:37;12222:118;;:::o;12346:99::-;12398:6;12432:5;12426:12;12416:22;;12346:99;;;:::o;12451:169::-;12535:11;12569:6;12564:3;12557:19;12609:4;12604:3;12600:14;12585:29;;12451:169;;;;:::o;12626:246::-;12707:1;12717:113;12731:6;12728:1;12725:13;12717:113;;;12816:1;12811:3;12807:11;12801:18;12797:1;12792:3;12788:11;12781:39;12753:2;12750:1;12746:10;12741:15;;12717:113;;;12864:1;12855:6;12850:3;12846:16;12839:27;12688:184;12626:246;;;:::o;12878:377::-;12966:3;12994:39;13027:5;12994:39;:::i;:::-;13049:71;13113:6;13108:3;13049:71;:::i;:::-;13042:78;;13129:65;13187:6;13182:3;13175:4;13168:5;13164:16;13129:65;:::i;:::-;13219:29;13241:6;13219:29;:::i;:::-;13214:3;13210:39;13203:46;;12970:285;12878:377;;;;:::o;13261:1163::-;13580:4;13618:3;13607:9;13603:19;13595:27;;13632:71;13700:1;13689:9;13685:17;13676:6;13632:71;:::i;:::-;13713:72;13781:2;13770:9;13766:18;13757:6;13713:72;:::i;:::-;13795;13863:2;13852:9;13848:18;13839:6;13795:72;:::i;:::-;13877;13945:2;13934:9;13930:18;13921:6;13877:72;:::i;:::-;13959:73;14027:3;14016:9;14012:19;14003:6;13959:73;:::i;:::-;14080:9;14074:4;14070:20;14064:3;14053:9;14049:19;14042:49;14108:78;14181:4;14172:6;14108:78;:::i;:::-;14100:86;;14196:67;14258:3;14247:9;14243:19;14234:6;14196:67;:::i;:::-;14273;14335:3;14324:9;14320:19;14311:6;14273:67;:::i;:::-;14350;14412:3;14401:9;14397:19;14388:6;14350:67;:::i;:::-;13261:1163;;;;;;;;;;;;:::o;14430:116::-;14500:21;14515:5;14500:21;:::i;:::-;14493:5;14490:32;14480:60;;14536:1;14533;14526:12;14480:60;14430:116;:::o;14552:133::-;14595:5;14633:6;14620:20;14611:29;;14649:30;14673:5;14649:30;:::i;:::-;14552:133;;;;:::o;14691:468::-;14756:6;14764;14813:2;14801:9;14792:7;14788:23;14784:32;14781:119;;;14819:79;;:::i;:::-;14781:119;14939:1;14964:53;15009:7;15000:6;14989:9;14985:22;14964:53;:::i;:::-;14954:63;;14910:117;15066:2;15092:50;15134:7;15125:6;15114:9;15110:22;15092:50;:::i;:::-;15082:60;;15037:115;14691:468;;;;;:::o;15165:234::-;15305:34;15301:1;15293:6;15289:14;15282:58;15374:17;15369:2;15361:6;15357:15;15350:42;15165:234;:::o;15405:366::-;15547:3;15568:67;15632:2;15627:3;15568:67;:::i;:::-;15561:74;;15644:93;15733:3;15644:93;:::i;:::-;15762:2;15757:3;15753:12;15746:19;;15405:366;;;:::o;15777:419::-;15943:4;15981:2;15970:9;15966:18;15958:26;;16030:9;16024:4;16020:20;16016:1;16005:9;16001:17;15994:47;16058:131;16184:4;16058:131;:::i;:::-;16050:139;;15777:419;;;:::o;16202:231::-;16342:34;16338:1;16330:6;16326:14;16319:58;16411:14;16406:2;16398:6;16394:15;16387:39;16202:231;:::o;16439:366::-;16581:3;16602:67;16666:2;16661:3;16602:67;:::i;:::-;16595:74;;16678:93;16767:3;16678:93;:::i;:::-;16796:2;16791:3;16787:12;16780:19;;16439:366;;;:::o;16811:419::-;16977:4;17015:2;17004:9;17000:18;16992:26;;17064:9;17058:4;17054:20;17050:1;17039:9;17035:17;17028:47;17092:131;17218:4;17092:131;:::i;:::-;17084:139;;16811:419;;;:::o;17236:233::-;17376:34;17372:1;17364:6;17360:14;17353:58;17445:16;17440:2;17432:6;17428:15;17421:41;17236:233;:::o;17475:366::-;17617:3;17638:67;17702:2;17697:3;17638:67;:::i;:::-;17631:74;;17714:93;17803:3;17714:93;:::i;:::-;17832:2;17827:3;17823:12;17816:19;;17475:366;;;:::o;17847:419::-;18013:4;18051:2;18040:9;18036:18;18028:26;;18100:9;18094:4;18090:20;18086:1;18075:9;18071:17;18064:47;18128:131;18254:4;18128:131;:::i;:::-;18120:139;;17847:419;;;:::o;18272:85::-;18317:7;18346:5;18335:16;;18272:85;;;:::o;18363:60::-;18391:3;18412:5;18405:12;;18363:60;;;:::o;18429:154::-;18485:9;18518:59;18534:42;18543:32;18569:5;18543:32;:::i;:::-;18534:42;:::i;:::-;18518:59;:::i;:::-;18505:72;;18429:154;;;:::o;18589:143::-;18682:43;18719:5;18682:43;:::i;:::-;18677:3;18670:56;18589:143;;:::o;18738:234::-;18837:4;18875:2;18864:9;18860:18;18852:26;;18888:77;18962:1;18951:9;18947:17;18938:6;18888:77;:::i;:::-;18738:234;;;;:::o;18978:180::-;19026:77;19023:1;19016:88;19123:4;19120:1;19113:15;19147:4;19144:1;19137:15;19164:233;19203:3;19226:24;19244:5;19226:24;:::i;:::-;19217:33;;19272:66;19265:5;19262:77;19259:103;;19342:18;;:::i;:::-;19259:103;19389:1;19382:5;19378:13;19371:20;;19164:233;;;:::o;19403:180::-;19451:77;19448:1;19441:88;19548:4;19545:1;19538:15;19572:4;19569:1;19562:15;19589:320;19633:6;19670:1;19664:4;19660:12;19650:22;;19717:1;19711:4;19707:12;19738:18;19728:81;;19794:4;19786:6;19782:17;19772:27;;19728:81;19856:2;19848:6;19845:14;19825:18;19822:38;19819:84;;19875:18;;:::i;:::-;19819:84;19640:269;19589:320;;;:::o;19915:141::-;19964:4;19987:3;19979:11;;20010:3;20007:1;20000:14;20044:4;20041:1;20031:18;20023:26;;19915:141;;;:::o;20062:93::-;20099:6;20146:2;20141;20134:5;20130:14;20126:23;20116:33;;20062:93;;;:::o;20161:107::-;20205:8;20255:5;20249:4;20245:16;20224:37;;20161:107;;;;:::o;20274:393::-;20343:6;20393:1;20381:10;20377:18;20416:97;20446:66;20435:9;20416:97;:::i;:::-;20534:39;20564:8;20553:9;20534:39;:::i;:::-;20522:51;;20606:4;20602:9;20595:5;20591:21;20582:30;;20655:4;20645:8;20641:19;20634:5;20631:30;20621:40;;20350:317;;20274:393;;;;;:::o;20673:142::-;20723:9;20756:53;20774:34;20783:24;20801:5;20783:24;:::i;:::-;20774:34;:::i;:::-;20756:53;:::i;:::-;20743:66;;20673:142;;;:::o;20821:75::-;20864:3;20885:5;20878:12;;20821:75;;;:::o;20902:269::-;21012:39;21043:7;21012:39;:::i;:::-;21073:91;21122:41;21146:16;21122:41;:::i;:::-;21114:6;21107:4;21101:11;21073:91;:::i;:::-;21067:4;21060:105;20978:193;20902:269;;;:::o;21177:73::-;21222:3;21177:73;:::o;21256:189::-;21333:32;;:::i;:::-;21374:65;21432:6;21424;21418:4;21374:65;:::i;:::-;21309:136;21256:189;;:::o;21451:186::-;21511:120;21528:3;21521:5;21518:14;21511:120;;;21582:39;21619:1;21612:5;21582:39;:::i;:::-;21555:1;21548:5;21544:13;21535:22;;21511:120;;;21451:186;;:::o;21643:543::-;21744:2;21739:3;21736:11;21733:446;;;21778:38;21810:5;21778:38;:::i;:::-;21862:29;21880:10;21862:29;:::i;:::-;21852:8;21848:44;22045:2;22033:10;22030:18;22027:49;;;22066:8;22051:23;;22027:49;22089:80;22145:22;22163:3;22145:22;:::i;:::-;22135:8;22131:37;22118:11;22089:80;:::i;:::-;21748:431;;21733:446;21643:543;;;:::o;22192:117::-;22246:8;22296:5;22290:4;22286:16;22265:37;;22192:117;;;;:::o;22315:169::-;22359:6;22392:51;22440:1;22436:6;22428:5;22425:1;22421:13;22392:51;:::i;:::-;22388:56;22473:4;22467;22463:15;22453:25;;22366:118;22315:169;;;;:::o;22489:295::-;22565:4;22711:29;22736:3;22730:4;22711:29;:::i;:::-;22703:37;;22773:3;22770:1;22766:11;22760:4;22757:21;22749:29;;22489:295;;;;:::o;22789:1395::-;22906:37;22939:3;22906:37;:::i;:::-;23008:18;23000:6;22997:30;22994:56;;;23030:18;;:::i;:::-;22994:56;23074:38;23106:4;23100:11;23074:38;:::i;:::-;23159:67;23219:6;23211;23205:4;23159:67;:::i;:::-;23253:1;23277:4;23264:17;;23309:2;23301:6;23298:14;23326:1;23321:618;;;;23983:1;24000:6;23997:77;;;24049:9;24044:3;24040:19;24034:26;24025:35;;23997:77;24100:67;24160:6;24153:5;24100:67;:::i;:::-;24094:4;24087:81;23956:222;23291:887;;23321:618;23373:4;23369:9;23361:6;23357:22;23407:37;23439:4;23407:37;:::i;:::-;23466:1;23480:208;23494:7;23491:1;23488:14;23480:208;;;23573:9;23568:3;23564:19;23558:26;23550:6;23543:42;23624:1;23616:6;23612:14;23602:24;;23671:2;23660:9;23656:18;23643:31;;23517:4;23514:1;23510:12;23505:17;;23480:208;;;23716:6;23707:7;23704:19;23701:179;;;23774:9;23769:3;23765:19;23759:26;23817:48;23859:4;23851:6;23847:17;23836:9;23817:48;:::i;:::-;23809:6;23802:64;23724:156;23701:179;23926:1;23922;23914:6;23910:14;23906:22;23900:4;23893:36;23328:611;;;23291:887;;22881:1303;;;22789:1395;;:::o;24190:191::-;24230:3;24249:20;24267:1;24249:20;:::i;:::-;24244:25;;24283:20;24301:1;24283:20;:::i;:::-;24278:25;;24326:1;24323;24319:9;24312:16;;24347:3;24344:1;24341:10;24338:36;;;24354:18;;:::i;:::-;24338:36;24190:191;;;;:::o;24387:137::-;24441:5;24472:6;24466:13;24457:22;;24488:30;24512:5;24488:30;:::i;:::-;24387:137;;;;:::o;24530:345::-;24597:6;24646:2;24634:9;24625:7;24621:23;24617:32;24614:119;;;24652:79;;:::i;:::-;24614:119;24772:1;24797:61;24850:7;24841:6;24830:9;24826:22;24797:61;:::i;:::-;24787:71;;24743:125;24530:345;;;;:::o;24881:148::-;24983:11;25020:3;25005:18;;24881:148;;;;:::o;25035:390::-;25141:3;25169:39;25202:5;25169:39;:::i;:::-;25224:89;25306:6;25301:3;25224:89;:::i;:::-;25217:96;;25322:65;25380:6;25375:3;25368:4;25361:5;25357:16;25322:65;:::i;:::-;25412:6;25407:3;25403:16;25396:23;;25145:280;25035:390;;;;:::o;25431:275::-;25563:3;25585:95;25676:3;25667:6;25585:95;:::i;:::-;25578:102;;25697:3;25690:10;;25431:275;;;;:::o;25712:230::-;25852:34;25848:1;25840:6;25836:14;25829:58;25921:13;25916:2;25908:6;25904:15;25897:38;25712:230;:::o;25948:366::-;26090:3;26111:67;26175:2;26170:3;26111:67;:::i;:::-;26104:74;;26187:93;26276:3;26187:93;:::i;:::-;26305:2;26300:3;26296:12;26289:19;;25948:366;;;:::o;26320:419::-;26486:4;26524:2;26513:9;26509:18;26501:26;;26573:9;26567:4;26563:20;26559:1;26548:9;26544:17;26537:47;26601:131;26727:4;26601:131;:::i;:::-;26593:139;;26320:419;;;:::o;26745:348::-;26785:7;26808:20;26826:1;26808:20;:::i;:::-;26803:25;;26842:20;26860:1;26842:20;:::i;:::-;26837:25;;27030:1;26962:66;26958:74;26955:1;26952:81;26947:1;26940:9;26933:17;26929:105;26926:131;;;27037:18;;:::i;:::-;26926:131;27085:1;27082;27078:9;27067:20;;26745:348;;;;:::o;27099:222::-;27192:4;27230:2;27219:9;27215:18;27207:26;;27243:71;27311:1;27300:9;27296:17;27287:6;27243:71;:::i;:::-;27099:222;;;;:::o;27327:143::-;27384:5;27415:6;27409:13;27400:22;;27431:33;27458:5;27431:33;:::i;:::-;27327:143;;;;:::o;27476:351::-;27546:6;27595:2;27583:9;27574:7;27570:23;27566:32;27563:119;;;27601:79;;:::i;:::-;27563:119;27721:1;27746:64;27802:7;27793:6;27782:9;27778:22;27746:64;:::i;:::-;27736:74;;27692:128;27476:351;;;;:::o;27833:180::-;27881:77;27878:1;27871:88;27978:4;27975:1;27968:15;28002:4;27999:1;27992:15;28019:185;28059:1;28076:20;28094:1;28076:20;:::i;:::-;28071:25;;28110:20;28128:1;28110:20;:::i;:::-;28105:25;;28149:1;28139:35;;28154:18;;:::i;:::-;28139:35;28196:1;28193;28189:9;28184:14;;28019:185;;;;:::o;28210:171::-;28249:3;28272:24;28290:5;28272:24;:::i;:::-;28263:33;;28318:4;28311:5;28308:15;28305:41;;28326:18;;:::i;:::-;28305:41;28373:1;28366:5;28362:13;28355:20;;28210:171;;;:::o;28387:112::-;28470:22;28486:5;28470:22;:::i;:::-;28465:3;28458:35;28387:112;;:::o;28505:878::-;28762:4;28800:3;28789:9;28785:19;28777:27;;28814:71;28882:1;28871:9;28867:17;28858:6;28814:71;:::i;:::-;28895:72;28963:2;28952:9;28948:18;28939:6;28895:72;:::i;:::-;28977;29045:2;29034:9;29030:18;29021:6;28977:72;:::i;:::-;29059;29127:2;29116:9;29112:18;29103:6;29059:72;:::i;:::-;29141:69;29205:3;29194:9;29190:19;29181:6;29141:69;:::i;:::-;29220:73;29288:3;29277:9;29273:19;29264:6;29220:73;:::i;:::-;29303;29371:3;29360:9;29356:19;29347:6;29303:73;:::i;:::-;28505:878;;;;;;;;;;:::o;29389:220::-;29529:34;29525:1;29517:6;29513:14;29506:58;29598:3;29593:2;29585:6;29581:15;29574:28;29389:220;:::o;29615:366::-;29757:3;29778:67;29842:2;29837:3;29778:67;:::i;:::-;29771:74;;29854:93;29943:3;29854:93;:::i;:::-;29972:2;29967:3;29963:12;29956:19;;29615:366;;;:::o;29987:419::-;30153:4;30191:2;30180:9;30176:18;30168:26;;30240:9;30234:4;30230:20;30226:1;30215:9;30211:17;30204:47;30268:131;30394:4;30268:131;:::i;:::-;30260:139;;29987:419;;;:::o;30412:332::-;30533:4;30571:2;30560:9;30556:18;30548:26;;30584:71;30652:1;30641:9;30637:17;30628:6;30584:71;:::i;:::-;30665:72;30733:2;30722:9;30718:18;30709:6;30665:72;:::i;:::-;30412:332;;;;;:::o;30750:173::-;30890:25;30886:1;30878:6;30874:14;30867:49;30750:173;:::o;30929:402::-;31089:3;31110:85;31192:2;31187:3;31110:85;:::i;:::-;31103:92;;31204:93;31293:3;31204:93;:::i;:::-;31322:2;31317:3;31313:12;31306:19;;30929:402;;;:::o;31337:167::-;31477:19;31473:1;31465:6;31461:14;31454:43;31337:167;:::o;31510:402::-;31670:3;31691:85;31773:2;31768:3;31691:85;:::i;:::-;31684:92;;31785:93;31874:3;31785:93;:::i;:::-;31903:2;31898:3;31894:12;31887:19;;31510:402;;;:::o;31918:967::-;32300:3;32322:148;32466:3;32322:148;:::i;:::-;32315:155;;32487:95;32578:3;32569:6;32487:95;:::i;:::-;32480:102;;32599:148;32743:3;32599:148;:::i;:::-;32592:155;;32764:95;32855:3;32846:6;32764:95;:::i;:::-;32757:102;;32876:3;32869:10;;31918:967;;;;;:::o;32891:313::-;33004:4;33042:2;33031:9;33027:18;33019:26;;33091:9;33085:4;33081:20;33077:1;33066:9;33062:17;33055:47;33119:78;33192:4;33183:6;33119:78;:::i;:::-;33111:86;;32891:313;;;;:::o;33210:170::-;33350:22;33346:1;33338:6;33334:14;33327:46;33210:170;:::o;33386:366::-;33528:3;33549:67;33613:2;33608:3;33549:67;:::i;:::-;33542:74;;33625:93;33714:3;33625:93;:::i;:::-;33743:2;33738:3;33734:12;33727:19;;33386:366;;;:::o;33758:419::-;33924:4;33962:2;33951:9;33947:18;33939:26;;34011:9;34005:4;34001:20;33997:1;33986:9;33982:17;33975:47;34039:131;34165:4;34039:131;:::i;:::-;34031:139;;33758:419;;;:::o;34183:229::-;34323:34;34319:1;34311:6;34307:14;34300:58;34392:12;34387:2;34379:6;34375:15;34368:37;34183:229;:::o;34418:366::-;34560:3;34581:67;34645:2;34640:3;34581:67;:::i;:::-;34574:74;;34657:93;34746:3;34657:93;:::i;:::-;34775:2;34770:3;34766:12;34759:19;;34418:366;;;:::o;34790:419::-;34956:4;34994:2;34983:9;34979:18;34971:26;;35043:9;35037:4;35033:20;35029:1;35018:9;35014:17;35007:47;35071:131;35197:4;35071:131;:::i;:::-;35063:139;;34790:419;;;:::o;35215:166::-;35355:18;35351:1;35343:6;35339:14;35332:42;35215:166;:::o;35387:366::-;35529:3;35550:67;35614:2;35609:3;35550:67;:::i;:::-;35543:74;;35626:93;35715:3;35626:93;:::i;:::-;35744:2;35739:3;35735:12;35728:19;;35387:366;;;:::o;35759:419::-;35925:4;35963:2;35952:9;35948:18;35940:26;;36012:9;36006:4;36002:20;35998:1;35987:9;35983:17;35976:47;36040:131;36166:4;36040:131;:::i;:::-;36032:139;;35759:419;;;:::o;36184:180::-;36232:77;36229:1;36222:88;36329:4;36326:1;36319:15;36353:4;36350:1;36343:15;36370:182;36510:34;36506:1;36498:6;36494:14;36487:58;36370:182;:::o;36558:366::-;36700:3;36721:67;36785:2;36780:3;36721:67;:::i;:::-;36714:74;;36797:93;36886:3;36797:93;:::i;:::-;36915:2;36910:3;36906:12;36899:19;;36558:366;;;:::o;36930:419::-;37096:4;37134:2;37123:9;37119:18;37111:26;;37183:9;37177:4;37173:20;37169:1;37158:9;37154:17;37147:47;37211:131;37337:4;37211:131;:::i;:::-;37203:139;;36930:419;;;:::o;37355:225::-;37495:34;37491:1;37483:6;37479:14;37472:58;37564:8;37559:2;37551:6;37547:15;37540:33;37355:225;:::o;37586:366::-;37728:3;37749:67;37813:2;37808:3;37749:67;:::i;:::-;37742:74;;37825:93;37914:3;37825:93;:::i;:::-;37943:2;37938:3;37934:12;37927:19;;37586:366;;;:::o;37958:419::-;38124:4;38162:2;38151:9;38147:18;38139:26;;38211:9;38205:4;38201:20;38197:1;38186:9;38182:17;38175:47;38239:131;38365:4;38239:131;:::i;:::-;38231:139;;37958:419;;;:::o;38383:98::-;38434:6;38468:5;38462:12;38452:22;;38383:98;;;:::o;38487:147::-;38588:11;38625:3;38610:18;;38487:147;;;;:::o;38640:386::-;38744:3;38772:38;38804:5;38772:38;:::i;:::-;38826:88;38907:6;38902:3;38826:88;:::i;:::-;38819:95;;38923:65;38981:6;38976:3;38969:4;38962:5;38958:16;38923:65;:::i;:::-;39013:6;39008:3;39004:16;38997:23;;38748:278;38640:386;;;;:::o;39032:271::-;39162:3;39184:93;39273:3;39264:6;39184:93;:::i;:::-;39177:100;;39294:3;39287:10;;39032:271;;;;:::o;39309:179::-;39449:31;39445:1;39437:6;39433:14;39426:55;39309:179;:::o;39494:366::-;39636:3;39657:67;39721:2;39716:3;39657:67;:::i;:::-;39650:74;;39733:93;39822:3;39733:93;:::i;:::-;39851:2;39846:3;39842:12;39835:19;;39494:366;;;:::o;39866:419::-;40032:4;40070:2;40059:9;40055:18;40047:26;;40119:9;40113:4;40109:20;40105:1;40094:9;40090:17;40083:47;40147:131;40273:4;40147:131;:::i;:::-;40139:139;;39866:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3634400","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"380","__BaseUpgradeablePausable_init(address)":"infinite","challengeDecision(uint256,uint256,uint8,bytes32,bytes32)":"infinite","claimDecision(uint256)":"infinite","claimID()":"2496","claims(uint256)":"infinite","createClaim(uint256,uint256,string,uint256,uint256,uint8,bytes32,bytes32)":"infinite","getClaimID()":"2547","getRoleAdmin(bytes32)":"infinite","getVotingInfo(uint256)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3230","individualClaims(address)":"2925","initialize(address,address)":"infinite","isAdmin()":"2859","isAdvisor(address)":"2890","pause()":"infinite","paused()":"2524","protocolSpecificClaims(uint256,uint256)":"infinite","renounceRole(bytes32,address)":"infinite","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"774","unpause()":"infinite","updateAdvisors(address)":"27381","updateStakeAmount(uint256)":"25066","updateVotingEndTime(uint256,uint256)":"infinite","viewVoteReceipt(uint256)":"infinite","vote(uint256,bool)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","__BaseUpgradeablePausable_init(address)":"6e810b1a","challengeDecision(uint256,uint256,uint8,bytes32,bytes32)":"602ce4c6","claimDecision(uint256)":"d0c36092","claimID()":"5df6f2ee","claims(uint256)":"a888c2cd","createClaim(uint256,uint256,string,uint256,uint256,uint8,bytes32,bytes32)":"55e5b444","getClaimID()":"ef0c997a","getRoleAdmin(bytes32)":"248a9ca3","getVotingInfo(uint256)":"248a0634","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","individualClaims(address)":"c4993140","initialize(address,address)":"485cc955","isAdmin()":"b6db75a0","isAdvisor(address)":"c661fed3","pause()":"8456cb59","paused()":"5c975abb","protocolSpecificClaims(uint256,uint256)":"c95bee81","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a","updateAdvisors(address)":"59405ed3","updateStakeAmount(uint256)":"c90054ee","updateVotingEndTime(uint256,uint256)":"8c33b395","viewVoteReceipt(uint256)":"20849b07","vote(uint256,bool)":"c9d27afe"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenDAI\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseUpgradeablePausable__ZeroAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__DecisionChallengedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__DecisionNoLongerCanBeChallengedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__DecisionNotYetTakenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__PausedOperationFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__UserAlreadyVotedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__VotingDecisionNotYetFinalizedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__VotingNotYetStartedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__VotingTimeEndedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"NewClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"challengeDecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimID\",\"type\":\"uint256\"}],\"name\":\"claimDecision\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subcategoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isChallenged\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subcategoryID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestedClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"createClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimID\",\"type\":\"uint256\"}],\"name\":\"getVotingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safezenGovernanceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"globalPauseOperationAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdvisor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolSpecificClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"updateAdvisors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"updateStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInHours\",\"type\":\"uint256\"}],\"name\":\"updateVotingEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimID\",\"type\":\"uint256\"}],\"name\":\"viewVoteReceipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{\"claimDecision(uint256)\":{\"details\":\"this function aims to finalize the claim decision, based on the claim voting\",\"params\":{\"_claimID\":\": unique insurance claim ID\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow-constructor\":\"\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateVotingEndTime(uint256,uint256)\":{\"details\":\"in case if certain claim require additional time for DAO,  for e.g., awaiting additional inputs to reserve their decisions \"}},\"version\":1},\"userdoc\":{\"errors\":{\"Claim__VotingTimeEndedError()\":[{\"notice\":\"Custom Error Codes\"}]},\"kind\":\"user\",\"methods\":{\"claimID()\":{\"notice\":\"claimID: unique insurance claim ID _openClaimsCount: count of the open insurance claims VOTING_END_TIME: voting maximum duration in hours TIME_BEFORE_VOTING_START: time before voting starts, so as users can be notified AFTER_VOTING_WAIT_PERIOD: voting challenge duration\"},\"claims(uint256)\":{\"notice\":\"The official record of all claims ever made\"},\"individualClaims(address)\":{\"notice\":\"The latest claim for each individual claimer if a user have filed most claims, then the protocol that user invests are generally risky\"},\"protocolSpecificClaims(uint256,uint256)\":{\"notice\":\"mapping the protocol specific claims count to date more the number, more the risky the platform will be\"}},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/payAsYouGo/Claim.sol\":\"ClaimGovernance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/BaseUpgradeablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"./Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nerror BaseUpgradeablePausable__ZeroAddressError();\\n\\ncontract BaseUpgradeablePausable is \\n    Initializable, \\n    PausableUpgradeable, \\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable \\n{\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(), \\\"Must have admin role to perform this action.\\\");\\n        _;\\n    }\\n\\n    function __BaseUpgradeablePausable_init(address owner) public onlyInitializing() {\\n        if(owner == address(0)) {\\n            revert BaseUpgradeablePausable__ZeroAddressError();\\n        }\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(Constants.getAdminRole(), owner);\\n        _grantRole(Constants.getPauserRole(), owner);\\n\\n        _setRoleAdmin(Constants.getPauserRole(), Constants.getAdminRole());\\n        _setRoleAdmin(Constants.getAdminRole(), Constants.getAdminRole());\\n    }\\n\\n    function isAdmin() public view returns (bool) {\\n        return hasRole(Constants.getAdminRole(), _msgSender());\\n    }\\n\\n  \\n}\",\"keccak256\":\"0x29b172c9fffe9bc60c702a071bae35f301b1b5c3824f0ca44b3d2dcabbda5af9\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nlibrary Constants {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function getAdminRole() internal pure returns (bytes32) {\\n        return ADMIN_ROLE;\\n    }\\n\\n    function getPauserRole() internal pure returns (bytes32) {\\n        return PAUSER_ROLE;\\n    }\\n}\",\"keccak256\":\"0xeae9d870bc2ace9284ae575eb6c534c177ff6f4a60b98f10a0a8156f19f760cf\",\"license\":\"BUSL-1.1\"},\"contracts/core/payAsYouGo/Claim.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Insurance Claim Governance Contract\\n/// @author Anshik Bansal <anshik@safezen.finance>\\n\\n// Importing contracts\\nimport \\\"./../../BaseUpgradeablePausable.sol\\\";\\n\\n/// Importing required libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n// Importing interfaces\\nimport \\\"./../../interfaces/IClaim.sol\\\";\\nimport \\\"./../../interfaces/IGlobalPauseOperation.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\n\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\n\\ncontract ClaimGovernance is IClaim, BaseUpgradeablePausable {\\n    /// claimID: unique insurance claim ID\\n    /// _openClaimsCount: count of the open insurance claims\\n    /// VOTING_END_TIME: voting maximum duration in hours\\n    /// TIME_BEFORE_VOTING_START: time before voting starts, so as users can be notified\\n    /// AFTER_VOTING_WAIT_PERIOD: voting challenge duration\\n    uint256 public claimID;\\n    uint256 private _stakedAmount;\\n    uint256 private _openClaimsCount;\\n    uint256 private constant VOTING_END_TIME = 5 minutes;\\n    uint256 private constant TIME_BEFORE_VOTING_START = 1 minutes;\\n    uint256 private constant AFTER_VOTING_WAIT_PERIOD = 1 minutes;\\n    \\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IERC20PermitUpgradeable;\\n\\n    /// _tokenGSZT: SafeZen Governance contract\\n    /// _globalPauseOperation: Pause Operation contract\\n    IERC20Upgradeable private _tokenDAI;\\n    IERC20PermitUpgradeable private _tokenPermitDAI;\\n    IERC20Upgradeable private _tokenGSZT;\\n    IGlobalPauseOperation private _globalPauseOperation;\\n\\n    /// @dev collects essential insurance claim info\\n    /// @param claimer: claimer wallet address\\n    /// @param _claimID: unique insurance claim ID\\n    /// @param subcategoryID: insurance sub-category, e.g., USDC depeg coverage, DAI depeg coverage.\\n    /// @param claimAmountRequested: claim amount requested by claimer.\\n    /// @param proof: digital uploaded proof of the claiming event \\n    /// @param closed: checks if the insurance claim is closed or not.\\n    /// @param accepted: checks if the insurance claim request has been accpeted or not.\\n    /// @param isChallenged: checks if the insurance claim has been challenged or not.\\n    /// @param votingInfo: maps insurance claim ID to VotingInfo\\n    /// @param receipts:\\n    struct Claim {\\n        address claimer;\\n        uint256 _claimID;  // not needed thou, but nice to have\\n        uint256 categoryID; \\n        uint256 subcategoryID;\\n        uint256 claimAmountRequested;\\n        string proof;  // IPFS link or some storage link, where proof is stored\\n        bool closed;\\n        bool accepted;\\n        bool isChallenged;\\n        mapping(uint256 => VotingInfo) votingInfo; \\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    struct VotingInfo {\\n        uint256 votingStartTime;\\n        uint256 votingEndTime;\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n        uint256 advisorForVotes;\\n        uint256 advisorAgainstVotes;\\n        uint256 votingCounts;  // no of times decision has been challenged\\n    }\\n\\n    struct Receipt {\\n        bool hasVoted;\\n        bool support;\\n        uint256 votes;\\n    }\\n\\n    mapping(address => bool) public isAdvisor;\\n\\n    /// @notice The official record of all claims ever made\\n    mapping(uint256 => Claim) public claims;\\n\\n    /// @notice The latest claim for each individual claimer\\n    /// if a user have filed most claims, then the protocol that user invests are generally risky\\n    mapping(address => uint256) public individualClaims;\\n\\n    /// @notice mapping the protocol specific claims count to date\\n    /// more the number, more the risky the platform will be\\n    mapping(uint256 => mapping(uint256 => uint256)) public protocolSpecificClaims;\\n\\n    /// @custom:oz-upgrades-unsafe-allow-constructor\\n    constructor(address tokenDAI) {\\n        _tokenDAI = IERC20Upgradeable(tokenDAI); // Immutable\\n        _tokenPermitDAI = IERC20PermitUpgradeable(tokenDAI); //Immutable\\n    }\\n\\n    function initialize(\\n        address safezenGovernanceTokenAddress,\\n        address globalPauseOperationAddress\\n    ) external initializer {\\n        _stakedAmount = 10e18;\\n        _tokenGSZT = IERC20Upgradeable(safezenGovernanceTokenAddress);\\n        _globalPauseOperation = IGlobalPauseOperation(globalPauseOperationAddress);\\n        __BaseUpgradeablePausable_init(_msgSender());\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /// @dev in case if certain claim require additional time for DAO, \\n    /// for e.g., awaiting additional inputs to reserve their decisions \\n    function updateVotingEndTime(\\n        uint256 _claimID, \\n        uint256 timeInHours\\n    ) external onlyAdmin {\\n        claims[_claimID].votingInfo[_claimID].votingEndTime = timeInHours * 1 hours;\\n    }\\n\\n    function updateAdvisors(address userAddress) external onlyAdmin {\\n        isAdvisor[userAddress] = true;\\n    }\\n\\n    function updateStakeAmount(uint256 stakeAmount) external onlyAdmin {\\n        _stakedAmount = stakeAmount;\\n    }\\n\\n    function createClaim(\\n        uint256 categoryID,\\n        uint256 subcategoryID, \\n        string memory proof, \\n        uint256 requestedClaimAmount,\\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) public override returns(bool) {\\n        ++claimID;\\n        Claim storage newClaim = claims[claimID];\\n        newClaim.categoryID = categoryID;\\n        newClaim.subcategoryID = subcategoryID;\\n        newClaim._claimID = claimID;\\n        newClaim.claimer = _msgSender();\\n        newClaim.proof = proof;\\n        newClaim.claimAmountRequested = requestedClaimAmount;\\n        newClaim.votingInfo[claimID].votingStartTime = block.timestamp + TIME_BEFORE_VOTING_START;\\n        newClaim.votingInfo[claimID].votingEndTime = newClaim.votingInfo[claimID].votingStartTime + VOTING_END_TIME;\\n        ++individualClaims[_msgSender()];\\n        ++protocolSpecificClaims[categoryID][subcategoryID];\\n        ++_openClaimsCount;\\n        bool success = _globalPauseOperation.pauseOperation();\\n        if(!success) {\\n            revert Claim__PausedOperationFailedError();\\n        }\\n        _tokenPermitDAI.safePermit(_msgSender(), address(this), _stakedAmount, deadline, v, r, s);\\n        _tokenDAI.safeTransfer(address(this), _stakedAmount);\\n        emit NewClaimCreated(_msgSender(), claimID, proof);\\n        return true;\\n    }\\n     \\n    \\n    function vote(\\n        uint256 _claimID, \\n        bool support\\n    ) external override returns(bool) {\\n        /// checks are made in order\\n        /// 1. making sure voting time has started\\n        /// 2. has the user voted or not\\n        /// 3. if not, whether the user is voting within the voting time limit\\n        if (claims[_claimID].votingInfo[_claimID].votingStartTime > block.timestamp) {\\n            revert Claim__VotingNotYetStartedError();\\n        }\\n        if (claims[_claimID].receipts[_msgSender()].hasVoted) {\\n            revert Claim__UserAlreadyVotedError();\\n        }\\n        if (claims[_claimID].votingInfo[_claimID].votingEndTime < block.timestamp) {\\n            revert Claim__VotingTimeEndedError();\\n        }\\n        claims[_claimID].receipts[_msgSender()].support = support;\\n        claims[_claimID].receipts[_msgSender()].votes = _tokenGSZT.balanceOf(_msgSender());\\n        claims[_claimID].receipts[_msgSender()].hasVoted = true;\\n\\n        if ((isAdvisor[_msgSender()]) && (claims[_claimID].votingInfo[_claimID].votingCounts == 2)) {\\n            if (support) {\\n                claims[_claimID].votingInfo[_claimID].advisorForVotes += claims[_claimID].receipts[_msgSender()].votes;\\n            }\\n            else {\\n                claims[_claimID].votingInfo[_claimID].advisorAgainstVotes += claims[_claimID].receipts[_msgSender()].votes;\\n            }\\n        }\\n        else {\\n            if (support) {\\n                claims[_claimID].votingInfo[_claimID].forVotes += claims[_claimID].receipts[_msgSender()].votes;\\n            }\\n            else {\\n                claims[_claimID].votingInfo[_claimID].againstVotes += claims[_claimID].receipts[_msgSender()].votes;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev this function aims to finalize the claim decision, based on the claim voting\\n    /// @param _claimID: unique insurance claim ID\\n    function claimDecision(uint256 _claimID) external override returns(bool) {\\n        if (\\n            (claims[_claimID].votingInfo[_claimID].votingEndTime + AFTER_VOTING_WAIT_PERIOD) > \\n            block.timestamp\\n        ) {\\n            revert Claim__VotingDecisionNotYetFinalizedError();\\n        }\\n        if (claims[_claimID].isChallenged) {\\n            revert Claim__DecisionChallengedError();\\n        }\\n        uint256 totalCommunityVotes = (\\n            claims[_claimID].votingInfo[_claimID].forVotes + \\n            claims[_claimID].votingInfo[_claimID].againstVotes\\n        );\\n        if (claims[_claimID].votingInfo[_claimID].votingCounts == 2) {\\n            uint256 totalAdvisorVotes = (\\n                claims[_claimID].votingInfo[_claimID].advisorForVotes + \\n                claims[_claimID].votingInfo[_claimID].advisorAgainstVotes\\n            );\\n            uint256 forAdvisorVotesEligible = (\\n                (claims[_claimID].votingInfo[_claimID].advisorForVotes >= \\n                claims[_claimID].votingInfo[_claimID].advisorAgainstVotes) ? \\n                ((claims[claimID].votingInfo[claimID].forVotes * 100) / totalAdvisorVotes) : 0\\n            );\\n            /// even if all the community votes are in favor, but, 49% of the voting power will be \\n            /// given to the advisors in the final claim decision round.\\n            /// Community --> (100 * 0.51) = 51%    Advisors -->  (60 * 0.49) = 29.4%\\n            /// Total  = 51% + 29.4% < 80% (needed to get approved)\\n            /// keeping >= 59% instead of 60% because of underflow value in forAdvisorVotesEligible\\n            if (forAdvisorVotesEligible >= 59) {\\n                uint256 forVotesEligible = (\\n                    (claims[_claimID].votingInfo[_claimID].forVotes > \\n                    claims[_claimID].votingInfo[_claimID].againstVotes) ? \\n                    ((claims[_claimID].votingInfo[_claimID].forVotes * 100) / totalCommunityVotes) : 1\\n                );\\n                uint256 supportPercent = (\\n                    ((forAdvisorVotesEligible * 49) / 100) + \\n                    ((forVotesEligible * 51) / 100)\\n                );\\n                claims[_claimID].accepted = (supportPercent >= 80) ? true : false;\\n            }\\n            else {\\n                claims[_claimID].accepted = false;\\n            }\\n        }\\n        else {\\n            uint256 forVotesEligible = (\\n                (claims[_claimID].votingInfo[_claimID].forVotes > \\n                claims[_claimID].votingInfo[_claimID].againstVotes) ? \\n                ((claims[_claimID].votingInfo[_claimID].forVotes * 100) / totalCommunityVotes) : 1\\n            );\\n            claims[_claimID].accepted = (forVotesEligible >= 80) ? true : false;\\n        }\\n        claims[_claimID].closed = true;\\n        if (claims[_claimID].accepted) {\\n            uint256 totalAmountStaked = (\\n                _stakedAmount * (claims[_claimID].votingInfo[_claimID].votingCounts + 1)\\n            );\\n            _tokenDAI.safeTransfer(claims[_claimID].claimer, totalAmountStaked);\\n        }\\n        --_openClaimsCount;\\n        return true;\\n    }\\n\\n    \\n    function challengeDecision(\\n        uint256 _claimID,\\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external override {\\n        if ((!claims[_claimID].closed) || (!claims[_claimID].isChallenged)) {\\n            revert Claim__DecisionNotYetTakenError();\\n        }\\n        if (claims[_claimID].votingInfo[_claimID].votingCounts >= 2) {\\n            revert Claim__DecisionNoLongerCanBeChallengedError();\\n        }\\n        claims[_claimID].isChallenged = true;\\n        ++claims[claimID].votingInfo[claimID + 1].votingCounts; \\n        createClaim(\\n            claims[_claimID].categoryID,\\n            claims[_claimID].subcategoryID,\\n            claims[_claimID].proof,\\n            claims[_claimID].claimAmountRequested,\\n            deadline, \\n            v, \\n            r, \\n            s\\n        );\\n        \\n        // ^ global _claimID, as the latest claim refers to challenged claim\\n    }\\n\\n    function viewVoteReceipt(\\n        uint256 _claimID\\n    ) external view override returns(bool, bool, uint256) {\\n        return (\\n            claims[_claimID].receipts[_msgSender()].hasVoted,\\n            claims[_claimID].receipts[_msgSender()].support,\\n            claims[_claimID].receipts[_msgSender()].votes\\n        );\\n    }\\n\\n    function getClaimID() external view override returns(uint256) {\\n        return claimID;\\n    }\\n\\n    function getVotingInfo(\\n        uint256 _claimID\\n    ) external view override returns(\\n        uint256, uint256, uint256, uint256, uint256, uint256, uint256\\n    ) {\\n        VotingInfo storage claim = claims[_claimID].votingInfo[_claimID];\\n        return (\\n            claim.votingStartTime, \\n            claim.votingEndTime, \\n            claim.forVotes, \\n            claim.againstVotes, \\n            claim.advisorForVotes, \\n            claim.advisorAgainstVotes, \\n            claim.votingCounts\\n        );\\n    }\\n}\",\"keccak256\":\"0xcc24beed2a233fc652068a10084d65793d0b807423fe66317a60c8a2faf3815c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IClaim.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\n\\ninterface IClaim {\\n\\n    /// Custom Error Codes\\n    error Claim__VotingTimeEndedError();\\n    error Claim__UserAlreadyVotedError();\\n    error Claim__ImmutableChangesError();\\n    error Claim__DecisionChallengedError();\\n    error Claim__VotingNotYetStartedError();\\n    error Claim__DecisionNotYetTakenError();\\n    error Claim__PausedOperationFailedError();\\n    error Claim__VotingDecisionNotYetFinalizedError();\\n    error Claim__DecisionNoLongerCanBeChallengedError();\\n\\n    event NewClaimCreated(address indexed userAddress, uint256 indexed claimID, string indexed proof);\\n\\n    function createClaim(\\n        uint256 categoryID,\\n        uint256 subCategoryID, \\n        string memory proof, \\n        uint256 requestedClaimAmount,\\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external returns(bool); \\n\\n    function vote(\\n        uint256 claimID, \\n        bool support\\n    ) external returns(bool);\\n\\n    function claimDecision(\\n        uint256 claimID\\n    ) external returns(bool);\\n\\n    function challengeDecision(\\n        uint256 claimID,\\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external;\\n\\n    function viewVoteReceipt(\\n        uint256 claimID\\n    ) external view returns(bool, bool, uint256);\\n\\n    function getClaimID() external view returns(uint256);\\n\\n    function getVotingInfo(\\n        uint256 claimID\\n    ) external view returns(\\n        uint256, uint256, uint256, uint256, uint256, uint256, uint256\\n    );\\n}   \",\"keccak256\":\"0xfd32e07fab5c418ae1f592ecf10f513d8abd52ad13329960205b151d97e37d84\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IGlobalPauseOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGlobalPauseOperation {\\n\\n    error GlobalPauseOps__ZeroAddressInputError();\\n\\n    error GlobalPauseOperation__ImmutableChangesError();\\n\\n    event PausedOperation(address account);\\n\\n    event UnpausedOperation(address account);\\n\\n    function pauseOperation() external returns(bool);\\n\\n    function unpauseOperation() external returns(bool);\\n    \\n    function isPaused() external view returns(bool);\\n}\",\"keccak256\":\"0x79586f955f8b52af0e350004f608462d4af71c872ea75ce1b633239c5d00fc29\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":418,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":421,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1500,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":601,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":706,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":1719,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"__gap","offset":0,"slot":"101","type":"t_array(t_uint256)50_storage"},{"astId":39,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_roles","offset":0,"slot":"151","type":"t_mapping(t_bytes32,t_struct(RoleData)34_storage)"},{"astId":334,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"__gap","offset":0,"slot":"152","type":"t_array(t_uint256)49_storage"},{"astId":721,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_status","offset":0,"slot":"201","type":"t_uint256"},{"astId":779,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"__gap","offset":0,"slot":"202","type":"t_array(t_uint256)49_storage"},{"astId":2743,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"claimID","offset":0,"slot":"251","type":"t_uint256"},{"astId":2745,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_stakedAmount","offset":0,"slot":"252","type":"t_uint256"},{"astId":2747,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_openClaimsCount","offset":0,"slot":"253","type":"t_uint256"},{"astId":2768,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_tokenDAI","offset":0,"slot":"254","type":"t_contract(IERC20Upgradeable)858"},{"astId":2771,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_tokenPermitDAI","offset":0,"slot":"255","type":"t_contract(IERC20PermitUpgradeable)894"},{"astId":2774,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_tokenGSZT","offset":0,"slot":"256","type":"t_contract(IERC20Upgradeable)858"},{"astId":2777,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_globalPauseOperation","offset":0,"slot":"257","type":"t_contract(IGlobalPauseOperation)3940"},{"astId":2832,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"isAdvisor","offset":0,"slot":"258","type":"t_mapping(t_address,t_bool)"},{"astId":2838,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"claims","offset":0,"slot":"259","type":"t_mapping(t_uint256,t_struct(Claim)2806_storage)"},{"astId":2843,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"individualClaims","offset":0,"slot":"260","type":"t_mapping(t_address,t_uint256)"},{"astId":2850,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"protocolSpecificClaims","offset":0,"slot":"261","type":"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20PermitUpgradeable)894":{"encoding":"inplace","label":"contract IERC20PermitUpgradeable","numberOfBytes":"20"},"t_contract(IERC20Upgradeable)858":{"encoding":"inplace","label":"contract IERC20Upgradeable","numberOfBytes":"20"},"t_contract(IGlobalPauseOperation)3940":{"encoding":"inplace","label":"contract IGlobalPauseOperation","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_struct(Receipt)2828_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ClaimGovernance.Receipt)","numberOfBytes":"32","value":"t_struct(Receipt)2828_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)34_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)34_storage"},"t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_struct(Claim)2806_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ClaimGovernance.Claim)","numberOfBytes":"32","value":"t_struct(Claim)2806_storage"},"t_mapping(t_uint256,t_struct(VotingInfo)2821_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ClaimGovernance.VotingInfo)","numberOfBytes":"32","value":"t_struct(VotingInfo)2821_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Claim)2806_storage":{"encoding":"inplace","label":"struct ClaimGovernance.Claim","members":[{"astId":2779,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"claimer","offset":0,"slot":"0","type":"t_address"},{"astId":2781,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"_claimID","offset":0,"slot":"1","type":"t_uint256"},{"astId":2783,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"categoryID","offset":0,"slot":"2","type":"t_uint256"},{"astId":2785,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"subcategoryID","offset":0,"slot":"3","type":"t_uint256"},{"astId":2787,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"claimAmountRequested","offset":0,"slot":"4","type":"t_uint256"},{"astId":2789,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"proof","offset":0,"slot":"5","type":"t_string_storage"},{"astId":2791,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"closed","offset":0,"slot":"6","type":"t_bool"},{"astId":2793,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"accepted","offset":1,"slot":"6","type":"t_bool"},{"astId":2795,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"isChallenged","offset":2,"slot":"6","type":"t_bool"},{"astId":2800,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"votingInfo","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_struct(VotingInfo)2821_storage)"},{"astId":2805,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"receipts","offset":0,"slot":"8","type":"t_mapping(t_address,t_struct(Receipt)2828_storage)"}],"numberOfBytes":"288"},"t_struct(Receipt)2828_storage":{"encoding":"inplace","label":"struct ClaimGovernance.Receipt","members":[{"astId":2823,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"hasVoted","offset":0,"slot":"0","type":"t_bool"},{"astId":2825,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"support","offset":1,"slot":"0","type":"t_bool"},{"astId":2827,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"votes","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_struct(RoleData)34_storage":{"encoding":"inplace","label":"struct AccessControlUpgradeable.RoleData","members":[{"astId":31,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":33,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(VotingInfo)2821_storage":{"encoding":"inplace","label":"struct ClaimGovernance.VotingInfo","members":[{"astId":2808,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"votingStartTime","offset":0,"slot":"0","type":"t_uint256"},{"astId":2810,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"votingEndTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":2812,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"forVotes","offset":0,"slot":"2","type":"t_uint256"},{"astId":2814,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"againstVotes","offset":0,"slot":"3","type":"t_uint256"},{"astId":2816,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"advisorForVotes","offset":0,"slot":"4","type":"t_uint256"},{"astId":2818,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"advisorAgainstVotes","offset":0,"slot":"5","type":"t_uint256"},{"astId":2820,"contract":"contracts/core/payAsYouGo/Claim.sol:ClaimGovernance","label":"votingCounts","offset":0,"slot":"6","type":"t_uint256"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"Claim__VotingTimeEndedError()":[{"notice":"Custom Error Codes"}]},"kind":"user","methods":{"claimID()":{"notice":"claimID: unique insurance claim ID _openClaimsCount: count of the open insurance claims VOTING_END_TIME: voting maximum duration in hours TIME_BEFORE_VOTING_START: time before voting starts, so as users can be notified AFTER_VOTING_WAIT_PERIOD: voting challenge duration"},"claims(uint256)":{"notice":"The official record of all claims ever made"},"individualClaims(address)":{"notice":"The latest claim for each individual claimer if a user have filed most claims, then the protocol that user invests are generally risky"},"protocolSpecificClaims(uint256,uint256)":{"notice":"mapping the protocol specific claims count to date more the number, more the risky the platform will be"}},"notice":"Report any bug or issues at:","version":1}}},"contracts/interfaces/IClaim.sol":{"IClaim":{"abi":[{"inputs":[],"name":"Claim__DecisionChallengedError","type":"error"},{"inputs":[],"name":"Claim__DecisionNoLongerCanBeChallengedError","type":"error"},{"inputs":[],"name":"Claim__DecisionNotYetTakenError","type":"error"},{"inputs":[],"name":"Claim__ImmutableChangesError","type":"error"},{"inputs":[],"name":"Claim__PausedOperationFailedError","type":"error"},{"inputs":[],"name":"Claim__UserAlreadyVotedError","type":"error"},{"inputs":[],"name":"Claim__VotingDecisionNotYetFinalizedError","type":"error"},{"inputs":[],"name":"Claim__VotingNotYetStartedError","type":"error"},{"inputs":[],"name":"Claim__VotingTimeEndedError","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"userAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"claimID","type":"uint256"},{"indexed":true,"internalType":"string","name":"proof","type":"string"}],"name":"NewClaimCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"claimID","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"challengeDecision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimID","type":"uint256"}],"name":"claimDecision","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"categoryID","type":"uint256"},{"internalType":"uint256","name":"subCategoryID","type":"uint256"},{"internalType":"string","name":"proof","type":"string"},{"internalType":"uint256","name":"requestedClaimAmount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"createClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getClaimID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimID","type":"uint256"}],"name":"getVotingInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimID","type":"uint256"}],"name":"viewVoteReceipt","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimID","type":"uint256"},{"internalType":"bool","name":"support","type":"bool"}],"name":"vote","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"custom:security-contact":"anshik@safezen.finance","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"challengeDecision(uint256,uint256,uint8,bytes32,bytes32)":"602ce4c6","claimDecision(uint256)":"d0c36092","createClaim(uint256,uint256,string,uint256,uint256,uint8,bytes32,bytes32)":"55e5b444","getClaimID()":"ef0c997a","getVotingInfo(uint256)":"248a0634","viewVoteReceipt(uint256)":"20849b07","vote(uint256,bool)":"c9d27afe"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Claim__DecisionChallengedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__DecisionNoLongerCanBeChallengedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__DecisionNotYetTakenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__PausedOperationFailedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__UserAlreadyVotedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__VotingDecisionNotYetFinalizedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__VotingNotYetStartedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Claim__VotingTimeEndedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"NewClaimCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"challengeDecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"}],\"name\":\"claimDecision\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subCategoryID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requestedClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"createClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"}],\"name\":\"getVotingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"}],\"name\":\"viewVoteReceipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"anshik@safezen.finance\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"Claim__VotingTimeEndedError()\":[{\"notice\":\"Custom Error Codes\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Report any bug or issues at:\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IClaim.sol\":\"IClaim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IClaim.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// Report any bug or issues at:\\n/// @custom:security-contact anshik@safezen.finance\\n\\ninterface IClaim {\\n\\n    /// Custom Error Codes\\n    error Claim__VotingTimeEndedError();\\n    error Claim__UserAlreadyVotedError();\\n    error Claim__ImmutableChangesError();\\n    error Claim__DecisionChallengedError();\\n    error Claim__VotingNotYetStartedError();\\n    error Claim__DecisionNotYetTakenError();\\n    error Claim__PausedOperationFailedError();\\n    error Claim__VotingDecisionNotYetFinalizedError();\\n    error Claim__DecisionNoLongerCanBeChallengedError();\\n\\n    event NewClaimCreated(address indexed userAddress, uint256 indexed claimID, string indexed proof);\\n\\n    function createClaim(\\n        uint256 categoryID,\\n        uint256 subCategoryID, \\n        string memory proof, \\n        uint256 requestedClaimAmount,\\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external returns(bool); \\n\\n    function vote(\\n        uint256 claimID, \\n        bool support\\n    ) external returns(bool);\\n\\n    function claimDecision(\\n        uint256 claimID\\n    ) external returns(bool);\\n\\n    function challengeDecision(\\n        uint256 claimID,\\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external;\\n\\n    function viewVoteReceipt(\\n        uint256 claimID\\n    ) external view returns(bool, bool, uint256);\\n\\n    function getClaimID() external view returns(uint256);\\n\\n    function getVotingInfo(\\n        uint256 claimID\\n    ) external view returns(\\n        uint256, uint256, uint256, uint256, uint256, uint256, uint256\\n    );\\n}   \",\"keccak256\":\"0xfd32e07fab5c418ae1f592ecf10f513d8abd52ad13329960205b151d97e37d84\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"Claim__VotingTimeEndedError()":[{"notice":"Custom Error Codes"}]},"kind":"user","methods":{},"notice":"Report any bug or issues at:","version":1}}},"contracts/interfaces/IGlobalPauseOperation.sol":{"IGlobalPauseOperation":{"abi":[{"inputs":[],"name":"GlobalPauseOperation__ImmutableChangesError","type":"error"},{"inputs":[],"name":"GlobalPauseOps__ZeroAddressInputError","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"PausedOperation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"UnpausedOperation","type":"event"},{"inputs":[],"name":"isPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pauseOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isPaused()":"b187bd26","pauseOperation()":"c9d07020","unpauseOperation()":"39511e99"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"GlobalPauseOperation__ImmutableChangesError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalPauseOps__ZeroAddressInputError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedOperation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGlobalPauseOperation.sol\":\"IGlobalPauseOperation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGlobalPauseOperation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IGlobalPauseOperation {\\n\\n    error GlobalPauseOps__ZeroAddressInputError();\\n\\n    error GlobalPauseOperation__ImmutableChangesError();\\n\\n    event PausedOperation(address account);\\n\\n    event UnpausedOperation(address account);\\n\\n    function pauseOperation() external returns(bool);\\n\\n    function unpauseOperation() external returns(bool);\\n    \\n    function isPaused() external view returns(bool);\\n}\",\"keccak256\":\"0x79586f955f8b52af0e350004f608462d4af71c872ea75ce1b633239c5d00fc29\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}